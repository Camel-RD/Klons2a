/******************************************************************************/
/***          Generated by IBExpert 2022.3.4.1 21.12.2023 14:54:31          ***/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES UTF8;

SET CLIENTLIB 'D:\A1-docs\c_net\FB4\Firebird4\fbclient.dll';

CREATE DATABASE 'D:\A1-docs\c_net\Klons2\Klons2\DB\base\Klons_00.fdb'
USER 'KLONS' PASSWORD 'parole'
PAGE_SIZE 16384
DEFAULT CHARACTER SET UTF8 COLLATION UNICODE_CI;



/******************************************************************************/
/***                                Domains                                 ***/
/******************************************************************************/

CREATE DOMAIN DAMOUNT AS
NUMERIC(12,4);

CREATE DOMAIN DMAC1 AS
VARCHAR(8);

CREATE DOMAIN DMAC3 AS
VARCHAR(5);

CREATE DOMAIN DMAC4 AS
VARCHAR(8);

CREATE DOMAIN DMAC5 AS
VARCHAR(5);

CREATE DOMAIN DMCLID AS
VARCHAR(15);

CREATE DOMAIN DMDOCTYP AS
VARCHAR(10);

CREATE DOMAIN DMV2 AS
VARCHAR(2);

CREATE DOMAIN DM_MONEY AS
DECIMAL(15,2);

CREATE DOMAIN DOM_DAYCODE AS
SMALLINT
DEFAULT 0
NOT NULL;

CREATE DOMAIN DOM_HOURS AS
FLOAT
DEFAULT 0.0;

CREATE DOMAIN DOM_MONEY AS
NUMERIC(15,2)
DEFAULT 0;

CREATE DOMAIN DOM_MONEY4 AS
NUMERIC(13,4)
DEFAULT 0
NOT NULL;

CREATE DOMAIN DPRICEX AS
NUMERIC(15,6);

CREATE DOMAIN MONEY AS
NUMERIC(15,2)
DEFAULT 0;

CREATE DOMAIN T_YESNO AS
CHAR(1)
DEFAULT 'N'
CHECK((VALUE IS NULL) OR (VALUE IN ('N','Y')));



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR F_YEAR00 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR00 TO 0;

CREATE GENERATOR F_YEAR01 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR01 TO 0;

CREATE GENERATOR F_YEAR02 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR02 TO 0;

CREATE GENERATOR F_YEAR03 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR03 TO 0;

CREATE GENERATOR F_YEAR04 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR04 TO 0;

CREATE GENERATOR F_YEAR05 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR05 TO 0;

CREATE GENERATOR F_YEAR06 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR06 TO 0;

CREATE GENERATOR F_YEAR07 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR07 TO 0;

CREATE GENERATOR F_YEAR08 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR08 TO 0;

CREATE GENERATOR F_YEAR09 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR09 TO 0;

CREATE GENERATOR F_YEAR10 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR10 TO 0;

CREATE GENERATOR F_YEAR11 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR11 TO 0;

CREATE GENERATOR F_YEAR12 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR12 TO 0;

CREATE GENERATOR F_YEAR13 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR13 TO 0;

CREATE GENERATOR F_YEAR14 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR14 TO 0;

CREATE GENERATOR F_YEAR15 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR15 TO 0;

CREATE GENERATOR F_YEAR16 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR16 TO 0;

CREATE GENERATOR F_YEAR17 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR17 TO 0;

CREATE GENERATOR F_YEAR18 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR18 TO 0;

CREATE GENERATOR F_YEAR19 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR19 TO 0;

CREATE GENERATOR F_YEAR20 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR20 TO 0;

CREATE GENERATOR F_YEAR21 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR21 TO 0;

CREATE GENERATOR F_YEAR22 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR22 TO 0;

CREATE GENERATOR F_YEAR23 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR23 TO 0;

CREATE GENERATOR F_YEAR24 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR24 TO 0;

CREATE GENERATOR F_YEAR25 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR25 TO 0;

CREATE GENERATOR F_YEAR26 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR26 TO 0;

CREATE GENERATOR F_YEAR27 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR27 TO 0;

CREATE GENERATOR F_YEAR28 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR28 TO 0;

CREATE GENERATOR F_YEAR29 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR29 TO 0;

CREATE GENERATOR F_YEAR30 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR30 TO 0;

CREATE GENERATOR F_YEAR31 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR31 TO 0;

CREATE GENERATOR F_YEAR32 START WITH 0 INCREMENT BY 1;
SET GENERATOR F_YEAR32 TO 0;

CREATE GENERATOR GEN_A_BANKS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_BANKS_ID TO 2;

CREATE GENERATOR GEN_A_EVENTS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_EVENTS_ID TO 0;

CREATE GENERATOR GEN_A_EVENT_TYPES2_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_EVENT_TYPES2_ID TO 3;

CREATE GENERATOR GEN_A_EVENT_TYPES_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_EVENT_TYPES_ID TO 305;

CREATE GENERATOR GEN_A_FP_PAYLISTS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_FP_PAYLISTS_ID TO 0;

CREATE GENERATOR GEN_A_FP_PAYLISTS_R_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_FP_PAYLISTS_R_ID TO 0;

CREATE GENERATOR GEN_A_PASTDATA_2_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_PASTDATA_2_ID TO 0;

CREATE GENERATOR GEN_A_PASTDATA_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_PASTDATA_ID TO 0;

CREATE GENERATOR GEN_A_PAYLISTS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_PAYLISTS_ID TO 0;

CREATE GENERATOR GEN_A_PAYLISTS_R_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_PAYLISTS_R_ID TO 0;

CREATE GENERATOR GEN_A_PAYLIST_TEMPL_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_PAYLIST_TEMPL_ID TO 0;

CREATE GENERATOR GEN_A_PAYLIST_TEMPL_R_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_PAYLIST_TEMPL_R_ID TO 0;

CREATE GENERATOR GEN_A_PERSONS_FIZ_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_PERSONS_FIZ_ID TO 0;

CREATE GENERATOR GEN_A_PERSONS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_PERSONS_ID TO 0;

CREATE GENERATOR GEN_A_PERSONS_R_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_PERSONS_R_ID TO 0;

CREATE GENERATOR GEN_A_PIECEWORK_CATALOG_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_PIECEWORK_CATALOG_ID TO 0;

CREATE GENERATOR GEN_A_PIECEWORK_CATSTRUCT_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_PIECEWORK_CATSTRUCT_ID TO 0;

CREATE GENERATOR GEN_A_PIECEWORK_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_PIECEWORK_ID TO 0;

CREATE GENERATOR GEN_A_PLUSMINUS_FROM_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_PLUSMINUS_FROM_ID TO 7;

CREATE GENERATOR GEN_A_PLUSMINUS_TYPES_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_PLUSMINUS_TYPES_ID TO 204;

CREATE GENERATOR GEN_A_POSITIONS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_POSITIONS_ID TO 0;

CREATE GENERATOR GEN_A_POSITIONS_PLUSMINUS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_POSITIONS_PLUSMINUS_ID TO 0;

CREATE GENERATOR GEN_A_POSITIONS_R_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_POSITIONS_R_ID TO 0;

CREATE GENERATOR GEN_A_RATES_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_RATES_ID TO 12;

CREATE GENERATOR GEN_A_REPORT_CODES_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_REPORT_CODES_ID TO 33;

CREATE GENERATOR GEN_A_SALARY_PLUSMINUS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_SALARY_PLUSMINUS_ID TO 0;

CREATE GENERATOR GEN_A_SALARY_SHEETS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_SALARY_SHEETS_ID TO 0;

CREATE GENERATOR GEN_A_SALARY_SHEETS_R_HIST_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_SALARY_SHEETS_R_HIST_ID TO 0;

CREATE GENERATOR GEN_A_SALARY_SHEETS_R_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_SALARY_SHEETS_R_ID TO 0;

CREATE GENERATOR GEN_A_SALARY_SHEET_TEMPL_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_SALARY_SHEET_TEMPL_ID TO 0;

CREATE GENERATOR GEN_A_SALARY_SHEET_TEMPL_R_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_SALARY_SHEET_TEMPL_R_ID TO 0;

CREATE GENERATOR GEN_A_TIMEPLAN_LIST_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_TIMEPLAN_LIST_ID TO 0;

CREATE GENERATOR GEN_A_TIMESHEET_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_TIMESHEET_ID TO 0;

CREATE GENERATOR GEN_A_TIMESHEET_LISTS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_TIMESHEET_LISTS_ID TO 0;

CREATE GENERATOR GEN_A_TIMESHEET_LISTS_R_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_TIMESHEET_LISTS_R_ID TO 0;

CREATE GENERATOR GEN_A_TIMESHEET_TEMPL_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_TIMESHEET_TEMPL_ID TO 0;

CREATE GENERATOR GEN_A_TIMESHEET_TEMPL_R_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_TIMESHEET_TEMPL_R_ID TO 0;

CREATE GENERATOR GEN_A_UNTAXED_MIN_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_A_UNTAXED_MIN_ID TO 0;

CREATE GENERATOR GEN_F_BAL0_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_BAL0_ID TO 0;

CREATE GENERATOR GEN_F_BALA21_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_BALA21_ID TO 0;

CREATE GENERATOR GEN_F_BALA2_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_BALA2_ID TO 205;

CREATE GENERATOR GEN_F_BALA3_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_BALA3_ID TO 143;

CREATE GENERATOR GEN_F_DOCS0_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_DOCS0_ID TO 0;

CREATE GENERATOR GEN_F_LOGX_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_LOGX_ID TO 0;

CREATE GENERATOR GEN_F_LOPSD_IDL START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_LOPSD_IDL TO 0;

CREATE GENERATOR GEN_F_LOPS_IDL START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_LOPS_IDL TO 0;

CREATE GENERATOR GEN_F_LXOP_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_LXOP_ID TO 0;

CREATE GENERATOR GEN_F_OPSD_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_OPSD_ID TO 0;

CREATE GENERATOR GEN_F_OPS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_OPS_ID TO 0;

CREATE GENERATOR GEN_F_PERSONTYP_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_PERSONTYP_ID TO 2;

CREATE GENERATOR GEN_F_ROPS1A_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_ROPS1A_ID TO 0;

CREATE GENERATOR GEN_F_ROPS2A_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_ROPS2A_ID TO 0;

CREATE GENERATOR GEN_F_ROPS2B_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_ROPS2B_ID TO 0;

CREATE GENERATOR GEN_F_ROPS3A_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_ROPS3A_ID TO 0;

CREATE GENERATOR GEN_F_TABLE1_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_TABLE1_ID TO 0;

CREATE GENERATOR GEN_F_TREM_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_TREM_ID TO 0;

CREATE GENERATOR GEN_F_TREPA1_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_TREPA1_ID TO 0;

CREATE GENERATOR GEN_F_TREPAPAN_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_TREPAPAN_ID TO 0;

CREATE GENERATOR GEN_F_TREPDARZ1_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_TREPDARZ1_ID TO 0;

CREATE GENERATOR GEN_F_TREPDARZ2_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_TREPDARZ2_ID TO 0;

CREATE GENERATOR GEN_F_TREPDOCS1_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_TREPDOCS1_ID TO 0;

CREATE GENERATOR GEN_F_TREPDOCS2_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_TREPDOCS2_ID TO 0;

CREATE GENERATOR GEN_F_TREPDOCSS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_TREPDOCSS_ID TO 0;

CREATE GENERATOR GEN_F_TREPMT_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_TREPMT_ID TO 0;

CREATE GENERATOR GEN_F_TREPPVNZ1_AD START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_TREPPVNZ1_AD TO 0;

CREATE GENERATOR GEN_F_TREPPVNZ1_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_TREPPVNZ1_ID TO 0;

CREATE GENERATOR GEN_F_TREPUDOCS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_TREPUDOCS_ID TO 0;

CREATE GENERATOR GEN_F_TTEMP_BALA21_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_TTEMP_BALA21_ID TO 0;

CREATE GENERATOR GEN_F_TTEMP_BALAC_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_TTEMP_BALAC_ID TO 0;

CREATE GENERATOR GEN_F_TTEMP_BALMT1_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_TTEMP_BALMT1_ID TO 0;

CREATE GENERATOR GEN_F_TTEMP_PVN1_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_TTEMP_PVN1_ID TO 0;

CREATE GENERATOR GEN_F_TUDOCLISTS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_TUDOCLISTS_ID TO 0;

CREATE GENERATOR GEN_F_TUDOCS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_TUDOCS_ID TO 0;

CREATE GENERATOR GEN_F_TUPVN1_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_F_TUPVN1_ID TO 0;

CREATE GENERATOR GEN_M_ADDRESSSES_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_ADDRESSSES_ID TO 4;

CREATE GENERATOR GEN_M_AUX_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_AUX_ID TO 5;

CREATE GENERATOR GEN_M_BANKS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_BANKS_ID TO 5;

CREATE GENERATOR GEN_M_CONTACTS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_CONTACTS_ID TO 2;

CREATE GENERATOR GEN_M_COUNTRIES_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_COUNTRIES_ID TO 249;

CREATE GENERATOR GEN_M_DISC_LISTS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_DISC_LISTS_ID TO 0;

CREATE GENERATOR GEN_M_DISC_LISTS_P_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_DISC_LISTS_P_ID TO 0;

CREATE GENERATOR GEN_M_DISC_LISTS_R_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_DISC_LISTS_R_ID TO 0;

CREATE GENERATOR GEN_M_DOCSEQ START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_DOCSEQ TO 26;

CREATE GENERATOR GEN_M_DOCS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_DOCS_ID TO 8;

CREATE GENERATOR GEN_M_DOCTYPES_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_DOCTYPES_ID TO 9;

CREATE GENERATOR GEN_M_INV_DOCS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_INV_DOCS_ID TO 2;

CREATE GENERATOR GEN_M_INV_ROWS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_INV_ROWS_ID TO 3;

CREATE GENERATOR GEN_M_ITEMS_CAT_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_ITEMS_CAT_ID TO 16;

CREATE GENERATOR GEN_M_ITEMS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_ITEMS_ID TO 5;

CREATE GENERATOR GEN_M_PAYMENTTYPE_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_PAYMENTTYPE_ID TO 3;

CREATE GENERATOR GEN_M_PRICE_LISTS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_PRICE_LISTS_ID TO 0;

CREATE GENERATOR GEN_M_PRICE_LISTS_P_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_PRICE_LISTS_P_ID TO 0;

CREATE GENERATOR GEN_M_PRICE_LISTS_R_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_PRICE_LISTS_R_ID TO 0;

CREATE GENERATOR GEN_M_PVNRATES2_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_PVNRATES2_ID TO 143;

CREATE GENERATOR GEN_M_PVNRATES_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_PVNRATES_ID TO 0;

CREATE GENERATOR GEN_M_PVNTEXTS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_PVNTEXTS_ID TO 11;

CREATE GENERATOR GEN_M_ROWS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_ROWS_ID TO 9;

CREATE GENERATOR GEN_M_STORES_CAT_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_STORES_CAT_ID TO 5;

CREATE GENERATOR GEN_M_STORES_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_STORES_ID TO 13;

CREATE GENERATOR GEN_M_STORETYPE_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_STORETYPE_ID TO 6;

CREATE GENERATOR GEN_M_TRANSACTIONTYPE_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_TRANSACTIONTYPE_ID TO 0;

CREATE GENERATOR GEN_M_UNITS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_UNITS_ID TO 7;

CREATE GENERATOR GEN_M_VEHICLES_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_M_VEHICLES_ID TO 2;

CREATE GENERATOR GEN_PARAMS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_PARAMS_ID TO 10353;

CREATE GENERATOR GEN_P_CAT1_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_P_CAT1_ID TO 5;

CREATE GENERATOR GEN_P_CATD_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_P_CATD_ID TO 6;

CREATE GENERATOR GEN_P_CATT_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_P_CATT_ID TO 5;

CREATE GENERATOR GEN_P_DEPARTMENTS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_P_DEPARTMENTS_ID TO 1;

CREATE GENERATOR GEN_P_EVENTS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_P_EVENTS_ID TO 100;

CREATE GENERATOR GEN_P_ITEMS_EVENTS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_P_ITEMS_EVENTS_ID TO 0;

CREATE GENERATOR GEN_P_ITEMS_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_P_ITEMS_ID TO 0;

CREATE GENERATOR GEN_P_PLACES_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_P_PLACES_ID TO 1;

CREATE GENERATOR GEN_P_TAXDEPRECYEAR_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_P_TAXDEPRECYEAR_ID TO 0;



/******************************************************************************/
/***                               Exceptions                               ***/
/******************************************************************************/

CREATE EXCEPTION EX_FAILURE 'Procedura netika izpildita';

CREATE EXCEPTION MY_EXCEPTION_BADYEARVALUE 'Nekorekts gads datumā';



/******************************************************************************/
/***                           Stored procedures                            ***/
/******************************************************************************/



SET TERM ^ ;

CREATE PROCEDURE SP_A_A (
    PDT1 DATE,
    PDT2 DATE)
RETURNS (
    IDA INTEGER,
    IDR INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_AVPAYCALC_01 (
    PIDP INTEGER,
    PYR1 INTEGER,
    PMT1 INTEGER,
    PYR2 INTEGER,
    PMT2 INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.ID */,
    TYPE_TAG SMALLINT /* TYPE OF COLUMN A_SALARY_SHEETS_R.TYPE_TAG */,
    IDP INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.IDP */,
    IDAM INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.IDAM */,
    YR INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS.YR */,
    MT INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS.MT */,
    CALENDAR_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.CALENDAR_DAYS_USE */,
    MONTH_WORKDAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.MONTH_WORKDAYS */,
    MONTH_WORKHOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.MONTH_WORKHOURS */,
    PLAN_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_DAYS */,
    PLAN_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_HOURS */,
    PLAN_WORKDAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_WORK_DAYS */,
    PLAN_WORKHOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_WORK_HOURS */,
    TOTAL_BEFORE_TAXES NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.TOTAL_BEFORE_TAXES */,
    FORAVPAYCALC_BRUTO NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.FORAVPAYCALC_BRUTO */,
    FORAVPAYCALC_PAYOUT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.FORAVPAYCALC_PAYOUT */,
    FORAVPAYCALC_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.FORAVPAYCALC_DAYS */,
    FORAVPAYCALC_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.FORAVPAYCALC_HOURS */,
    AVPAYCALC_DAY NUMERIC(13,4) /* TYPE OF COLUMN A_SALARY_SHEETS_R.AVPAYCALC_DAY */,
    AVPAYCALC_HOUR NUMERIC(13,4) /* TYPE OF COLUMN A_SALARY_SHEETS_R.AVPAYCALC_HOUR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_CLEAR
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_A_DL_LAPAS_INSERT_FROM_SH (
    PYR INTEGER,
    PMT INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_A_FP_PAYLISTS_PER_01 (
    PYR1 INTEGER,
    PMT1 INTEGER,
    PYR2 INTEGER,
    PMT2 INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN A_FP_PAYLISTS.ID */,
    SNR INTEGER /* TYPE OF COLUMN A_FP_PAYLISTS.SNR */,
    YR INTEGER /* TYPE OF COLUMN A_FP_PAYLISTS.YR */,
    MT INTEGER /* TYPE OF COLUMN A_FP_PAYLISTS.MT */,
    PAYDATE DATE /* TYPE OF COLUMN A_FP_PAYLISTS.PAYDATE */,
    DESCR VARCHAR(50) /* TYPE OF COLUMN A_FP_PAYLISTS.DESCR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_FP_PAYLISTS_PER_R_01 (
    PYR1 INTEGER,
    PMT1 INTEGER,
    PYR2 INTEGER,
    PMT2 INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN A_FP_PAYLISTS_R.ID */,
    IDS INTEGER /* TYPE OF COLUMN A_FP_PAYLISTS_R.IDS */,
    IDP INTEGER /* TYPE OF COLUMN A_FP_PAYLISTS_R.IDP */,
    SNR INTEGER /* TYPE OF COLUMN A_FP_PAYLISTS_R.SNR */,
    DATE1 DATE /* TYPE OF COLUMN A_FP_PAYLISTS_R.DATE1 */,
    DATE2 DATE /* TYPE OF COLUMN A_FP_PAYLISTS_R.DATE2 */,
    PAYDATE DATE /* TYPE OF COLUMN A_FP_PAYLISTS_R.PAYDATE */,
    TAX_TP SMALLINT /* TYPE OF COLUMN A_FP_PAYLISTS_R.TAX_TP */,
    INCOME_ID VARCHAR(4) /* TYPE OF COLUMN A_FP_PAYLISTS_R.INCOME_ID */,
    DESCR VARCHAR(50) /* TYPE OF COLUMN A_FP_PAYLISTS_R.DESCR */,
    PAY0 NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.PAY0 */,
    TAXED NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.TAXED */,
    NOSAI NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.NOSAI */,
    NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.NOTTAXED */,
    AUTHORS_FEE NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.AUTHORS_FEE */,
    SIRATETP SMALLINT /* TYPE OF COLUMN A_FP_PAYLISTS_R.SIRATETP */,
    SIRATEDD NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.SIRATEDD */,
    SIRATEDN NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.SIRATEDN */,
    SIDD NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.SIDD */,
    SIDN NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.SIDN */,
    IINEX_PERC NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.IINEX_PERC */,
    IINEX NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.IINEX */,
    IIN_FROM NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.IIN_FROM */,
    IIN_RATE NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.IIN_RATE */,
    IIN NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.IIN */,
    CASH NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.CASH */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_BANKS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_EVENT_TYPES_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_EVENT_TYPES2_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_EVENTS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_FP_PAYLISTS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_FP_PAYLISTS_R_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_PASTDATA_2_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_PASTDATA_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_PAYLIST_TEMPL_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_PAYLIST_TEMPL_R_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_PAYLISTS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_PAYLISTS_R_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_PERSONS_FIZ_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_PERSONS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_PERSONS_R_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_PIECEWORK_CATALOG_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_PIECEWORK_CATSTRUCT_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_PIECEWORK_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_PLUSMINUS_FROM_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_PLUSMINUS_TYPES_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_POSITIONS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_POSITIONS_PLUSMINUS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_POSITIONS_R_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_REPORT_CODES_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_SAL_SHEET_TEMPL_R_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_SAL_SHEETS_R_HIST_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_SALARY_PLUSMINUS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_SALARY_SHEET_TEMPL_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_SALARY_SHEETS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_SALARY_SHEETS_R_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_TIMEPLAN_LIST_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_TIMESHEET_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_TIMESHEET_LISTS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_TIMESHEET_LISTS_R_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_TIMESHEET_TEMPL_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_TIMESHEET_TEMPL_R_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GEN_UNTAXED_MIN_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_GET_MINMAX
RETURNS (
    RDLMINYR INTEGER,
    RDLMINMT INTEGER,
    RDLMAXYR INTEGER,
    RDLMAXMT INTEGER,
    RAMINYR INTEGER,
    RAMINMT INTEGER,
    RAMAXYR INTEGER,
    RAMAXMT INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_HOLIDAYS_01 (
    PSD DATE,
    PED DATE)
RETURNS (
    DT DATE /* TYPE OF COLUMN A_HOLIDAYS.DT */,
    TAG SMALLINT /* TYPE OF COLUMN A_HOLIDAYS.TAG */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_MAKE_SALARY_SHEET_R_HIST (
    PID INTEGER,
    PDTCUR TIMESTAMP,
    PSKIP_INTERVAL FLOAT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_A_MAKE_SALARY_SHEET_R_HIST_2 (
    PIDSX INTEGER,
    PDTCUR TIMESTAMP,
    PSKIP_INTERVAL FLOAT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_A_PAY_MATCHLISTS_01 (
    PIDAM INTEGER,
    PPAY DOM_MONEY,
    PDATE DATE,
    PDATET DATE,
    PIDPSH INTEGER)
RETURNS (
    IDP INTEGER,
    IDAM INTEGER,
    TP INTEGER,
    DT DATE,
    PAYT DOM_MONEY,
    PAY DOM_MONEY,
    IIN DOM_MONEY,
    ADVANCE DOM_MONEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_PAY_MATCHLISTS_02 (
    PIDAM INTEGER,
    PPAY DOM_MONEY,
    PDATE DATE,
    PIDPSH INTEGER)
RETURNS (
    IDP INTEGER,
    IDAM INTEGER,
    DT1 DATE,
    DT2 DATE,
    IDSHR1 INTEGER,
    IDSHR2 INTEGER,
    PAY0 DOM_MONEY,
    PAY1 DOM_MONEY,
    PAY2 DOM_MONEY,
    R1 FLOAT,
    R2 FLOAT,
    IIN DOM_MONEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_PAY_MATCHLISTS_02A (
    PIDAM INTEGER,
    PPAY DOM_MONEY,
    PDATE DATE,
    PIDPSH INTEGER)
RETURNS (
    IDP INTEGER,
    IDAM INTEGER,
    DT1 DATE,
    DT2 DATE,
    PAY0 DOM_MONEY,
    PAY1 DOM_MONEY,
    PAY2 DOM_MONEY,
    R1 FLOAT,
    R2 FLOAT,
    IIN DOM_MONEY,
    PAY_TAXED_1 DOM_MONEY,
    PAY_NOSAI_1 DOM_MONEY,
    PAY_NOTTAXED_1 DOM_MONEY,
    UNTAXED_MINIMUM_1 DOM_MONEY,
    IINEX_DEPENDANTS_1 DOM_MONEY,
    IINEX2_1 DOM_MONEY,
    IINEX2_TP_1 SMALLINT,
    DNSI_1 DOM_MONEY,
    PFNT_1 DOM_MONEY,
    LINT_1 DOM_MONEY,
    HINT_1 DOM_MONEY,
    IINEX_EXP_1 DOM_MONEY,
    IIN_1 DOM_MONEY,
    PAY_TAXED_2 DOM_MONEY,
    PAY_NOSAI_2 DOM_MONEY,
    PAY_NOTTAXED_2 DOM_MONEY,
    UNTAXED_MINIMUM_2 DOM_MONEY,
    IINEX_DEPENDANTS_2 DOM_MONEY,
    IINEX2_2 DOM_MONEY,
    IINEX2_TP_2 SMALLINT,
    DNSI_2 DOM_MONEY,
    PFNT_2 DOM_MONEY,
    LINT_2 DOM_MONEY,
    HINT_2 DOM_MONEY,
    IINEX_EXP_2 DOM_MONEY,
    IIN_2 DOM_MONEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_PAY_MATCHLISTS_03 (
    PIDS INTEGER,
    PDATE DATE,
    PDATET DATE)
RETURNS (
    IDP INTEGER,
    IDAM INTEGER,
    DT1 DATE,
    DT2 DATE,
    IDSHR1 INTEGER,
    IDSHR2 INTEGER,
    PAY0 DOM_MONEY,
    PAY1 DOM_MONEY,
    PAY2 DOM_MONEY,
    R1 FLOAT,
    R2 FLOAT,
    IIN DOM_MONEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_PAY_MATCHLISTS_04 (
    PDATE DATE,
    PDATET DATE,
    PIDPSH INTEGER)
RETURNS (
    IDP INTEGER,
    IDAM INTEGER,
    DT1 DATE,
    DT2 DATE,
    IDSHR1 INTEGER,
    IDSHR2 INTEGER,
    PAY0 DOM_MONEY,
    PAY1 DOM_MONEY,
    PAY2 DOM_MONEY,
    R1 FLOAT,
    R2 FLOAT,
    IIN DOM_MONEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_PAY_MATCHLISTS_11 (
    PIDAM INTEGER,
    PIDSHR INTEGER,
    PDT DATE,
    PIDPSH INTEGER)
RETURNS (
    V_SHEET_DT1 DATE,
    V_SHEET_DT2 DATE,
    V_IIN_RATE DOM_MONEY,
    V_IIN_RATE2 DOM_MONEY,
    V_SI_RATE DOM_MONEY,
    V1_PAY_TAXED DOM_MONEY,
    V1_PAY_NOSAI DOM_MONEY,
    V1_PAY_NOTTAXED DOM_MONEY,
    V1_NOTPAID_TAXED DOM_MONEY,
    V1_NOTPAID_NOSAI DOM_MONEY,
    V1_NOTPAID_NOTTAXED DOM_MONEY,
    V1_DNSI DOM_MONEY,
    V1_UNTAXED_MINIMUM DOM_MONEY,
    V1_IINEX_DEPENDANTS DOM_MONEY,
    V1_IINEX2 DOM_MONEY,
    V1_IINEX2_TP SMALLINT,
    V1_PF_T DOM_MONEY,
    V1_LI_T DOM_MONEY,
    V1_HI_T DOM_MONEY,
    V1_PF_NT DOM_MONEY,
    V1_LI_NT DOM_MONEY,
    V1_HI_NT DOM_MONEY,
    V1_IINEX_EXP DOM_MONEY,
    V1_IIN DOM_MONEY,
    V1_PAY DOM_MONEY,
    V2_PAY_TAXED DOM_MONEY,
    V2_PAY_NOSAI DOM_MONEY,
    V2_PAY_NOTTAXED DOM_MONEY,
    V2_DNSI DOM_MONEY,
    V2_UNTAXED_MINIMUM DOM_MONEY,
    V2_IINEX_DEPENDANTS DOM_MONEY,
    V2_IINEX2 DOM_MONEY,
    V2_PF_NT DOM_MONEY,
    V2_LI_NT DOM_MONEY,
    V2_HI_NT DOM_MONEY,
    V2_IINEX_EXP DOM_MONEY,
    V2_IIN DOM_MONEY,
    V2_PAY DOM_MONEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_PAY_MATCHLISTS_12 (
    PIDAM INTEGER,
    PPAY DOM_MONEY,
    PDATE DATE,
    PIDPSH INTEGER)
RETURNS (
    IDP INTEGER,
    IDAM INTEGER,
    DT1 DATE,
    DT2 DATE,
    IDSHR1 INTEGER,
    IDSHR2 INTEGER,
    PAY0 DOM_MONEY,
    PAY1 DOM_MONEY,
    PAY2 DOM_MONEY,
    R1 FLOAT,
    R2 FLOAT,
    IIN DOM_MONEY,
    VA_SHEET_DT1 DATE,
    VA_SHEET_DT2 DATE,
    VA_IIN_RATE DOM_MONEY,
    VA_IIN_RATE2 DOM_MONEY,
    VA_SI_RATE DOM_MONEY,
    VA1_PAY_TAXED DOM_MONEY,
    VA1_PAY_NOSAI DOM_MONEY,
    VA1_PAY_NOTTAXED DOM_MONEY,
    VA1_NOTPAID_TAXED DOM_MONEY,
    VA1_NOTPAID_NOSAI DOM_MONEY,
    VA1_NOTPAID_NOTTAXED DOM_MONEY,
    VA1_DNSI DOM_MONEY,
    VA1_UNTAXED_MINIMUM DOM_MONEY,
    VA1_IINEX_DEPENDANTS DOM_MONEY,
    VA1_IINEX2 DOM_MONEY,
    VA1_IINEX2_TP SMALLINT,
    VA1_PF_T DOM_MONEY,
    VA1_LI_T DOM_MONEY,
    VA1_HI_T DOM_MONEY,
    VA1_PF_NT DOM_MONEY,
    VA1_LI_NT DOM_MONEY,
    VA1_HI_NT DOM_MONEY,
    VA1_IINEX_EXP DOM_MONEY,
    VA1_IIN DOM_MONEY,
    VA1_PAY DOM_MONEY,
    VA2_PAY_TAXED DOM_MONEY,
    VA2_PAY_NOSAI DOM_MONEY,
    VA2_PAY_NOTTAXED DOM_MONEY,
    VA2_DNSI DOM_MONEY,
    VA2_UNTAXED_MINIMUM DOM_MONEY,
    VA2_IINEX_DEPENDANTS DOM_MONEY,
    VA2_IINEX2 DOM_MONEY,
    VA2_PF_NT DOM_MONEY,
    VA2_LI_NT DOM_MONEY,
    VA2_HI_NT DOM_MONEY,
    VA2_IINEX_EXP DOM_MONEY,
    VA2_IIN DOM_MONEY,
    VA2_PAY DOM_MONEY,
    VB_SHEET_DT1 DATE,
    VB_SHEET_DT2 DATE,
    VB_IIN_RATE DOM_MONEY,
    VB_IIN_RATE2 DOM_MONEY,
    VB_SI_RATE DOM_MONEY,
    VB1_PAY_TAXED DOM_MONEY,
    VB1_PAY_NOSAI DOM_MONEY,
    VB1_PAY_NOTTAXED DOM_MONEY,
    VB1_NOTPAID_TAXED DOM_MONEY,
    VB1_NOTPAID_NOSAI DOM_MONEY,
    VB1_NOTPAID_NOTTAXED DOM_MONEY,
    VB1_DNSI DOM_MONEY,
    VB1_UNTAXED_MINIMUM DOM_MONEY,
    VB1_IINEX_DEPENDANTS DOM_MONEY,
    VB1_IINEX2 DOM_MONEY,
    VB1_IINEX2_TP SMALLINT,
    VB1_PF_T DOM_MONEY,
    VB1_LI_T DOM_MONEY,
    VB1_HI_T DOM_MONEY,
    VB1_PF_NT DOM_MONEY,
    VB1_LI_NT DOM_MONEY,
    VB1_HI_NT DOM_MONEY,
    VB1_IINEX_EXP DOM_MONEY,
    VB1_IIN DOM_MONEY,
    VB1_PAY DOM_MONEY,
    VB2_PAY_TAXED DOM_MONEY,
    VB2_PAY_NOSAI DOM_MONEY,
    VB2_PAY_NOTTAXED DOM_MONEY,
    VB2_DNSI DOM_MONEY,
    VB2_UNTAXED_MINIMUM DOM_MONEY,
    VB2_IINEX_DEPENDANTS DOM_MONEY,
    VB2_IINEX2 DOM_MONEY,
    VB2_PF_NT DOM_MONEY,
    VB2_LI_NT DOM_MONEY,
    VB2_HI_NT DOM_MONEY,
    VB2_IINEX_EXP DOM_MONEY,
    VB2_IIN DOM_MONEY,
    VB2_PAY DOM_MONEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_PAY_MATCHLISTS_13 (
    PIDS INTEGER,
    PDATE DATE)
RETURNS (
    IDP INTEGER,
    IDAM INTEGER,
    DT1 DATE,
    DT2 DATE,
    IDSHR1 INTEGER,
    IDSHR2 INTEGER,
    PAY0 DOM_MONEY,
    PAY1 DOM_MONEY,
    PAY2 DOM_MONEY,
    R1 FLOAT,
    R2 FLOAT,
    IIN DOM_MONEY,
    VA_SHEET_DT1 DATE,
    VA_SHEET_DT2 DATE,
    VA_IIN_RATE DOM_MONEY,
    VA_IIN_RATE2 DOM_MONEY,
    VA_SI_RATE DOM_MONEY,
    VA1_PAY_TAXED DOM_MONEY,
    VA1_PAY_NOSAI DOM_MONEY,
    VA1_PAY_NOTTAXED DOM_MONEY,
    VA1_NOTPAID_TAXED DOM_MONEY,
    VA1_NOTPAID_NOSAI DOM_MONEY,
    VA1_NOTPAID_NOTTAXED DOM_MONEY,
    VA1_DNSI DOM_MONEY,
    VA1_UNTAXED_MINIMUM DOM_MONEY,
    VA1_IINEX_DEPENDANTS DOM_MONEY,
    VA1_IINEX2 DOM_MONEY,
    VA1_IINEX2_TP SMALLINT,
    VA1_PF_T DOM_MONEY,
    VA1_LI_T DOM_MONEY,
    VA1_HI_T DOM_MONEY,
    VA1_PF_NT DOM_MONEY,
    VA1_LI_NT DOM_MONEY,
    VA1_HI_NT DOM_MONEY,
    VA1_IINEX_EXP DOM_MONEY,
    VA1_IIN DOM_MONEY,
    VA1_PAY DOM_MONEY,
    VA2_PAY_TAXED DOM_MONEY,
    VA2_PAY_NOSAI DOM_MONEY,
    VA2_PAY_NOTTAXED DOM_MONEY,
    VA2_DNSI DOM_MONEY,
    VA2_UNTAXED_MINIMUM DOM_MONEY,
    VA2_IINEX_DEPENDANTS DOM_MONEY,
    VA2_IINEX2 DOM_MONEY,
    VA2_PF_NT DOM_MONEY,
    VA2_LI_NT DOM_MONEY,
    VA2_HI_NT DOM_MONEY,
    VA2_IINEX_EXP DOM_MONEY,
    VA2_IIN DOM_MONEY,
    VA2_PAY DOM_MONEY,
    VB_SHEET_DT1 DATE,
    VB_SHEET_DT2 DATE,
    VB_IIN_RATE DOM_MONEY,
    VB_IIN_RATE2 DOM_MONEY,
    VB_SI_RATE DOM_MONEY,
    VB1_PAY_TAXED DOM_MONEY,
    VB1_PAY_NOSAI DOM_MONEY,
    VB1_PAY_NOTTAXED DOM_MONEY,
    VB1_NOTPAID_TAXED DOM_MONEY,
    VB1_NOTPAID_NOSAI DOM_MONEY,
    VB1_NOTPAID_NOTTAXED DOM_MONEY,
    VB1_DNSI DOM_MONEY,
    VB1_UNTAXED_MINIMUM DOM_MONEY,
    VB1_IINEX_DEPENDANTS DOM_MONEY,
    VB1_IINEX2 DOM_MONEY,
    VB1_IINEX2_TP SMALLINT,
    VB1_PF_T DOM_MONEY,
    VB1_LI_T DOM_MONEY,
    VB1_HI_T DOM_MONEY,
    VB1_PF_NT DOM_MONEY,
    VB1_LI_NT DOM_MONEY,
    VB1_HI_NT DOM_MONEY,
    VB1_IINEX_EXP DOM_MONEY,
    VB1_IIN DOM_MONEY,
    VB1_PAY DOM_MONEY,
    VB2_PAY_TAXED DOM_MONEY,
    VB2_PAY_NOSAI DOM_MONEY,
    VB2_PAY_NOTTAXED DOM_MONEY,
    VB2_DNSI DOM_MONEY,
    VB2_UNTAXED_MINIMUM DOM_MONEY,
    VB2_IINEX_DEPENDANTS DOM_MONEY,
    VB2_IINEX2 DOM_MONEY,
    VB2_PF_NT DOM_MONEY,
    VB2_LI_NT DOM_MONEY,
    VB2_HI_NT DOM_MONEY,
    VB2_IINEX_EXP DOM_MONEY,
    VB2_IIN DOM_MONEY,
    VB2_PAY DOM_MONEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_PAY_MATCHLISTS_14 (
    PDATE DATE,
    PIDPSH INTEGER)
RETURNS (
    IDP INTEGER,
    IDAM INTEGER,
    DT1 DATE,
    DT2 DATE,
    IDSHR1 INTEGER,
    IDSHR2 INTEGER,
    PAY0 DOM_MONEY,
    PAY1 DOM_MONEY,
    PAY2 DOM_MONEY,
    R1 FLOAT,
    R2 FLOAT,
    IIN DOM_MONEY,
    VA_SHEET_DT1 DATE,
    VA_SHEET_DT2 DATE,
    VA_IIN_RATE DOM_MONEY,
    VA_IIN_RATE2 DOM_MONEY,
    VA_SI_RATE DOM_MONEY,
    VA1_PAY_TAXED DOM_MONEY,
    VA1_PAY_NOSAI DOM_MONEY,
    VA1_PAY_NOTTAXED DOM_MONEY,
    VA1_NOTPAID_TAXED DOM_MONEY,
    VA1_NOTPAID_NOSAI DOM_MONEY,
    VA1_NOTPAID_NOTTAXED DOM_MONEY,
    VA1_DNSI DOM_MONEY,
    VA1_UNTAXED_MINIMUM DOM_MONEY,
    VA1_IINEX_DEPENDANTS DOM_MONEY,
    VA1_IINEX2 DOM_MONEY,
    VA1_IINEX2_TP SMALLINT,
    VA1_PF_T DOM_MONEY,
    VA1_LI_T DOM_MONEY,
    VA1_HI_T DOM_MONEY,
    VA1_PF_NT DOM_MONEY,
    VA1_LI_NT DOM_MONEY,
    VA1_HI_NT DOM_MONEY,
    VA1_IINEX_EXP DOM_MONEY,
    VA1_IIN DOM_MONEY,
    VA1_PAY DOM_MONEY,
    VA2_PAY_TAXED DOM_MONEY,
    VA2_PAY_NOSAI DOM_MONEY,
    VA2_PAY_NOTTAXED DOM_MONEY,
    VA2_DNSI DOM_MONEY,
    VA2_UNTAXED_MINIMUM DOM_MONEY,
    VA2_IINEX_DEPENDANTS DOM_MONEY,
    VA2_IINEX2 DOM_MONEY,
    VA2_PF_NT DOM_MONEY,
    VA2_LI_NT DOM_MONEY,
    VA2_HI_NT DOM_MONEY,
    VA2_IINEX_EXP DOM_MONEY,
    VA2_IIN DOM_MONEY,
    VA2_PAY DOM_MONEY,
    VB_SHEET_DT1 DATE,
    VB_SHEET_DT2 DATE,
    VB_IIN_RATE DOM_MONEY,
    VB_IIN_RATE2 DOM_MONEY,
    VB_SI_RATE DOM_MONEY,
    VB1_PAY_TAXED DOM_MONEY,
    VB1_PAY_NOSAI DOM_MONEY,
    VB1_PAY_NOTTAXED DOM_MONEY,
    VB1_NOTPAID_TAXED DOM_MONEY,
    VB1_NOTPAID_NOSAI DOM_MONEY,
    VB1_NOTPAID_NOTTAXED DOM_MONEY,
    VB1_DNSI DOM_MONEY,
    VB1_UNTAXED_MINIMUM DOM_MONEY,
    VB1_IINEX_DEPENDANTS DOM_MONEY,
    VB1_IINEX2 DOM_MONEY,
    VB1_IINEX2_TP SMALLINT,
    VB1_PF_T DOM_MONEY,
    VB1_LI_T DOM_MONEY,
    VB1_HI_T DOM_MONEY,
    VB1_PF_NT DOM_MONEY,
    VB1_LI_NT DOM_MONEY,
    VB1_HI_NT DOM_MONEY,
    VB1_IINEX_EXP DOM_MONEY,
    VB1_IIN DOM_MONEY,
    VB1_PAY DOM_MONEY,
    VB2_PAY_TAXED DOM_MONEY,
    VB2_PAY_NOSAI DOM_MONEY,
    VB2_PAY_NOTTAXED DOM_MONEY,
    VB2_DNSI DOM_MONEY,
    VB2_UNTAXED_MINIMUM DOM_MONEY,
    VB2_IINEX_DEPENDANTS DOM_MONEY,
    VB2_IINEX2 DOM_MONEY,
    VB2_PF_NT DOM_MONEY,
    VB2_LI_NT DOM_MONEY,
    VB2_HI_NT DOM_MONEY,
    VB2_IINEX_EXP DOM_MONEY,
    VB2_IIN DOM_MONEY,
    VB2_PAY DOM_MONEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_PAY_MATCHLISTS_21 (
    PID INTEGER)
RETURNS (
    ID_SHR INTEGER,
    DT1 DATE,
    DT2 DATE,
    IIN_RATE DOM_MONEY,
    IIN_RATE2 DOM_MONEY,
    SI_RATE DOM_MONEY,
    PAY_TAXED DOM_MONEY,
    PAY_NOSAI DOM_MONEY,
    PAY_NOTTAXED DOM_MONEY,
    NOTPAID_TAXED DOM_MONEY,
    NOTPAID_NOSAI DOM_MONEY,
    NOTPAID_NOTTAXED DOM_MONEY,
    DNSI DOM_MONEY,
    UNTAXED_MINIMUM DOM_MONEY,
    IINEX_DEPENDANTS DOM_MONEY,
    IINEX2 DOM_MONEY,
    IINEX2_TP SMALLINT,
    PF_T DOM_MONEY,
    LI_T DOM_MONEY,
    HI_T DOM_MONEY,
    PF_NT DOM_MONEY,
    LI_NT DOM_MONEY,
    HI_NT DOM_MONEY,
    IINEX_EXP DOM_MONEY,
    IIN DOM_MONEY,
    PAY DOM_MONEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_PAY_SALDO_01 (
    PIDAM INTEGER,
    PDATE DATE,
    PDATET DATE,
    PIDPSH INTEGER)
RETURNS (
    IDP INTEGER,
    IDAM INTEGER,
    PAY0 DOM_MONEY,
    IIN0 DOM_MONEY,
    ADVANCE DOM_MONEY,
    WITHHOLDINGS DOM_MONEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_PAY_SALDO_02 (
    PIDS INTEGER,
    PDATE DATE,
    PDATET DATE)
RETURNS (
    IDP INTEGER,
    IDAM INTEGER,
    PAY0 DOM_MONEY,
    IIN0 DOM_MONEY,
    ADVANCE DOM_MONEY,
    WITHHOLDINGS DOM_MONEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_PAY_SALDO_03 (
    PDATE DATE,
    PDATET DATE,
    PIDPSH INTEGER)
RETURNS (
    IDP INTEGER,
    IDAM INTEGER,
    PAY0 DOM_MONEY,
    IIN0 DOM_MONEY,
    ADVANCE DOM_MONEY,
    WITHHOLDINGS DOM_MONEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_PAY_X_1 (
    PIDAM INTEGER,
    PIDPSH INTEGER,
    PIDSHR INTEGER,
    PDT DATE,
    PPAY DOM_MONEY)
RETURNS (
    PAY_TAXED DOM_MONEY,
    PAY_NOSAI DOM_MONEY,
    PAY_NOTTAXED DOM_MONEY,
    DNSI DOM_MONEY,
    UNTAXED_MINIMUM DOM_MONEY,
    IINEX_DEPENDANTS DOM_MONEY,
    IINEX2 DOM_MONEY,
    IINEX2_TP SMALLINT,
    PF_NT DOM_MONEY,
    LI_NT DOM_MONEY,
    HI_NT DOM_MONEY,
    IINEX_EXP DOM_MONEY,
    IIN DOM_MONEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_PAYLISTS_PER_01 (
    PDATE1 DATE,
    PDATE2 DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN A_PAYLISTS.ID */,
    SNR INTEGER /* TYPE OF COLUMN A_PAYLISTS.SNR */,
    YR INTEGER /* TYPE OF COLUMN A_PAYLISTS.YR */,
    MT INTEGER /* TYPE OF COLUMN A_PAYLISTS.MT */,
    DT DATE /* TYPE OF COLUMN A_PAYLISTS.DT */,
    DEP VARCHAR(15) /* TYPE OF COLUMN A_PAYLISTS.DEP */,
    DESCR VARCHAR(50) /* TYPE OF COLUMN A_PAYLISTS.DESCR */,
    DOPAY SMALLINT /* TYPE OF COLUMN A_PAYLISTS.DOPAY */,
    TOTAL_PAY NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS.TOTAL_PAY */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_PAYLISTS_R_PER_01 (
    PDATE1 DATE,
    PDATE2 DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN A_PAYLISTS_R.ID */,
    IDS INTEGER /* TYPE OF COLUMN A_PAYLISTS_R.IDS */,
    IDP INTEGER /* TYPE OF COLUMN A_PAYLISTS_R.IDP */,
    IDAM INTEGER /* TYPE OF COLUMN A_PAYLISTS_R.IDAM */,
    SNR INTEGER /* TYPE OF COLUMN A_PAYLISTS_R.SNR */,
    PAY0 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.PAY0 */,
    IIN0 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.IIN0 */,
    ADVANCE0 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.ADVANCE0 */,
    WITHHOLDINGS0 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.WITHHOLDINGS0 */,
    TPAY0 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.TPAY0 */,
    PAY NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.PAY */,
    IIN NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.IIN */,
    ADVANCE NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.ADVANCE */,
    WITHHOLDINGS NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.WITHHOLDINGS */,
    TPAY NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.TPAY */,
    PAY_REVERSE NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.PAY_REVERSE */,
    IIN_REVERSE NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.IIN_REVERSE */,
    DT1 DATE /* TYPE OF COLUMN A_PAYLISTS_R.DT1 */,
    DT2 DATE /* TYPE OF COLUMN A_PAYLISTS_R.DT2 */,
    R1 FLOAT /* TYPE OF COLUMN A_PAYLISTS_R.R1 */,
    R2 FLOAT /* TYPE OF COLUMN A_PAYLISTS_R.R2 */,
    S0 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.S0 */,
    S1 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.S1 */,
    S2 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.S2 */,
    ID_SHR_1 INTEGER /* TYPE OF COLUMN A_PAYLISTS_R.ID_SHR_1 */,
    ID_SHR_2 INTEGER /* TYPE OF COLUMN A_PAYLISTS_R.ID_SHR_2 */,
    PAY_TAXED_1 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.PAY_TAXED_1 */,
    PAY_NOSAI_1 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.PAY_NOSAI_1 */,
    PAY_NOTTAXED_1 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.PAY_NOTTAXED_1 */,
    UNTAXED_MINIMUM_1 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.UNTAXED_MINIMUM_1 */,
    IINEX_DEPENDANTS_1 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.IINEX_DEPENDANTS_1 */,
    IINEX2_1 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.IINEX2_1 */,
    IINEX2_TP_1 SMALLINT /* TYPE OF COLUMN A_PAYLISTS_R.IINEX2_TP_1 */,
    DNSI_1 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.DNSI_1 */,
    PFNT_1 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.PFNT_1 */,
    LINT_1 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.LINT_1 */,
    HINT_1 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.HINT_1 */,
    IINEX_EXP_1 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.IINEX_EXP_1 */,
    IIN_1 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.IIN_1 */,
    PAY_TAXED_2 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.PAY_TAXED_2 */,
    PAY_NOSAI_2 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.PAY_NOSAI_2 */,
    PAY_NOTTAXED_2 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.PAY_NOTTAXED_2 */,
    UNTAXED_MINIMUM_2 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.UNTAXED_MINIMUM_2 */,
    IINEX_DEPENDANTS_2 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.IINEX_DEPENDANTS_2 */,
    IINEX2_2 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.IINEX2_2 */,
    IINEX2_TP_2 SMALLINT /* TYPE OF COLUMN A_PAYLISTS_R.IINEX2_TP_2 */,
    DNSI_2 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.DNSI_2 */,
    PFNT_2 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.PFNT_2 */,
    LINT_2 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.LINT_2 */,
    HINT_2 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.HINT_2 */,
    IINEX_EXP_2 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.IINEX_EXP_2 */,
    IIN_2 NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.IIN_2 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_PAYLISTS_SUM_TOTALS
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_A_PIECEWORK_PER_01 (
    PDT1 DATE,
    PDT2 DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN A_PIECEWORK.ID */,
    IDK INTEGER /* TYPE OF COLUMN A_PIECEWORK.IDK */,
    IDP INTEGER /* TYPE OF COLUMN A_PIECEWORK.IDP */,
    IDA INTEGER /* TYPE OF COLUMN A_PIECEWORK.IDA */,
    DT DATE /* TYPE OF COLUMN A_PIECEWORK.DT */,
    UNIT VARCHAR(10) /* TYPE OF COLUMN A_PIECEWORK.UNIT */,
    QUANTITY NUMERIC(13,4) /* TYPE OF COLUMN A_PIECEWORK.QUANTITY */,
    RATE NUMERIC(13,4) /* TYPE OF COLUMN A_PIECEWORK.RATE */,
    BONUS FLOAT /* TYPE OF COLUMN A_PIECEWORK.BONUS */,
    PAY NUMERIC(13,4) /* TYPE OF COLUMN A_PIECEWORK.PAY */,
    TIMEUNIT INTEGER /* TYPE OF COLUMN A_PIECEWORK.TIMEUNIT */,
    TIMEUSE FLOAT /* TYPE OF COLUMN A_PIECEWORK.TIMEUSE */,
    TIMEUSEINHOURS FLOAT /* TYPE OF COLUMN A_PIECEWORK.TIMEUSEINHOURS */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_PLANS_BY_YRMT (
    PYR INTEGER,
    PMT INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN A_TIMESHEET.ID */,
    IDP INTEGER /* TYPE OF COLUMN A_TIMESHEET.IDP */,
    IDL INTEGER /* TYPE OF COLUMN A_TIMESHEET.IDL */,
    SNR SMALLINT /* TYPE OF COLUMN A_TIMESHEET.SNR */,
    PERID INTEGER /* TYPE OF COLUMN A_TIMESHEET.PERID */,
    AMID INTEGER /* TYPE OF COLUMN A_TIMESHEET.AMID */,
    YR INTEGER /* TYPE OF COLUMN A_TIMESHEET.YR */,
    MT INTEGER /* TYPE OF COLUMN A_TIMESHEET.MT */,
    KIND1 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.KIND1 */,
    KIND2 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.KIND2 */,
    V1 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V1 */,
    V2 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V2 */,
    V3 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V3 */,
    V4 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V4 */,
    V5 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V5 */,
    V6 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V6 */,
    V7 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V7 */,
    V8 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V8 */,
    V9 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V9 */,
    V10 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V10 */,
    V11 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V11 */,
    V12 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V12 */,
    V13 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V13 */,
    V14 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V14 */,
    V15 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V15 */,
    V16 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V16 */,
    V17 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V17 */,
    V18 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V18 */,
    V19 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V19 */,
    V20 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V20 */,
    V21 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V21 */,
    V22 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V22 */,
    V23 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V23 */,
    V24 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V24 */,
    V25 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V25 */,
    V26 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V26 */,
    V27 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V27 */,
    V28 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V28 */,
    V29 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V29 */,
    V30 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V30 */,
    V31 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V31 */,
    K1 FLOAT /* TYPE OF COLUMN A_TIMESHEET.K1 */,
    D1 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D1 */,
    D2 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D2 */,
    D3 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D3 */,
    D4 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D4 */,
    D5 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D5 */,
    D6 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D6 */,
    D7 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D7 */,
    D8 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D8 */,
    D9 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D9 */,
    D10 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D10 */,
    D11 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D11 */,
    D12 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D12 */,
    D13 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D13 */,
    D14 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D14 */,
    D15 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D15 */,
    D16 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D16 */,
    D17 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D17 */,
    D18 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D18 */,
    D19 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D19 */,
    D20 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D20 */,
    D21 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D21 */,
    D22 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D22 */,
    D23 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D23 */,
    D24 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D24 */,
    D25 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D25 */,
    D26 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D26 */,
    D27 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D27 */,
    D28 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D28 */,
    D29 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D29 */,
    D30 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D30 */,
    D31 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D31 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_POSITIONS_PLUSMINUS_PER_01 (
    PDATE1 DATE,
    PDATE2 DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN A_POSITIONS_PLUSMINUS.ID */,
    IDP INTEGER /* TYPE OF COLUMN A_POSITIONS_PLUSMINUS.IDP */,
    IDA INTEGER /* TYPE OF COLUMN A_POSITIONS_PLUSMINUS.IDA */,
    DATE1 DATE /* TYPE OF COLUMN A_POSITIONS_PLUSMINUS.DATE1 */,
    DATE2 DATE /* TYPE OF COLUMN A_POSITIONS_PLUSMINUS.DATE2 */,
    IDSV INTEGER /* TYPE OF COLUMN A_POSITIONS_PLUSMINUS.IDSV */,
    IDNO INTEGER /* TYPE OF COLUMN A_POSITIONS_PLUSMINUS.IDNO */,
    IDIE INTEGER /* TYPE OF COLUMN A_POSITIONS_PLUSMINUS.IDIE */,
    DESCR VARCHAR(50) /* TYPE OF COLUMN A_POSITIONS_PLUSMINUS.DESCR */,
    RATE NUMERIC(15,2) /* TYPE OF COLUMN A_POSITIONS_PLUSMINUS.RATE */,
    RATE_TYPE SMALLINT /* TYPE OF COLUMN A_POSITIONS_PLUSMINUS.RATE_TYPE */,
    IS_INAVPAY SMALLINT /* TYPE OF COLUMN A_SALARY_PLUSMINUS.IS_INAVPAY */,
    IS_PAID SMALLINT /* TYPE OF COLUMN A_SALARY_PLUSMINUS.IS_PAID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_RATES_ID
RETURNS (
    NEXTID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_REP_AGGREGATE_01 (
    PDT1 DATE,
    PDT2 DATE,
    PIDP INTEGER,
    PIDAM INTEGER,
    PRETYRMT INTEGER,
    PRETIDP INTEGER,
    PRETIDAM INTEGER)
RETURNS (
    IDP INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.IDP */,
    IDAM INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.IDAM */,
    IDDEP VARCHAR(15) /* TYPE OF COLUMN A_DEPARTMENTS.ID */,
    YR INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS.YR */,
    MT INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS.MT */,
    WORKHOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_HOURS */,
    WORKDAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_DAYS */,
    FREEAVPAYDAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_DAYS */,
    VACATIONDAYS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_DAYS_CURRENT */,
    VACATIONDAYSCOMP FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_DAYS_COMP */,
    SICKDAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_DAYS */,
    WORKPAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY */,
    SICKPAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY */,
    VACATIONPAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY */,
    VACATIONPAYCOMP NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_PAY_COMP */,
    FREEAVPAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY */,
    WORKAVPAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY */,
    PLUS_TAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_TAXED */,
    PLUS_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOTTAXED */,
    PLUS_AUTHORS_FEES NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_AUTHORS_FEES */,
    PLUS_NOSAI NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOSAI */,
    TOTALPAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY */,
    FORSAI NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.AMOUNT_BEFORE_SN */,
    DNSN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.DNSN_AMOUNT */,
    DDSN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.DDSN_AMOUNT */,
    UNTAXED_MINIMUM NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM */,
    IIN_EXEMPT_DEPENDANTS NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS */,
    IIN_EXEMPT_INVALIDITY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_INVALIDITY */,
    IIN_EXEMPT_NATIONAL_MOVEMENT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_NATIONAL_MOVEMENT */,
    IIN_EXEMPT_RETALIATION NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_RETALIATION */,
    IIN_EXEMPT_EXPENSES NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_EXPENSES */,
    PLUS_PF_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_PF_NOTTAXED */,
    PLUS_LI_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_LI_NOTTAXED */,
    PLUS_HI_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_HI_NOTTAXED */,
    IIN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT */,
    MINUS_BEFORE_IIN NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.MINUS_BEFORE_IIN */,
    MINUS_AFTER_IIN NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.MINUS_AFTER_IIN */,
    PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAY */,
    ADVANCE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.ADVANCE */,
    PAYT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAYT */,
    PAID NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.TPAY */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_REP_AGGREGATE_02 (
    PDT1 DATE,
    PDT2 DATE,
    PIDDEP VARCHAR(15) /* TYPE OF COLUMN A_DEPARTMENTS.ID */,
    PRETYRMT INTEGER,
    PRETIDP INTEGER,
    PRETIDAM INTEGER,
    PRETIDDEP INTEGER)
RETURNS (
    IDP INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.IDP */,
    IDAM INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.IDAM */,
    IDDEP VARCHAR(15) /* TYPE OF COLUMN A_DEPARTMENTS.ID */,
    YR INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS.YR */,
    MT INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS.MT */,
    WORKHOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_HOURS */,
    WORKDAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_DAYS */,
    FREEAVPAYDAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_DAYS */,
    VACATIONDAYS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_DAYS_CURRENT */,
    VACATIONDAYSCOMP FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_DAYS_COMP */,
    SICKDAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_DAYS */,
    WORKPAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY */,
    SICKPAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY */,
    VACATIONPAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY */,
    VACATIONPAYCOMP NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_PAY_COMP */,
    FREEAVPAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY */,
    WORKAVPAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY */,
    PLUS_TAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_TAXED */,
    PLUS_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOTTAXED */,
    PLUS_AUTHORS_FEES NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_AUTHORS_FEES */,
    PLUS_NOSAI NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOSAI */,
    TOTALPAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY */,
    FORSAI NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.AMOUNT_BEFORE_SN */,
    DNSN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.DNSN_AMOUNT */,
    DDSN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.DDSN_AMOUNT */,
    UNTAXED_MINIMUM NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM */,
    IIN_EXEMPT_DEPENDANTS NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS */,
    IIN_EXEMPT_INVALIDITY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_INVALIDITY */,
    IIN_EXEMPT_NATIONAL_MOVEMENT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_NATIONAL_MOVEMENT */,
    IIN_EXEMPT_RETALIATION NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_RETALIATION */,
    IIN_EXEMPT_EXPENSES NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_EXPENSES */,
    PLUS_PF_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_PF_NOTTAXED */,
    PLUS_LI_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_LI_NOTTAXED */,
    PLUS_HI_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_HI_NOTTAXED */,
    IIN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT */,
    MINUS_BEFORE_IIN NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.MINUS_BEFORE_IIN */,
    MINUS_AFTER_IIN NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.MINUS_AFTER_IIN */,
    PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAY */,
    ADVANCE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.ADVANCE */,
    PAYT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAYT */,
    PAID NUMERIC(15,2) /* TYPE OF COLUMN A_PAYLISTS_R.TPAY */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_REP_IINK_01 (
    PDT1 DATE,
    PDT2 DATE)
RETURNS (
    IDP INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.IDP */,
    DT1 DATE,
    DT2 DATE,
    INCOME NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY */,
    PLUS_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOTTAXED */,
    DNSN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.DNSN_AMOUNT */,
    UNTAXED_MINIMUM0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM0 */,
    IIN_EXEMPT_DEPENDANTS0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS0 */,
    IIN_EXEMPT_20 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_20 */,
    UNTAXED_MINIMUM NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM */,
    IIN_EXEMPT_DEPENDANTS NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS */,
    IIN_EXEMPT_2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2 */,
    IIN_EXEMPT_2TP SMALLINT /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2TP */,
    IIN_EXEMPT_EXPENSES NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_EXPENSES */,
    PLUS_PF_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_PF_NOTTAXED */,
    PLUS_LI_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_LI_NOTTAXED */,
    PLUS_HI_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_HI_NOTTAXED */,
    IIN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT */,
    IIN_AMOUNT2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT */,
    PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAY */,
    PAY2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAY */,
    ADVANCE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.ADVANCE */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_REP_IINK_02 (
    PDT1 DATE,
    PDT2 DATE,
    PDTY DATE)
RETURNS (
    IDP INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.IDP */,
    DT1 DATE,
    DT2 DATE,
    INCOME NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY */,
    PLUS_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOTTAXED */,
    DNSN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.DNSN_AMOUNT */,
    UNTAXED_MINIMUM0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM0 */,
    IIN_EXEMPT_DEPENDANTS0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS0 */,
    IIN_EXEMPT_20 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_20 */,
    UNTAXED_MINIMUM NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM */,
    IIN_EXEMPT_DEPENDANTS NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS */,
    IIN_EXEMPT_2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2 */,
    IIN_EXEMPT_2TP SMALLINT /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2TP */,
    IIN_EXEMPT_EXPENSES NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_EXPENSES */,
    PLUS_PF_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_PF_NOTTAXED */,
    PLUS_LI_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_LI_NOTTAXED */,
    PLUS_HI_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_HI_NOTTAXED */,
    IIN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT */,
    IIN_AMOUNT2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT */,
    PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAY */,
    PAY2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAY */,
    ADVANCE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.ADVANCE */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_REP_IINK_03 (
    PDT1 DATE,
    PDT2 DATE)
RETURNS (
    IDP INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.IDP */,
    DT1 DATE,
    DT2 DATE,
    INCOME NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY */,
    PLUS_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOTTAXED */,
    DNSN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.DNSN_AMOUNT */,
    UNTAXED_MINIMUM0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM0 */,
    IIN_EXEMPT_DEPENDANTS0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS0 */,
    IIN_EXEMPT_20 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_20 */,
    UNTAXED_MINIMUM NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM */,
    IIN_EXEMPT_DEPENDANTS NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS */,
    IIN_EXEMPT_2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2 */,
    IIN_EXEMPT_2TP SMALLINT /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2TP */,
    IIN_EXEMPT_EXPENSES NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_EXPENSES */,
    PLUS_PF_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_PF_NOTTAXED */,
    PLUS_LI_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_LI_NOTTAXED */,
    PLUS_HI_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_HI_NOTTAXED */,
    IIN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT */,
    IIN_AMOUNT2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT */,
    PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAY */,
    PAY2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAY */,
    ADVANCE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.ADVANCE */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_REP_IINK_11 (
    PDT1 DATE,
    PDT2 DATE,
    PDTX DATE)
RETURNS (
    IDP INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.IDP */,
    DT1 DATE,
    DT2 DATE,
    INCOME NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY */,
    PLUS_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOTTAXED */,
    DNSN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.DNSN_AMOUNT */,
    UNTAXED_MINIMUM0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM0 */,
    IIN_EXEMPT_DEPENDANTS0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS0 */,
    IIN_EXEMPT_20 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_20 */,
    UNTAXED_MINIMUM NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM */,
    IIN_EXEMPT_DEPENDANTS NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS */,
    IIN_EXEMPT_2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2 */,
    IIN_EXEMPT_2TP SMALLINT /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2TP */,
    IIN_EXEMPT_EXPENSES NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_EXPENSES */,
    PLUS_PF_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_PF_NOTTAXED */,
    PLUS_LI_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_LI_NOTTAXED */,
    PLUS_HI_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_HI_NOTTAXED */,
    IIN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT */,
    IIN_AMOUNT2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT */,
    PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAY */,
    PAY2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAY */,
    ADVANCE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.ADVANCE */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_REP_IINK_12 (
    PDT1 DATE,
    PDT2 DATE,
    PDTX DATE)
RETURNS (
    IDP INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.IDP */,
    DT1 DATE,
    DT2 DATE,
    INCOME NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY */,
    PLUS_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOTTAXED */,
    DNSN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.DNSN_AMOUNT */,
    UNTAXED_MINIMUM0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM0 */,
    IIN_EXEMPT_DEPENDANTS0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS0 */,
    IIN_EXEMPT_20 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_20 */,
    UNTAXED_MINIMUM NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM */,
    IIN_EXEMPT_DEPENDANTS NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS */,
    IIN_EXEMPT_2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2 */,
    IIN_EXEMPT_2TP SMALLINT /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2TP */,
    IIN_EXEMPT_EXPENSES NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_EXPENSES */,
    PLUS_PF_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_PF_NOTTAXED */,
    PLUS_LI_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_LI_NOTTAXED */,
    PLUS_HI_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_HI_NOTTAXED */,
    IIN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT */,
    IIN_AMOUNT2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT */,
    PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAY */,
    PAY2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAY */,
    ADVANCE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.ADVANCE */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_REP_IINK_13 (
    PDT1 DATE,
    PDT2 DATE,
    PDTX DATE)
RETURNS (
    IDP INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.IDP */,
    DT1 DATE,
    DT2 DATE,
    INCOME NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY */,
    PLUS_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOTTAXED */,
    DNSN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.DNSN_AMOUNT */,
    UNTAXED_MINIMUM0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM0 */,
    IIN_EXEMPT_DEPENDANTS0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS0 */,
    IIN_EXEMPT_20 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_20 */,
    UNTAXED_MINIMUM NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM */,
    IIN_EXEMPT_DEPENDANTS NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS */,
    IIN_EXEMPT_2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2 */,
    IIN_EXEMPT_2TP SMALLINT /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2TP */,
    IIN_EXEMPT_EXPENSES NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_EXPENSES */,
    PLUS_PF_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_PF_NOTTAXED */,
    PLUS_LI_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_LI_NOTTAXED */,
    PLUS_HI_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_HI_NOTTAXED */,
    IIN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT */,
    IIN_AMOUNT2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT */,
    PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAY */,
    PAY2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAY */,
    ADVANCE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.ADVANCE */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_REP_IINK_21 (
    PYR INTEGER,
    PMT INTEGER,
    PDT1 DATE,
    PDT2 DATE)
RETURNS (
    IDP INTEGER /* TYPE OF COLUMN A_FP_PAYLISTS_R.IDP */,
    DATE1 DATE /* TYPE OF COLUMN A_FP_PAYLISTS_R.DATE1 */,
    DATE2 DATE /* TYPE OF COLUMN A_FP_PAYLISTS_R.DATE2 */,
    PAYMONTH INTEGER,
    INCOME_ID VARCHAR(4) /* TYPE OF COLUMN A_FP_PAYLISTS_R.INCOME_ID */,
    PAY NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.PAY0 */,
    TAXED NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.TAXED */,
    NOSAI NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.NOSAI */,
    NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.NOTTAXED */,
    AUTHORS_FEE NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.AUTHORS_FEE */,
    SIDD NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.SIDD */,
    SIDN NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.SIDN */,
    IINEX NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.IINEX */,
    IIN_FROM NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.IIN_FROM */,
    IIN NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.IIN */,
    CASH NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.CASH */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_REP_IINK_22 (
    PYR INTEGER,
    PDT1 DATE,
    PDT2 DATE)
RETURNS (
    IDP INTEGER /* TYPE OF COLUMN A_FP_PAYLISTS_R.IDP */,
    DATE1 DATE /* TYPE OF COLUMN A_FP_PAYLISTS_R.DATE1 */,
    DATE2 DATE /* TYPE OF COLUMN A_FP_PAYLISTS_R.DATE2 */,
    PAYMONTH INTEGER,
    INCOME_ID VARCHAR(4) /* TYPE OF COLUMN A_FP_PAYLISTS_R.INCOME_ID */,
    PAY NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.PAY0 */,
    TAXED NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.TAXED */,
    NOSAI NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.NOSAI */,
    NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.NOTTAXED */,
    AUTHORS_FEE NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.AUTHORS_FEE */,
    SIDD NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.SIDD */,
    SIDN NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.SIDN */,
    IINEX NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.IINEX */,
    IIN_FROM NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.IIN_FROM */,
    IIN NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.IIN */,
    CASH NUMERIC(15,2) /* TYPE OF COLUMN A_FP_PAYLISTS_R.CASH */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_REP_IINK_31 (
    PDT1 DATE,
    PDT2 DATE,
    PDTX DATE)
RETURNS (
    IDP INTEGER,
    DT1 DATE,
    DT2 DATE,
    INCOME NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY */,
    PLUS_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOTTAXED */,
    DNSN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.DNSN_AMOUNT */,
    UNTAXED_MINIMUM0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM0 */,
    IIN_EXEMPT_DEPENDANTS0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS0 */,
    IIN_EXEMPT_20 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_20 */,
    UNTAXED_MINIMUM NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM */,
    IIN_EXEMPT_DEPENDANTS NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS */,
    IIN_EXEMPT_2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2 */,
    IIN_EXEMPT_2TP SMALLINT /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2TP */,
    IIN_EXEMPT_EXPENSES NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_EXPENSES */,
    PLUS_PF_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_PF_NOTTAXED */,
    PLUS_LI_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_LI_NOTTAXED */,
    PLUS_HI_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_HI_NOTTAXED */,
    IIN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT */,
    IIN_AMOUNT2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT */,
    PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAY */,
    PAY2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAY */,
    ADVANCE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.ADVANCE */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_REP_IINK_32 (
    PDT1 DATE,
    PDT2 DATE,
    PDTX DATE)
RETURNS (
    IDP INTEGER,
    DT1 DATE,
    DT2 DATE,
    INCOME NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY */,
    PLUS_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOTTAXED */,
    DNSN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.DNSN_AMOUNT */,
    UNTAXED_MINIMUM0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM0 */,
    IIN_EXEMPT_DEPENDANTS0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS0 */,
    IIN_EXEMPT_20 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_20 */,
    UNTAXED_MINIMUM NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM */,
    IIN_EXEMPT_DEPENDANTS NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS */,
    IIN_EXEMPT_2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2 */,
    IIN_EXEMPT_2TP SMALLINT /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2TP */,
    IIN_EXEMPT_EXPENSES NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_EXPENSES */,
    PLUS_PF_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_PF_NOTTAXED */,
    PLUS_LI_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_LI_NOTTAXED */,
    PLUS_HI_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_HI_NOTTAXED */,
    IIN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT */,
    IIN_AMOUNT2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT */,
    PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAY */,
    PAY2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAY */,
    ADVANCE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.ADVANCE */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_REP_IINK_33 (
    PDT1 DATE,
    PDT2 DATE,
    PDTX DATE)
RETURNS (
    IDP INTEGER,
    DT1 DATE,
    DT2 DATE,
    INCOME NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY */,
    PLUS_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOTTAXED */,
    DNSN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.DNSN_AMOUNT */,
    UNTAXED_MINIMUM0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM0 */,
    IIN_EXEMPT_DEPENDANTS0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS0 */,
    IIN_EXEMPT_20 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_20 */,
    UNTAXED_MINIMUM NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM */,
    IIN_EXEMPT_DEPENDANTS NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS */,
    IIN_EXEMPT_2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2 */,
    IIN_EXEMPT_2TP SMALLINT /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2TP */,
    IIN_EXEMPT_EXPENSES NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_EXPENSES */,
    PLUS_PF_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_PF_NOTTAXED */,
    PLUS_LI_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_LI_NOTTAXED */,
    PLUS_HI_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_HI_NOTTAXED */,
    IIN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT */,
    IIN_AMOUNT2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT */,
    PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAY */,
    PAY2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAY */,
    ADVANCE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.ADVANCE */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_REP_IINK_L1 (
    PDT1 DATE,
    PDT2 DATE,
    PDTX DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.ID */,
    IDP INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.IDP */,
    IDAM INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.IDAM */,
    PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAY */,
    R DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_REP_IINK_L2 (
    PDT1 DATE,
    PDT2 DATE,
    PDTX DATE,
    PDTY DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.ID */,
    IDP INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.IDP */,
    IDAM INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.IDAM */,
    PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAY */,
    R DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_REP_IINK_L3 (
    PDT1 DATE,
    PDT2 DATE,
    PDTX DATE,
    PDTY DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.ID */,
    IDP INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.IDP */,
    IDAM INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.IDAM */,
    PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAY */,
    R DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_REP_IINK_P1 (
    PDT1 DATE,
    PDT2 DATE,
    PDTY DATE)
RETURNS (
    IDP INTEGER,
    HDATE DATE,
    FDATE DATE)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_REP_IINK_P2 (
    PDTY1 DATE,
    PDTY2 DATE)
RETURNS (
    IDP INTEGER,
    HDATE DATE,
    FDATE DATE)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_REP_PDT (
    PDT DATE)
RETURNS (
    IDP INTEGER,
    DATE1 DATE,
    DATE2 DATE)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_SALARY_PLUSMINUS_PER_01 (
    PYR1 INTEGER,
    PMT1 INTEGER,
    PYR2 INTEGER,
    PMT2 INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN A_SALARY_PLUSMINUS.ID */,
    IDP INTEGER /* TYPE OF COLUMN A_SALARY_PLUSMINUS.IDP */,
    IDA INTEGER /* TYPE OF COLUMN A_SALARY_PLUSMINUS.IDA */,
    IDAP INTEGER /* TYPE OF COLUMN A_SALARY_PLUSMINUS.IDAP */,
    IDSX INTEGER /* TYPE OF COLUMN A_SALARY_PLUSMINUS.IDSX */,
    IDSV INTEGER /* TYPE OF COLUMN A_SALARY_PLUSMINUS.IDSV */,
    IDNO INTEGER /* TYPE OF COLUMN A_SALARY_PLUSMINUS.IDNO */,
    IDIE INTEGER /* TYPE OF COLUMN A_SALARY_PLUSMINUS.IDIE */,
    DESCR VARCHAR(50) /* TYPE OF COLUMN A_SALARY_PLUSMINUS.DESCR */,
    RATE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_PLUSMINUS.RATE */,
    RATE_TYPE SMALLINT /* TYPE OF COLUMN A_SALARY_PLUSMINUS.RATE_TYPE */,
    AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_PLUSMINUS.AMOUNT */,
    IS_INAVPAY SMALLINT /* TYPE OF COLUMN A_SALARY_PLUSMINUS.IS_INAVPAY */,
    IS_PAID SMALLINT /* TYPE OF COLUMN A_SALARY_PLUSMINUS.IS_PAID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_SALARY_SHEETS_PER_01 (
    PYR1 INTEGER,
    PMT1 INTEGER,
    PYR2 INTEGER,
    PMT2 INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS.ID */,
    YR INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS.YR */,
    MT INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS.MT */,
    SNR SMALLINT /* TYPE OF COLUMN A_SALARY_SHEETS.SNR */,
    DT1 DATE /* TYPE OF COLUMN A_SALARY_SHEETS.DT1 */,
    DT2 DATE /* TYPE OF COLUMN A_SALARY_SHEETS.DT2 */,
    DESCR VARCHAR(50) /* TYPE OF COLUMN A_SALARY_SHEETS.DESCR */,
    DEP VARCHAR(15) /* TYPE OF COLUMN A_SALARY_SHEETS.DEP */,
    KIND SMALLINT /* TYPE OF COLUMN A_SALARY_SHEETS.KIND */,
    IS_TEMP SMALLINT /* TYPE OF COLUMN A_SALARY_SHEETS.IS_TEMP */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_SALARY_SHEETS_R_HIST_01 (
    PID INTEGER)
RETURNS (
    IDH INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.ID */,
    ID INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.ID */,
    IDS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IDS */,
    IDSX INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IDSX */,
    IDST INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IDST */,
    IS_TEMP SMALLINT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IS_TEMP */,
    TYPE_TAG SMALLINT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.TYPE_TAG */,
    IDP INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IDP */,
    IDAM INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IDAM */,
    SNR SMALLINT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SNR */,
    FNAME VARCHAR(20) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FNAME */,
    LNAME VARCHAR(20) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.LNAME */,
    POSITION_TITLE VARCHAR(50) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.POSITION_TITLE */,
    TERRITORIAL_CODE VARCHAR(20) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.TERRITORIAL_CODE */,
    CALENDAR_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.CALENDAR_DAYS */,
    CALENDAR_DAYS_USE INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.CALENDAR_DAYS_USE */,
    MONTH_WORKDAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.MONTH_WORKDAYS */,
    MONTH_WORKHOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.MONTH_WORKHOURS */,
    PLAN_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_DAYS */,
    PLAN_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_HOURS */,
    PLAN_HOURS_NIGHT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_HOURS_NIGHT */,
    PLAN_HOURS_OVERTIME FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_HOURS_OVERTIME */,
    FACT_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_DAYS */,
    FACT_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_HOURS */,
    FACT_HOURS_NIGHT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_HOURS_NIGHT */,
    FACT_HOURS_OVERTIME FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_HOURS_OVERTIME */,
    PLAN_WORK_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_WORK_DAYS */,
    PLAN_WORK_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_WORK_HOURS */,
    PLAN_WORK_HOURS_NIGHT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_WORK_HOURS_NIGHT */,
    PLAN_WORK_HOURS_OVERTIME FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_WORK_HOURS_OVERTIME */,
    FACT_WORK_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_WORK_DAYS */,
    FACT_WORK_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_WORK_HOURS */,
    FACT_WORK_HOURS_NIGHT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_WORK_HOURS_NIGHT */,
    FACT_WORK_HOURS_OVERTIME FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_WORK_HOURS_OVERTIME */,
    PLAN_HOLIDAYS_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_HOLIDAYS_DAYS */,
    PLAN_HOLIDAYS_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_HOLIDAYS_HOURS */,
    PLAN_HOLIDAYS_HOURS_NIGHT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_HOLIDAYS_HOURS_NIGHT */,
    PLAN_HOLIDAYS_HOURS_OVERTIME FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_HOLIDAYS_HOURS_OVERTIME */,
    FACT_HOLIDAYS_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_HOLIDAYS_DAYS */,
    FACT_HOLIDAYS_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_HOLIDAYS_HOURS */,
    FACT_HOLIDAYS_HOURS_NIGHT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_HOLIDAYS_HOURS_NIGHT */,
    FACT_HOLIDAYS_HOURS_OVERTIME FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_HOLIDAYS_HOURS_OVERTIME */,
    SALARY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY */,
    SALARY_DAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_DAY */,
    SALARY_NIGHT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_NIGHT */,
    SALARY_OVERTIME NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_OVERTIME */,
    SALARY_HOLIDAYS_DAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_HOLIDAYS_DAY */,
    SALARY_HOLIDAYS_NIGHT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_HOLIDAYS_NIGHT */,
    SALARY_HOLIDAYS_OVERTIME NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_HOLIDAYS_OVERTIME */,
    SALARY_PAID_HOLIDAYS_DAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_PAID_HOLIDAYS_DAY */,
    SALARY_PAID_HOLIDAYS_NIGHT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_PAID_HOLIDAYS_NIGHT */,
    SALARY_PIECEWORK NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_PIECEWORK */,
    SICKDAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SICKDAYS */,
    SICKDAYS_PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SICKDAYS_PAY */,
    ACCIDENT_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.ACCIDENT_DAYS */,
    ACCIDENT_PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.ACCIDENT_PAY */,
    AVERAGE_INCOME_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AVERAGE_INCOME_DAYS */,
    AVERAGE_INCOME_PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AVERAGE_INCOME_PAY */,
    FACT_AVPAY_FREE_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_FREE_DAYS */,
    FACT_AVPAY_FREE_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_FREE_HOURS */,
    FACT_AVPAY_WORK_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_WORK_DAYS */,
    FACT_AVPAY_WORKINHOLIDAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_WORKINHOLIDAYS */,
    FACT_AVPAY_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_HOURS */,
    FACT_AVPAY_HOURS_OVERTIME FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_HOURS_OVERTIME */,
    FACT_AVPAY_HOLIDAYS_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_HOLIDAYS_HOURS */,
    FACT_AVPAY_HOLIDAYS_HOURS_OVERT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_HOLIDAYS_HOURS_OVERT */,
    SALARY_AVPAY_FREE_DAYS NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_AVPAY_FREE_DAYS */,
    SALARY_AVPAY_WORK_DAYS NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_AVPAY_WORK_DAYS */,
    SALARY_AVPAY_WORK_DAYS_OVERTIME NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_AVPAY_WORK_DAYS_OVERTIME */,
    SALARY_AVPAY_HOLIDAYS NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_AVPAY_HOLIDAYS */,
    SALARY_AVPAY_HOLIDAYS_OVERTIME NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_AVPAY_HOLIDAYS_OVERTIME */,
    BUSINESS_TRIP_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.BUSINESS_TRIP_DAYS */,
    BUSINESS_TRIP_PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.BUSINESS_TRIP_PAY */,
    PAID_HOLIDAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PAID_HOLIDAYS */,
    PAID_HOLIDAYS_PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PAID_HOLIDAYS_PAY */,
    VACATION_DAYS_CURRENT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_DAYS_CURRENT */,
    VACATION_DAYS_NEXT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_DAYS_NEXT */,
    VACATION_HOURS_CURRENT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_HOURS_CURRENT */,
    VACATION_HOURS_NEXT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_HOURS_NEXT */,
    VACATION_PAY_CURRENT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_PAY_CURRENT */,
    VACATION_PAY_NEXT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_PAY_NEXT */,
    VACATION_DNS_NEXT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_DNS_NEXT */,
    VACATION_DDS_NEXT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_DDS_NEXT */,
    VACATION_IIN_NEXT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_IIN_NEXT */,
    VACATION_IIN_REDUCE_NEXT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_IIN_REDUCE_NEXT */,
    VACATION_CASH_NEXT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_CASH_NEXT */,
    VACATION_PAY_PREV NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_PAY_PREV */,
    VACATION_DNS_PREV NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_DNS_PREV */,
    VACATION_DDS_PREV NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_DDS_PREV */,
    VACATION_IIN_PREV NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_IIN_PREV */,
    VACATION_DAYS_COMP FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_DAYS_COMP */,
    VACATION_PAY_COMP NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_PAY_COMP */,
    PLUS_TAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_TAXED */,
    PLUS_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_NOTTAXED */,
    PLUS_NOSAI NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_NOSAI */,
    PLUS_AUTHORS_FEES NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_AUTHORS_FEES */,
    MINUS_BEFORE_IIN NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.MINUS_BEFORE_IIN */,
    MINUS_AFTER_IIN NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.MINUS_AFTER_IIN */,
    PLUS_PF_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_PF_NOTTAXED */,
    PLUS_PF_TAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_PF_TAXED */,
    PLUS_LI_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_LI_NOTTAXED */,
    PLUS_LI_TAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_LI_TAXED */,
    PLUS_HI_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_HI_NOTTAXED */,
    PLUS_HI_TAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_HI_TAXED */,
    PLUS_NP_TAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_NP_TAXED */,
    PLUS_NP_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_NP_NOTTAXED */,
    PLUS_NP_NOSAI NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_NP_NOSAI */,
    TOTAL_BEFORE_TAXES NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.TOTAL_BEFORE_TAXES */,
    ADJUSTED_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.ADJUSTED_AMOUNT */,
    AMOUNT_BEFORE_SN NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AMOUNT_BEFORE_SN */,
    AMOUNT_BEFORE_SN_REVERSE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AMOUNT_BEFORE_SN_REVERSE */,
    RATE_DNSN NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.RATE_DNSN */,
    RATE_DDSN NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.RATE_DDSN */,
    DNSN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.DNSN_AMOUNT */,
    DDSN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.DDSN_AMOUNT */,
    SN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SN_AMOUNT */,
    DNSN_AMOUNT_REVERSE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.DNSN_AMOUNT_REVERSE */,
    DDSN_AMOUNT_REVERSE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.DDSN_AMOUNT_REVERSE */,
    SN_MAX_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SN_MAX_AMOUNT */,
    IIN_EXEMPT_UNTAXED_MINIMUM0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_UNTAXED_MINIMUM0 */,
    IIN_EXEMPT_DEPENDANTS0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_DEPENDANTS0 */,
    IIN_EXEMPT_RETALIATION0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_RETALIATION0 */,
    IIN_EXEMPT_INVALIDITY0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_INVALIDITY0 */,
    IIN_EXEMPT_NATIONAL_MOVEMENT0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_NATIONAL_MOVEMENT0 */,
    IIN_EXEMPT_UNTAXED_MINIMUM NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_UNTAXED_MINIMUM */,
    IIN_EXEMPT_DEPENDANTS NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_DEPENDANTS */,
    IIN_EXEMPT_RETALIATION NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_RETALIATION */,
    IIN_EXEMPT_INVALIDITY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_INVALIDITY */,
    IIN_EXEMPT_NATIONAL_MOVEMENT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_NATIONAL_MOVEMENT */,
    IIN_EXEMPT_EXPENSES NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_EXPENSES */,
    IIN_EXEMPT_2TP SMALLINT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_2TP */,
    IIN_EXEMPT_20 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_20 */,
    IIN_EXEMPT_2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_2 */,
    AMOUNT_BEFORE_IIN NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AMOUNT_BEFORE_IIN */,
    AMOUNT_BEFORE_IIN_REVERSE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AMOUNT_BEFORE_IIN_REVERSE */,
    RATE_IIN NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.RATE_IIN */,
    RATE_IIN2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.RATE_IIN2 */,
    IIN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_AMOUNT */,
    IIN_AMOUNT_REVERSE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_AMOUNT_REVERSE */,
    URVN_AMAOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.URVN_AMAOUNT */,
    PLUS_NOT_PAID NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_NOT_PAID */,
    VACATION_ADVANCE_CURRENT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_ADVANCE_CURRENT */,
    VACATION_ADVANCE_NEXT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_ADVANCE_NEXT */,
    VACATION_ADVANCE_PREV NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_ADVANCE_PREV */,
    ADVANCE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.ADVANCE */,
    PAY0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PAY0 */,
    PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PAY */,
    PAYT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PAYT */,
    PAY_DATE DATE /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PAY_DATE */,
    COMMENTS VARCHAR(255) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.COMMENTS */,
    WITHHOLD_FROM_PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.WITHHOLD_FROM_PAY */,
    FORAVPAYCALC_BRUTO NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FORAVPAYCALC_BRUTO */,
    FORAVPAYCALC_PAYOUT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FORAVPAYCALC_PAYOUT */,
    FORAVPAYCALC_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FORAVPAYCALC_DAYS */,
    FORAVPAYCALC_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FORAVPAYCALC_HOURS */,
    AVPAYCALC_CALDAY NUMERIC(13,4) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AVPAYCALC_CALDAY */,
    AVPAYCALC_DAY NUMERIC(13,4) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AVPAYCALC_DAY */,
    AVPAYCALC_HOUR NUMERIC(13,4) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AVPAYCALC_HOUR */,
    DT_EDITED TIMESTAMP /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.DT_EDITED */,
    CALC_VER INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.CALC_VER */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_SALARY_SHEETS_R_HIST_02 (
    PIDSX INTEGER,
    PTIME1 TIMESTAMP,
    PTIME2 TIMESTAMP)
RETURNS (
    IDH INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.ID */,
    ID INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.ID */,
    IDS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IDS */,
    IDSX INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IDSX */,
    IDST INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IDST */,
    IS_TEMP SMALLINT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IS_TEMP */,
    TYPE_TAG SMALLINT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.TYPE_TAG */,
    IDP INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IDP */,
    IDAM INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IDAM */,
    SNR SMALLINT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SNR */,
    FNAME VARCHAR(20) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FNAME */,
    LNAME VARCHAR(20) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.LNAME */,
    POSITION_TITLE VARCHAR(50) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.POSITION_TITLE */,
    TERRITORIAL_CODE VARCHAR(20) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.TERRITORIAL_CODE */,
    CALENDAR_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.CALENDAR_DAYS */,
    CALENDAR_DAYS_USE INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.CALENDAR_DAYS_USE */,
    MONTH_WORKDAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.MONTH_WORKDAYS */,
    MONTH_WORKHOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.MONTH_WORKHOURS */,
    PLAN_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_DAYS */,
    PLAN_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_HOURS */,
    PLAN_HOURS_NIGHT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_HOURS_NIGHT */,
    PLAN_HOURS_OVERTIME FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_HOURS_OVERTIME */,
    FACT_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_DAYS */,
    FACT_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_HOURS */,
    FACT_HOURS_NIGHT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_HOURS_NIGHT */,
    FACT_HOURS_OVERTIME FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_HOURS_OVERTIME */,
    PLAN_WORK_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_WORK_DAYS */,
    PLAN_WORK_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_WORK_HOURS */,
    PLAN_WORK_HOURS_NIGHT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_WORK_HOURS_NIGHT */,
    PLAN_WORK_HOURS_OVERTIME FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_WORK_HOURS_OVERTIME */,
    FACT_WORK_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_WORK_DAYS */,
    FACT_WORK_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_WORK_HOURS */,
    FACT_WORK_HOURS_NIGHT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_WORK_HOURS_NIGHT */,
    FACT_WORK_HOURS_OVERTIME FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_WORK_HOURS_OVERTIME */,
    PLAN_HOLIDAYS_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_HOLIDAYS_DAYS */,
    PLAN_HOLIDAYS_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_HOLIDAYS_HOURS */,
    PLAN_HOLIDAYS_HOURS_NIGHT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_HOLIDAYS_HOURS_NIGHT */,
    PLAN_HOLIDAYS_HOURS_OVERTIME FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_HOLIDAYS_HOURS_OVERTIME */,
    FACT_HOLIDAYS_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_HOLIDAYS_DAYS */,
    FACT_HOLIDAYS_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_HOLIDAYS_HOURS */,
    FACT_HOLIDAYS_HOURS_NIGHT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_HOLIDAYS_HOURS_NIGHT */,
    FACT_HOLIDAYS_HOURS_OVERTIME FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_HOLIDAYS_HOURS_OVERTIME */,
    SALARY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY */,
    SALARY_DAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_DAY */,
    SALARY_NIGHT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_NIGHT */,
    SALARY_OVERTIME NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_OVERTIME */,
    SALARY_HOLIDAYS_DAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_HOLIDAYS_DAY */,
    SALARY_HOLIDAYS_NIGHT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_HOLIDAYS_NIGHT */,
    SALARY_HOLIDAYS_OVERTIME NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_HOLIDAYS_OVERTIME */,
    SALARY_PAID_HOLIDAYS_DAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_PAID_HOLIDAYS_DAY */,
    SALARY_PAID_HOLIDAYS_NIGHT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_PAID_HOLIDAYS_NIGHT */,
    SALARY_PIECEWORK NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_PIECEWORK */,
    SICKDAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SICKDAYS */,
    SICKDAYS_PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SICKDAYS_PAY */,
    ACCIDENT_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.ACCIDENT_DAYS */,
    ACCIDENT_PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.ACCIDENT_PAY */,
    AVERAGE_INCOME_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AVERAGE_INCOME_DAYS */,
    AVERAGE_INCOME_PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AVERAGE_INCOME_PAY */,
    FACT_AVPAY_FREE_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_FREE_DAYS */,
    FACT_AVPAY_FREE_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_FREE_HOURS */,
    FACT_AVPAY_WORK_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_WORK_DAYS */,
    FACT_AVPAY_WORKINHOLIDAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_WORKINHOLIDAYS */,
    FACT_AVPAY_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_HOURS */,
    FACT_AVPAY_HOURS_OVERTIME FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_HOURS_OVERTIME */,
    FACT_AVPAY_HOLIDAYS_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_HOLIDAYS_HOURS */,
    FACT_AVPAY_HOLIDAYS_HOURS_OVERT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_HOLIDAYS_HOURS_OVERT */,
    SALARY_AVPAY_FREE_DAYS NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_AVPAY_FREE_DAYS */,
    SALARY_AVPAY_WORK_DAYS NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_AVPAY_WORK_DAYS */,
    SALARY_AVPAY_WORK_DAYS_OVERTIME NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_AVPAY_WORK_DAYS_OVERTIME */,
    SALARY_AVPAY_HOLIDAYS NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_AVPAY_HOLIDAYS */,
    SALARY_AVPAY_HOLIDAYS_OVERTIME NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_AVPAY_HOLIDAYS_OVERTIME */,
    BUSINESS_TRIP_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.BUSINESS_TRIP_DAYS */,
    BUSINESS_TRIP_PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.BUSINESS_TRIP_PAY */,
    PAID_HOLIDAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PAID_HOLIDAYS */,
    PAID_HOLIDAYS_PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PAID_HOLIDAYS_PAY */,
    VACATION_DAYS_CURRENT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_DAYS_CURRENT */,
    VACATION_DAYS_NEXT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_DAYS_NEXT */,
    VACATION_HOURS_CURRENT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_HOURS_CURRENT */,
    VACATION_HOURS_NEXT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_HOURS_NEXT */,
    VACATION_PAY_CURRENT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_PAY_CURRENT */,
    VACATION_PAY_NEXT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_PAY_NEXT */,
    VACATION_DNS_NEXT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_DNS_NEXT */,
    VACATION_DDS_NEXT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_DDS_NEXT */,
    VACATION_IIN_NEXT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_IIN_NEXT */,
    VACATION_IIN_REDUCE_NEXT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_IIN_REDUCE_NEXT */,
    VACATION_CASH_NEXT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_CASH_NEXT */,
    VACATION_PAY_PREV NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_PAY_PREV */,
    VACATION_DNS_PREV NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_DNS_PREV */,
    VACATION_DDS_PREV NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_DDS_PREV */,
    VACATION_IIN_PREV NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_IIN_PREV */,
    VACATION_DAYS_COMP FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_DAYS_COMP */,
    VACATION_PAY_COMP NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_PAY_COMP */,
    PLUS_TAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_TAXED */,
    PLUS_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_NOTTAXED */,
    PLUS_NOSAI NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_NOSAI */,
    PLUS_AUTHORS_FEES NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_AUTHORS_FEES */,
    MINUS_BEFORE_IIN NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.MINUS_BEFORE_IIN */,
    MINUS_AFTER_IIN NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.MINUS_AFTER_IIN */,
    PLUS_PF_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_PF_NOTTAXED */,
    PLUS_PF_TAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_PF_TAXED */,
    PLUS_LI_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_LI_NOTTAXED */,
    PLUS_LI_TAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_LI_TAXED */,
    PLUS_HI_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_HI_NOTTAXED */,
    PLUS_HI_TAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_HI_TAXED */,
    PLUS_NP_TAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_NP_TAXED */,
    PLUS_NP_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_NP_NOTTAXED */,
    PLUS_NP_NOSAI NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_NP_NOSAI */,
    TOTAL_BEFORE_TAXES NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.TOTAL_BEFORE_TAXES */,
    ADJUSTED_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.ADJUSTED_AMOUNT */,
    AMOUNT_BEFORE_SN NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AMOUNT_BEFORE_SN */,
    AMOUNT_BEFORE_SN_REVERSE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AMOUNT_BEFORE_SN_REVERSE */,
    RATE_DNSN NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.RATE_DNSN */,
    RATE_DDSN NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.RATE_DDSN */,
    DNSN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.DNSN_AMOUNT */,
    DDSN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.DDSN_AMOUNT */,
    SN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SN_AMOUNT */,
    DNSN_AMOUNT_REVERSE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.DNSN_AMOUNT_REVERSE */,
    DDSN_AMOUNT_REVERSE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.DDSN_AMOUNT_REVERSE */,
    SN_MAX_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SN_MAX_AMOUNT */,
    IIN_EXEMPT_UNTAXED_MINIMUM0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_UNTAXED_MINIMUM0 */,
    IIN_EXEMPT_DEPENDANTS0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_DEPENDANTS0 */,
    IIN_EXEMPT_RETALIATION0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_RETALIATION0 */,
    IIN_EXEMPT_INVALIDITY0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_INVALIDITY0 */,
    IIN_EXEMPT_NATIONAL_MOVEMENT0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_NATIONAL_MOVEMENT0 */,
    IIN_EXEMPT_UNTAXED_MINIMUM NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_UNTAXED_MINIMUM */,
    IIN_EXEMPT_DEPENDANTS NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_DEPENDANTS */,
    IIN_EXEMPT_RETALIATION NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_RETALIATION */,
    IIN_EXEMPT_INVALIDITY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_INVALIDITY */,
    IIN_EXEMPT_NATIONAL_MOVEMENT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_NATIONAL_MOVEMENT */,
    IIN_EXEMPT_EXPENSES NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_EXPENSES */,
    IIN_EXEMPT_2TP SMALLINT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_2TP */,
    IIN_EXEMPT_20 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_20 */,
    IIN_EXEMPT_2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_2 */,
    AMOUNT_BEFORE_IIN NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AMOUNT_BEFORE_IIN */,
    AMOUNT_BEFORE_IIN_REVERSE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AMOUNT_BEFORE_IIN_REVERSE */,
    RATE_IIN NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.RATE_IIN */,
    RATE_IIN2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.RATE_IIN2 */,
    IIN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_AMOUNT */,
    IIN_AMOUNT_REVERSE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_AMOUNT_REVERSE */,
    URVN_AMAOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.URVN_AMAOUNT */,
    PLUS_NOT_PAID NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_NOT_PAID */,
    VACATION_ADVANCE_CURRENT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_ADVANCE_CURRENT */,
    VACATION_ADVANCE_NEXT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_ADVANCE_NEXT */,
    VACATION_ADVANCE_PREV NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_ADVANCE_PREV */,
    ADVANCE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.ADVANCE */,
    PAY0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PAY0 */,
    PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PAY */,
    PAYT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PAYT */,
    PAY_DATE DATE /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PAY_DATE */,
    COMMENTS VARCHAR(255) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.COMMENTS */,
    WITHHOLD_FROM_PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.WITHHOLD_FROM_PAY */,
    FORAVPAYCALC_BRUTO NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FORAVPAYCALC_BRUTO */,
    FORAVPAYCALC_PAYOUT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FORAVPAYCALC_PAYOUT */,
    FORAVPAYCALC_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FORAVPAYCALC_DAYS */,
    FORAVPAYCALC_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FORAVPAYCALC_HOURS */,
    AVPAYCALC_CALDAY NUMERIC(13,4) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AVPAYCALC_CALDAY */,
    AVPAYCALC_DAY NUMERIC(13,4) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AVPAYCALC_DAY */,
    AVPAYCALC_HOUR NUMERIC(13,4) /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AVPAYCALC_HOUR */,
    DT_EDITED TIMESTAMP /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.DT_EDITED */,
    CALC_VER INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.CALC_VER */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_SALARY_SHEETS_R_PER_01 (
    PYR1 INTEGER,
    PMT1 INTEGER,
    PYR2 INTEGER,
    PMT2 INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.ID */,
    IDS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.IDS */,
    IDSX INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.IDSX */,
    IDST INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.IDST */,
    IS_TEMP SMALLINT /* TYPE OF COLUMN A_SALARY_SHEETS_R.IS_TEMP */,
    TYPE_TAG SMALLINT /* TYPE OF COLUMN A_SALARY_SHEETS_R.TYPE_TAG */,
    IDP INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.IDP */,
    IDAM INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.IDAM */,
    SNR SMALLINT /* TYPE OF COLUMN A_SALARY_SHEETS_R.SNR */,
    FNAME VARCHAR(20) /* TYPE OF COLUMN A_SALARY_SHEETS_R.FNAME */,
    LNAME VARCHAR(20) /* TYPE OF COLUMN A_SALARY_SHEETS_R.LNAME */,
    POSITION_TITLE VARCHAR(50) /* TYPE OF COLUMN A_SALARY_SHEETS_R.POSITION_TITLE */,
    TERRITORIAL_CODE VARCHAR(20) /* TYPE OF COLUMN A_SALARY_SHEETS_R.TERRITORIAL_CODE */,
    CALENDAR_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.CALENDAR_DAYS */,
    CALENDAR_DAYS_USE INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.CALENDAR_DAYS_USE */,
    MONTH_WORKDAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.MONTH_WORKDAYS */,
    MONTH_WORKHOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.MONTH_WORKHOURS */,
    PLAN_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_DAYS */,
    PLAN_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_HOURS */,
    PLAN_HOURS_NIGHT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_HOURS_NIGHT */,
    PLAN_HOURS_OVERTIME FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_HOURS_OVERTIME */,
    FACT_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_DAYS */,
    FACT_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_HOURS */,
    FACT_HOURS_NIGHT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_HOURS_NIGHT */,
    FACT_HOURS_OVERTIME FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_HOURS_OVERTIME */,
    PLAN_WORK_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_WORK_DAYS */,
    PLAN_WORK_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_WORK_HOURS */,
    PLAN_WORK_HOURS_NIGHT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_WORK_HOURS_NIGHT */,
    PLAN_WORK_HOURS_OVERTIME FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_WORK_HOURS_OVERTIME */,
    FACT_WORK_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_WORK_DAYS */,
    FACT_WORK_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_WORK_HOURS */,
    FACT_WORK_HOURS_NIGHT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_WORK_HOURS_NIGHT */,
    FACT_WORK_HOURS_OVERTIME FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_WORK_HOURS_OVERTIME */,
    PLAN_HOLIDAYS_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_HOLIDAYS_DAYS */,
    PLAN_HOLIDAYS_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_HOLIDAYS_HOURS */,
    PLAN_HOLIDAYS_HOURS_NIGHT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_HOLIDAYS_HOURS_NIGHT */,
    PLAN_HOLIDAYS_HOURS_OVERTIME FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_HOLIDAYS_HOURS_OVERTIME */,
    FACT_HOLIDAYS_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_HOLIDAYS_DAYS */,
    FACT_HOLIDAYS_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_HOLIDAYS_HOURS */,
    FACT_HOLIDAYS_HOURS_NIGHT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_HOLIDAYS_HOURS_NIGHT */,
    FACT_HOLIDAYS_HOURS_OVERTIME FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_HOLIDAYS_HOURS_OVERTIME */,
    SALARY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY */,
    SALARY_DAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY_DAY */,
    SALARY_NIGHT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY_NIGHT */,
    SALARY_OVERTIME NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY_OVERTIME */,
    SALARY_HOLIDAYS_DAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY_HOLIDAYS_DAY */,
    SALARY_HOLIDAYS_NIGHT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY_HOLIDAYS_NIGHT */,
    SALARY_HOLIDAYS_OVERTIME NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY_HOLIDAYS_OVERTIME */,
    SALARY_PAID_HOLIDAYS_DAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY_PAID_HOLIDAYS_DAY */,
    SALARY_PAID_HOLIDAYS_NIGHT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY_PAID_HOLIDAYS_NIGHT */,
    SALARY_PIECEWORK NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY_PIECEWORK */,
    SICKDAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.SICKDAYS */,
    SICKDAYS_PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SICKDAYS_PAY */,
    ACCIDENT_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.ACCIDENT_DAYS */,
    ACCIDENT_PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.ACCIDENT_PAY */,
    AVERAGE_INCOME_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.AVERAGE_INCOME_DAYS */,
    AVERAGE_INCOME_PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.AVERAGE_INCOME_PAY */,
    FACT_AVPAY_FREE_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_AVPAY_FREE_DAYS */,
    FACT_AVPAY_FREE_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_AVPAY_FREE_HOURS */,
    FACT_AVPAY_WORK_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_AVPAY_WORK_DAYS */,
    FACT_AVPAY_WORKINHOLIDAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_AVPAY_WORKINHOLIDAYS */,
    FACT_AVPAY_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_AVPAY_HOURS */,
    FACT_AVPAY_HOURS_OVERTIME FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_AVPAY_HOURS_OVERTIME */,
    FACT_AVPAY_HOLIDAYS_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_AVPAY_HOLIDAYS_HOURS */,
    FACT_AVPAY_HOLIDAYS_HOURS_OVERT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_AVPAY_HOLIDAYS_HOURS_OVERT */,
    SALARY_AVPAY_FREE_DAYS NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY_AVPAY_FREE_DAYS */,
    SALARY_AVPAY_WORK_DAYS NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY_AVPAY_WORK_DAYS */,
    SALARY_AVPAY_WORK_DAYS_OVERTIME NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY_AVPAY_WORK_DAYS_OVERTIME */,
    SALARY_AVPAY_HOLIDAYS NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY_AVPAY_HOLIDAYS */,
    SALARY_AVPAY_HOLIDAYS_OVERTIME NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY_AVPAY_HOLIDAYS_OVERTIME */,
    BUSINESS_TRIP_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.BUSINESS_TRIP_DAYS */,
    BUSINESS_TRIP_PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.BUSINESS_TRIP_PAY */,
    PAID_HOLIDAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAID_HOLIDAYS */,
    PAID_HOLIDAYS_PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAID_HOLIDAYS_PAY */,
    VACATION_DAYS_CURRENT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_DAYS_CURRENT */,
    VACATION_DAYS_NEXT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_DAYS_NEXT */,
    VACATION_HOURS_CURRENT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_HOURS_CURRENT */,
    VACATION_HOURS_NEXT FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_HOURS_NEXT */,
    VACATION_PAY_CURRENT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_PAY_CURRENT */,
    VACATION_PAY_NEXT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_PAY_NEXT */,
    VACATION_DNS_NEXT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_DNS_NEXT */,
    VACATION_DDS_NEXT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_DDS_NEXT */,
    VACATION_IIN_NEXT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_IIN_NEXT */,
    VACATION_IIN_REDUCE_NEXT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_IIN_REDUCE_NEXT */,
    VACATION_CASH_NEXT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_CASH_NEXT */,
    VACATION_PAY_PREV NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_PAY_PREV */,
    VACATION_DNS_PREV NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_DNS_PREV */,
    VACATION_DDS_PREV NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_DDS_PREV */,
    VACATION_IIN_PREV NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_IIN_PREV */,
    VACATION_DAYS_COMP FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_DAYS_COMP */,
    VACATION_PAY_COMP NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_PAY_COMP */,
    PLUS_TAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_TAXED */,
    PLUS_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOTTAXED */,
    PLUS_NOSAI NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOSAI */,
    PLUS_AUTHORS_FEES NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_AUTHORS_FEES */,
    MINUS_BEFORE_IIN NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.MINUS_BEFORE_IIN */,
    MINUS_AFTER_IIN NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.MINUS_AFTER_IIN */,
    PLUS_PF_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_PF_NOTTAXED */,
    PLUS_PF_TAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_PF_TAXED */,
    PLUS_LI_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_LI_NOTTAXED */,
    PLUS_LI_TAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_LI_TAXED */,
    PLUS_HI_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_HI_NOTTAXED */,
    PLUS_HI_TAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_HI_TAXED */,
    PLUS_NP_TAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NP_TAXED */,
    PLUS_NP_NOTTAXED NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NP_NOTTAXED */,
    PLUS_NP_NOSAI NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NP_NOSAI */,
    TOTAL_BEFORE_TAXES NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.TOTAL_BEFORE_TAXES */,
    ADJUSTED_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.ADJUSTED_AMOUNT */,
    AMOUNT_BEFORE_SN NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.AMOUNT_BEFORE_SN */,
    AMOUNT_BEFORE_SN_REVERSE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.AMOUNT_BEFORE_SN_REVERSE */,
    RATE_DNSN NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.RATE_DNSN */,
    RATE_DDSN NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.RATE_DDSN */,
    DNSN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.DNSN_AMOUNT */,
    DDSN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.DDSN_AMOUNT */,
    SN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SN_AMOUNT */,
    DNSN_AMOUNT_REVERSE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.DNSN_AMOUNT_REVERSE */,
    DDSN_AMOUNT_REVERSE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.DDSN_AMOUNT_REVERSE */,
    SN_MAX_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.SN_MAX_AMOUNT */,
    IIN_EXEMPT_UNTAXED_MINIMUM0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM0 */,
    IIN_EXEMPT_DEPENDANTS0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS0 */,
    IIN_EXEMPT_RETALIATION0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_RETALIATION0 */,
    IIN_EXEMPT_INVALIDITY0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_INVALIDITY0 */,
    IIN_EXEMPT_NATIONAL_MOVEMENT0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_NATIONAL_MOVEMENT0 */,
    IIN_EXEMPT_UNTAXED_MINIMUM NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM */,
    IIN_EXEMPT_DEPENDANTS NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS */,
    IIN_EXEMPT_RETALIATION NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_RETALIATION */,
    IIN_EXEMPT_INVALIDITY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_INVALIDITY */,
    IIN_EXEMPT_NATIONAL_MOVEMENT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_NATIONAL_MOVEMENT */,
    IIN_EXEMPT_EXPENSES NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_EXPENSES */,
    IIN_EXEMPT_2TP SMALLINT /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2TP */,
    IIN_EXEMPT_20 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_20 */,
    IIN_EXEMPT_2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2 */,
    AMOUNT_BEFORE_IIN NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.AMOUNT_BEFORE_IIN */,
    AMOUNT_BEFORE_IIN_REVERSE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.AMOUNT_BEFORE_IIN_REVERSE */,
    RATE_IIN NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.RATE_IIN */,
    RATE_IIN2 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.RATE_IIN2 */,
    IIN_AMOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT */,
    IIN_AMOUNT_REVERSE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT_REVERSE */,
    URVN_AMAOUNT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.URVN_AMAOUNT */,
    PLUS_NOT_PAID NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOT_PAID */,
    VACATION_ADVANCE_CURRENT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_ADVANCE_CURRENT */,
    VACATION_ADVANCE_NEXT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_ADVANCE_NEXT */,
    VACATION_ADVANCE_PREV NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_ADVANCE_PREV */,
    ADVANCE NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.ADVANCE */,
    PAY0 NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAY0 */,
    PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAY */,
    PAYT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAYT */,
    PAY_DATE DATE /* TYPE OF COLUMN A_SALARY_SHEETS_R.PAY_DATE */,
    COMMENTS VARCHAR(255) /* TYPE OF COLUMN A_SALARY_SHEETS_R.COMMENTS */,
    WITHHOLD_FROM_PAY NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.WITHHOLD_FROM_PAY */,
    FORAVPAYCALC_BRUTO NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.FORAVPAYCALC_BRUTO */,
    FORAVPAYCALC_PAYOUT NUMERIC(15,2) /* TYPE OF COLUMN A_SALARY_SHEETS_R.FORAVPAYCALC_PAYOUT */,
    FORAVPAYCALC_DAYS INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.FORAVPAYCALC_DAYS */,
    FORAVPAYCALC_HOURS FLOAT /* TYPE OF COLUMN A_SALARY_SHEETS_R.FORAVPAYCALC_HOURS */,
    AVPAYCALC_CALDAY NUMERIC(13,4) /* TYPE OF COLUMN A_SALARY_SHEETS_R.AVPAYCALC_CALDAY */,
    AVPAYCALC_DAY NUMERIC(13,4) /* TYPE OF COLUMN A_SALARY_SHEETS_R.AVPAYCALC_DAY */,
    AVPAYCALC_HOUR NUMERIC(13,4) /* TYPE OF COLUMN A_SALARY_SHEETS_R.AVPAYCALC_HOUR */,
    DT_EDITED TIMESTAMP /* TYPE OF COLUMN A_SALARY_SHEETS_R.DT_EDITED */,
    CALC_VER INTEGER /* TYPE OF COLUMN A_SALARY_SHEETS_R.CALC_VER */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_STATS_01 (
    PDT1 DATE,
    PDT2 DATE)
RETURNS (
    HIRED INTEGER,
    FIRED INTEGER,
    WORKING INTEGER,
    POS_ADDED INTEGER,
    POS_REMOVED INTEGER,
    POS_NO_TIME_TEMPL INTEGER,
    POS_NO_TIME INTEGER,
    POS_NO_SALARY_TEMPL INTEGER,
    POS_NO_SALARY INTEGER,
    POS_NO_PAY_TEMPL INTEGER,
    POS_NO_PAY INTEGER,
    SALARY_PAY DOM_MONEY,
    PAID DOM_MONEY,
    SALARY_PAY_PAID DOM_MONEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_STATS_02 (
    PDT1 DATE,
    PDT2 DATE)
RETURNS (
    IDP INTEGER,
    IDAM INTEGER,
    FNAME VARCHAR(20),
    LNAME VARCHAR(20),
    POSTITLE VARCHAR(50),
    TAG INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_TIMESHEET_01 (
    PID INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN A_TIMESHEET.ID */,
    IDP INTEGER /* TYPE OF COLUMN A_TIMESHEET.IDP */,
    IDL INTEGER /* TYPE OF COLUMN A_TIMESHEET.IDL */,
    SNR SMALLINT /* TYPE OF COLUMN A_TIMESHEET.SNR */,
    PERID INTEGER /* TYPE OF COLUMN A_TIMESHEET.PERID */,
    AMID INTEGER /* TYPE OF COLUMN A_TIMESHEET.AMID */,
    YR INTEGER /* TYPE OF COLUMN A_TIMESHEET.YR */,
    MT INTEGER /* TYPE OF COLUMN A_TIMESHEET.MT */,
    KIND1 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.KIND1 */,
    KIND2 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.KIND2 */,
    V1 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V1 */,
    V2 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V2 */,
    V3 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V3 */,
    V4 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V4 */,
    V5 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V5 */,
    V6 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V6 */,
    V7 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V7 */,
    V8 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V8 */,
    V9 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V9 */,
    V10 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V10 */,
    V11 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V11 */,
    V12 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V12 */,
    V13 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V13 */,
    V14 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V14 */,
    V15 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V15 */,
    V16 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V16 */,
    V17 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V17 */,
    V18 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V18 */,
    V19 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V19 */,
    V20 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V20 */,
    V21 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V21 */,
    V22 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V22 */,
    V23 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V23 */,
    V24 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V24 */,
    V25 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V25 */,
    V26 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V26 */,
    V27 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V27 */,
    V28 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V28 */,
    V29 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V29 */,
    V30 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V30 */,
    V31 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V31 */,
    K1 FLOAT /* TYPE OF COLUMN A_TIMESHEET.K1 */,
    D1 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D1 */,
    D2 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D2 */,
    D3 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D3 */,
    D4 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D4 */,
    D5 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D5 */,
    D6 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D6 */,
    D7 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D7 */,
    D8 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D8 */,
    D9 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D9 */,
    D10 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D10 */,
    D11 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D11 */,
    D12 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D12 */,
    D13 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D13 */,
    D14 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D14 */,
    D15 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D15 */,
    D16 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D16 */,
    D17 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D17 */,
    D18 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D18 */,
    D19 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D19 */,
    D20 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D20 */,
    D21 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D21 */,
    D22 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D22 */,
    D23 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D23 */,
    D24 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D24 */,
    D25 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D25 */,
    D26 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D26 */,
    D27 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D27 */,
    D28 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D28 */,
    D29 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D29 */,
    D30 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D30 */,
    D31 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D31 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_TIMESHEET_LISTS_01 (
    PYR1 INTEGER,
    PMT1 INTEGER,
    PYR2 INTEGER,
    PMT2 INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN A_TIMESHEET_LISTS.ID */,
    YR INTEGER /* TYPE OF COLUMN A_TIMESHEET_LISTS.YR */,
    MT INTEGER /* TYPE OF COLUMN A_TIMESHEET_LISTS.MT */,
    SNR SMALLINT /* TYPE OF COLUMN A_TIMESHEET_LISTS.SNR */,
    DESCR VARCHAR(50) /* TYPE OF COLUMN A_TIMESHEET_LISTS.DESCR */,
    IDSH INTEGER /* TYPE OF COLUMN A_TIMESHEET_LISTS.IDSH */,
    DEP VARCHAR(15) /* TYPE OF COLUMN A_TIMESHEET_LISTS.DEP */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_TIMESHEET_LISTS_R_01 (
    PYR1 INTEGER,
    PMT1 INTEGER,
    PYR2 INTEGER,
    PMT2 INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN A_TIMESHEET_LISTS_R.ID */,
    IDS INTEGER /* TYPE OF COLUMN A_TIMESHEET_LISTS_R.IDS */,
    IDP INTEGER /* TYPE OF COLUMN A_TIMESHEET_LISTS_R.IDP */,
    IDAM INTEGER /* TYPE OF COLUMN A_TIMESHEET_LISTS_R.IDAM */,
    IDPL INTEGER /* TYPE OF COLUMN A_TIMESHEET_LISTS_R.IDPL */,
    SNR SMALLINT /* TYPE OF COLUMN A_TIMESHEET_LISTS_R.SNR */,
    PLAN_TYPE SMALLINT /* TYPE OF COLUMN A_TIMESHEET_LISTS_R.PLAN_TYPE */,
    NIGHT SMALLINT /* TYPE OF COLUMN A_TIMESHEET_LISTS_R.NIGHT */,
    OVERTIME SMALLINT /* TYPE OF COLUMN A_TIMESHEET_LISTS_R.OVERTIME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_A_TIMESHEET_PER_01 (
    PYR1 INTEGER,
    PMT1 INTEGER,
    PYR2 INTEGER,
    PMT2 INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN A_TIMESHEET.ID */,
    IDP INTEGER /* TYPE OF COLUMN A_TIMESHEET.IDP */,
    IDL INTEGER /* TYPE OF COLUMN A_TIMESHEET.IDL */,
    SNR SMALLINT /* TYPE OF COLUMN A_TIMESHEET.SNR */,
    PERID INTEGER /* TYPE OF COLUMN A_TIMESHEET.PERID */,
    AMID INTEGER /* TYPE OF COLUMN A_TIMESHEET.AMID */,
    YR INTEGER /* TYPE OF COLUMN A_TIMESHEET.YR */,
    MT INTEGER /* TYPE OF COLUMN A_TIMESHEET.MT */,
    KIND1 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.KIND1 */,
    KIND2 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.KIND2 */,
    V1 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V1 */,
    V2 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V2 */,
    V3 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V3 */,
    V4 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V4 */,
    V5 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V5 */,
    V6 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V6 */,
    V7 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V7 */,
    V8 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V8 */,
    V9 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V9 */,
    V10 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V10 */,
    V11 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V11 */,
    V12 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V12 */,
    V13 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V13 */,
    V14 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V14 */,
    V15 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V15 */,
    V16 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V16 */,
    V17 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V17 */,
    V18 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V18 */,
    V19 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V19 */,
    V20 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V20 */,
    V21 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V21 */,
    V22 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V22 */,
    V23 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V23 */,
    V24 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V24 */,
    V25 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V25 */,
    V26 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V26 */,
    V27 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V27 */,
    V28 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V28 */,
    V29 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V29 */,
    V30 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V30 */,
    V31 FLOAT /* TYPE OF COLUMN A_TIMESHEET.V31 */,
    K1 FLOAT /* TYPE OF COLUMN A_TIMESHEET.K1 */,
    D1 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D1 */,
    D2 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D2 */,
    D3 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D3 */,
    D4 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D4 */,
    D5 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D5 */,
    D6 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D6 */,
    D7 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D7 */,
    D8 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D8 */,
    D9 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D9 */,
    D10 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D10 */,
    D11 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D11 */,
    D12 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D12 */,
    D13 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D13 */,
    D14 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D14 */,
    D15 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D15 */,
    D16 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D16 */,
    D17 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D17 */,
    D18 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D18 */,
    D19 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D19 */,
    D20 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D20 */,
    D21 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D21 */,
    D22 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D22 */,
    D23 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D23 */,
    D24 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D24 */,
    D25 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D25 */,
    D26 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D26 */,
    D27 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D27 */,
    D28 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D28 */,
    D29 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D29 */,
    D30 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D30 */,
    D31 SMALLINT /* TYPE OF COLUMN A_TIMESHEET.D31 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_BAL0_ID
RETURNS (
    NEXTID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_BAL0_IDA
RETURNS (
    NEXTID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_BALA2_ID
RETURNS (
    NEXTID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_BALA3_ID
RETURNS (
    NEXTID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_CURRCHECK_01 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15),
    PCUR VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN F_ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN F_ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN F_ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN F_ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_DIFF_01 (
    PDOCID INTEGER)
RETURNS (
    IDL INTEGER /* TYPE OF COLUMN F_LOPSD.IDL */,
    ID INTEGER /* TYPE OF COLUMN F_LOPSD.ID */,
    ZDT TIMESTAMP /* TYPE OF COLUMN F_LOPSD.ZDT */,
    DTLD TIMESTAMP /* TYPE OF COLUMN F_LOPSD.DTLD */,
    ODT TIMESTAMP /* TYPE OF COLUMN F_LOPSD.ODT */,
    USL VARCHAR(15) /* TYPE OF COLUMN F_LOPSD.USL */,
    DETE DATE /* TYPE OF COLUMN F_LOPSD.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_LOPSD.NRX */,
    ZNR INTEGER /* TYPE OF COLUMN F_LOPSD.ZNR */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_LOPSD.DOCTYP */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_LOPSD.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_LOPSD.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_LOPSD.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN F_LOPSD.CLID2 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_LOPSD.DESCR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_LOPSD.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN F_LOPSD.PVN */,
    ZU VARCHAR(20) /* TYPE OF COLUMN F_LOPSD.ZU */,
    TPL INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_DIFF_02 (
    PDOCID INTEGER)
RETURNS (
    IDL INTEGER /* TYPE OF COLUMN F_LOPS.IDL */,
    DOCID INTEGER /* TYPE OF COLUMN F_LOPS.DOCID */,
    ID INTEGER /* TYPE OF COLUMN F_LOPS.ID */,
    DTL TIMESTAMP /* TYPE OF COLUMN F_LOPS.DTL */,
    DTLD TIMESTAMP /* TYPE OF COLUMN F_LOPS.DTLD */,
    ODT TIMESTAMP /* TYPE OF COLUMN F_LOPS.ODT */,
    USL VARCHAR(15) /* TYPE OF COLUMN F_LOPS.USL */,
    AC11 VARCHAR(8) /* TYPE OF COLUMN F_LOPS.AC11 */,
    AC12 VARCHAR(8) /* TYPE OF COLUMN F_LOPS.AC12 */,
    AC13 VARCHAR(5) /* TYPE OF COLUMN F_LOPS.AC13 */,
    AC14 VARCHAR(8) /* TYPE OF COLUMN F_LOPS.AC14 */,
    AC15 VARCHAR(5) /* TYPE OF COLUMN F_LOPS.AC15 */,
    AC21 VARCHAR(8) /* TYPE OF COLUMN F_LOPS.AC21 */,
    AC22 VARCHAR(8) /* TYPE OF COLUMN F_LOPS.AC22 */,
    AC23 VARCHAR(5) /* TYPE OF COLUMN F_LOPS.AC23 */,
    AC24 VARCHAR(8) /* TYPE OF COLUMN F_LOPS.AC24 */,
    AC25 VARCHAR(5) /* TYPE OF COLUMN F_LOPS.AC25 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_LOPS.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_LOPS.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_LOPS.SUMM */,
    QV FLOAT /* TYPE OF COLUMN F_LOPS.QV */,
    TPL INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_DIFF_11 (
    PDATE1 DATE,
    PDATE2 DATE,
    PDATE3 DATE)
RETURNS (
    IDL1 INTEGER /* TYPE OF COLUMN F_LOPSD.IDL */,
    IDL2 INTEGER /* TYPE OF COLUMN F_LOPS.IDL */,
    DOCID INTEGER /* TYPE OF COLUMN F_LOPSD.ID */,
    ROWID INTEGER /* TYPE OF COLUMN F_LOPS.ID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_DIFF_12 (
    PDATE1 DATE,
    PDATE2 DATE,
    PDATE3 DATE,
    PCLID VARCHAR(15),
    PAC1 VARCHAR(8),
    PAC2 VARCHAR(8),
    PAC3 VARCHAR(5),
    PAC4 VARCHAR(8),
    PAC5 VARCHAR(5))
RETURNS (
    TP INTEGER,
    DOCID INTEGER /* TYPE OF COLUMN F_OPS.DOCID */,
    ROWID INTEGER /* TYPE OF COLUMN F_OPS.ID */,
    DOCDTL TIMESTAMP,
    DOCDTLD TIMESTAMP,
    DOCODT TIMESTAMP,
    ROWDTL TIMESTAMP,
    ROWDTLD TIMESTAMP,
    ROWODT TIMESTAMP,
    DETE DATE /* TYPE OF COLUMN F_OPSD.DETE */,
    ZNR INTEGER /* TYPE OF COLUMN F_OPSD.ZNR */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_OPSD.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_OPSD.DOCTYP */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_OPSD.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_OPSD.DOCNR */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN F_DOCTYP.ID1 */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_OPSD.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN F_OPSD.CLID2 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_OPSD.DESCR */,
    DOCSUMM NUMERIC(15,2) /* TYPE OF COLUMN F_OPSD.SUMM */,
    DOCPVN NUMERIC(15,2) /* TYPE OF COLUMN F_OPSD.PVN */,
    AC11 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC11 */,
    AC12 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC12 */,
    AC13 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC13 */,
    AC14 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC14 */,
    AC15 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC15 */,
    AC21 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC21 */,
    AC22 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC22 */,
    AC23 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC23 */,
    AC24 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC24 */,
    AC25 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC25 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_OPS.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_OPS.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_OPS.SUMM */,
    QV FLOAT /* TYPE OF COLUMN F_OPS.QV */,
    DESCR2 VARCHAR(50) /* TYPE OF COLUMN F_OPS.DESCR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_DOCS0_ID
RETURNS (
    NEXTID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_FIXLOPSODT
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_F_FIXOPSDATES
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_F_LINKEDDOCS_1 (
    PSD DATE,
    PED DATE,
    PCLID VARCHAR(15),
    PDOCNR VARCHAR(15))
RETURNS (
    ID INTEGER,
    DETE DATE,
    CLID VARCHAR(15),
    DOCTYP VARCHAR(10),
    DOCST VARCHAR(6),
    DOCNR VARCHAR(15),
    DESCR VARCHAR(80),
    SUMM NUMERIC(15,4),
    PVN NUMERIC(15,4))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_LINKEDDOCS_2 (
    PSD DATE,
    PED DATE,
    PCLID VARCHAR(15),
    PDOCNR VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_OPS.ID */,
    DOCID INTEGER /* TYPE OF COLUMN F_OPS.DOCID */,
    DESCR VARCHAR(50) /* TYPE OF COLUMN F_OPS.DESCR */,
    AC11 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC11 */,
    AC12 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC12 */,
    AC13 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC13 */,
    AC14 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC14 */,
    AC15 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC15 */,
    AC21 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC21 */,
    AC22 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC22 */,
    AC23 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC23 */,
    AC24 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC24 */,
    AC25 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC25 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_OPS.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_OPS.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_OPS.SUMM */,
    QV FLOAT /* TYPE OF COLUMN F_OPS.QV */,
    NL SMALLINT /* TYPE OF COLUMN F_OPS.NL */,
    ZDT TIMESTAMP /* TYPE OF COLUMN F_OPS.ZDT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_OPS_DELETE (
    ORIGINAL_ID INTEGER,
    ORIGINAL_DOCID INTEGER,
    ISNULL_DESCR INTEGER,
    ORIGINAL_DESCR VARCHAR(50),
    ORIGINAL_AC11 VARCHAR(8),
    ISNULL_AC12 INTEGER,
    ORIGINAL_AC12 VARCHAR(8),
    ISNULL_AC13 INTEGER,
    ORIGINAL_AC13 VARCHAR(5),
    ISNULL_AC14 INTEGER,
    ORIGINAL_AC14 VARCHAR(8),
    ISNULL_AC15 INTEGER,
    ORIGINAL_AC15 VARCHAR(5),
    ORIGINAL_AC21 VARCHAR(8),
    ISNULL_AC22 INTEGER,
    ORIGINAL_AC22 VARCHAR(8),
    ISNULL_AC23 INTEGER,
    ORIGINAL_AC23 VARCHAR(5),
    ISNULL_AC24 INTEGER,
    ORIGINAL_AC24 VARCHAR(8),
    ISNULL_AC25 INTEGER,
    ORIGINAL_AC25 VARCHAR(5),
    ORIGINAL_SUMMC NUMERIC(15,4),
    ORIGINAL_CUR VARCHAR(3),
    ORIGINAL_SUMM NUMERIC(15,4),
    ISNULL_QV INTEGER,
    ORIGINAL_QV FLOAT,
    ISNULL_ZDT INTEGER,
    ORIGINAL_ZDT TIMESTAMP)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_F_OPS_DELETE_LOG (
    ID INTEGER,
    USR VARCHAR(15),
    ORIGINAL_DOCID INTEGER,
    ORIGINAL_AC11 VARCHAR(8),
    ORIGINAL_AC12 VARCHAR(8),
    ORIGINAL_AC13 VARCHAR(5),
    ORIGINAL_AC14 VARCHAR(8),
    ORIGINAL_AC15 VARCHAR(5),
    ORIGINAL_AC21 VARCHAR(8),
    ORIGINAL_AC22 VARCHAR(8),
    ORIGINAL_AC23 VARCHAR(5),
    ORIGINAL_AC24 VARCHAR(8),
    ORIGINAL_AC25 VARCHAR(5),
    ORIGINAL_SUMMC NUMERIC(15,4),
    ORIGINAL_CUR VARCHAR(3),
    ORIGINAL_SUMM NUMERIC(15,4),
    ORIGINAL_QV FLOAT,
    ORIGINAL_ZDT TIMESTAMP)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_F_OPS_FILTER_AND (
    PDATE1 DATE,
    PDATE2 DATE,
    PTEXT VARCHAR(50),
    PCLID VARCHAR(15),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PDOCGR VARCHAR(10))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_OPS.ID */,
    DOCID INTEGER /* TYPE OF COLUMN F_OPS.DOCID */,
    DESCR VARCHAR(50) /* TYPE OF COLUMN F_OPS.DESCR */,
    AC11 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC11 */,
    AC12 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC12 */,
    AC13 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC13 */,
    AC14 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC14 */,
    AC15 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC15 */,
    AC21 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC21 */,
    AC22 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC22 */,
    AC23 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC23 */,
    AC24 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC24 */,
    AC25 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC25 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_OPS.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_OPS.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_OPS.SUMM */,
    QV FLOAT /* TYPE OF COLUMN F_OPS.QV */,
    NL SMALLINT /* TYPE OF COLUMN F_OPS.NL */,
    ZDT TIMESTAMP /* TYPE OF COLUMN F_OPS.ZDT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_OPS_FILTER_OR (
    PDATE1 DATE,
    PDATE2 DATE,
    PTEXT VARCHAR(50),
    PCLID VARCHAR(15),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PDOCGR VARCHAR(10))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_OPS.ID */,
    DOCID INTEGER /* TYPE OF COLUMN F_OPS.DOCID */,
    DESCR VARCHAR(50) /* TYPE OF COLUMN F_OPS.DESCR */,
    AC11 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC11 */,
    AC12 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC12 */,
    AC13 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC13 */,
    AC14 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC14 */,
    AC15 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC15 */,
    AC21 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC21 */,
    AC22 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC22 */,
    AC23 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC23 */,
    AC24 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC24 */,
    AC25 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC25 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_OPS.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_OPS.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_OPS.SUMM */,
    QV FLOAT /* TYPE OF COLUMN F_OPS.QV */,
    NL SMALLINT /* TYPE OF COLUMN F_OPS.NL */,
    ZDT TIMESTAMP /* TYPE OF COLUMN F_OPS.ZDT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_OPS_ID
RETURNS (
    NEXTID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_OPS_IDK (
    PK INTEGER)
RETURNS (
    NEXTID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_OPS_INSERT (
    PID INTEGER,
    PDOCID INTEGER,
    PDESCR VARCHAR(50),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PSUMMC NUMERIC(15,4),
    PCUR VARCHAR(3),
    PSUMM NUMERIC(15,4),
    PQV FLOAT,
    PNL SMALLINT)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_OPS.ID */,
    DOCID INTEGER /* TYPE OF COLUMN F_OPS.DOCID */,
    DESCR VARCHAR(50) /* TYPE OF COLUMN F_OPS.DESCR */,
    AC11 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC11 */,
    AC12 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC12 */,
    AC13 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC13 */,
    AC14 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC14 */,
    AC15 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC15 */,
    AC21 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC21 */,
    AC22 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC22 */,
    AC23 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC23 */,
    AC24 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC24 */,
    AC25 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC25 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_OPS.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_OPS.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_OPS.SUMM */,
    QV FLOAT /* TYPE OF COLUMN F_OPS.QV */,
    NL SMALLINT /* TYPE OF COLUMN F_OPS.NL */,
    ZDT TIMESTAMP /* TYPE OF COLUMN F_OPS.ZDT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_OPS_UPDATE (
    PDOCID INTEGER,
    PDESCR VARCHAR(50),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PSUMMC NUMERIC(15,4),
    PCUR VARCHAR(3),
    PSUMM NUMERIC(15,4),
    PQV FLOAT,
    PNL SMALLINT,
    ORIGINAL_ID INTEGER,
    ORIGINAL_DOCID INTEGER,
    ISNULL_DESCR INTEGER,
    ORIGINAL_DESCR VARCHAR(50),
    ORIGINAL_AC11 VARCHAR(8),
    ISNULL_AC12 INTEGER,
    ORIGINAL_AC12 VARCHAR(8),
    ISNULL_AC13 INTEGER,
    ORIGINAL_AC13 VARCHAR(5),
    ISNULL_AC14 INTEGER,
    ORIGINAL_AC14 VARCHAR(8),
    ISNULL_AC15 INTEGER,
    ORIGINAL_AC15 VARCHAR(5),
    ORIGINAL_AC21 VARCHAR(8),
    ISNULL_AC22 INTEGER,
    ORIGINAL_AC22 VARCHAR(8),
    ISNULL_AC23 INTEGER,
    ORIGINAL_AC23 VARCHAR(5),
    ISNULL_AC24 INTEGER,
    ORIGINAL_AC24 VARCHAR(8),
    ISNULL_AC25 INTEGER,
    ORIGINAL_AC25 VARCHAR(5),
    ORIGINAL_SUMMC NUMERIC(15,4),
    ORIGINAL_CUR VARCHAR(3),
    ORIGINAL_SUMM NUMERIC(15,4),
    ISNULL_QV INTEGER,
    ORIGINAL_QV FLOAT,
    ISNULL_NL INTEGER,
    ORIGINAL_NL SMALLINT,
    ISNULL_ZDT INTEGER,
    ORIGINAL_ZDT TIMESTAMP,
    PID INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_OPS.ID */,
    DOCID INTEGER /* TYPE OF COLUMN F_OPS.DOCID */,
    DESCR VARCHAR(50) /* TYPE OF COLUMN F_OPS.DESCR */,
    AC11 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC11 */,
    AC12 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC12 */,
    AC13 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC13 */,
    AC14 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC14 */,
    AC15 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC15 */,
    AC21 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC21 */,
    AC22 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC22 */,
    AC23 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC23 */,
    AC24 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC24 */,
    AC25 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC25 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_OPS.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_OPS.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_OPS.SUMM */,
    QV FLOAT /* TYPE OF COLUMN F_OPS.QV */,
    NL SMALLINT /* TYPE OF COLUMN F_OPS.NL */,
    ZDT TIMESTAMP /* TYPE OF COLUMN F_OPS.ZDT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_OPS_UPDATE_LOG (
    ID INTEGER,
    USR VARCHAR(15),
    ORIGINAL_DOCID INTEGER,
    ORIGINAL_AC11 VARCHAR(8),
    ORIGINAL_AC12 VARCHAR(8),
    ORIGINAL_AC13 VARCHAR(5),
    ORIGINAL_AC14 VARCHAR(8),
    ORIGINAL_AC15 VARCHAR(5),
    ORIGINAL_AC21 VARCHAR(8),
    ORIGINAL_AC22 VARCHAR(8),
    ORIGINAL_AC23 VARCHAR(5),
    ORIGINAL_AC24 VARCHAR(8),
    ORIGINAL_AC25 VARCHAR(5),
    ORIGINAL_SUMMC NUMERIC(15,4),
    ORIGINAL_CUR VARCHAR(3),
    ORIGINAL_SUMM NUMERIC(15,4),
    ORIGINAL_QV FLOAT,
    ORIGINAL_ZDT TIMESTAMP)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_F_OPSD_DELETE (
    ORIGINAL_ID INTEGER,
    ORIGINAL_DATE DATE,
    ISNULL_NRX INTEGER,
    ORIGINAL_NRX VARCHAR(5),
    ISNULL_DOCTYP INTEGER,
    ORIGINAL_DOCTYP VARCHAR(10),
    ISNULL_DOCST INTEGER,
    ORIGINAL_DOCST VARCHAR(6),
    ISNULL_DOCNR INTEGER,
    ORIGINAL_DOCNR VARCHAR(15),
    ISNULL_CLID INTEGER,
    ORIGINAL_CLID VARCHAR(15),
    ISNULL_CLID2 INTEGER,
    ORIGINAL_CLID2 VARCHAR(15),
    ISNULL_DESCR INTEGER,
    ORIGINAL_DESCR VARCHAR(80),
    ORIGINAL_SUMM NUMERIC(15,4),
    ORIGINAL_PVN NUMERIC(15,4),
    ORIGINAL_ZNR INTEGER,
    ISNULL_ZU INTEGER,
    ORIGINAL_ZU VARCHAR(20),
    ISNULL_ZDT INTEGER,
    ORIGINAL_ZDT TIMESTAMP,
    ISNULL_DT2 INTEGER,
    ORIGINAL_DT2 DATE)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_F_OPSD_DELETE_LOG (
    ID INTEGER,
    USR VARCHAR(15),
    ORIGINAL_DATE DATE,
    ORIGINAL_NRX VARCHAR(5),
    ORIGINAL_DOCTYP VARCHAR(10),
    ORIGINAL_DOCST VARCHAR(6),
    ORIGINAL_DOCNR VARCHAR(15),
    ORIGINAL_CLID VARCHAR(15),
    ORIGINAL_CLID2 VARCHAR(15),
    ORIGINAL_DESCR VARCHAR(80),
    ORIGINAL_SUMM NUMERIC(15,4),
    ORIGINAL_PVN NUMERIC(15,4),
    ORIGINAL_ZNR INTEGER,
    ORIGINAL_ZDT TIMESTAMP)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_F_OPSD_FILTER_AND (
    PDATE1 DATE,
    PDATE2 DATE,
    PTEXT VARCHAR(50),
    PCLID VARCHAR(15),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PDOCGR VARCHAR(10))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_OPSD.ID */,
    DETE DATE /* TYPE OF COLUMN F_OPSD.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_OPSD.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_OPSD.DOCTYP */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_OPSD.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_OPSD.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_OPSD.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN F_OPSD.CLID2 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_OPSD.DESCR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_OPSD.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN F_OPSD.PVN */,
    OPT INTEGER /* TYPE OF COLUMN F_OPSD.OPT */,
    ZNR INTEGER /* TYPE OF COLUMN F_OPSD.ZNR */,
    ZU VARCHAR(20) /* TYPE OF COLUMN F_OPSD.ZU */,
    ZDT TIMESTAMP /* TYPE OF COLUMN F_OPSD.ZDT */,
    DT2 DATE /* TYPE OF COLUMN F_OPSD.DT2 */,
    YR SMALLINT /* TYPE OF COLUMN F_OPSD.YR */,
    NL SMALLINT /* TYPE OF COLUMN F_OPSD.NL */,
    IDDOCM INTEGER /* TYPE OF COLUMN F_OPSD.IDDOCM */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_OPSD_FILTER_OR (
    PDATE1 DATE,
    PDATE2 DATE,
    PTEXT VARCHAR(50),
    PCLID VARCHAR(15),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PDOCGR VARCHAR(10))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_OPSD.ID */,
    DETE DATE /* TYPE OF COLUMN F_OPSD.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_OPSD.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_OPSD.DOCTYP */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_OPSD.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_OPSD.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_OPSD.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN F_OPSD.CLID2 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_OPSD.DESCR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_OPSD.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN F_OPSD.PVN */,
    OPT INTEGER /* TYPE OF COLUMN F_OPSD.OPT */,
    ZNR INTEGER /* TYPE OF COLUMN F_OPSD.ZNR */,
    ZU VARCHAR(20) /* TYPE OF COLUMN F_OPSD.ZU */,
    ZDT TIMESTAMP /* TYPE OF COLUMN F_OPSD.ZDT */,
    DT2 DATE /* TYPE OF COLUMN F_OPSD.DT2 */,
    YR SMALLINT /* TYPE OF COLUMN F_OPSD.YR */,
    NL SMALLINT /* TYPE OF COLUMN F_OPSD.NL */,
    IDDOCM INTEGER /* TYPE OF COLUMN F_OPSD.IDDOCM */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_OPSD_GETNEXTNRFORYEARA (
    YR INTEGER)
RETURNS (
    NEXTNR INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_OPSD_GETNEXTNRFORYEARA_K (
    YR INTEGER,
    PK INTEGER)
RETURNS (
    NEXTNR INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_OPSD_ID
RETURNS (
    NEXTID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_OPSD_IDK (
    PK INTEGER)
RETURNS (
    NEXTID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_OPSD_INSERT (
    PID INTEGER,
    PDETE DATE,
    PNRX VARCHAR(5),
    PDOCTYP VARCHAR(10),
    PDOCST VARCHAR(6),
    PDOCNR VARCHAR(15),
    PCLID VARCHAR(15),
    PCLID2 VARCHAR(15),
    PDESCR VARCHAR(80),
    PSUMM NUMERIC(15,4),
    PPVN NUMERIC(15,4),
    POPT INTEGER,
    PZNR INTEGER,
    PZU VARCHAR(20),
    PZDT TIMESTAMP,
    PDT2 DATE,
    PNL SMALLINT,
    PIDDOCM INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_OPSD.ID */,
    DETE DATE /* TYPE OF COLUMN F_OPSD.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_OPSD.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_OPSD.DOCTYP */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_OPSD.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_OPSD.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_OPSD.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN F_OPSD.CLID2 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_OPSD.DESCR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_OPSD.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN F_OPSD.PVN */,
    OPT INTEGER /* TYPE OF COLUMN F_OPSD.OPT */,
    ZNR INTEGER /* TYPE OF COLUMN F_OPSD.ZNR */,
    ZU VARCHAR(20) /* TYPE OF COLUMN F_OPSD.ZU */,
    ZDT TIMESTAMP /* TYPE OF COLUMN F_OPSD.ZDT */,
    DT2 DATE /* TYPE OF COLUMN F_OPSD.DT2 */,
    YR SMALLINT /* TYPE OF COLUMN F_OPSD.YR */,
    NL SMALLINT /* TYPE OF COLUMN F_OPSD.NL */,
    IDDOCM INTEGER /* TYPE OF COLUMN F_OPSD.IDDOCM */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_OPSD_UPDATE (
    PDETE DATE,
    PNRX VARCHAR(5),
    PDOCTYP VARCHAR(10),
    PDOCST VARCHAR(6),
    PDOCNR VARCHAR(15),
    PCLID VARCHAR(15),
    PCLID2 VARCHAR(15),
    PDESCR VARCHAR(80),
    PSUMM NUMERIC(15,4),
    PPVN NUMERIC(15,4),
    POPT INTEGER,
    PZNR INTEGER,
    PZU VARCHAR(20),
    PZDT TIMESTAMP,
    PDT2 DATE,
    PNL SMALLINT,
    ORIGINAL_ID INTEGER,
    ORIGINAL_DATE DATE,
    ISNULL_NRX INTEGER,
    ORIGINAL_NRX VARCHAR(5),
    ISNULL_DOCTYP INTEGER,
    ORIGINAL_DOCTYP VARCHAR(10),
    ISNULL_DOCST INTEGER,
    ORIGINAL_DOCST VARCHAR(6),
    ISNULL_DOCNR INTEGER,
    ORIGINAL_DOCNR VARCHAR(15),
    ISNULL_CLID INTEGER,
    ORIGINAL_CLID VARCHAR(15),
    ISNULL_CLID2 INTEGER,
    ORIGINAL_CLID2 VARCHAR(15),
    ISNULL_DESCR INTEGER,
    ORIGINAL_DESCR VARCHAR(80),
    ORIGINAL_SUMM NUMERIC(15,4),
    ORIGINAL_PVN NUMERIC(15,4),
    ISNULL_OPT INTEGER,
    ORIGINAL_OPT INTEGER,
    ORIGINAL_ZNR INTEGER,
    ISNULL_ZU INTEGER,
    ORIGINAL_ZU VARCHAR(20),
    ISNULL_ZDT INTEGER,
    ORIGINAL_ZDT TIMESTAMP,
    ISNULL_DT2 INTEGER,
    ORIGINAL_DT2 DATE,
    ISNULL_NL INTEGER,
    ORIGINAL_NL SMALLINT,
    ISNULL_YR INTEGER,
    ORIGINAL_YR INTEGER,
    PID INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_OPSD.ID */,
    DETE DATE /* TYPE OF COLUMN F_OPSD.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_OPSD.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_OPSD.DOCTYP */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_OPSD.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_OPSD.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_OPSD.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN F_OPSD.CLID2 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_OPSD.DESCR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_OPSD.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN F_OPSD.PVN */,
    OPT INTEGER /* TYPE OF COLUMN F_OPSD.OPT */,
    ZNR INTEGER /* TYPE OF COLUMN F_OPSD.ZNR */,
    ZU VARCHAR(20) /* TYPE OF COLUMN F_OPSD.ZU */,
    ZDT TIMESTAMP /* TYPE OF COLUMN F_OPSD.ZDT */,
    DT2 DATE /* TYPE OF COLUMN F_OPSD.DT2 */,
    YR SMALLINT /* TYPE OF COLUMN F_OPSD.YR */,
    NL SMALLINT /* TYPE OF COLUMN F_OPSD.NL */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_OPSD_UPDATE_LOG (
    ID INTEGER,
    USR VARCHAR(15),
    ORIGINAL_DATE DATE,
    ORIGINAL_NRX VARCHAR(5),
    ORIGINAL_DOCTYP VARCHAR(10),
    ORIGINAL_DOCST VARCHAR(6),
    ORIGINAL_DOCNR VARCHAR(15),
    ORIGINAL_CLID VARCHAR(15),
    ORIGINAL_CLID2 VARCHAR(15),
    ORIGINAL_DESCR VARCHAR(80),
    ORIGINAL_SUMM NUMERIC(15,4),
    ORIGINAL_PVN NUMERIC(15,4),
    ORIGINAL_ZNR INTEGER,
    ORIGINAL_ZDT TIMESTAMP)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_F_REKINS_11 (
    PDID INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_OPS.ID */,
    DOCID INTEGER /* TYPE OF COLUMN F_OPS.DOCID */,
    DESCR VARCHAR(50) /* TYPE OF COLUMN F_OPS.DESCR */,
    AC11 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC11 */,
    AC12 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC12 */,
    AC13 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC13 */,
    AC14 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC14 */,
    AC15 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC15 */,
    AC21 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC21 */,
    AC22 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC22 */,
    AC23 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC23 */,
    AC24 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC24 */,
    AC25 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC25 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_OPS.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_OPS.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_OPS.SUMM */,
    QV FLOAT /* TYPE OF COLUMN F_OPS.QV */,
    NL SMALLINT /* TYPE OF COLUMN F_OPS.NL */,
    ZDT TIMESTAMP /* TYPE OF COLUMN F_OPS.ZDT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_APGR_01 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_APGR_01_CLID (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_APGR_01_CLID2 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_APGR_02 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_APGR_02_CLID (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_APGR_10 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_APGR_10_CLID (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_APGR_11 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_APGR_21 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PACLEN INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_APGR_CUR_01 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCUR VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_APGR_CUR_01_CLID (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(8),
    PCUR VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_APGR_DZ_11 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS3A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS3A.SPID */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS3A.RAC */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_ROPS3A.NAME */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS3A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS3A.SCR */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_ROPS3A.AC1 */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS3A.CLID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_APGR_DZ_12 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_APGR_FULL_11 (
    SDT DATE,
    EDT DATE,
    PAC1 VARCHAR(8),
    PAC2 VARCHAR(8),
    PAC3 VARCHAR(5),
    PAC4 VARCHAR(8),
    PAC5 VARCHAR(5),
    PCLID VARCHAR(15),
    PXAC1 INTEGER,
    PXAC2 INTEGER,
    PXAC3 INTEGER,
    PXAC4 INTEGER,
    PXAC5 INTEGER,
    PXCLID INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_TREPAPAN.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_TREPAPAN.SPID */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_TREPAPAN.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN F_TREPAPAN.AC2 */,
    AC3 VARCHAR(15) /* TYPE OF COLUMN F_TREPAPAN.AC3 */,
    AC4 VARCHAR(15) /* TYPE OF COLUMN F_TREPAPAN.AC4 */,
    AC5 VARCHAR(15) /* TYPE OF COLUMN F_TREPAPAN.AC5 */,
    CL VARCHAR(15) /* TYPE OF COLUMN F_TREPAPAN.CL */,
    S1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPAPAN.S1 */,
    S2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPAPAN.S2 */,
    S3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPAPAN.S3 */,
    S4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPAPAN.S4 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_APGR_FULL_12 (
    SDT DATE,
    EDT DATE,
    PAC1 VARCHAR(8),
    PAC2 VARCHAR(8),
    PAC3 VARCHAR(5),
    PAC4 VARCHAR(8),
    PAC5 VARCHAR(5),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_TREPAPAN.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_TREPAPAN.SPID */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_TREPAPAN.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN F_TREPAPAN.AC2 */,
    AC3 VARCHAR(15) /* TYPE OF COLUMN F_TREPAPAN.AC3 */,
    AC4 VARCHAR(15) /* TYPE OF COLUMN F_TREPAPAN.AC4 */,
    AC5 VARCHAR(15) /* TYPE OF COLUMN F_TREPAPAN.AC5 */,
    CL VARCHAR(15) /* TYPE OF COLUMN F_TREPAPAN.CL */,
    S1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPAPAN.S1 */,
    S2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPAPAN.S2 */,
    S3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPAPAN.S3 */,
    S4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPAPAN.S4 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_APGR_MT_11 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN F_TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_APGR_MT_12 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN F_TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_APGR_MT_21 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN F_TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_APGR_MT_22 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN F_TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_APGR_NP_11 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_APGR_NP_12 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PACLEN INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_BAL_11 (
    SDT DATE,
    EDT DATE)
RETURNS (
    AC VARCHAR(8),
    S1 MONEY,
    S2 MONEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_BAL_12 (
    SDT DATE,
    EDT DATE,
    PBALID VARCHAR(10))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_BALA21.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_BALA21.SPID */,
    BID INTEGER /* TYPE OF COLUMN F_BALA21.BID */,
    S1 NUMERIC(15,2) /* TYPE OF COLUMN F_BALA21.S1 */,
    S2 NUMERIC(15,2) /* TYPE OF COLUMN F_BALA21.S2 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_BAL_13 (
    PBALID VARCHAR(10))
RETURNS (
    AC VARCHAR(8) /* TYPE OF COLUMN F_ACP21.AC */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_ACP21.NAME */,
    ID1 VARCHAR(15) /* TYPE OF COLUMN F_ACP21.ID1 */,
    ID2 VARCHAR(15) /* TYPE OF COLUMN F_ACP21.ID2 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_BAL_21 (
    SDT DATE,
    EDT DATE)
RETURNS (
    AC VARCHAR(8),
    M0 MONEY,
    M1 MONEY,
    M2 MONEY,
    M3 MONEY,
    M4 MONEY,
    M5 MONEY,
    M6 MONEY,
    M7 MONEY,
    M8 MONEY,
    M9 MONEY,
    M10 MONEY,
    M11 MONEY,
    M12 MONEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_BAL_22 (
    SDT DATE,
    EDT DATE,
    PBALID VARCHAR(10))
RETURNS (
    ID INTEGER,
    SPID INTEGER,
    BID INTEGER,
    M0 MONEY,
    M1 MONEY,
    M2 MONEY,
    M3 MONEY,
    M4 MONEY,
    M5 MONEY,
    M6 MONEY,
    M7 MONEY,
    M8 MONEY,
    M9 MONEY,
    M10 MONEY,
    M11 MONEY,
    M12 MONEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_CURCHECK_01 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(8),
    PCUR VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN F_ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN F_ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN F_ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN F_ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_CURRDIFF_01 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(8),
    PCUR VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_DARZ_1 (
    SDT DATE,
    EDT DATE,
    PAC1 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC11 */,
    PAC3 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC13 */)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_TREPDARZ1.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_TREPDARZ1.SPID */,
    DID INTEGER /* TYPE OF COLUMN F_TREPDARZ1.DID */,
    RID INTEGER /* TYPE OF COLUMN F_TREPDARZ1.RID */,
    DETE DATE /* TYPE OF COLUMN F_TREPDARZ1.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_TREPDARZ1.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_TREPDARZ1.DOCTYP */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_TREPDARZ1.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_TREPDARZ1.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_TREPDARZ1.CLID */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_TREPDARZ1.NAME */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_TREPDARZ1.REGNR */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_TREPDARZ1.DESCR */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_TREPDARZ1.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN F_TREPDARZ1.AC2 */,
    AA NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.AA */,
    A1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A1 */,
    A2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A2 */,
    A3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A3 */,
    A4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A4 */,
    A5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A5 */,
    A6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A6 */,
    A7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A7 */,
    A8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A8 */,
    A9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A9 */,
    A10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A10 */,
    A11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A11 */,
    A12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A12 */,
    A13 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A13 */,
    A14 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A14 */,
    A15 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A15 */,
    A16 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A16 */,
    A17 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A17 */,
    A18 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A18 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_DARZ_2 (
    SDT DATE,
    EDT DATE,
    PAC1 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC11 */,
    PAC3 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC13 */)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_TREPDARZ2.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_TREPDARZ2.SPID */,
    RID0 INTEGER /* TYPE OF COLUMN F_TREPDARZ2.RID0 */,
    A1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A1 */,
    A2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A2 */,
    A3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A3 */,
    A4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A4 */,
    A5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A5 */,
    A6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A6 */,
    A7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A7 */,
    A8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A8 */,
    A9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A9 */,
    A10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A10 */,
    A11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A11 */,
    A12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A12 */,
    A13 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A13 */,
    A14 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A14 */,
    A15 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A15 */,
    A16 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A16 */,
    A17 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A17 */,
    A18 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A18 */,
    A19 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A19 */,
    A20 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A20 */,
    A21 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A21 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_DARZ_3 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_TREPDARZ1.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_TREPDARZ1.SPID */,
    DID INTEGER /* TYPE OF COLUMN F_TREPDARZ1.DID */,
    RID INTEGER /* TYPE OF COLUMN F_TREPDARZ1.RID */,
    DETE DATE /* TYPE OF COLUMN F_TREPDARZ1.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_TREPDARZ1.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_TREPDARZ1.DOCTYP */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_TREPDARZ1.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_TREPDARZ1.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_TREPDARZ1.CLID */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_TREPDARZ1.NAME */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_TREPDARZ1.REGNR */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_TREPDARZ1.DESCR */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_TREPDARZ1.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN F_TREPDARZ1.AC2 */,
    AA NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.AA */,
    A1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A1 */,
    A2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A2 */,
    A3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A3 */,
    A4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A4 */,
    A5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A5 */,
    A6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A6 */,
    A7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A7 */,
    A8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A8 */,
    A9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A9 */,
    A10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A10 */,
    A11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A11 */,
    A12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A12 */,
    A13 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A13 */,
    A14 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A14 */,
    A15 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A15 */,
    A16 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ1.A16 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_DARZ_4 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_TREPDARZ2.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_TREPDARZ2.SPID */,
    RID0 INTEGER /* TYPE OF COLUMN F_TREPDARZ2.RID0 */,
    A1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A1 */,
    A2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A2 */,
    A3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A3 */,
    A4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A4 */,
    A5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A5 */,
    A6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A6 */,
    A7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A7 */,
    A8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A8 */,
    A9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A9 */,
    A10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A10 */,
    A11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A11 */,
    A12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A12 */,
    A13 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A13 */,
    A14 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A14 */,
    A15 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A15 */,
    A16 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A16 */,
    A17 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A17 */,
    A18 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A18 */,
    A19 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPDARZ2.A19 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_DOKS_11 (
    PDATE1 DATE,
    PDATE2 DATE,
    PTEXT VARCHAR(50),
    PCLID VARCHAR(15),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PDOCGR VARCHAR(10),
    PANDOR VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN F_ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN F_ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN F_ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN F_ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_KG_11 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN F_ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN F_ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN F_ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN F_ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_KIEO_1 (
    PDID INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN F_ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN F_ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN F_ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN F_ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_KIEO_21 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN F_ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN F_ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN F_ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN F_ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_KIZO_21 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN F_ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN F_ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN F_ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN F_ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_KORESP_01 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS3A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS3A.SPID */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS3A.RAC */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_ROPS3A.NAME */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS3A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS3A.SCR */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_ROPS3A.AC1 */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS3A.CLID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_KORESP_01_CLID (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS3A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS3A.SPID */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS3A.RAC */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_ROPS3A.NAME */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS3A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS3A.SCR */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_ROPS3A.AC1 */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS3A.CLID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_KORESP_01_CLID2 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS3A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS3A.SPID */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS3A.RAC */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_ROPS3A.NAME */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS3A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS3A.SCR */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_ROPS3A.AC1 */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS3A.CLID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_KORESP_01_CUR (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15),
    PCUR VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS3A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS3A.SPID */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS3A.RAC */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_ROPS3A.NAME */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS3A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS3A.SCR */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_ROPS3A.AC1 */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS3A.CLID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_KORESP_02 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS3A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS3A.SPID */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS3A.RAC */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_ROPS3A.NAME */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS3A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS3A.SCR */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_ROPS3A.AC1 */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS3A.CLID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_KORESP_02_CLID (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS3A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS3A.SPID */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS3A.RAC */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_ROPS3A.NAME */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS3A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS3A.SCR */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_ROPS3A.AC1 */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS3A.CLID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_KORESP_11 (
    PSD DATE,
    PED DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN F_ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN F_ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN F_ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN F_ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_KORESP_11_CLID (
    PSD DATE,
    PED DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN F_ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN F_ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN F_ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN F_ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_KORESP_11_CLID2 (
    PSD DATE,
    PED DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN F_ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN F_ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN F_ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN F_ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_KORESP_11_CUR (
    PSD DATE,
    PED DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15),
    PCUR VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN F_ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN F_ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN F_ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN F_ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_NPMT_11 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN F_TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_NPMT_12 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN F_TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_NPMT_13 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN F_TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_NPMT_14 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN F_TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_NPMT_21 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN F_TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_NPMT_22 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN F_TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_NPMT_24 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN F_TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_NPMT_31 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN F_TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_NPMT_41 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN F_TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_NPMT_42 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN F_TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_NPMT_43 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN F_TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_NPMT_44 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN F_TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN F_TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN F_TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN F_TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_PERS_11 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_PERS_12 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_PERS_13 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_TREPA1.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_TREPA1.SPID */,
    I1 VARCHAR(15) /* TYPE OF COLUMN F_TREPA1.I1 */,
    NM VARCHAR(100) /* TYPE OF COLUMN F_TREPA1.NM */,
    DT DATE /* TYPE OF COLUMN F_TREPA1.DT */,
    ST VARCHAR(6) /* TYPE OF COLUMN F_TREPA1.ST */,
    NR VARCHAR(15) /* TYPE OF COLUMN F_TREPA1.NR */,
    S1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPA1.S1 */,
    S2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPA1.S2 */,
    S3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPA1.S3 */,
    S4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPA1.S4 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_PERS_14 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_TREPA1.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_TREPA1.SPID */,
    I1 VARCHAR(15) /* TYPE OF COLUMN F_TREPA1.I1 */,
    NM VARCHAR(100) /* TYPE OF COLUMN F_TREPA1.NM */,
    DT DATE /* TYPE OF COLUMN F_TREPA1.DT */,
    ST VARCHAR(6) /* TYPE OF COLUMN F_TREPA1.ST */,
    NR VARCHAR(15) /* TYPE OF COLUMN F_TREPA1.NR */,
    S1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPA1.S1 */,
    S2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPA1.S2 */,
    S3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPA1.S3 */,
    S4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPA1.S4 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_PERS_15 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_TREPA1.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_TREPA1.SPID */,
    I1 VARCHAR(15) /* TYPE OF COLUMN F_TREPA1.I1 */,
    NM VARCHAR(100) /* TYPE OF COLUMN F_TREPA1.NM */,
    DT DATE /* TYPE OF COLUMN F_TREPA1.DT */,
    ST VARCHAR(6) /* TYPE OF COLUMN F_TREPA1.ST */,
    NR VARCHAR(15) /* TYPE OF COLUMN F_TREPA1.NR */,
    S1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPA1.S1 */,
    S2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPA1.S2 */,
    S3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPA1.S3 */,
    S4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPA1.S4 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_PERS_16 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_TREPA1.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_TREPA1.SPID */,
    I1 VARCHAR(15) /* TYPE OF COLUMN F_TREPA1.I1 */,
    NM VARCHAR(100) /* TYPE OF COLUMN F_TREPA1.NM */,
    DT DATE /* TYPE OF COLUMN F_TREPA1.DT */,
    ST VARCHAR(6) /* TYPE OF COLUMN F_TREPA1.ST */,
    NR VARCHAR(15) /* TYPE OF COLUMN F_TREPA1.NR */,
    S1 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPA1.S1 */,
    S2 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPA1.S2 */,
    S3 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPA1.S3 */,
    S4 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPA1.S4 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_PVN_10 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN F_ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_PVN_21 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    DID INTEGER /* TYPE OF COLUMN F_TTEMP_PVN1.DID */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_TTEMP_PVN1.CLID */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN F_TTEMP_PVN1.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN F_TTEMP_PVN1.DOCTYP2 */,
    DOCTYPC INTEGER /* TYPE OF COLUMN F_TTEMP_PVN1.DOCTYPC */,
    RAC5 VARCHAR(8) /* TYPE OF COLUMN F_TTEMP_PVN1.RAC5 */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_TTEMP_PVN1.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN F_TTEMP_PVN1.PVN */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_TTEMP_PVN1.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_TTEMP_PVN1.CUR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_PVN_22 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN F_ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN F_ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN F_ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN F_ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_PVN_31 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    DID INTEGER /* TYPE OF COLUMN F_TTEMP_PVN1.DID */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_TTEMP_PVN1.CLID */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN F_TTEMP_PVN1.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN F_TTEMP_PVN1.DOCTYP2 */,
    DOCTYPC INTEGER /* TYPE OF COLUMN F_TTEMP_PVN1.DOCTYPC */,
    RAC5 VARCHAR(8) /* TYPE OF COLUMN F_TTEMP_PVN1.RAC5 */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_TTEMP_PVN1.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN F_TTEMP_PVN1.PVN */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_TTEMP_PVN1.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_TTEMP_PVN1.CUR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_PVN_32 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN F_ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN F_ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN F_ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN F_ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_PVN_41 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN F_ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN F_ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN F_ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN F_ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_PVN_42 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN F_ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN F_ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN F_ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN F_ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_PVN_51 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    DID INTEGER /* TYPE OF COLUMN F_TTEMP_PVN1.DID */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_TTEMP_PVN1.CLID */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN F_TTEMP_PVN1.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN F_TTEMP_PVN1.DOCTYP2 */,
    DOCTYPC INTEGER /* TYPE OF COLUMN F_TTEMP_PVN1.DOCTYPC */,
    RAC5 VARCHAR(8) /* TYPE OF COLUMN F_TTEMP_PVN1.RAC5 */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_TTEMP_PVN1.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN F_TTEMP_PVN1.PVN */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_TTEMP_PVN1.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_TTEMP_PVN1.CUR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_PVN_52 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN F_ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN F_ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN F_ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN F_ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_PVN_CHECK_01 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    LIKME MONEY)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN F_ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN F_ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN F_ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN F_ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_PVN_CHECK_02 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    LIKME MONEY)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN F_ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN F_ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN F_ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN F_ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_PVNZ_01 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_TREPPVNZ1.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_TREPPVNZ1.SPID */,
    DID INTEGER /* TYPE OF COLUMN F_TREPPVNZ1.DID */,
    RID INTEGER /* TYPE OF COLUMN F_TREPPVNZ1.RID */,
    DETE DATE /* TYPE OF COLUMN F_TREPPVNZ1.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_TREPPVNZ1.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_TREPPVNZ1.DOCTYP */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_TREPPVNZ1.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_TREPPVNZ1.DOCNR */,
    DOCSTR VARCHAR(200) /* TYPE OF COLUMN F_TREPPVNZ1.DOCSTR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_TREPPVNZ1.CLID */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_TREPPVNZ1.NAME */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_TREPPVNZ1.REGNR */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_TREPPVNZ1.DESCR */,
    AA NUMERIC(15,2) /* TYPE OF COLUMN F_TREPPVNZ1.AA */,
    A8 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPPVNZ1.A8 */,
    A9 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPPVNZ1.A9 */,
    A10 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPPVNZ1.A10 */,
    A11 VARCHAR(8) /* TYPE OF COLUMN F_TREPPVNZ1.A11 */,
    A12 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPPVNZ1.A12 */,
    A13 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPPVNZ1.A13 */,
    A14 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPPVNZ1.A14 */,
    A15 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPPVNZ1.A15 */,
    A16 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPPVNZ1.A16 */,
    A17 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPPVNZ1.A17 */,
    A18 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPPVNZ1.A18 */,
    A19 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPPVNZ1.A19 */,
    A20 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPPVNZ1.A20 */,
    A21 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPPVNZ1.A21 */,
    A22 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPPVNZ1.A22 */,
    A23 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPPVNZ1.A23 */,
    A24 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPPVNZ1.A24 */,
    A25 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPPVNZ1.A25 */,
    A26 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPPVNZ1.A26 */,
    A27 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPPVNZ1.A27 */,
    A28 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPPVNZ1.A28 */,
    A29 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPPVNZ1.A29 */,
    A30 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPPVNZ1.A30 */,
    A31 NUMERIC(15,2) /* TYPE OF COLUMN F_TREPPVNZ1.A31 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_SKAIDRA_01 (
    SDT DATE,
    EDT DATE,
    PSUMM NUMERIC(14,5),
    PPERTYP VARCHAR(5))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN F_ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN F_ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN F_ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN F_ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_REP_SKAIDRA_02 (
    SDT DATE,
    EDT DATE,
    PSUMM NUMERIC(14,5),
    PPERTYP VARCHAR(5))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN F_ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN F_ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN F_ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN F_ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN F_ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN F_ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN F_ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN F_ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN F_ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN F_ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN F_ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN F_ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_RESET_YEAR_GEN
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_F_SET_KIEONR (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PNR INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_F_SET_KIZONR (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PNR INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_F_SET_USERNAME (
    USERNAME VARCHAR(15))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_F_VWOPS_FILTER_AND (
    PDATE1 DATE,
    PDATE2 DATE,
    PTEXT VARCHAR(50),
    PCLID VARCHAR(15),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PDOCGR VARCHAR(10))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_OPS.ID */,
    DOCID INTEGER /* TYPE OF COLUMN F_OPS.DOCID */,
    DETE DATE /* TYPE OF COLUMN F_OPSD.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_OPSD.NRX */,
    ZNR INTEGER /* TYPE OF COLUMN F_OPSD.ZNR */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_OPSD.DOCTYP */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_OPSD.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_OPSD.DOCNR */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN F_DOCTYP.ID1 */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_OPSD.CLID */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_PERSONS.NAME */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_PERSONS.REGNR */,
    PVNREGNR VARCHAR(15) /* TYPE OF COLUMN F_PERSONS.PVNREGNR */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN F_OPSD.CLID2 */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN F_PERSONS.NAME */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN F_PERSONS.REGNR */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_OPSD.DESCR */,
    AC11 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC11 */,
    AC12 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC12 */,
    AC13 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC13 */,
    AC14 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC14 */,
    AC15 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC15 */,
    AC21 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC21 */,
    AC22 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC22 */,
    AC23 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC23 */,
    AC24 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC24 */,
    AC25 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC25 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_OPS.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_OPS.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_OPS.SUMM */,
    QV FLOAT /* TYPE OF COLUMN F_OPS.QV */,
    DESCR2 VARCHAR(50) /* TYPE OF COLUMN F_OPS.DESCR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_VWOPS_FILTER_OR (
    PDATE1 DATE,
    PDATE2 DATE,
    PTEXT VARCHAR(50),
    PCLID VARCHAR(15),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PDOCGR VARCHAR(10))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN F_OPS.ID */,
    DOCID INTEGER /* TYPE OF COLUMN F_OPS.DOCID */,
    DETE DATE /* TYPE OF COLUMN F_OPSD.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN F_OPSD.NRX */,
    ZNR INTEGER /* TYPE OF COLUMN F_OPSD.ZNR */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN F_OPSD.DOCTYP */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN F_OPSD.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN F_OPSD.DOCNR */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN F_DOCTYP.ID1 */,
    CLID VARCHAR(15) /* TYPE OF COLUMN F_OPSD.CLID */,
    NAME VARCHAR(100) /* TYPE OF COLUMN F_PERSONS.NAME */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN F_PERSONS.REGNR */,
    PVNREGNR VARCHAR(15) /* TYPE OF COLUMN F_PERSONS.PVNREGNR */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN F_OPSD.CLID2 */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN F_PERSONS.NAME */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN F_PERSONS.REGNR */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN F_OPSD.DESCR */,
    AC11 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC11 */,
    AC12 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC12 */,
    AC13 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC13 */,
    AC14 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC14 */,
    AC15 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC15 */,
    AC21 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC21 */,
    AC22 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC22 */,
    AC23 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC23 */,
    AC24 VARCHAR(8) /* TYPE OF COLUMN F_OPS.AC24 */,
    AC25 VARCHAR(5) /* TYPE OF COLUMN F_OPS.AC25 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN F_OPS.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN F_OPS.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN F_OPS.SUMM */,
    QV FLOAT /* TYPE OF COLUMN F_OPS.QV */,
    DESCR2 VARCHAR(50) /* TYPE OF COLUMN F_OPS.DESCR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_F_ZDT_OPS_SET (
    ID INTEGER,
    ZDT TIMESTAMP)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_F_ZDT_OPSD_SET (
    ID INTEGER,
    ZDT TIMESTAMP)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_GEN_PARAMS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_CALC_DOC_AMOUNTS (
    PIDDOC INTEGER,
    PISREVERSED INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_M_CLEARDATA
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_M_CURRENTSTOCK_01 (
    PIDITEM INTEGER)
RETURNS (
    IDITEM INTEGER,
    IDSTORE INTEGER,
    AMOUNT DAMOUNT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_CURRENTSTOCK_02 (
    PIDSTORE INTEGER)
RETURNS (
    IDITEM INTEGER,
    IDSTORE INTEGER,
    AMOUNT DAMOUNT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_DEL_FINDOC (
    PIDDOCM INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_M_FILTER_DOCS_01 (
    PDT1 DATE,
    PDT2 DATE,
    PTP INTEGER,
    PSTATE INTEGER,
    PIDSTOREOUT INTEGER,
    PIDSTOREIN INTEGER,
    PIDSTOREOUTORIN INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN M_DOCS.ID */,
    DT DATE /* TYPE OF COLUMN M_DOCS.DT */,
    SR VARCHAR(10) /* TYPE OF COLUMN M_DOCS.SR */,
    NR VARCHAR(20) /* TYPE OF COLUMN M_DOCS.NR */,
    TP INTEGER /* TYPE OF COLUMN M_DOCS.TP */,
    PVNTYPE INTEGER /* TYPE OF COLUMN M_DOCS.PVNTYPE */,
    STATE INTEGER /* TYPE OF COLUMN M_DOCS.STATE */,
    IDSTOREIN INTEGER /* TYPE OF COLUMN M_DOCS.IDSTOREIN */,
    IDSTOREOUT INTEGER /* TYPE OF COLUMN M_DOCS.IDSTOREOUT */,
    IDCREDDOC INTEGER /* TYPE OF COLUMN M_DOCS.IDCREDDOC */,
    CREDDOCDT DATE /* TYPE OF COLUMN M_DOCS.CREDDOCDT */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN M_DOCS.SUMM */,
    IDSEQ BIGINT /* TYPE OF COLUMN M_DOCS.IDSEQ */,
    ACCIN VARCHAR(8) /* TYPE OF COLUMN M_DOCS.ACCIN */,
    ACCOUT VARCHAR(8) /* TYPE OF COLUMN M_DOCS.ACCOUT */,
    CREDDOCSR VARCHAR(10) /* TYPE OF COLUMN M_DOCS.CREDDOCSR */,
    CREDDOCNR VARCHAR(20) /* TYPE OF COLUMN M_DOCS.CREDDOCNR */,
    IDCARRIER INTEGER /* TYPE OF COLUMN M_DOCS.IDCARRIER */,
    IDADDRESSOUT INTEGER /* TYPE OF COLUMN M_DOCS.IDADDRESSOUT */,
    IDADDRESSIN INTEGER /* TYPE OF COLUMN M_DOCS.IDADDRESSIN */,
    IDVEHICLE INTEGER /* TYPE OF COLUMN M_DOCS.IDVEHICLE */,
    IDTRANSACTIONTYPE INTEGER /* TYPE OF COLUMN M_DOCS.IDTRANSACTIONTYPE */,
    IDPAYMENTTYPE INTEGER /* TYPE OF COLUMN M_DOCS.IDPAYMENTTYPE */,
    IDDRIVER INTEGER /* TYPE OF COLUMN M_DOCS.IDDRIVER */,
    ACCOUNTINGTP SMALLINT /* TYPE OF COLUMN M_DOCS.ACCOUNTINGTP */,
    ACCTP1 SMALLINT /* TYPE OF COLUMN M_DOCS.ACCTP1 */,
    ACCTP2 SMALLINT /* TYPE OF COLUMN M_DOCS.ACCTP2 */,
    WEVATPAYER SMALLINT /* TYPE OF COLUMN M_DOCS.WEVATPAYER */,
    DUEDATE DATE /* TYPE OF COLUMN M_DOCS.DUEDATE */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_FILTER_DOCS_02 (
    PIDDOC INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN M_DOCS.ID */,
    DT DATE /* TYPE OF COLUMN M_DOCS.DT */,
    SR VARCHAR(10) /* TYPE OF COLUMN M_DOCS.SR */,
    NR VARCHAR(20) /* TYPE OF COLUMN M_DOCS.NR */,
    TP INTEGER /* TYPE OF COLUMN M_DOCS.TP */,
    PVNTYPE INTEGER /* TYPE OF COLUMN M_DOCS.PVNTYPE */,
    STATE INTEGER /* TYPE OF COLUMN M_DOCS.STATE */,
    IDSTOREIN INTEGER /* TYPE OF COLUMN M_DOCS.IDSTOREIN */,
    IDSTOREOUT INTEGER /* TYPE OF COLUMN M_DOCS.IDSTOREOUT */,
    IDCREDDOC INTEGER /* TYPE OF COLUMN M_DOCS.IDCREDDOC */,
    CREDDOCDT DATE /* TYPE OF COLUMN M_DOCS.CREDDOCDT */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN M_DOCS.SUMM */,
    IDSEQ BIGINT /* TYPE OF COLUMN M_DOCS.IDSEQ */,
    ACCIN VARCHAR(8) /* TYPE OF COLUMN M_DOCS.ACCIN */,
    ACCOUT VARCHAR(8) /* TYPE OF COLUMN M_DOCS.ACCOUT */,
    CREDDOCSR VARCHAR(10) /* TYPE OF COLUMN M_DOCS.CREDDOCSR */,
    CREDDOCNR VARCHAR(20) /* TYPE OF COLUMN M_DOCS.CREDDOCNR */,
    IDCARRIER INTEGER /* TYPE OF COLUMN M_DOCS.IDCARRIER */,
    IDADDRESSOUT INTEGER /* TYPE OF COLUMN M_DOCS.IDADDRESSOUT */,
    IDADDRESSIN INTEGER /* TYPE OF COLUMN M_DOCS.IDADDRESSIN */,
    IDVEHICLE INTEGER /* TYPE OF COLUMN M_DOCS.IDVEHICLE */,
    IDTRANSACTIONTYPE INTEGER /* TYPE OF COLUMN M_DOCS.IDTRANSACTIONTYPE */,
    IDPAYMENTTYPE INTEGER /* TYPE OF COLUMN M_DOCS.IDPAYMENTTYPE */,
    IDDRIVER INTEGER /* TYPE OF COLUMN M_DOCS.IDDRIVER */,
    ACCOUNTINGTP SMALLINT /* TYPE OF COLUMN M_DOCS.ACCOUNTINGTP */,
    ACCTP1 SMALLINT /* TYPE OF COLUMN M_DOCS.ACCTP1 */,
    ACCTP2 SMALLINT /* TYPE OF COLUMN M_DOCS.ACCTP2 */,
    WEVATPAYER SMALLINT /* TYPE OF COLUMN M_DOCS.WEVATPAYER */,
    DUEDATE DATE /* TYPE OF COLUMN M_DOCS.DUEDATE */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_FILTER_INVDOCS_1 (
    PDT1 DATE,
    PDT2 DATE,
    PSTATE INTEGER,
    PIDSTORE INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN M_INV_DOCS.ID */,
    DT DATE /* TYPE OF COLUMN M_INV_DOCS.DT */,
    NR VARCHAR(10) /* TYPE OF COLUMN M_INV_DOCS.NR */,
    STATE INTEGER /* TYPE OF COLUMN M_INV_DOCS.STATE */,
    IDSTORE INTEGER /* TYPE OF COLUMN M_INV_DOCS.IDSTORE */,
    PERSONS VARCHAR(200) /* TYPE OF COLUMN M_INV_DOCS.PERSONS */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_FILTER_INVROWS_1 (
    PIDDOC INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN M_INV_ROWS.ID */,
    IDDOC INTEGER /* TYPE OF COLUMN M_INV_ROWS.IDDOC */,
    IDITEM INTEGER /* TYPE OF COLUMN M_INV_ROWS.IDITEM */,
    IDUNITS INTEGER /* TYPE OF COLUMN M_INV_ROWS.IDUNITS */,
    AM_COUNTED_1 NUMERIC(12,4) /* TYPE OF COLUMN M_INV_ROWS.AM_COUNTED_1 */,
    AM_COUNTED_2 NUMERIC(12,4) /* TYPE OF COLUMN M_INV_ROWS.AM_COUNTED_2 */,
    AM_CALC NUMERIC(12,4) /* TYPE OF COLUMN M_INV_ROWS.AM_CALC */,
    AM_DIFF NUMERIC(12,4) /* TYPE OF COLUMN M_INV_ROWS.AM_DIFF */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_FILTER_ITEMS_01 (
    PIDDOC INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN M_ITEMS.ID */,
    BARCODE VARCHAR(30) /* TYPE OF COLUMN M_ITEMS.BARCODE */,
    NAME VARCHAR(300) /* TYPE OF COLUMN M_ITEMS.NAME */,
    CAT INTEGER /* TYPE OF COLUMN M_ITEMS.CAT */,
    UNITS INTEGER /* TYPE OF COLUMN M_ITEMS.UNITS */,
    STORE1 INTEGER /* TYPE OF COLUMN M_ITEMS.STORE1 */,
    PVNRATE INTEGER /* TYPE OF COLUMN M_ITEMS.PVNRATE */,
    ISSERVICE INTEGER /* TYPE OF COLUMN M_ITEMS.ISSERVICE */,
    ISPRODUCED INTEGER /* TYPE OF COLUMN M_ITEMS.ISPRODUCED */,
    SELLPRICE NUMERIC(15,6) /* TYPE OF COLUMN M_ITEMS.SELLPRICE */,
    BUYPRICE NUMERIC(15,6) /* TYPE OF COLUMN M_ITEMS.BUYPRICE */,
    PRODCOST NUMERIC(15,6) /* TYPE OF COLUMN M_ITEMS.PRODCOST */,
    LASTBUYPRICE NUMERIC(15,6) /* TYPE OF COLUMN M_ITEMS.LASTBUYPRICE */,
    AMOUNTINSTORE NUMERIC(12,4) /* TYPE OF COLUMN M_ITEMS.AMOUNTINSTORE */,
    LASTSALEDATE DATE /* TYPE OF COLUMN M_ITEMS.LASTSALEDATE */,
    LASTBUYDATE DATE /* TYPE OF COLUMN M_ITEMS.LASTBUYDATE */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_FILTER_ITEMS_PER_STORE_01 (
    PIDDOC INTEGER)
RETURNS (
    IDITEM INTEGER /* TYPE OF COLUMN M_ITEMS_PER_STORE.IDITEM */,
    IDSTORE INTEGER /* TYPE OF COLUMN M_ITEMS_PER_STORE.IDSTORE */,
    AMOUNT NUMERIC(12,4) /* TYPE OF COLUMN M_ITEMS_PER_STORE.AMOUNT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_FILTER_ROWS_01 (
    PIDDOC INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN M_ROWS.ID */,
    IDDOC INTEGER /* TYPE OF COLUMN M_ROWS.IDDOC */,
    IDITEM INTEGER /* TYPE OF COLUMN M_ROWS.IDITEM */,
    IDPVNRATE INTEGER /* TYPE OF COLUMN M_ROWS.IDPVNRATE */,
    UNITS INTEGER /* TYPE OF COLUMN M_ROWS.UNITS */,
    IDCREDROW INTEGER /* TYPE OF COLUMN M_ROWS.IDCREDROW */,
    AMOUNT NUMERIC(12,4) /* TYPE OF COLUMN M_ROWS.AMOUNT */,
    DISCOUNT FLOAT /* TYPE OF COLUMN M_ROWS.DISCOUNT */,
    PRICE0 NUMERIC(15,6) /* TYPE OF COLUMN M_ROWS.PRICE0 */,
    PRICE NUMERIC(15,6) /* TYPE OF COLUMN M_ROWS.PRICE */,
    BUYPRICE NUMERIC(15,6) /* TYPE OF COLUMN M_ROWS.BUYPRICE */,
    OLDPRICE NUMERIC(15,6) /* TYPE OF COLUMN M_ROWS.OLDPRICE */,
    TOLDPRICE NUMERIC(15,2) /* TYPE OF COLUMN M_ROWS.TOLDPRICE */,
    TPRICE NUMERIC(15,2) /* TYPE OF COLUMN M_ROWS.TPRICE */,
    TBUYPRICE NUMERIC(15,2) /* TYPE OF COLUMN M_ROWS.TBUYPRICE */,
    IDSEQ BIGINT /* TYPE OF COLUMN M_ROWS.IDSEQ */,
    ACC6 VARCHAR(8) /* TYPE OF COLUMN M_ROWS.ACC6 */,
    ACC7 VARCHAR(8) /* TYPE OF COLUMN M_ROWS.ACC7 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_ADDRESSSES_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_AUX_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_BANKACCOUNTS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_BANKS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_CONTACTS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_COUNTRIES_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_DISC_LISTS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_DISC_LISTS_P_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_DISC_LISTS_R_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_DOCS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_DOCSEQ
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_DOCSEQ2 (
    CT INTEGER)
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_DOCTYPES_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_INV_DOCS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_INV_ROWS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_ITEMS_CAT_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_ITEMS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_PAYMENTTYPE_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_PRICE_LISTS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_PRICE_LISTS_P_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_PRICE_LISTS_R_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_PVNRATES_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_PVNRATES2_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_PVNTEXTS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_ROWS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_STORES_CAT_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_STORES_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_STORETYPE_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_TRANSACTIONTYPE_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_UNITS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GEN_VEHICLES_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_GETCOUNTSFOREVENTS (
    PTP INTEGER,
    PID INTEGER)
RETURNS (
    RCOUNT INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_ITEMMOVEMENT_01 (
    PIDITEM INTEGER,
    PDATE1 DATE,
    PDATE2 DATE)
RETURNS (
    GTP INTEGER,
    DT DATE,
    SR VARCHAR(10) /* TYPE OF COLUMN M_DOCS.SR */,
    NR VARCHAR(20) /* TYPE OF COLUMN M_DOCS.NR */,
    TP INTEGER /* TYPE OF COLUMN M_DOCS.TP */,
    IDSTOREOUT INTEGER,
    IDSTOREIN INTEGER,
    AMOUNT DAMOUNT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_MAKELINKS_01A (
    PIDROW INTEGER,
    PSTARTDATE DATE)
RETURNS (
    RESULT VARCHAR(300))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_MAKELINKS_01B (
    PIDDOC INTEGER,
    PNEWDOCSTATE INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_MAKELINKS_02A (
    PIDROW INTEGER)
RETURNS (
    BUYPRICE DPRICEX,
    TBUYPRICE DPRICEX,
    RESULT VARCHAR(300))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_MAKELINKS_02B (
    PIDDOC INTEGER)
RETURNS (
    IDROW INTEGER,
    BUYPRICE DPRICEX,
    TBUYPRICE DPRICEX,
    RESULT VARCHAR(300))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_MAKELINKS_11 (
    PIDDOC INTEGER,
    PNEWDOCSTATE INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_MAKELINKS_12 (
    PIDDOC INTEGER)
RETURNS (
    IDITEM INTEGER,
    LASTBUYPRICE DPRICEX)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_MAKELINKS_13 (
    PIDDOC INTEGER,
    PNEWDOCSTATE INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_MAKELINKS_14A (
    PIDDOC INTEGER)
RETURNS (
    IDITEM INTEGER,
    PRODCOST DPRICEX)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_MAKELINKS_14B (
    PIDDOC INTEGER,
    PNEWDOCSTATE INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_MAKELINKS_21A (
    PIDROW INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_MAKELINKS_21B (
    PIDDOC INTEGER,
    PNEWDOCSTATE INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_MAKELINKS_22A (
    PIDROW INTEGER)
RETURNS (
    BUYPRICE DPRICEX,
    TBUYPRICE MONEY,
    RESULT VARCHAR(300))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_MAKELINKS_22B (
    PIDDOC INTEGER)
RETURNS (
    IDROW INTEGER,
    BUYPRICE DPRICEX,
    TBUYPRICE MONEY,
    RESULT VARCHAR(300))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_MAKELINKS_23A (
    PIDROW INTEGER)
RETURNS (
    CREDDOCID INTEGER,
    CREDROWID INTEGER,
    IDITEM INTEGER,
    AMOUNT DAMOUNT,
    BUYPRICE DPRICEX,
    TBUYPRICE MONEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_MAKELINKS_23B (
    PIDDOC INTEGER)
RETURNS (
    IDROW INTEGER,
    CREDDOCID INTEGER,
    CREDROWID INTEGER,
    IDITEM INTEGER,
    AMOUNT DAMOUNT,
    BUYPRICE DPRICEX,
    TBUYPRICE MONEY,
    CREDDOCDT DATE,
    CREDDOCSR VARCHAR(10) /* TYPE OF COLUMN M_DOCS.SR */,
    CREDDOCNR VARCHAR(20) /* TYPE OF COLUMN M_DOCS.NR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_MAKELINKS_31A (
    PIDROW INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_MAKELINKS_31B (
    PIDDOC INTEGER,
    PNEWDOCSTATE INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_MAKELINKS_32A (
    PIDROW INTEGER)
RETURNS (
    CREDDOCID INTEGER,
    CREDROWID INTEGER,
    IDITEM INTEGER,
    AMOUNT DAMOUNT,
    PRICE DPRICEX,
    TPRICE MONEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_MAKELINKS_32B (
    PIDDOC INTEGER)
RETURNS (
    IDROW INTEGER,
    CREDDOCID INTEGER,
    CREDROWID INTEGER,
    IDITEM INTEGER,
    AMOUNT DAMOUNT,
    PRICE DPRICEX,
    TPRICE MONEY,
    CREDDOCDT DATE,
    CREDDOCSR VARCHAR(10) /* TYPE OF COLUMN M_DOCS.SR */,
    CREDDOCNR VARCHAR(20) /* TYPE OF COLUMN M_DOCS.NR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_MAKELINKS_33A (
    PIDROW INTEGER)
RETURNS (
    SELLPRICE DPRICEX,
    SELLTOTALPRICE DPRICEX,
    BUYPRICE DPRICEX,
    BUYTOTALPRICE DPRICEX,
    RESULT VARCHAR(300))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_MAKELINKS_33B (
    PIDDOC INTEGER)
RETURNS (
    IDROW INTEGER,
    SELLPRICE DPRICEX,
    SELLTOTALPRICE DPRICEX,
    BUYPRICE DPRICEX,
    BUYTOTALPRICE DPRICEX,
    RESULT VARCHAR(300))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_MAKELINKS_41 (
    PIDDOC INTEGER,
    PNEWDOCSTATE INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_MAKELINKS_51A (
    PIDROW INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_MAKELINKS_51B (
    PIDDOC INTEGER,
    PNEWDOCSTATE INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_MAKELINKS_52 (
    PIDDOC INTEGER)
RETURNS (
    RIDROW INTEGER,
    RESULT VARCHAR(300))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_MAKELINKS_61A (
    PIDROW INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_MAKELINKS_61B (
    PIDDOC INTEGER,
    PNEWDOCSTATE INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_MAKELINKS_62 (
    PIDDOC INTEGER)
RETURNS (
    RIDROW INTEGER,
    RESULT VARCHAR(300))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_RECALC_ROWSISGONE_1
RETURNS (
    RET INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_RECALC_ROWSISGONE_2 (
    PIDDOC INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_M_RECALCAMOUNTS_1
RETURNS (
    RET INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_RECALCAMOUNTS_2 (
    PIDDOC INTEGER)
RETURNS (
    RET INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_RECALCITEM_01A (
    PSTARTDATE DATE,
    PPROGRESSTEP INTEGER)
RETURNS (
    RET INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_RECALCITEM_01A_1 (
    PSTARTDATE DATE,
    PPROGRESSTEP INTEGER)
RETURNS (
    RET INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_RECALCITEM_01B (
    PSTARTDATE DATE,
    PPROGRESSTEP INTEGER)
RETURNS (
    RET INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_RECALCITEM_01C (
    PIDDOC INTEGER,
    PNEWDOCSTATE INTEGER,
    PPROGRESSTEP INTEGER)
RETURNS (
    RET INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_RECALCITEM_01C_1 (
    PIDDOC INTEGER,
    PNEWDOCSTATE INTEGER,
    PPROGRESSTEP INTEGER)
RETURNS (
    RET INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_RECALCITEM_04 (
    PIDROW INTEGER,
    PCURIDROW1 INTEGER)
RETURNS (
    RCURAMOUNTUSED DAMOUNT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_RECALCITEM_05 (
    PIDROW INTEGER,
    PCURIDROW1 INTEGER)
RETURNS (
    RCURAMOUNTUSED INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_RECALCITEM_06 (
    PIDROW INTEGER,
    PCURIDROW1 INTEGER)
RETURNS (
    RCURAMOUNTUSED INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_RECALCITEM_07 (
    PIDROW INTEGER,
    PCURIDROW1 INTEGER)
RETURNS (
    RCURAMOUNTUSED INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_RECALCLASTDATES_1
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_M_REMOVELINKS_01 (
    PIDDOC INTEGER,
    PNEWDOCSTATE INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_REP_COSTACC_1 (
    PDT1 DATE,
    PDT2 DATE)
RETURNS (
    TP INTEGER,
    ACC1 VARCHAR(8) /* TYPE OF COLUMN M_DOCS.ACCIN */,
    ACC2 VARCHAR(8) /* TYPE OF COLUMN M_DOCS.ACCIN */,
    COST MONEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_REP_COSTACC_2 (
    PDT1 DATE,
    PDT2 DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN M_DOCS.ID */,
    DT DATE /* TYPE OF COLUMN M_DOCS.DT */,
    SR VARCHAR(10) /* TYPE OF COLUMN M_DOCS.SR */,
    NR VARCHAR(20) /* TYPE OF COLUMN M_DOCS.NR */,
    TP INTEGER /* TYPE OF COLUMN M_DOCS.TP */,
    IDSTOREOUT INTEGER /* TYPE OF COLUMN M_DOCS.IDSTOREOUT */,
    IDSTOREIN INTEGER /* TYPE OF COLUMN M_DOCS.IDSTOREIN */,
    ACC1 VARCHAR(8) /* TYPE OF COLUMN M_DOCS.ACCIN */,
    ACC2 VARCHAR(8) /* TYPE OF COLUMN M_DOCS.ACCIN */,
    COST MONEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_REP_ITEMLINKS_1 (
    PIDITEM INTEGER,
    PDT1 DATE,
    PDT2 DATE)
RETURNS (
    AIDD INTEGER /* TYPE OF COLUMN M_ROWS.ID */,
    AIDR INTEGER /* TYPE OF COLUMN M_DOCS.ID */,
    ADT DATE /* TYPE OF COLUMN M_DOCS.DT */,
    ASR VARCHAR(10) /* TYPE OF COLUMN M_DOCS.SR */,
    ANR VARCHAR(20) /* TYPE OF COLUMN M_DOCS.NR */,
    ATP INTEGER /* TYPE OF COLUMN M_DOCS.TP */,
    AIDSTOREIN INTEGER /* TYPE OF COLUMN M_DOCS.IDSTOREIN */,
    AIDSTOREOUT INTEGER /* TYPE OF COLUMN M_DOCS.IDSTOREOUT */,
    AAMOUNT NUMERIC(12,4) /* TYPE OF COLUMN M_ROWS.AMOUNT */,
    ABUYPRICE NUMERIC(15,6) /* TYPE OF COLUMN M_ROWS.BUYPRICE */,
    BIDD INTEGER /* TYPE OF COLUMN M_ROWS.ID */,
    BIDR INTEGER /* TYPE OF COLUMN M_DOCS.ID */,
    BDT DATE /* TYPE OF COLUMN M_DOCS.DT */,
    BSR VARCHAR(10) /* TYPE OF COLUMN M_DOCS.SR */,
    BNR VARCHAR(20) /* TYPE OF COLUMN M_DOCS.NR */,
    BTP INTEGER /* TYPE OF COLUMN M_DOCS.TP */,
    BIDSTOREIN INTEGER /* TYPE OF COLUMN M_DOCS.IDSTOREIN */,
    BIDSTOREOUT INTEGER /* TYPE OF COLUMN M_DOCS.IDSTOREOUT */,
    BAMOUNT NUMERIC(12,4) /* TYPE OF COLUMN M_ROWS.AMOUNT */,
    BBUYPRICE NUMERIC(15,6) /* TYPE OF COLUMN M_ROWS.BUYPRICE */,
    AMOUNTLINKED NUMERIC(12,4) /* TYPE OF COLUMN M_ROWS.AMOUNT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_REP_ITEMSAMOUNTS_1 (
    PDT1 DATE,
    PDT2 DATE,
    PCAT INTEGER)
RETURNS (
    IDITEM INTEGER,
    TP INTEGER,
    AMOUNT DAMOUNT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_REP_ITEMSAMOUNTS_2 (
    PDT1 DATE,
    PDT2 DATE,
    PCAT INTEGER)
RETURNS (
    IDITEM INTEGER,
    TP INTEGER,
    AMOUNT DAMOUNT,
    TBUYPRICE MONEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_REP_ITEMSAMOUNTS_3 (
    PDT1 DATE,
    PDT2 DATE,
    PCAT INTEGER)
RETURNS (
    IDITEM INTEGER,
    TP INTEGER,
    AMOUNT DAMOUNT,
    TSELLPRICE MONEY,
    TBUYPRICE MONEY,
    ITEMPRICE DPRICEX)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_REP_ITEMSAMOUNTS_4 (
    PDT1 DATE,
    PDT2 DATE,
    PCAT INTEGER)
RETURNS (
    IDSTORE INTEGER,
    TP INTEGER,
    AMOUNT DAMOUNT,
    TSELLPRICE MONEY,
    TBUYPRICE MONEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_REP_ITEMSAMOUNTS_5 (
    PDT1 DATE,
    PDT2 DATE,
    PCAT INTEGER)
RETURNS (
    IDCAT INTEGER,
    TP INTEGER,
    AMOUNT DAMOUNT,
    TSELLPRICE MONEY,
    TBUYPRICE MONEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_REP_ITEMSAMOUNTS_6 (
    PDT1 DATE,
    PDT2 DATE,
    PCAT INTEGER,
    PIDSTORE INTEGER)
RETURNS (
    IDITEM INTEGER,
    TP INTEGER,
    AMOUNT DAMOUNT,
    TSELLPRICE MONEY,
    TBUYPRICE MONEY,
    ITEMPRICE DPRICEX)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_M_REP_ITEMSINSTORE_1 (
    PIDSTORE INTEGER)
RETURNS (
    IDITEM INTEGER,
    ITEMCODE VARCHAR(30) /* TYPE OF COLUMN M_ITEMS.BARCODE */,
    AMOUNT DAMOUNT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_P_GEN_CAT1_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_P_GEN_CATD_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_P_GEN_CATT_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_P_GEN_DEPARTMENTS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_P_GEN_EVENTS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_P_GEN_ITEMS_EVENTS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_P_GEN_ITEMS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_P_GEN_PLACES_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_P_GEN_TAXDEPRECYEAR_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_PARAMS (
    USERNAME VARCHAR(20))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN PARAMS.ID */,
    PNAME VARCHAR(20) /* TYPE OF COLUMN PARAMS.PNAME */,
    PVALUE VARCHAR(50) /* TYPE OF COLUMN PARAMS.PVALUE */,
    USR VARCHAR(15) /* TYPE OF COLUMN PARAMS.USR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_SET_USERNAME (
    USERNAME VARCHAR(15))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_SYS_CHECK_USER (
    PUSR VARCHAR(15) /* TYPE OF COLUMN USERS.NM */,
    PPSW VARCHAR(15) /* TYPE OF COLUMN USERS.PSW */)
RETURNS (
    RET VARCHAR(1))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_X_CLEAR_A
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_X_CLEAR_F
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_X_CLEAR_P
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_X_GENIDS_A
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_X_GENIDS_F
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_X_GENIDS_P
AS
BEGIN
  EXIT;
END^






SET TERM ; ^



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE A_BANKS (
    ID    INTEGER NOT NULL,
    SID   VARCHAR(8) NOT NULL,
    NAME  VARCHAR(50) NOT NULL
);

CREATE TABLE A_DEPARTMENTS (
    ID        VARCHAR(15) NOT NULL,
    DESCR     VARCHAR(50),
    ACC1      VARCHAR(15),
    ACC2      VARCHAR(15),
    ACC3      VARCHAR(15),
    ACC4      VARCHAR(15),
    ACC5      VARCHAR(15),
    ACC6      VARCHAR(15),
    USED      SMALLINT DEFAULT 1 NOT NULL,
    USED_DT1  DATE,
    USED_DT2  DATE
);

CREATE TABLE A_EVENT_TYPES (
    ID           INTEGER NOT NULL,
    DESCR        VARCHAR(100),
    SN           INTEGER DEFAULT 0,
    IS_DATE_INT  SMALLINT DEFAULT 0,
    TP1          INTEGER DEFAULT 0,
    TP2          INTEGER DEFAULT 0 NOT NULL,
    SCODE        VARCHAR(5)
);

CREATE TABLE A_EVENT_TYPES2 (
    ID     INTEGER NOT NULL,
    TAG    VARCHAR(10) NOT NULL,
    DESCR  VARCHAR(50) NOT NULL
);

CREATE TABLE A_EVENTS (
    ID               INTEGER NOT NULL,
    IDP              INTEGER NOT NULL,
    IDA              INTEGER,
    IDN              INTEGER NOT NULL,
    IDN2             INTEGER,
    DATE1            DATE NOT NULL,
    DATE2            DATE,
    DATE3            DATE,
    DESCR            VARCHAR(200),
    DOCNR            VARCHAR(20),
    SCODE            VARCHAR(5),
    DAYS             FLOAT DEFAULT 0 NOT NULL,
    OCCUPATION_CODE  VARCHAR(7),
    DAYS2            FLOAT DEFAULT 0 NOT NULL
);

CREATE TABLE A_FP_PAYLISTS (
    ID       INTEGER NOT NULL,
    SNR      INTEGER DEFAULT 1 NOT NULL,
    YR       INTEGER NOT NULL,
    MT       INTEGER NOT NULL,
    PAYDATE  DATE NOT NULL,
    DESCR    VARCHAR(50)
);

CREATE TABLE A_FP_PAYLISTS_R (
    ID           INTEGER NOT NULL,
    IDS          INTEGER NOT NULL,
    IDP          INTEGER NOT NULL,
    SNR          INTEGER DEFAULT 1 NOT NULL,
    DATE1        DATE NOT NULL,
    DATE2        DATE NOT NULL,
    PAYDATE      DATE NOT NULL,
    TAX_TP       SMALLINT DEFAULT 0 NOT NULL,
    INCOME_ID    VARCHAR(4) DEFAULT '1001' NOT NULL,
    DESCR        VARCHAR(50),
    PAY0         DOM_MONEY DEFAULT 0 NOT NULL,
    TAXED        DOM_MONEY DEFAULT 0 NOT NULL,
    NOSAI        DOM_MONEY DEFAULT 0 NOT NULL,
    NOTTAXED     DOM_MONEY DEFAULT 0 NOT NULL,
    AUTHORS_FEE  DOM_MONEY DEFAULT 0 NOT NULL,
    SIRATETP     SMALLINT DEFAULT 0 NOT NULL,
    SIRATEDD     DOM_MONEY DEFAULT 0 NOT NULL,
    SIRATEDN     DOM_MONEY DEFAULT 0 NOT NULL,
    SIDD         DOM_MONEY DEFAULT 0 NOT NULL,
    SIDN         DOM_MONEY DEFAULT 0 NOT NULL,
    IINEX_PERC   DOM_MONEY DEFAULT 0 NOT NULL,
    IINEX        DOM_MONEY DEFAULT 0 NOT NULL,
    IIN_FROM     DOM_MONEY DEFAULT 0 NOT NULL,
    IIN_RATE     DOM_MONEY DEFAULT 0 NOT NULL,
    IIN          DOM_MONEY DEFAULT 0 NOT NULL,
    CASH         DOM_MONEY DEFAULT 0 NOT NULL
);

CREATE TABLE A_HOLIDAYS (
    DT   DATE NOT NULL,
    TAG  SMALLINT DEFAULT 0
);

CREATE TABLE A_INCOME_CODES (
    ID     VARCHAR(4) NOT NULL,
    DESCR  VARCHAR(400) NOT NULL,
    P1     INTEGER DEFAULT 0 NOT NULL,
    P2     INTEGER DEFAULT 0 NOT NULL,
    USED   INTEGER DEFAULT 1 NOT NULL
);

CREATE TABLE A_PASTDATA (
    ID         INTEGER NOT NULL,
    IDP        INTEGER NOT NULL,
    YR         INTEGER DEFAULT 2015 NOT NULL,
    MT         INTEGER DEFAULT 1 NOT NULL,
    BRUTO      DOM_MONEY DEFAULT 0 NOT NULL,
    PAY        DOM_MONEY DEFAULT 0 NOT NULL,
    CALDAYS    INTEGER DEFAULT 0 NOT NULL,
    DAYSMT     INTEGER DEFAULT 0 NOT NULL,
    HOURSMT    DOM_HOURS DEFAULT 0 NOT NULL,
    DAYS       INTEGER DEFAULT 0 NOT NULL,
    HOURS      DOM_HOURS DEFAULT 0 NOT NULL,
    PLANDAYS   INTEGER DEFAULT 0 NOT NULL,
    PLANHOURS  FLOAT DEFAULT 0 NOT NULL,
    BRUTO2     DOM_MONEY DEFAULT 0 NOT NULL
);

CREATE TABLE A_PASTDATA_2 (
    ID                 INTEGER NOT NULL,
    IDP                INTEGER NOT NULL,
    DT                 DATE NOT NULL,
    PAY_TAXED          DOM_MONEY DEFAULT 0 NOT NULL,
    PAY_NOSAI          DOM_MONEY DEFAULT 0 NOT NULL,
    PAY_NOTTAXED       DOM_MONEY DEFAULT 0 NOT NULL,
    UNTAXED_MINIMUM    DOM_MONEY DEFAULT 0 NOT NULL,
    IINEX_DEPENDANTS   DOM_MONEY DEFAULT 0 NOT NULL,
    IINEX2             DOM_MONEY DEFAULT 0 NOT NULL,
    IINEX2_TP          SMALLINT DEFAULT 0 NOT NULL,
    PF_NT              DOM_MONEY DEFAULT 0 NOT NULL,
    LI_NT              DOM_MONEY DEFAULT 0 NOT NULL,
    HI_NT              DOM_MONEY DEFAULT 0 NOT NULL,
    IINEX_EXP          DOM_MONEY DEFAULT 0 NOT NULL,
    IIN                DOM_MONEY DEFAULT 0 NOT NULL,
    PAY                DOM_MONEY DEFAULT 0 NOT NULL,
    ADVANCE            DOM_MONEY DEFAULT 0 NOT NULL,
    WITHHOLDINGS       DOM_MONEY DEFAULT 0 NOT NULL,
    PAYT               DOM_MONEY DEFAULT 0 NOT NULL,
    PAY_TAXED_P        DOM_MONEY DEFAULT 0 NOT NULL,
    PAY_NOSAI_P        DOM_MONEY DEFAULT 0 NOT NULL,
    PAY_NOTTAXED_P     DOM_MONEY DEFAULT 0 NOT NULL,
    UNTAXED_MINIMUM_P  DOM_MONEY DEFAULT 0 NOT NULL,
    IINEX_DPENDANTS_P  DOM_MONEY DEFAULT 0 NOT NULL,
    IINEX2_P           DOM_MONEY DEFAULT 0 NOT NULL,
    PF_NT_P            DOM_MONEY DEFAULT 0 NOT NULL,
    LI_NT_P            DOM_MONEY DEFAULT 0 NOT NULL,
    HI_NT_P            DOM_MONEY DEFAULT 0 NOT NULL,
    IINEX_EXP_P        DOM_MONEY DEFAULT 0 NOT NULL,
    IIN_P              DOM_MONEY DEFAULT 0 NOT NULL,
    PAY_P              DOM_MONEY DEFAULT 0 NOT NULL,
    ADVANCE_P          DOM_MONEY DEFAULT 0 NOT NULL,
    WITHHOLDINGS_P     DOM_MONEY DEFAULT 0 NOT NULL,
    PAYT_P             DOM_MONEY DEFAULT 0 NOT NULL
);

CREATE TABLE A_PAYLIST_TEMPL (
    ID     INTEGER NOT NULL,
    SNR    SMALLINT DEFAULT 0 NOT NULL,
    CODE   VARCHAR(15),
    DEP    VARCHAR(15),
    DESCR  VARCHAR(50),
    USED   SMALLINT DEFAULT 1 NOT NULL
);

CREATE TABLE A_PAYLIST_TEMPL_R (
    ID    INTEGER NOT NULL,
    IDS   INTEGER NOT NULL,
    IDP   INTEGER NOT NULL,
    IDAM  INTEGER NOT NULL,
    SNR   INTEGER DEFAULT 0 NOT NULL
);

CREATE TABLE A_PAYLISTS (
    ID         INTEGER NOT NULL,
    SNR        INTEGER DEFAULT 0 NOT NULL,
    YR         INTEGER DEFAULT 0 NOT NULL,
    MT         INTEGER DEFAULT 0 NOT NULL,
    DT         DATE NOT NULL,
    DEP        VARCHAR(15),
    DESCR      VARCHAR(50) DEFAULT '?' NOT NULL,
    DOPAY      SMALLINT DEFAULT 1 NOT NULL,
    TOTAL_PAY  DOM_MONEY DEFAULT 0 NOT NULL
);

CREATE TABLE A_PAYLISTS_R (
    ID                  INTEGER NOT NULL,
    IDS                 INTEGER NOT NULL,
    IDP                 INTEGER NOT NULL,
    IDAM                INTEGER NOT NULL,
    SNR                 INTEGER DEFAULT 0 NOT NULL,
    PAY0                DOM_MONEY DEFAULT 0 NOT NULL,
    IIN0                DOM_MONEY DEFAULT 0 NOT NULL,
    ADVANCE0            DOM_MONEY DEFAULT 0 NOT NULL,
    WITHHOLDINGS0       DOM_MONEY DEFAULT 0 NOT NULL,
    TPAY0               DOM_MONEY DEFAULT 0 NOT NULL,
    PAY                 DOM_MONEY DEFAULT 0 NOT NULL,
    IIN                 DOM_MONEY DEFAULT 0 NOT NULL,
    ADVANCE             DOM_MONEY DEFAULT 0 NOT NULL,
    WITHHOLDINGS        DOM_MONEY DEFAULT 0 NOT NULL,
    TPAY                DOM_MONEY DEFAULT 0 NOT NULL,
    PAY_REVERSE         DOM_MONEY DEFAULT 0 NOT NULL,
    IIN_REVERSE         DOM_MONEY DEFAULT 0 NOT NULL,
    DT1                 DATE,
    DT2                 DATE,
    R1                  FLOAT DEFAULT 0 NOT NULL,
    R2                  FLOAT DEFAULT 0 NOT NULL,
    S0                  DOM_MONEY DEFAULT 0 NOT NULL,
    S1                  DOM_MONEY DEFAULT 0 NOT NULL,
    S2                  DOM_MONEY DEFAULT 0 NOT NULL,
    ID_SHR_1            INTEGER,
    ID_SHR_2            INTEGER,
    PAY_TAXED_1         DOM_MONEY DEFAULT 0 NOT NULL,
    PAY_NOSAI_1         DOM_MONEY DEFAULT 0 NOT NULL,
    PAY_NOTTAXED_1      DOM_MONEY DEFAULT 0 NOT NULL,
    UNTAXED_MINIMUM_1   DOM_MONEY DEFAULT 0 NOT NULL,
    IINEX_DEPENDANTS_1  DOM_MONEY DEFAULT 0 NOT NULL,
    IINEX2_1            DOM_MONEY DEFAULT 0 NOT NULL,
    IINEX2_TP_1         SMALLINT DEFAULT 0 NOT NULL,
    DNSI_1              DOM_MONEY DEFAULT 0 NOT NULL,
    PFNT_1              DOM_MONEY DEFAULT 0 NOT NULL,
    LINT_1              DOM_MONEY DEFAULT 0 NOT NULL,
    HINT_1              DOM_MONEY DEFAULT 0 NOT NULL,
    IINEX_EXP_1         DOM_MONEY DEFAULT 0 NOT NULL,
    IIN_1               DOM_MONEY DEFAULT 0 NOT NULL,
    PAY_TAXED_2         DOM_MONEY DEFAULT 0 NOT NULL,
    PAY_NOSAI_2         DOM_MONEY DEFAULT 0 NOT NULL,
    PAY_NOTTAXED_2      DOM_MONEY DEFAULT 0 NOT NULL,
    UNTAXED_MINIMUM_2   DOM_MONEY DEFAULT 0 NOT NULL,
    IINEX_DEPENDANTS_2  DOM_MONEY DEFAULT 0 NOT NULL,
    IINEX2_2            DOM_MONEY DEFAULT 0 NOT NULL,
    IINEX2_TP_2         SMALLINT DEFAULT 0 NOT NULL,
    DNSI_2              DOM_MONEY DEFAULT 0 NOT NULL,
    PFNT_2              DOM_MONEY DEFAULT 0 NOT NULL,
    LINT_2              DOM_MONEY DEFAULT 0 NOT NULL,
    HINT_2              DOM_MONEY DEFAULT 0 NOT NULL,
    IINEX_EXP_2         DOM_MONEY DEFAULT 0 NOT NULL,
    IIN_2               DOM_MONEY DEFAULT 0 NOT NULL
);

CREATE TABLE A_PERSONS (
    ID                INTEGER NOT NULL,
    FNAME             VARCHAR(20) NOT NULL,
    LNAME             VARCHAR(20) NOT NULL,
    NAME_DATIVE       VARCHAR(40),
    NAME_ACCUSATIVE   VARCHAR(40),
    GENDER            SMALLINT DEFAULT 0 NOT NULL,
    BIRTH_DATE        DATE NOT NULL,
    PK                VARCHAR(20),
    ADDRESS           VARCHAR(200),
    CITY              VARCHAR(20),
    STATE             VARCHAR(20),
    COUNTRY           VARCHAR(20),
    POSTAL_CODE       VARCHAR(10),
    TERRITORIAL_CODE  VARCHAR(10),
    PASSPORT_NO       VARCHAR(20),
    PASSPORT_ISSUER   VARCHAR(50),
    PASSPORT_DATE     DATE,
    PHONE             VARCHAR(30),
    EMAIL             VARCHAR(50),
    BANK_ID           INTEGER,
    BANK_ACC          VARCHAR(50),
    COMMENTS          VARCHAR(1000),
    PAY0              DOM_MONEY DEFAULT 0 NOT NULL,
    IIN0              DOM_MONEY DEFAULT 0 NOT NULL,
    ADVANCE           DOM_MONEY DEFAULT 0 NOT NULL,
    VACATION_DAYS     FLOAT DEFAULT 0 NOT NULL,
    USED              SMALLINT DEFAULT 1 NOT NULL,
    USED_DT1          DATE,
    USED_DT2          DATE
);

CREATE TABLE A_PERSONS_FIZ (
    ID                INTEGER NOT NULL,
    FNAME             VARCHAR(20) NOT NULL,
    LNAME             VARCHAR(20) NOT NULL,
    NAME_DATIVE       VARCHAR(40),
    NAME_ACCUSATIVE   VARCHAR(40),
    GENDER            SMALLINT DEFAULT 0 NOT NULL,
    BIRTH_DATE        DATE NOT NULL,
    PK                VARCHAR(20),
    ADDRESS           VARCHAR(200),
    CITY              VARCHAR(20),
    STATE             VARCHAR(20),
    COUNTRY           VARCHAR(20),
    POSTAL_CODE       VARCHAR(10),
    TERRITORIAL_CODE  VARCHAR(10),
    PASSPORT_NO       VARCHAR(20),
    PASSPORT_ISSUER   VARCHAR(50),
    PASSPORT_DATE     DATE,
    PHONE             VARCHAR(30),
    EMAIL             VARCHAR(50),
    BANK_ID           INTEGER,
    BANK_ACC          VARCHAR(50),
    TAXREG_NO         VARCHAR(20),
    COMMENTS          VARCHAR(1000),
    USED              SMALLINT DEFAULT 1 NOT NULL,
    USED_DT1          DATE,
    USED_DT2          DATE
);

CREATE TABLE A_PERSONS_R (
    ID                INTEGER NOT NULL,
    IDP               INTEGER NOT NULL,
    EDIT_DATE         DATE NOT NULL,
    FNAME             VARCHAR(20) NOT NULL,
    LNAME             VARCHAR(20) NOT NULL,
    PERSON_CODE       VARCHAR(20) NOT NULL,
    TERRITORIAL_CODE  VARCHAR(10),
    TAXDOC_SERIAL     VARCHAR(10),
    TAXDOC_NO         VARCHAR(20),
    TAXDOC_ISSUER     VARCHAR(50),
    TAXREG_NO         VARCHAR(20),
    INVALID           SMALLINT DEFAULT 0 NOT NULL,
    PENSIONER         SMALLINT DEFAULT 0 NOT NULL,
    PRISONER          SMALLINT DEFAULT 0 NOT NULL,
    REPRES            SMALLINT DEFAULT 0 NOT NULL,
    PRET              SMALLINT DEFAULT 0 NOT NULL,
    APGAD_SK          SMALLINT DEFAULT 0 NOT NULL,
    PENSIONER_SP      SMALLINT DEFAULT 0 NOT NULL,
    NOT_OSA           SMALLINT DEFAULT 0 NOT NULL
);

CREATE TABLE A_PIECEWORK (
    ID              INTEGER NOT NULL,
    IDK             INTEGER NOT NULL,
    IDP             INTEGER NOT NULL,
    IDA             INTEGER NOT NULL,
    DT              DATE NOT NULL,
    UNIT            VARCHAR(10) DEFAULT '?' NOT NULL,
    QUANTITY        DOM_MONEY4,
    RATE            DOM_MONEY4,
    BONUS           FLOAT DEFAULT 0 NOT NULL,
    PAY             DOM_MONEY4,
    TIMEUNIT        INTEGER DEFAULT 0 NOT NULL,
    TIMEUSE         FLOAT DEFAULT 0 NOT NULL,
    TIMEUSEINHOURS  FLOAT DEFAULT 0 NOT NULL
);

CREATE TABLE A_PIECEWORK_CATALOG (
    ID              INTEGER NOT NULL,
    IDS             INTEGER NOT NULL,
    CODE            VARCHAR(20) NOT NULL,
    DESCR           VARCHAR(200) DEFAULT '?' NOT NULL,
    UNIT            VARCHAR(10) DEFAULT '?' NOT NULL,
    RATE            DOM_MONEY4 DEFAULT 0 NOT NULL,
    TIMEUNIT        INTEGER DEFAULT 0 NOT NULL,
    TIMEUSE         FLOAT DEFAULT 0 NOT NULL,
    TIMEUSEINHOURS  FLOAT DEFAULT 0 NOT NULL,
    USED            SMALLINT DEFAULT 1 NOT NULL
);

CREATE TABLE A_PIECEWORK_CATSTRUCT (
    ID     INTEGER NOT NULL,
    CODE   VARCHAR(20) NOT NULL,
    DESCR  VARCHAR(200) DEFAULT '?' NOT NULL,
    USED   SMALLINT DEFAULT 1 NOT NULL
);

CREATE TABLE A_PLUSMINUS_FROM (
    ID      INTEGER NOT NULL,
    DESCR   VARCHAR(50),
    TP1     INTEGER DEFAULT 0,
    TP2     INTEGER DEFAULT 0,
    TP3     INTEGER DEFAULT 0,
    SN      INTEGER DEFAULT 0,
    DESCR2  VARCHAR(50)
);

CREATE TABLE A_PLUSMINUS_TYPES (
    ID      INTEGER NOT NULL,
    DESCR   VARCHAR(50),
    DESCR2  VARCHAR(15),
    SN      INTEGER DEFAULT 0,
    TP1     INTEGER DEFAULT 0,
    TP2     INTEGER DEFAULT 0,
    TP3     INTEGER DEFAULT 0
);

CREATE TABLE A_POSITIONS (
    ID                    INTEGER NOT NULL,
    IDP                   INTEGER NOT NULL,
    IDDEP                 VARCHAR(15),
    TITLE                 VARCHAR(50) DEFAULT '?' NOT NULL,
    APPLY_IIN_EXEMPTIONS  SMALLINT DEFAULT 1 NOT NULL,
    PAY0                  DOM_MONEY DEFAULT 0 NOT NULL,
    IIN0                  DOM_MONEY DEFAULT 0 NOT NULL,
    ADVANCE               DOM_MONEY DEFAULT 0 NOT NULL,
    USED                  SMALLINT DEFAULT 1 NOT NULL,
    USED_DT1              DATE,
    USED_DT2              SMALLINT
);

CREATE TABLE A_POSITIONS_PLUSMINUS (
    ID          INTEGER NOT NULL,
    IDP         INTEGER NOT NULL,
    IDA         INTEGER,
    DATE1       DATE,
    DATE2       DATE,
    IDSV        INTEGER,
    IDNO        INTEGER,
    IDIE        INTEGER,
    DESCR       VARCHAR(50),
    RATE        DOM_MONEY DEFAULT 0 NOT NULL,
    RATE_TYPE   SMALLINT DEFAULT 0,
    IS_INAVPAY  SMALLINT DEFAULT 1 NOT NULL,
    IS_PAID     SMALLINT DEFAULT 1 NOT NULL
);

CREATE TABLE A_POSITIONS_R (
    ID                          INTEGER NOT NULL,
    IDA                         INTEGER NOT NULL,
    IDDEP                       VARCHAR(15),
    TITLE                       VARCHAR(50) DEFAULT '?' NOT NULL,
    TITLE_DATIVE                VARCHAR(50) DEFAULT '?' NOT NULL,
    TITLE_ACCUSATIVE            VARCHAR(50) DEFAULT '?' NOT NULL,
    SALARY_TYPE                 SMALLINT DEFAULT 0 NOT NULL,
    SIXDAYWEEK                  SMALLINT DEFAULT 0 NOT NULL,
    NORMAL_DAY_HOURS            INTEGER DEFAULT 8 NOT NULL,
    NORMAL_WEEK_HOURS           INTEGER DEFAULT 40 NOT NULL,
    RATE                        DOM_MONEY4 DEFAULT 0.00 NOT NULL,
    RATE_NIGHT                  DOM_MONEY4 DEFAULT 0.00 NOT NULL,
    RATE_NIGHT_TYPE             SMALLINT DEFAULT 0 NOT NULL,
    RATE_OVERTIME               DOM_MONEY4 DEFAULT 0 NOT NULL,
    RATE_OVERTIME_TYPE          SMALLINT DEFAULT 0 NOT NULL,
    RATE_HOLIDAY                DOM_MONEY4 DEFAULT 0 NOT NULL,
    RATE_HOLIDAY_TYPE           SMALLINT DEFAULT 0 NOT NULL,
    RATE_HOLIDAY_NIGHT          DOM_MONEY4 DEFAULT 0 NOT NULL,
    RATE_HOLIDAY_NIGHT_TYPE     SMALLINT DEFAULT 0 NOT NULL,
    RATE_HOLIDAY_OVERTIME       DOM_MONEY4 DEFAULT 0 NOT NULL,
    RATE_HOLIDAY_OVERTIME_TYPE  SMALLINT DEFAULT 0 NOT NULL,
    APPLY_IIN_EXEMPTIONS        SMALLINT DEFAULT 1 NOT NULL,
    ADVAMCE                     DOM_MONEY DEFAULT 0 NOT NULL,
    OCCUPATION_CODE             VARCHAR(7),
    USED                        SMALLINT DEFAULT 1 NOT NULL,
    EDIT_DATE                   DATE NOT NULL
);

CREATE TABLE A_PROFESSIONS (
    ID     VARCHAR(7) NOT NULL,
    DESCR  VARCHAR(300),
    CAT    SMALLINT DEFAULT 0,
    USED   SMALLINT DEFAULT 0
);

CREATE TABLE A_RATES (
    ID                 INTEGER NOT NULL,
    ONDATE             DATE NOT NULL,
    IIN_LIKME          DOM_MONEY DEFAULT 0,
    SIDD_PAMATLIKME    DOM_MONEY DEFAULT 0,
    SIDN_PAMATLIKME    DOM_MONEY DEFAULT 0,
    SIDD_PENS          DOM_MONEY DEFAULT 0,
    SIDN_PENS          DOM_MONEY DEFAULT 0,
    SIDD_IZDPENS       DOM_MONEY DEFAULT 0,
    SIDN_IZDPENS       DOM_MONEY DEFAULT 0,
    SIDD_IESLODZ       DOM_MONEY DEFAULT 0,
    SIDN_IESLODZ       DOM_MONEY DEFAULT 0,
    SIDD_IESLODZ_PENS  DOM_MONEY DEFAULT 0,
    SIDN_IESLODZ_PENS  DOM_MONEY DEFAULT 0,
    NEPLIEK_MIN        DOM_MONEY DEFAULT 0,
    APGAD              DOM_MONEY DEFAULT 0,
    INVALID_12         DOM_MONEY DEFAULT 0,
    INVALID_3          DOM_MONEY DEFAULT 0,
    REPR               DOM_MONEY DEFAULT 0,
    PRET               DOM_MONEY DEFAULT 0,
    URN                DOM_MONEY,
    MIN_PAY_MONTH      DOM_MONEY DEFAULT 0 NOT NULL,
    MIN_PAY_HOUR       DOM_MONEY DEFAULT 0 NOT NULL,
    IIN_LIKME_2        DOM_MONEY DEFAULT 0 NOT NULL,
    IIN_LIKME_3        DOM_MONEY DEFAULT 0 NOT NULL,
    IIN_SLIEKSNIS_1    DOM_MONEY DEFAULT 0 NOT NULL,
    IIN_SLIEKSNIS_2    DOM_MONEY DEFAULT 0 NOT NULL
);

CREATE TABLE A_REPORT_CODES (
    ID     INTEGER NOT NULL,
    CODE   VARCHAR(5) NOT NULL,
    DESCR  VARCHAR(700),
    USED   INTEGER DEFAULT 1,
    TP1    SMALLINT DEFAULT 0,
    TP2    SMALLINT DEFAULT 0
);

CREATE TABLE A_SALARY_PLUSMINUS (
    ID          INTEGER NOT NULL,
    IDP         INTEGER NOT NULL,
    IDA         INTEGER,
    IDAP        INTEGER,
    IDSX        INTEGER NOT NULL,
    IDSV        INTEGER,
    IDNO        INTEGER,
    IDIE        INTEGER,
    DESCR       VARCHAR(50),
    RATE        DOM_MONEY DEFAULT 0 NOT NULL,
    RATE_TYPE   SMALLINT DEFAULT 0 NOT NULL,
    AMOUNT      DOM_MONEY DEFAULT 0 NOT NULL,
    IS_INAVPAY  SMALLINT DEFAULT 1 NOT NULL,
    IS_PAID     SMALLINT DEFAULT 1 NOT NULL
);

CREATE TABLE A_SALARY_SHEET_TEMPL (
    ID     INTEGER NOT NULL,
    CODE   VARCHAR(15),
    DEP    VARCHAR(15),
    DESCR  VARCHAR(50) NOT NULL,
    USED   SMALLINT DEFAULT 0,
    SNR    SMALLINT DEFAULT 0 NOT NULL
);

CREATE TABLE A_SALARY_SHEET_TEMPL_R (
    ID    INTEGER NOT NULL,
    IDS   INTEGER NOT NULL,
    IDP   INTEGER NOT NULL,
    IDAM  INTEGER NOT NULL,
    SNR   INTEGER DEFAULT 0 NOT NULL
);

CREATE TABLE A_SALARY_SHEETS (
    ID       INTEGER NOT NULL,
    YR       INTEGER NOT NULL,
    MT       INTEGER NOT NULL,
    SNR      SMALLINT DEFAULT 0 NOT NULL,
    DT1      DATE,
    DT2      DATE,
    DESCR    VARCHAR(50),
    DEP      VARCHAR(15),
    KIND     SMALLINT DEFAULT 0 NOT NULL,
    IS_TEMP  SMALLINT DEFAULT 0 NOT NULL
);

CREATE TABLE A_SALARY_SHEETS_R (
    ID                               INTEGER NOT NULL,
    IDS                              INTEGER,
    IDSX                             INTEGER,
    IDST                             INTEGER,
    IS_TEMP                          SMALLINT DEFAULT 0,
    TYPE_TAG                         SMALLINT DEFAULT 0,
    IDP                              INTEGER,
    IDAM                             INTEGER,
    SNR                              SMALLINT DEFAULT 0 NOT NULL,
    FNAME                            VARCHAR(20),
    LNAME                            VARCHAR(20),
    POSITION_TITLE                   VARCHAR(50),
    TERRITORIAL_CODE                 VARCHAR(20),
    CALENDAR_DAYS                    INTEGER DEFAULT 0 NOT NULL,
    CALENDAR_DAYS_USE                INTEGER DEFAULT 0 NOT NULL,
    MONTH_WORKDAYS                   INTEGER DEFAULT 0 NOT NULL,
    MONTH_WORKHOURS                  FLOAT DEFAULT 0 NOT NULL,
    PLAN_DAYS                        INTEGER DEFAULT 0 NOT NULL,
    PLAN_HOURS                       DOM_HOURS DEFAULT 0.00 NOT NULL,
    PLAN_HOURS_NIGHT                 DOM_HOURS DEFAULT 0.00 NOT NULL,
    PLAN_HOURS_OVERTIME              DOM_HOURS DEFAULT 0.00 NOT NULL,
    FACT_DAYS                        INTEGER DEFAULT 0 NOT NULL,
    FACT_HOURS                       DOM_HOURS DEFAULT 0.00 NOT NULL,
    FACT_HOURS_NIGHT                 DOM_HOURS DEFAULT 0.00 NOT NULL,
    FACT_HOURS_OVERTIME              DOM_HOURS DEFAULT 0.00 NOT NULL,
    PLAN_WORK_DAYS                   INTEGER DEFAULT 0 NOT NULL,
    PLAN_WORK_HOURS                  DOM_HOURS DEFAULT 0.00 NOT NULL,
    PLAN_WORK_HOURS_NIGHT            DOM_HOURS DEFAULT 0.00 NOT NULL,
    PLAN_WORK_HOURS_OVERTIME         DOM_HOURS DEFAULT 0.00 NOT NULL,
    FACT_WORK_DAYS                   INTEGER DEFAULT 0 NOT NULL,
    FACT_WORK_HOURS                  DOM_HOURS DEFAULT 0.00 NOT NULL,
    FACT_WORK_HOURS_NIGHT            DOM_HOURS DEFAULT 0.00 NOT NULL,
    FACT_WORK_HOURS_OVERTIME         DOM_HOURS DEFAULT 0.00 NOT NULL,
    PLAN_HOLIDAYS_DAYS               INTEGER DEFAULT 0 NOT NULL,
    PLAN_HOLIDAYS_HOURS              DOM_HOURS DEFAULT 0.00 NOT NULL,
    PLAN_HOLIDAYS_HOURS_NIGHT        DOM_HOURS DEFAULT 0.00 NOT NULL,
    PLAN_HOLIDAYS_HOURS_OVERTIME     DOM_HOURS DEFAULT 0.00 NOT NULL,
    FACT_HOLIDAYS_DAYS               INTEGER DEFAULT 0 NOT NULL,
    FACT_HOLIDAYS_HOURS              DOM_HOURS DEFAULT 0.00 NOT NULL,
    FACT_HOLIDAYS_HOURS_NIGHT        DOM_HOURS DEFAULT 0.00 NOT NULL,
    FACT_HOLIDAYS_HOURS_OVERTIME     DOM_HOURS DEFAULT 0.00 NOT NULL,
    SALARY                           DOM_MONEY DEFAULT 0.00 NOT NULL,
    SALARY_DAY                       DOM_MONEY DEFAULT 0.00 NOT NULL,
    SALARY_NIGHT                     DOM_MONEY DEFAULT 0.00 NOT NULL,
    SALARY_OVERTIME                  DOM_MONEY DEFAULT 0.00 NOT NULL,
    SALARY_HOLIDAYS_DAY              DOM_MONEY DEFAULT 0.00 NOT NULL,
    SALARY_HOLIDAYS_NIGHT            DOM_MONEY DEFAULT 0.00 NOT NULL,
    SALARY_HOLIDAYS_OVERTIME         DOM_MONEY DEFAULT 0.00 NOT NULL,
    SALARY_PAID_HOLIDAYS_DAY         DOM_MONEY DEFAULT 0.00 NOT NULL,
    SALARY_PAID_HOLIDAYS_NIGHT       DOM_MONEY DEFAULT 0.00 NOT NULL,
    SALARY_PIECEWORK                 DOM_MONEY DEFAULT 0 NOT NULL,
    SICKDAYS                         INTEGER DEFAULT 0 NOT NULL,
    SICKDAYS_PAY                     DOM_MONEY DEFAULT 0.00 NOT NULL,
    ACCIDENT_DAYS                    INTEGER DEFAULT 0 NOT NULL,
    ACCIDENT_PAY                     DOM_MONEY DEFAULT 0.00 NOT NULL,
    AVERAGE_INCOME_DAYS              INTEGER DEFAULT 0 NOT NULL,
    AVERAGE_INCOME_PAY               DOM_MONEY DEFAULT 0.00 NOT NULL,
    FACT_AVPAY_FREE_DAYS             INTEGER DEFAULT 0 NOT NULL,
    FACT_AVPAY_FREE_HOURS            DOM_HOURS DEFAULT 0 NOT NULL,
    FACT_AVPAY_WORK_DAYS             INTEGER DEFAULT 0 NOT NULL,
    FACT_AVPAY_WORKINHOLIDAYS        INTEGER DEFAULT 0 NOT NULL,
    FACT_AVPAY_HOURS                 FLOAT DEFAULT 0 NOT NULL,
    FACT_AVPAY_HOURS_OVERTIME        FLOAT DEFAULT 0 NOT NULL,
    FACT_AVPAY_HOLIDAYS_HOURS        FLOAT DEFAULT 0 NOT NULL,
    FACT_AVPAY_HOLIDAYS_HOURS_OVERT  FLOAT DEFAULT 0 NOT NULL,
    SALARY_AVPAY_FREE_DAYS           DOM_MONEY DEFAULT 0 NOT NULL,
    SALARY_AVPAY_WORK_DAYS           DOM_MONEY DEFAULT 0 NOT NULL,
    SALARY_AVPAY_WORK_DAYS_OVERTIME  DOM_MONEY DEFAULT 0 NOT NULL,
    SALARY_AVPAY_HOLIDAYS            DOM_MONEY DEFAULT 0 NOT NULL,
    SALARY_AVPAY_HOLIDAYS_OVERTIME   DOM_MONEY DEFAULT 0 NOT NULL,
    BUSINESS_TRIP_DAYS               INTEGER DEFAULT 0 NOT NULL,
    BUSINESS_TRIP_PAY                DOM_MONEY DEFAULT 0 NOT NULL,
    PAID_HOLIDAYS                    INTEGER DEFAULT 0 NOT NULL,
    PAID_HOLIDAYS_PAY                DOM_MONEY DEFAULT 0.00 NOT NULL,
    VACATION_DAYS_CURRENT            FLOAT DEFAULT 0 NOT NULL,
    VACATION_DAYS_NEXT               FLOAT DEFAULT 0 NOT NULL,
    VACATION_HOURS_CURRENT           DOM_HOURS DEFAULT 0 NOT NULL,
    VACATION_HOURS_NEXT              DOM_HOURS DEFAULT 0 NOT NULL,
    VACATION_PAY_CURRENT             DOM_MONEY DEFAULT 0.00 NOT NULL,
    VACATION_PAY_NEXT                DOM_MONEY DEFAULT 0.00 NOT NULL,
    VACATION_DNS_NEXT                DOM_MONEY DEFAULT 0.00 NOT NULL,
    VACATION_DDS_NEXT                DOM_MONEY DEFAULT 0.00 NOT NULL,
    VACATION_IIN_NEXT                DOM_MONEY DEFAULT 0.00 NOT NULL,
    VACATION_IIN_REDUCE_NEXT         DOM_MONEY DEFAULT 0.00 NOT NULL,
    VACATION_CASH_NEXT               DOM_MONEY DEFAULT 0 NOT NULL,
    VACATION_PAY_PREV                DOM_MONEY DEFAULT 0.00 NOT NULL,
    VACATION_DNS_PREV                DOM_MONEY DEFAULT 0.00 NOT NULL,
    VACATION_DDS_PREV                DOM_MONEY DEFAULT 0.00 NOT NULL,
    VACATION_IIN_PREV                DOM_MONEY DEFAULT 0.00 NOT NULL,
    PLUS_TAXED                       DOM_MONEY DEFAULT 0 NOT NULL,
    PLUS_NOTTAXED                    DOM_MONEY DEFAULT 0 NOT NULL,
    PLUS_NOSAI                       DOM_MONEY DEFAULT 0 NOT NULL,
    PLUS_AUTHORS_FEES                DOM_MONEY DEFAULT 0.00 NOT NULL,
    MINUS_BEFORE_IIN                 DOM_MONEY DEFAULT 0 NOT NULL,
    MINUS_AFTER_IIN                  DOM_MONEY DEFAULT 0 NOT NULL,
    PLUS_PF_NOTTAXED                 DOM_MONEY DEFAULT 0 NOT NULL,
    PLUS_PF_TAXED                    DOM_MONEY DEFAULT 0 NOT NULL,
    PLUS_LI_NOTTAXED                 DOM_MONEY DEFAULT 0 NOT NULL,
    PLUS_LI_TAXED                    DOM_MONEY DEFAULT 0 NOT NULL,
    PLUS_HI_NOTTAXED                 DOM_MONEY DEFAULT 0 NOT NULL,
    PLUS_HI_TAXED                    DOM_MONEY DEFAULT 0 NOT NULL,
    PLUS_NP_TAXED                    DOM_MONEY DEFAULT 0 NOT NULL,
    PLUS_NP_NOSAI                    DOM_MONEY DEFAULT 0 NOT NULL,
    PLUS_NP_NOTTAXED                 DOM_MONEY DEFAULT 0 NOT NULL,
    TOTAL_BEFORE_TAXES               DOM_MONEY DEFAULT 0 NOT NULL,
    ADJUSTED_AMOUNT                  DOM_MONEY DEFAULT 0.00 NOT NULL,
    AMOUNT_BEFORE_SN                 DOM_MONEY DEFAULT 0.00 NOT NULL,
    AMOUNT_BEFORE_SN_REVERSE         DOM_MONEY DEFAULT 0.00 NOT NULL,
    RATE_DNSN                        DOM_MONEY DEFAULT 0.00 NOT NULL,
    RATE_DDSN                        DOM_MONEY DEFAULT 0.00 NOT NULL,
    DNSN_AMOUNT                      DOM_MONEY DEFAULT 0.00 NOT NULL,
    DDSN_AMOUNT                      DOM_MONEY DEFAULT 0.00 NOT NULL,
    SN_AMOUNT                        DOM_MONEY DEFAULT 0 NOT NULL,
    DNSN_AMOUNT_REVERSE              DOM_MONEY DEFAULT 0.00 NOT NULL,
    DDSN_AMOUNT_REVERSE              DOM_MONEY DEFAULT 0.00 NOT NULL,
    SN_MAX_AMOUNT                    DOM_MONEY DEFAULT 0.00 NOT NULL,
    IIN_EXEMPT_UNTAXED_MINIMUM0      DOM_MONEY DEFAULT 0 NOT NULL,
    IIN_EXEMPT_DEPENDANTS0           DOM_MONEY DEFAULT 0 NOT NULL,
    IIN_EXEMPT_RETALIATION0          DOM_MONEY DEFAULT 0 NOT NULL,
    IIN_EXEMPT_INVALIDITY0           DOM_MONEY DEFAULT 0 NOT NULL,
    IIN_EXEMPT_NATIONAL_MOVEMENT0    DOM_MONEY DEFAULT 0 NOT NULL,
    IIN_EXEMPT_UNTAXED_MINIMUM       DOM_MONEY DEFAULT 0.00 NOT NULL,
    IIN_EXEMPT_DEPENDANTS            DOM_MONEY DEFAULT 0.00 NOT NULL,
    IIN_EXEMPT_RETALIATION           DOM_MONEY DEFAULT 0.00 NOT NULL,
    IIN_EXEMPT_INVALIDITY            DOM_MONEY DEFAULT 0.0 NOT NULL,
    IIN_EXEMPT_NATIONAL_MOVEMENT     DOM_MONEY DEFAULT 0.00 NOT NULL,
    IIN_EXEMPT_EXPENSES              DOM_MONEY DEFAULT 0.00 NOT NULL,
    IIN_EXEMPT_2TP                   SMALLINT DEFAULT 0 NOT NULL,
    IIN_EXEMPT_20                    DOM_MONEY DEFAULT 0 NOT NULL,
    IIN_EXEMPT_2                     DOM_MONEY DEFAULT 0 NOT NULL,
    AMOUNT_BEFORE_IIN                DOM_MONEY DEFAULT 0.00 NOT NULL,
    AMOUNT_BEFORE_IIN_REVERSE        DOM_MONEY DEFAULT 0.00 NOT NULL,
    RATE_IIN                         DOM_MONEY DEFAULT 0.00 NOT NULL,
    RATE_IIN2                        DOM_MONEY DEFAULT 0.00 NOT NULL,
    IIN_AMOUNT                       DOM_MONEY DEFAULT 0.00 NOT NULL,
    IIN_AMOUNT_REVERSE               DOM_MONEY DEFAULT 0.00 NOT NULL,
    URVN_AMAOUNT                     DOM_MONEY DEFAULT 0.00 NOT NULL,
    PLUS_NOT_PAID                    DOM_MONEY DEFAULT 0.00 NOT NULL,
    VACATION_ADVANCE_CURRENT         DOM_MONEY DEFAULT 0 NOT NULL,
    VACATION_ADVANCE_NEXT            DOM_MONEY DEFAULT 0 NOT NULL,
    VACATION_ADVANCE_PREV            DOM_MONEY DEFAULT 0 NOT NULL,
    ADVANCE                          DOM_MONEY DEFAULT 0.00 NOT NULL,
    PAY0                             DOM_MONEY DEFAULT 0 NOT NULL,
    PAY                              DOM_MONEY DEFAULT 0.00 NOT NULL,
    PAYT                             DOM_MONEY DEFAULT 0 NOT NULL,
    PAY_DATE                         DATE,
    COMMENTS                         VARCHAR(255) DEFAULT 0.00,
    WITHHOLD_FROM_PAY                DOM_MONEY DEFAULT 0.00 NOT NULL,
    FORAVPAYCALC_BRUTO               DOM_MONEY DEFAULT 0 NOT NULL,
    FORAVPAYCALC_PAYOUT              DOM_MONEY DEFAULT 0 NOT NULL,
    FORAVPAYCALC_DAYS                INTEGER DEFAULT 0 NOT NULL,
    FORAVPAYCALC_HOURS               DOM_HOURS DEFAULT 0 NOT NULL,
    AVPAYCALC_CALDAY                 DOM_MONEY4 DEFAULT 0 NOT NULL,
    AVPAYCALC_DAY                    DOM_MONEY4 DEFAULT 0 NOT NULL,
    AVPAYCALC_HOUR                   DOM_MONEY4 DEFAULT 0 NOT NULL,
    DT_EDITED                        TIMESTAMP,
    CALC_VER                         INTEGER DEFAULT 0 NOT NULL,
    VACATION_DAYS_COMP               FLOAT DEFAULT 0 NOT NULL,
    VACATION_PAY_COMP                DOM_MONEY DEFAULT 0 NOT NULL
);

CREATE TABLE A_SALARY_SHEETS_R_HIST (
    IDH                              INTEGER NOT NULL,
    ID                               INTEGER NOT NULL,
    IDS                              INTEGER,
    IDSX                             INTEGER,
    IDST                             INTEGER,
    IS_TEMP                          SMALLINT DEFAULT 0,
    TYPE_TAG                         SMALLINT DEFAULT 0,
    IDP                              INTEGER,
    IDAM                             INTEGER,
    SNR                              SMALLINT DEFAULT 0 NOT NULL,
    FNAME                            VARCHAR(20),
    LNAME                            VARCHAR(20),
    POSITION_TITLE                   VARCHAR(50),
    TERRITORIAL_CODE                 VARCHAR(20),
    CALENDAR_DAYS                    INTEGER DEFAULT 0 NOT NULL,
    CALENDAR_DAYS_USE                INTEGER DEFAULT 0 NOT NULL,
    MONTH_WORKDAYS                   INTEGER DEFAULT 0 NOT NULL,
    MONTH_WORKHOURS                  FLOAT DEFAULT 0 NOT NULL,
    PLAN_DAYS                        INTEGER DEFAULT 0 NOT NULL,
    PLAN_HOURS                       DOM_HOURS DEFAULT 0.00 NOT NULL,
    PLAN_HOURS_NIGHT                 DOM_HOURS DEFAULT 0.00 NOT NULL,
    PLAN_HOURS_OVERTIME              DOM_HOURS DEFAULT 0.00 NOT NULL,
    FACT_DAYS                        INTEGER DEFAULT 0 NOT NULL,
    FACT_HOURS                       DOM_HOURS DEFAULT 0.00 NOT NULL,
    FACT_HOURS_NIGHT                 DOM_HOURS DEFAULT 0.00 NOT NULL,
    FACT_HOURS_OVERTIME              DOM_HOURS DEFAULT 0.00 NOT NULL,
    PLAN_WORK_DAYS                   INTEGER DEFAULT 0 NOT NULL,
    PLAN_WORK_HOURS                  DOM_HOURS DEFAULT 0.00 NOT NULL,
    PLAN_WORK_HOURS_NIGHT            DOM_HOURS DEFAULT 0.00 NOT NULL,
    PLAN_WORK_HOURS_OVERTIME         DOM_HOURS DEFAULT 0.00 NOT NULL,
    FACT_WORK_DAYS                   INTEGER DEFAULT 0 NOT NULL,
    FACT_WORK_HOURS                  DOM_HOURS DEFAULT 0.00 NOT NULL,
    FACT_WORK_HOURS_NIGHT            DOM_HOURS DEFAULT 0.00 NOT NULL,
    FACT_WORK_HOURS_OVERTIME         DOM_HOURS DEFAULT 0.00 NOT NULL,
    PLAN_HOLIDAYS_DAYS               INTEGER DEFAULT 0 NOT NULL,
    PLAN_HOLIDAYS_HOURS              DOM_HOURS DEFAULT 0.00 NOT NULL,
    PLAN_HOLIDAYS_HOURS_NIGHT        DOM_HOURS DEFAULT 0.00 NOT NULL,
    PLAN_HOLIDAYS_HOURS_OVERTIME     DOM_HOURS DEFAULT 0.00 NOT NULL,
    FACT_HOLIDAYS_DAYS               INTEGER DEFAULT 0 NOT NULL,
    FACT_HOLIDAYS_HOURS              DOM_HOURS DEFAULT 0.00 NOT NULL,
    FACT_HOLIDAYS_HOURS_NIGHT        DOM_HOURS DEFAULT 0.00 NOT NULL,
    FACT_HOLIDAYS_HOURS_OVERTIME     DOM_HOURS DEFAULT 0.00 NOT NULL,
    SALARY                           DOM_MONEY DEFAULT 0.00 NOT NULL,
    SALARY_DAY                       DOM_MONEY DEFAULT 0.00 NOT NULL,
    SALARY_NIGHT                     DOM_MONEY DEFAULT 0.00 NOT NULL,
    SALARY_OVERTIME                  DOM_MONEY DEFAULT 0.00 NOT NULL,
    SALARY_HOLIDAYS_DAY              DOM_MONEY DEFAULT 0.00 NOT NULL,
    SALARY_HOLIDAYS_NIGHT            DOM_MONEY DEFAULT 0.00 NOT NULL,
    SALARY_HOLIDAYS_OVERTIME         DOM_MONEY DEFAULT 0.00 NOT NULL,
    SALARY_PAID_HOLIDAYS_DAY         DOM_MONEY DEFAULT 0.00 NOT NULL,
    SALARY_PAID_HOLIDAYS_NIGHT       DOM_MONEY DEFAULT 0.00 NOT NULL,
    SALARY_PIECEWORK                 DOM_MONEY DEFAULT 0 NOT NULL,
    SICKDAYS                         INTEGER DEFAULT 0 NOT NULL,
    SICKDAYS_PAY                     DOM_MONEY DEFAULT 0.00 NOT NULL,
    ACCIDENT_DAYS                    INTEGER DEFAULT 0 NOT NULL,
    ACCIDENT_PAY                     DOM_MONEY DEFAULT 0.00 NOT NULL,
    AVERAGE_INCOME_DAYS              INTEGER DEFAULT 0 NOT NULL,
    AVERAGE_INCOME_PAY               DOM_MONEY DEFAULT 0.00 NOT NULL,
    FACT_AVPAY_FREE_DAYS             INTEGER DEFAULT 0 NOT NULL,
    FACT_AVPAY_FREE_HOURS            DOM_HOURS DEFAULT 0 NOT NULL,
    FACT_AVPAY_WORK_DAYS             INTEGER DEFAULT 0 NOT NULL,
    FACT_AVPAY_WORKINHOLIDAYS        INTEGER DEFAULT 0 NOT NULL,
    FACT_AVPAY_HOURS                 FLOAT DEFAULT 0 NOT NULL,
    FACT_AVPAY_HOURS_OVERTIME        FLOAT DEFAULT 0 NOT NULL,
    FACT_AVPAY_HOLIDAYS_HOURS        FLOAT DEFAULT 0 NOT NULL,
    FACT_AVPAY_HOLIDAYS_HOURS_OVERT  FLOAT DEFAULT 0 NOT NULL,
    SALARY_AVPAY_FREE_DAYS           DOM_MONEY DEFAULT 0 NOT NULL,
    SALARY_AVPAY_WORK_DAYS           DOM_MONEY DEFAULT 0 NOT NULL,
    SALARY_AVPAY_WORK_DAYS_OVERTIME  DOM_MONEY DEFAULT 0 NOT NULL,
    SALARY_AVPAY_HOLIDAYS            DOM_MONEY DEFAULT 0 NOT NULL,
    SALARY_AVPAY_HOLIDAYS_OVERTIME   DOM_MONEY DEFAULT 0 NOT NULL,
    BUSINESS_TRIP_DAYS               INTEGER DEFAULT 0 NOT NULL,
    BUSINESS_TRIP_PAY                DOM_MONEY DEFAULT 0 NOT NULL,
    PAID_HOLIDAYS                    INTEGER DEFAULT 0 NOT NULL,
    PAID_HOLIDAYS_PAY                DOM_MONEY DEFAULT 0.00 NOT NULL,
    VACATION_DAYS_CURRENT            FLOAT DEFAULT 0 NOT NULL,
    VACATION_DAYS_NEXT               FLOAT DEFAULT 0 NOT NULL,
    VACATION_HOURS_CURRENT           DOM_HOURS DEFAULT 0 NOT NULL,
    VACATION_HOURS_NEXT              DOM_HOURS DEFAULT 0 NOT NULL,
    VACATION_PAY_CURRENT             DOM_MONEY DEFAULT 0.00 NOT NULL,
    VACATION_PAY_NEXT                DOM_MONEY DEFAULT 0.00 NOT NULL,
    VACATION_DNS_NEXT                DOM_MONEY DEFAULT 0.00 NOT NULL,
    VACATION_DDS_NEXT                DOM_MONEY DEFAULT 0.00 NOT NULL,
    VACATION_IIN_NEXT                DOM_MONEY DEFAULT 0.00 NOT NULL,
    VACATION_IIN_REDUCE_NEXT         DOM_MONEY DEFAULT 0.00 NOT NULL,
    VACATION_CASH_NEXT               DOM_MONEY DEFAULT 0 NOT NULL,
    VACATION_PAY_PREV                DOM_MONEY DEFAULT 0.00 NOT NULL,
    VACATION_DNS_PREV                DOM_MONEY DEFAULT 0.00 NOT NULL,
    VACATION_DDS_PREV                DOM_MONEY DEFAULT 0.00 NOT NULL,
    VACATION_IIN_PREV                DOM_MONEY DEFAULT 0.00 NOT NULL,
    PLUS_TAXED                       DOM_MONEY DEFAULT 0 NOT NULL,
    PLUS_NOTTAXED                    DOM_MONEY DEFAULT 0 NOT NULL,
    PLUS_NOSAI                       DOM_MONEY DEFAULT 0 NOT NULL,
    PLUS_AUTHORS_FEES                DOM_MONEY DEFAULT 0.00 NOT NULL,
    MINUS_BEFORE_IIN                 DOM_MONEY DEFAULT 0 NOT NULL,
    MINUS_AFTER_IIN                  DOM_MONEY DEFAULT 0 NOT NULL,
    PLUS_PF_NOTTAXED                 DOM_MONEY DEFAULT 0 NOT NULL,
    PLUS_PF_TAXED                    DOM_MONEY DEFAULT 0 NOT NULL,
    PLUS_LI_NOTTAXED                 DOM_MONEY DEFAULT 0 NOT NULL,
    PLUS_LI_TAXED                    DOM_MONEY DEFAULT 0 NOT NULL,
    PLUS_HI_NOTTAXED                 DOM_MONEY DEFAULT 0 NOT NULL,
    PLUS_HI_TAXED                    DOM_MONEY DEFAULT 0 NOT NULL,
    PLUS_NP_TAXED                    DOM_MONEY DEFAULT 0 NOT NULL,
    PLUS_NP_NOSAI                    DOM_MONEY DEFAULT 0 NOT NULL,
    PLUS_NP_NOTTAXED                 DOM_MONEY DEFAULT 0 NOT NULL,
    TOTAL_BEFORE_TAXES               DOM_MONEY DEFAULT 0 NOT NULL,
    ADJUSTED_AMOUNT                  DOM_MONEY DEFAULT 0.00 NOT NULL,
    AMOUNT_BEFORE_SN                 DOM_MONEY DEFAULT 0.00 NOT NULL,
    AMOUNT_BEFORE_SN_REVERSE         DOM_MONEY DEFAULT 0.00 NOT NULL,
    RATE_DNSN                        DOM_MONEY DEFAULT 0.00 NOT NULL,
    RATE_DDSN                        DOM_MONEY DEFAULT 0.00 NOT NULL,
    DNSN_AMOUNT                      DOM_MONEY DEFAULT 0.00 NOT NULL,
    DDSN_AMOUNT                      DOM_MONEY DEFAULT 0.00 NOT NULL,
    SN_AMOUNT                        DOM_MONEY DEFAULT 0 NOT NULL,
    DNSN_AMOUNT_REVERSE              DOM_MONEY DEFAULT 0.00 NOT NULL,
    DDSN_AMOUNT_REVERSE              DOM_MONEY DEFAULT 0.00 NOT NULL,
    SN_MAX_AMOUNT                    DOM_MONEY DEFAULT 0.00 NOT NULL,
    IIN_EXEMPT_UNTAXED_MINIMUM0      DOM_MONEY DEFAULT 0 NOT NULL,
    IIN_EXEMPT_DEPENDANTS0           DOM_MONEY DEFAULT 0 NOT NULL,
    IIN_EXEMPT_RETALIATION0          DOM_MONEY DEFAULT 0 NOT NULL,
    IIN_EXEMPT_INVALIDITY0           DOM_MONEY DEFAULT 0 NOT NULL,
    IIN_EXEMPT_NATIONAL_MOVEMENT0    DOM_MONEY DEFAULT 0 NOT NULL,
    IIN_EXEMPT_UNTAXED_MINIMUM       DOM_MONEY DEFAULT 0.00 NOT NULL,
    IIN_EXEMPT_DEPENDANTS            DOM_MONEY DEFAULT 0.00 NOT NULL,
    IIN_EXEMPT_RETALIATION           DOM_MONEY DEFAULT 0.00 NOT NULL,
    IIN_EXEMPT_INVALIDITY            DOM_MONEY DEFAULT 0.0 NOT NULL,
    IIN_EXEMPT_NATIONAL_MOVEMENT     DOM_MONEY DEFAULT 0.00 NOT NULL,
    IIN_EXEMPT_EXPENSES              DOM_MONEY DEFAULT 0.00 NOT NULL,
    IIN_EXEMPT_2TP                   SMALLINT DEFAULT 0 NOT NULL,
    IIN_EXEMPT_20                    DOM_MONEY DEFAULT 0 NOT NULL,
    IIN_EXEMPT_2                     DOM_MONEY DEFAULT 0 NOT NULL,
    AMOUNT_BEFORE_IIN                DOM_MONEY DEFAULT 0.00 NOT NULL,
    AMOUNT_BEFORE_IIN_REVERSE        DOM_MONEY DEFAULT 0.00 NOT NULL,
    RATE_IIN                         DOM_MONEY DEFAULT 0.00 NOT NULL,
    RATE_IIN2                        DOM_MONEY DEFAULT 0.00 NOT NULL,
    IIN_AMOUNT                       DOM_MONEY DEFAULT 0.00 NOT NULL,
    IIN_AMOUNT_REVERSE               DOM_MONEY DEFAULT 0.00 NOT NULL,
    URVN_AMAOUNT                     DOM_MONEY DEFAULT 0.00 NOT NULL,
    PLUS_NOT_PAID                    DOM_MONEY DEFAULT 0.00 NOT NULL,
    VACATION_ADVANCE_CURRENT         DOM_MONEY DEFAULT 0 NOT NULL,
    VACATION_ADVANCE_NEXT            DOM_MONEY DEFAULT 0 NOT NULL,
    VACATION_ADVANCE_PREV            DOM_MONEY DEFAULT 0 NOT NULL,
    ADVANCE                          DOM_MONEY DEFAULT 0.00 NOT NULL,
    PAY0                             DOM_MONEY DEFAULT 0 NOT NULL,
    PAY                              DOM_MONEY DEFAULT 0.00 NOT NULL,
    PAYT                             DOM_MONEY DEFAULT 0 NOT NULL,
    PAY_DATE                         DATE,
    COMMENTS                         VARCHAR(255) DEFAULT 0.00,
    WITHHOLD_FROM_PAY                DOM_MONEY DEFAULT 0.00 NOT NULL,
    FORAVPAYCALC_BRUTO               DOM_MONEY DEFAULT 0 NOT NULL,
    FORAVPAYCALC_PAYOUT              DOM_MONEY DEFAULT 0 NOT NULL,
    FORAVPAYCALC_DAYS                INTEGER DEFAULT 0 NOT NULL,
    FORAVPAYCALC_HOURS               DOM_HOURS DEFAULT 0 NOT NULL,
    AVPAYCALC_CALDAY                 DOM_MONEY4 DEFAULT 0 NOT NULL,
    AVPAYCALC_DAY                    DOM_MONEY4 DEFAULT 0 NOT NULL,
    AVPAYCALC_HOUR                   DOM_MONEY4 DEFAULT 0 NOT NULL,
    DT_EDITED                        TIMESTAMP,
    CALC_VER                         INTEGER DEFAULT 0 NOT NULL,
    VACATION_DAYS_COMP               FLOAT DEFAULT 0 NOT NULL,
    VACATION_PAY_COMP                DOM_MONEY DEFAULT 0 NOT NULL
);

CREATE GLOBAL TEMPORARY TABLE A_TEMP_REP_INKP (
    IDP    INTEGER NOT NULL,
    HDATE  DATE,
    FDATE  DATE
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE A_TEMP_REP_PDT (
    IDP    INTEGER NOT NULL,
    DATE1  DATE,
    DATE2  DATE
) ON COMMIT DELETE ROWS;

CREATE TABLE A_TERITORIAL_CODES (
    ID     VARCHAR(10) NOT NULL COLLATE UNICODE_CI_AI,
    DESCR  VARCHAR(50) COLLATE UNICODE_CI_AI
);

CREATE TABLE A_TIMEPLAN_LIST (
    ID           INTEGER NOT NULL,
    CODE         VARCHAR(15),
    DESCR        VARCHAR(50),
    KIND1        SMALLINT DEFAULT 0,
    KIND2        SMALLINT DEFAULT 0,
    HOURS        DOM_HOURS DEFAULT 8 NOT NULL,
    USED         SMALLINT DEFAULT 1,
    NIGHT        SMALLINT DEFAULT 0,
    SNR          SMALLINT DEFAULT 0,
    HOURS_NIGHT  DOM_HOURS DEFAULT 0 NOT NULL
);

CREATE TABLE A_TIMESHEET (
    ID     INTEGER NOT NULL,
    IDP    INTEGER,
    IDL    INTEGER,
    SNR    SMALLINT DEFAULT 0,
    PERID  INTEGER,
    AMID   INTEGER,
    YR     INTEGER,
    MT     INTEGER,
    KIND1  SMALLINT,
    KIND2  SMALLINT,
    V1     DOM_HOURS DEFAULT 0,
    V2     DOM_HOURS DEFAULT 0,
    V3     DOM_HOURS DEFAULT 0,
    V4     DOM_HOURS DEFAULT 0,
    V5     DOM_HOURS DEFAULT 0,
    V6     DOM_HOURS DEFAULT 0,
    V7     DOM_HOURS DEFAULT 0,
    V8     DOM_HOURS DEFAULT 0,
    V9     DOM_HOURS DEFAULT 0,
    V10    DOM_HOURS DEFAULT 0,
    V11    DOM_HOURS DEFAULT 0,
    V12    DOM_HOURS DEFAULT 0,
    V13    DOM_HOURS DEFAULT 0,
    V14    DOM_HOURS DEFAULT 0,
    V15    DOM_HOURS DEFAULT 0,
    V16    DOM_HOURS DEFAULT 0,
    V17    DOM_HOURS DEFAULT 0,
    V18    DOM_HOURS DEFAULT 0,
    V19    DOM_HOURS DEFAULT 0,
    V20    DOM_HOURS DEFAULT 0,
    V21    DOM_HOURS DEFAULT 0,
    V22    DOM_HOURS DEFAULT 0,
    V23    DOM_HOURS DEFAULT 0,
    V24    DOM_HOURS DEFAULT 0,
    V25    DOM_HOURS DEFAULT 0,
    V26    DOM_HOURS DEFAULT 0,
    V27    DOM_HOURS DEFAULT 0,
    V28    DOM_HOURS DEFAULT 0,
    V29    DOM_HOURS DEFAULT 0,
    V30    DOM_HOURS DEFAULT 0,
    V31    DOM_HOURS DEFAULT 0,
    K1     DOM_HOURS DEFAULT 0,
    D1     DOM_DAYCODE DEFAULT 0,
    D2     DOM_DAYCODE DEFAULT 0,
    D3     DOM_DAYCODE DEFAULT 0,
    D4     DOM_DAYCODE DEFAULT 0,
    D5     DOM_DAYCODE DEFAULT 0,
    D6     DOM_DAYCODE DEFAULT 0,
    D7     DOM_DAYCODE DEFAULT 0,
    D8     DOM_DAYCODE DEFAULT 0,
    D9     DOM_DAYCODE DEFAULT 0,
    D10    DOM_DAYCODE DEFAULT 0,
    D11    DOM_DAYCODE DEFAULT 0,
    D12    DOM_DAYCODE DEFAULT 0,
    D13    DOM_DAYCODE DEFAULT 0,
    D14    DOM_DAYCODE DEFAULT 0,
    D15    DOM_DAYCODE DEFAULT 0,
    D16    DOM_DAYCODE DEFAULT 0,
    D17    DOM_DAYCODE DEFAULT 0,
    D18    DOM_DAYCODE DEFAULT 0,
    D19    DOM_DAYCODE DEFAULT 0,
    D20    DOM_DAYCODE DEFAULT 0,
    D21    DOM_DAYCODE DEFAULT 0,
    D22    DOM_DAYCODE DEFAULT 0,
    D23    DOM_DAYCODE DEFAULT 0,
    D24    DOM_DAYCODE DEFAULT 0,
    D25    DOM_DAYCODE DEFAULT 0,
    D26    DOM_DAYCODE DEFAULT 0,
    D27    DOM_DAYCODE DEFAULT 0,
    D28    DOM_DAYCODE DEFAULT 0,
    D29    DOM_DAYCODE DEFAULT 0,
    D30    DOM_DAYCODE DEFAULT 0,
    D31    DOM_DAYCODE DEFAULT 0
);

CREATE TABLE A_TIMESHEET_LISTS (
    ID     INTEGER NOT NULL,
    YR     INTEGER NOT NULL,
    MT     INTEGER NOT NULL,
    SNR    SMALLINT DEFAULT 0 NOT NULL,
    DESCR  VARCHAR(50) NOT NULL,
    IDSH   INTEGER,
    DEP    VARCHAR(15)
);

CREATE TABLE A_TIMESHEET_LISTS_R (
    ID         INTEGER NOT NULL,
    IDS        INTEGER,
    IDP        INTEGER,
    IDAM       INTEGER,
    IDPL       INTEGER,
    SNR        SMALLINT DEFAULT 0,
    PLAN_TYPE  SMALLINT DEFAULT 0 NOT NULL,
    NIGHT      SMALLINT DEFAULT 0 NOT NULL,
    OVERTIME   SMALLINT DEFAULT 0 NOT NULL
);

CREATE TABLE A_TIMESHEET_TEMPL (
    ID     INTEGER NOT NULL,
    CODE   VARCHAR(15),
    DEP    VARCHAR(15),
    DESCR  VARCHAR(50) NOT NULL,
    USED   SMALLINT DEFAULT 0,
    SNR    SMALLINT DEFAULT 0 NOT NULL
);

CREATE TABLE A_TIMESHEET_TEMPL_R (
    ID         INTEGER NOT NULL,
    IDS        INTEGER,
    IDP        INTEGER NOT NULL,
    IDAM       INTEGER NOT NULL,
    IDPL       INTEGER NOT NULL,
    SNR        SMALLINT DEFAULT 0 NOT NULL,
    PLAN_TYPE  SMALLINT DEFAULT 0 NOT NULL
);

CREATE TABLE A_UNTAXED_MIN (
    ID             INTEGER NOT NULL,
    IDP            INTEGER NOT NULL,
    ONDATE         DATE NOT NULL,
    UNTAXED_MIN    DOM_MONEY DEFAULT 0 NOT NULL,
    IIN_RATE_TYPE  INTEGER DEFAULT 0 NOT NULL
);

CREATE TABLE F_ACP1 (
    ACPID  CHAR(1) NOT NULL,
    NAME   VARCHAR(50)
);

CREATE TABLE F_ACP21 (
    AC    VARCHAR(8) NOT NULL,
    NAME  VARCHAR(100),
    ID1   VARCHAR(15),
    ID2   VARCHAR(15)
);

CREATE TABLE F_ACP211 (
    IDX   VARCHAR(15) NOT NULL,
    NAME  VARCHAR(50),
    ID1   CHAR(2)
);

CREATE TABLE F_ACP22 (
    IDX   VARCHAR(15) NOT NULL,
    NAME  VARCHAR(50)
);

CREATE TABLE F_ACP23 (
    IDX   VARCHAR(5) NOT NULL,
    NAME  VARCHAR(50),
    ID1   CHAR(2),
    ID2   INTEGER
);

CREATE TABLE F_ACP24 (
    IDX    VARCHAR(8) NOT NULL,
    NAME   VARCHAR(50),
    UNIT   VARCHAR(10),
    PRICE  MONEY DEFAULT 0.0
);

CREATE TABLE F_ACP25 (
    IDX   VARCHAR(5) NOT NULL,
    NAME  VARCHAR(150),
    ID1   CHAR(2)
);

CREATE TABLE F_ACP25A (
    IDX   VARCHAR(5) NOT NULL,
    NAME  VARCHAR(50)
);

CREATE TABLE F_ACP6 (
    IDX   VARCHAR(15) NOT NULL,
    NAME  VARCHAR(50)
);

CREATE TABLE F_ACPLAN (
    AC    VARCHAR(8) NOT NULL,
    NAME  VARCHAR(90),
    B0    NUMERIC(15,4),
    AP1   VARCHAR(15),
    AP2   VARCHAR(15),
    AP3   VARCHAR(15),
    AP4   VARCHAR(15),
    AP5   VARCHAR(15)
);

CREATE TABLE F_ACPVN (
    ID    VARCHAR(8) NOT NULL,
    NM    VARCHAR(250),
    T     FLOAT,
    PZ1   VARCHAR(5),
    PZ2   INTEGER NOT NULL,
    PZ2A  INTEGER NOT NULL,
    PZ3   INTEGER NOT NULL,
    PZ4   INTEGER NOT NULL,
    PZ5   INTEGER NOT NULL
);

CREATE TABLE F_BAL0 (
    ID       INTEGER NOT NULL,
    AC11     VARCHAR(8) NOT NULL,
    AC24     VARCHAR(8),
    CLID     VARCHAR(15),
    SUMMDC   MONEY NOT NULL,
    SUMMCC   MONEY NOT NULL,
    CUR      VARCHAR(3) NOT NULL,
    CURRATE  NUMERIC(15,4) NOT NULL,
    SUMMD    MONEY NOT NULL,
    SUMMC    MONEY NOT NULL
);

CREATE TABLE F_BALA1 (
    BALID  VARCHAR(10) NOT NULL,
    DESCR  VARCHAR(50),
    TA     VARCHAR(50),
    TP     VARCHAR(50)
);

CREATE TABLE F_BALA2 (
    ID     INTEGER NOT NULL,
    NR     VARCHAR(5),
    BALID  VARCHAR(10),
    DC     DMV2,
    TP     DMV2 DEFAULT 'V',
    DESCR  VARCHAR(150),
    NR1    VARCHAR(5),
    NR2    VARCHAR(5),
    S1     MONEY,
    S2     MONEY
);

CREATE TABLE F_BALA21 (
    ID    INTEGER NOT NULL,
    SPID  INTEGER,
    BID   INTEGER,
    S1    MONEY,
    S2    MONEY
);

CREATE TABLE F_BALA3 (
    ID   INTEGER NOT NULL,
    ID2  INTEGER,
    TP   DMV2 DEFAULT 'Db',
    AC   VARCHAR(8)
);

CREATE TABLE F_BANKS (
    ID    VARCHAR(8) NOT NULL,
    NAME  VARCHAR(50) NOT NULL
);

CREATE TABLE F_CURRENCY (
    ID    VARCHAR(3) NOT NULL,
    DETE  DATE NOT NULL,
    RATE  NUMERIC(15,4) NOT NULL
);

CREATE TABLE F_DOCS0 (
    ID      INTEGER NOT NULL,
    DETE    DATE NOT NULL,
    DOCTYP  VARCHAR(10),
    DOCST   VARCHAR(6),
    DOCNR   VARCHAR(15),
    CLID    VARCHAR(15),
    DESCR   VARCHAR(80),
    SUMM    MONEY NOT NULL,
    PVN     MONEY NOT NULL,
    AC      VARCHAR(8) NOT NULL
);

CREATE TABLE F_DOCTYP (
    ID      VARCHAR(10) NOT NULL,
    NAME    VARCHAR(50),
    ID1     VARCHAR(10),
    NAME1   VARCHAR(50),
    TPZ     VARCHAR(10),
    PVNPAZ  VARCHAR(10)
);

CREATE TABLE F_DOCTYPA (
    ID    VARCHAR(10) NOT NULL,
    NAME  VARCHAR(50)
);

CREATE TABLE F_DOCTYPB (
    IDA  VARCHAR(10) NOT NULL,
    ID   VARCHAR(10) NOT NULL
);

CREATE TABLE F_LOGX (
    ID   INTEGER NOT NULL,
    LID  VARCHAR(5),
    DT   TIMESTAMP,
    USR  VARCHAR(15)
);

CREATE TABLE F_LOPS (
    IDL    INTEGER NOT NULL,
    ID     INTEGER,
    DTL    TIMESTAMP,
    DTLD   TIMESTAMP,
    USL    VARCHAR(15),
    TPL    INTEGER,
    DOCID  INTEGER,
    AC11   VARCHAR(8) NOT NULL,
    AC12   VARCHAR(8),
    AC13   VARCHAR(5),
    AC14   VARCHAR(8),
    AC15   VARCHAR(5),
    AC21   VARCHAR(8) NOT NULL,
    AC22   VARCHAR(8),
    AC23   VARCHAR(5),
    AC24   VARCHAR(8),
    AC25   VARCHAR(5),
    SUMMC  MONEY NOT NULL,
    CUR    VARCHAR(3) NOT NULL,
    SUMM   MONEY NOT NULL,
    QV     FLOAT,
    NL     SMALLINT,
    ODT    TIMESTAMP
);

CREATE TABLE F_LOPSD (
    IDL     INTEGER NOT NULL,
    ID      INTEGER,
    DTLD    TIMESTAMP,
    USL     VARCHAR(15),
    TPL     INTEGER,
    DETE    DATE,
    NRX     VARCHAR(5),
    DOCTYP  VARCHAR(10),
    DOCST   VARCHAR(6),
    DOCNR   VARCHAR(15),
    CLID    VARCHAR(15),
    CLID2   VARCHAR(15),
    DESCR   VARCHAR(80),
    SUMM    MONEY,
    PVN     MONEY,
    OPT     INTEGER,
    ZNR     INTEGER NOT NULL,
    ZU      VARCHAR(20),
    ZDT     TIMESTAMP,
    NL      SMALLINT,
    ODT     TIMESTAMP
);

CREATE TABLE F_LXOP (
    ID  INTEGER NOT NULL,
    AD  INTEGER,
    AR  INTEGER
);

CREATE TABLE F_OPS (
    ID     INTEGER NOT NULL,
    DOCID  INTEGER NOT NULL,
    DESCR  VARCHAR(50),
    AC11   VARCHAR(8) NOT NULL,
    AC12   VARCHAR(8),
    AC13   VARCHAR(5),
    AC14   VARCHAR(8),
    AC15   VARCHAR(5),
    AC21   VARCHAR(8) NOT NULL,
    AC22   VARCHAR(8),
    AC23   VARCHAR(5),
    AC24   VARCHAR(8),
    AC25   VARCHAR(5),
    SUMMC  MONEY NOT NULL,
    CUR    VARCHAR(3) DEFAULT 'EUR' NOT NULL,
    SUMM   MONEY NOT NULL,
    QV     FLOAT DEFAULT 0.0,
    NL     SMALLINT DEFAULT 0,
    ZDT    TIMESTAMP
);

CREATE TABLE F_OPSD (
    ID      INTEGER NOT NULL,
    DETE    DATE NOT NULL,
    NRX     VARCHAR(5),
    DOCTYP  VARCHAR(10),
    DOCST   VARCHAR(6),
    DOCNR   VARCHAR(15),
    CLID    VARCHAR(15),
    CLID2   VARCHAR(15),
    DESCR   VARCHAR(80),
    SUMM    MONEY NOT NULL,
    PVN     MONEY NOT NULL,
    OPT     INTEGER DEFAULT 0 NOT NULL,
    ZNR     INTEGER DEFAULT 0 NOT NULL,
    ZU      VARCHAR(20),
    ZDT     TIMESTAMP DEFAULT LOCALTIMESTAMP(0) NOT NULL,
    DT2     DATE,
    NL      SMALLINT DEFAULT 0,
    YR      COMPUTED BY (extract(year from dete)),
    IDDOCM  INTEGER
);

CREATE TABLE F_OPSD_YEAR_SEQ (
    YR      INTEGER NOT NULL,
    NEXTNR  INTEGER NOT NULL
);

CREATE TABLE F_PERSONS (
    CLID      VARCHAR(15) NOT NULL,
    NAME      VARCHAR(100),
    REGNR     VARCHAR(15),
    PVNREGNR  VARCHAR(15),
    TP        VARCHAR(15) DEFAULT 'KR',
    TP2       VARCHAR(5) DEFAULT 'JP',
    TP3       VARCHAR(5) DEFAULT 'Ir',
    ADDR      VARCHAR(100),
    ADDR2     VARCHAR(100),
    BANKID    VARCHAR(8),
    BANK      VARCHAR(50),
    BANKACC   VARCHAR(25),
    PHONE     VARCHAR(10),
    ATK       VARCHAR(6),
    ACT       INTEGER DEFAULT 1
);

CREATE TABLE F_PERSONTYP (
    ID    INTEGER NOT NULL,
    IDX   VARCHAR(15) NOT NULL,
    NAME  VARCHAR(50)
);

CREATE TABLE F_ROPS1A (
    ID       INTEGER NOT NULL,
    SPID     INTEGER,
    DID      INTEGER,
    DETE     DATE,
    NRX      VARCHAR(5),
    DOCTYP   VARCHAR(10),
    DOCTYP1  VARCHAR(10),
    DOCTYP2  VARCHAR(10),
    DOCST    VARCHAR(6),
    DOCNR    VARCHAR(15),
    CLID     VARCHAR(15),
    CLID2    VARCHAR(15),
    NAME     VARCHAR(100),
    NAME2    VARCHAR(100),
    REGNR    VARCHAR(15),
    REGNR2   VARCHAR(15),
    B0       MONEY,
    DESCR    VARCHAR(80),
    DESCR2   VARCHAR(80),
    AC1      VARCHAR(8),
    AC2      VARCHAR(8),
    SAC1     VARCHAR(100),
    SAC2     VARCHAR(100),
    SUMMC    MONEY,
    CUR      VARCHAR(3),
    SUMM     MONEY,
    PVN      MONEY,
    RAC      VARCHAR(8),
    SDB      MONEY,
    SCR      MONEY,
    RAC2     VARCHAR(8),
    RAC3     VARCHAR(5),
    RAC4     VARCHAR(8),
    RAC5     VARCHAR(5),
    QV       FLOAT,
    ZNR      INTEGER
);

CREATE TABLE F_ROPS2A (
    ID     INTEGER NOT NULL,
    SPID   INTEGER,
    AC     VARCHAR(8),
    RAC    VARCHAR(8),
    NAME   VARCHAR(150),
    B0     MONEY,
    SDB    MONEY,
    SCR    MONEY,
    TDB    MONEY,
    TCR    MONEY,
    CLID   VARCHAR(15),
    NAME1  VARCHAR(100),
    REGNR  VARCHAR(15),
    RNAME  VARCHAR(150)
);

CREATE TABLE F_ROPS2B (
    ID    INTEGER NOT NULL,
    SPID  INTEGER,
    AC    VARCHAR(8),
    NAME  VARCHAR(100),
    B0    MONEY,
    SDB   MONEY,
    SCR   MONEY,
    TDB   MONEY,
    TCR   MONEY
);

CREATE TABLE F_ROPS3A (
    ID    INTEGER NOT NULL,
    SPID  INTEGER,
    RAC   VARCHAR(8),
    NAME  VARCHAR(100),
    SDB   MONEY,
    SCR   MONEY,
    AC1   VARCHAR(8),
    CLID  VARCHAR(15)
);

CREATE TABLE F_TABLE1 (
    ID       INTEGER NOT NULL,
    FIELD1   VARCHAR(27),
    FIELD2   INTEGER,
    FIELD3   VARCHAR(100),
    FIELD4   VARCHAR(100),
    FIELD5   INTEGER,
    FIELD6   VARCHAR(100),
    FIELD7   VARCHAR(100),
    FIELD8   INTEGER,
    FIELD9   VARCHAR(100),
    FIELD10  INTEGER,
    FIELD11  INTEGER,
    FIELD12  INTEGER,
    FIELD13  FLOAT,
    FIELD14  FLOAT
);

CREATE TABLE F_TREM (
    ID    INTEGER NOT NULL,
    AID   VARCHAR(20),
    TEXT  BLOB SUB_TYPE 1 SEGMENT SIZE 80
);

CREATE TABLE F_TREPA1 (
    ID    INTEGER NOT NULL,
    SPID  INTEGER,
    I1    VARCHAR(15),
    NM    VARCHAR(100),
    DT    DATE,
    ST    VARCHAR(6),
    NR    VARCHAR(15),
    S1    MONEY,
    S2    MONEY,
    S3    MONEY,
    S4    MONEY
);

CREATE TABLE F_TREPAPAN (
    ID    INTEGER NOT NULL,
    SPID  INTEGER,
    AC1   VARCHAR(8),
    AC2   VARCHAR(8),
    AC3   VARCHAR(15),
    AC4   VARCHAR(15),
    AC5   VARCHAR(15),
    CL    VARCHAR(15),
    S1    MONEY,
    S2    MONEY,
    S3    MONEY,
    S4    MONEY
);

CREATE TABLE F_TREPDARZ1 (
    ID      INTEGER NOT NULL,
    SPID    INTEGER,
    DID     INTEGER,
    RID     INTEGER,
    DETE    DATE,
    NRX     VARCHAR(5),
    DOCTYP  VARCHAR(10),
    DOCST   VARCHAR(6),
    DOCNR   VARCHAR(15),
    DOCSTR  VARCHAR(200),
    CLID    VARCHAR(15),
    NAME    VARCHAR(100),
    REGNR   VARCHAR(15),
    DESCR   VARCHAR(80),
    AC1     VARCHAR(8),
    AC2     VARCHAR(8),
    AA      MONEY,
    A1      MONEY,
    A2      MONEY,
    A3      MONEY,
    A4      MONEY,
    A5      MONEY,
    A6      MONEY,
    A7      MONEY,
    A8      MONEY,
    A9      MONEY,
    A10     MONEY,
    A11     MONEY,
    A12     MONEY,
    A13     MONEY,
    A14     MONEY,
    A15     MONEY,
    A16     MONEY,
    A17     MONEY,
    A18     MONEY
);

CREATE TABLE F_TREPDARZ2 (
    ID    INTEGER NOT NULL,
    SPID  INTEGER,
    RID0  INTEGER,
    A1    MONEY,
    A2    MONEY,
    A3    MONEY,
    A4    MONEY,
    A5    MONEY,
    A6    MONEY,
    A7    MONEY,
    A8    MONEY,
    A9    MONEY,
    A10   MONEY,
    A11   MONEY,
    A12   MONEY,
    A13   MONEY,
    A14   MONEY,
    A15   MONEY,
    A16   MONEY,
    A17   MONEY,
    A18   MONEY,
    A19   MONEY,
    A20   MONEY,
    A21   MONEY
);

CREATE TABLE F_TREPDOCS1 (
    ID    INTEGER NOT NULL,
    SPID  INTEGER,
    SR    VARCHAR(6),
    NR    VARCHAR(9),
    S1    NUMERIC(15,4),
    S2    NUMERIC(15,4)
);

CREATE TABLE F_TREPDOCS2 (
    ID    INTEGER NOT NULL,
    SPID  INTEGER,
    SR    VARCHAR(6),
    NR1   VARCHAR(9),
    NR2   VARCHAR(9),
    S1    MONEY,
    S2    MONEY,
    VX    CHAR(1)
);

CREATE TABLE F_TREPDOCSS (
    ID    INTEGER NOT NULL,
    SPID  INTEGER,
    DID   INTEGER,
    S1    NUMERIC(15,4),
    S2    NUMERIC(15,4),
    S3    NUMERIC(15,4)
);

CREATE TABLE F_TREPMT (
    ID    INTEGER NOT NULL,
    SPID  INTEGER,
    AD    VARCHAR(3),
    AC1   VARCHAR(15),
    AC2   VARCHAR(15),
    ACN1  VARCHAR(100),
    ACN2  VARCHAR(100),
    M1    MONEY,
    M2    MONEY,
    M3    MONEY,
    M4    MONEY,
    M5    MONEY,
    M6    MONEY,
    M7    MONEY,
    M8    MONEY,
    M9    MONEY,
    M10   MONEY,
    M11   MONEY,
    M12   MONEY,
    N1    MONEY,
    N2    MONEY,
    N3    MONEY,
    N4    MONEY,
    N5    MONEY,
    N6    MONEY,
    N7    MONEY,
    N8    MONEY,
    N9    MONEY,
    N10   MONEY,
    N11   MONEY,
    N12   MONEY,
    MT    MONEY,
    NT    MONEY
);

CREATE TABLE F_TREPOPS (
    ID     INTEGER NOT NULL,
    DOCID  INTEGER NOT NULL,
    DESCR  VARCHAR(50),
    AC11   VARCHAR(8) NOT NULL,
    AC12   VARCHAR(8),
    AC13   VARCHAR(5),
    AC14   VARCHAR(8),
    AC15   VARCHAR(5),
    AC21   VARCHAR(8) NOT NULL,
    AC22   VARCHAR(8),
    AC23   VARCHAR(5),
    AC24   VARCHAR(8),
    AC25   VARCHAR(5),
    SUMMC  MONEY,
    CUR    VARCHAR(3),
    SUMM   MONEY,
    QV     FLOAT,
    NL     SMALLINT,
    ZDT    TIMESTAMP
);

CREATE TABLE F_TREPOPSD (
    ID      INTEGER NOT NULL,
    DETE    DATE NOT NULL,
    NRX     VARCHAR(5),
    DOCTYP  VARCHAR(10),
    DOCST   VARCHAR(6),
    DOCNR   VARCHAR(15),
    CLID    VARCHAR(15),
    CLID2   VARCHAR(15),
    DESCR   VARCHAR(80),
    SUMM    MONEY NOT NULL,
    PVN     MONEY NOT NULL,
    OPT     INTEGER,
    ZNR     INTEGER,
    ZU      VARCHAR(20),
    ZDT     TIMESTAMP,
    DT2     DATE,
    NL      SMALLINT,
    YR      INTEGER
);

CREATE TABLE F_TREPPVNZ1 (
    ID      INTEGER NOT NULL,
    SPID    INTEGER,
    DID     INTEGER,
    RID     INTEGER,
    DETE    DATE,
    NRX     VARCHAR(5),
    DOCTYP  VARCHAR(10),
    DOCST   VARCHAR(6),
    DOCNR   VARCHAR(15),
    DOCSTR  VARCHAR(200),
    CLID    VARCHAR(15),
    NAME    VARCHAR(100),
    REGNR   VARCHAR(15),
    DESCR   VARCHAR(80),
    AA      MONEY,
    A8      MONEY,
    A9      MONEY,
    A10     MONEY,
    A11     VARCHAR(8),
    A12     MONEY,
    A13     MONEY,
    A14     MONEY,
    A15     MONEY,
    A16     MONEY,
    A17     MONEY,
    A18     MONEY,
    A19     MONEY,
    A20     MONEY,
    A21     MONEY,
    A22     MONEY,
    A23     MONEY,
    A24     MONEY,
    A25     MONEY,
    A26     MONEY,
    A27     MONEY,
    A28     MONEY,
    A29     MONEY,
    A30     MONEY,
    A31     MONEY
);

CREATE TABLE F_TREPUDOCS (
    ID    INTEGER NOT NULL,
    SPID  INTEGER,
    LD    INTEGER,
    T0    INTEGER,
    TT    VARCHAR(100),
    T1    CHAR(1),
    T2    CHAR(1),
    T3    CHAR(2),
    DT1   VARCHAR(27),
    SR    VARCHAR(6),
    CT    SMALLINT,
    N1    VARCHAR(9),
    N2    VARCHAR(9),
    S1    FLOAT,
    S2    FLOAT
);

CREATE GLOBAL TEMPORARY TABLE F_TTEMP_BALA21 (
    ID    INTEGER NOT NULL,
    AC    VARCHAR(8),
    S1    MONEY DEFAULT 0,
    S2    MONEY DEFAULT 0,
    BID   INTEGER DEFAULT 0,
    SPID  COMPUTED BY (CURRENT_CONNECTION)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE F_TTEMP_BALAC (
    ID    INTEGER NOT NULL,
    BID   INTEGER DEFAULT 0,
    S1    MONEY DEFAULT 0,
    S2    MONEY DEFAULT 0,
    AC    VARCHAR(8),
    SPID  COMPUTED BY (CURRENT_CONNECTION)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE F_TTEMP_BALMT1 (
    ID    INTEGER NOT NULL,
    SPID  INTEGER DEFAULT 0,
    AC    VARCHAR(8) NOT NULL,
    M0    MONEY DEFAULT 0 NOT NULL,
    M1    MONEY DEFAULT 0 NOT NULL,
    M2    MONEY DEFAULT 0 NOT NULL,
    M3    MONEY DEFAULT 0 NOT NULL,
    M4    MONEY DEFAULT 0 NOT NULL,
    M5    MONEY DEFAULT 0 NOT NULL,
    M6    MONEY DEFAULT 0 NOT NULL,
    M7    MONEY DEFAULT 0 NOT NULL,
    M8    MONEY DEFAULT 0 NOT NULL,
    M9    MONEY DEFAULT 0 NOT NULL,
    M10   MONEY DEFAULT 0 NOT NULL,
    M11   MONEY DEFAULT 0 NOT NULL,
    M12   MONEY DEFAULT 0 NOT NULL
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE F_TTEMP_BALMT2 (
    ID    INTEGER NOT NULL,
    SPID  INTEGER,
    BID   INTEGER DEFAULT 0 NOT NULL,
    M0    MONEY DEFAULT 0 NOT NULL,
    M1    MONEY DEFAULT 0 NOT NULL,
    M2    MONEY DEFAULT 0 NOT NULL,
    M3    MONEY DEFAULT 0 NOT NULL,
    M4    MONEY DEFAULT 0 NOT NULL,
    M5    MONEY DEFAULT 0 NOT NULL,
    M6    MONEY DEFAULT 0 NOT NULL,
    M7    MONEY DEFAULT 0 NOT NULL,
    M8    MONEY DEFAULT 0 NOT NULL,
    M9    MONEY DEFAULT 0 NOT NULL,
    M10   MONEY DEFAULT 0 NOT NULL,
    M11   MONEY DEFAULT 0 NOT NULL,
    M12   MONEY DEFAULT 0 NOT NULL
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE F_TTEMP_DIFF2 (
    IDL1   INTEGER,
    IDL2   INTEGER,
    DOCID  INTEGER,
    ROWID  INTEGER
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE F_TTEMP_PVN1 (
    DID      INTEGER NOT NULL,
    CLID     VARCHAR(15),
    DOCTYP1  VARCHAR(10),
    DOCTYP2  VARCHAR(10),
    DOCTYPC  INTEGER,
    RAC5     VARCHAR(8),
    SUMM     MONEY DEFAULT 0,
    PVN      MONEY DEFAULT 0,
    SUMMC    MONEY DEFAULT 0,
    CUR      VARCHAR(3),
    ID       INTEGER NOT NULL,
    SUMMDOC  MONEY
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE F_TTEMP_PVN2 (
    CLID  VARCHAR(15) NOT NULL
) ON COMMIT DELETE ROWS;

CREATE TABLE F_TUDOCLISTS (
    ID   INTEGER NOT NULL,
    T1   CHAR(1),
    DT1  VARCHAR(27),
    DT2  VARCHAR(27)
);

CREATE TABLE F_TUDOCS (
    ID   INTEGER NOT NULL,
    LD   INTEGER,
    T1   CHAR(1),
    T2   CHAR(1),
    T3   CHAR(1),
    DT1  VARCHAR(27),
    SR   VARCHAR(6),
    CT   SMALLINT,
    N1   VARCHAR(9),
    N2   VARCHAR(9),
    S1   FLOAT,
    S2   FLOAT
);

CREATE TABLE F_TUPDFIELDS (
    ID    VARCHAR(20) NOT NULL,
    TEXT  VARCHAR(50),
    N     VARCHAR(3)
);

CREATE TABLE F_TUPVN1 (
    ID   INTEGER NOT NULL,
    DID  INTEGER,
    S    NUMERIC(15,4),
    S1   NUMERIC(15,4),
    S2   NUMERIC(15,4)
);

CREATE TABLE F_VW_OPS (
    ID       INTEGER NOT NULL,
    DOCID    INTEGER NOT NULL,
    DETE     DATE NOT NULL,
    NRX      VARCHAR(5),
    ZNR      INTEGER NOT NULL,
    DOCTYP   VARCHAR(10),
    DOCST    VARCHAR(6),
    DOCNR    VARCHAR(15),
    DOCTYP2  VARCHAR(10),
    CLID     VARCHAR(15),
    NAME     VARCHAR(100),
    REGNR    VARCHAR(15),
    CLID2    VARCHAR(15),
    NAME2    VARCHAR(100),
    REGNR2   VARCHAR(15),
    DESCR    VARCHAR(80),
    AC11     VARCHAR(8) NOT NULL,
    AC12     VARCHAR(8),
    AC13     VARCHAR(5),
    AC14     VARCHAR(8),
    AC15     VARCHAR(5),
    AC21     VARCHAR(8) NOT NULL,
    AC22     VARCHAR(8),
    AC23     VARCHAR(5),
    AC24     VARCHAR(8),
    AC25     VARCHAR(5),
    SUMMC    MONEY NOT NULL,
    CUR      VARCHAR(3) NOT NULL,
    SUMM     MONEY NOT NULL,
    QV       FLOAT,
    DESCR2   VARCHAR(80)
);

CREATE TABLE M_ACCOUNTS (
    ID    DMAC1 NOT NULL,
    NAME  VARCHAR(100),
    TP    INTEGER
);

CREATE TABLE M_ACCOUNTTYPE (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(20)
);

CREATE TABLE M_ADDRESSSES (
    ID         INTEGER NOT NULL,
    IDSTORE    INTEGER,
    IDCOUNTRY  INTEGER,
    NAME       VARCHAR(300) NOT NULL,
    ADDRESS    VARCHAR(300) NOT NULL
);

CREATE TABLE M_BANKACCOUNTS (
    ID       INTEGER NOT NULL,
    IDBANK   INTEGER NOT NULL,
    IDSTORE  INTEGER,
    ACCOUNT  VARCHAR(30) DEFAULT '?''' NOT NULL
);

CREATE TABLE M_BANKS (
    ID    INTEGER NOT NULL,
    CODE  VARCHAR(10),
    NAME  VARCHAR(100)
);

CREATE TABLE M_CONTACTS (
    ID       INTEGER NOT NULL,
    IDSTORE  INTEGER,
    NAME     VARCHAR(50) NOT NULL,
    DESCR    VARCHAR(200),
    PHONE    VARCHAR(20),
    EMAIL    VARCHAR(50)
);

CREATE TABLE M_COUNTRIES (
    ID     INTEGER NOT NULL,
    NAME   VARCHAR(50) NOT NULL,
    CODE3  VARCHAR(5) NOT NULL,
    CODE2  VARCHAR(5) NOT NULL
);

CREATE TABLE M_DISC_LISTS (
    ID    INTEGER NOT NULL,
    CODE  VARCHAR(200) DEFAULT '?' NOT NULL,
    NAME  VARCHAR(300) DEFAULT '?' NOT NULL
);

CREATE TABLE M_DISC_LISTS_P (
    ID           INTEGER NOT NULL,
    IDL          INTEGER NOT NULL,
    IDSTORESCAT  INTEGER,
    IDSTORE      INTEGER
);

CREATE TABLE M_DISC_LISTS_R (
    ID          INTEGER NOT NULL,
    IDL         INTEGER NOT NULL,
    IDITEMSCAT  INTEGER,
    IDITEM      INTEGER,
    DISCOUNT    FLOAT DEFAULT 0 NOT NULL
);

CREATE TABLE M_DOCS (
    ID                 INTEGER NOT NULL,
    DT                 DATE NOT NULL,
    SR                 VARCHAR(10),
    NR                 VARCHAR(20),
    TP                 INTEGER DEFAULT 1 NOT NULL,
    PVNTYPE            INTEGER DEFAULT 1 NOT NULL,
    STATE              INTEGER DEFAULT 0 NOT NULL,
    IDSTOREIN          INTEGER DEFAULT 1 NOT NULL,
    IDSTOREOUT         INTEGER DEFAULT 1 NOT NULL,
    IDCREDDOC          INTEGER,
    CREDDOCDT          DATE,
    SUMM               MONEY DEFAULT 0 NOT NULL,
    IDSEQ              BIGINT DEFAULT -1 NOT NULL,
    ACCIN              DMAC1 DEFAULT '.?' NOT NULL,
    ACCOUT             DMAC1 DEFAULT '.?' NOT NULL,
    CREDDOCSR          VARCHAR(10),
    CREDDOCNR          VARCHAR(20),
    IDCARRIER          INTEGER,
    IDADDRESSOUT       INTEGER,
    IDADDRESSIN        INTEGER,
    IDVEHICLE          INTEGER,
    IDTRANSACTIONTYPE  INTEGER DEFAULT 1 NOT NULL,
    IDPAYMENTTYPE      INTEGER,
    IDDRIVER           INTEGER,
    ACCOUNTINGTP       SMALLINT DEFAULT 0 NOT NULL,
    ACCTP1             SMALLINT DEFAULT 1 NOT NULL,
    ACCTP2             SMALLINT DEFAULT 1 NOT NULL,
    WEVATPAYER         SMALLINT DEFAULT 1 NOT NULL,
    DUEDATE            DATE
);

CREATE TABLE M_DOCTYPES (
    ID      INTEGER NOT NULL,
    CODE    VARCHAR(50),
    NAME    VARCHAR(200),
    OPTYPE  INTEGER DEFAULT 0 NOT NULL
);

CREATE TABLE M_INV_DOCS (
    ID       INTEGER NOT NULL,
    DT       DATE NOT NULL,
    NR       VARCHAR(10),
    IDSTORE  INTEGER NOT NULL,
    STATE    INTEGER DEFAULT 0 NOT NULL,
    PERSONS  VARCHAR(200)
);

CREATE TABLE M_INV_ROWS (
    ID            INTEGER NOT NULL,
    IDDOC         INTEGER NOT NULL,
    IDITEM        INTEGER NOT NULL,
    IDUNITS       INTEGER DEFAULT 0 NOT NULL,
    AM_COUNTED_1  DAMOUNT DEFAULT 0 NOT NULL,
    AM_COUNTED_2  DAMOUNT DEFAULT 0,
    AM_CALC       DAMOUNT DEFAULT 0 NOT NULL,
    AM_DIFF       DAMOUNT DEFAULT 0 NOT NULL
);

CREATE TABLE M_ITEMS (
    ID             INTEGER NOT NULL,
    BARCODE        VARCHAR(30) DEFAULT '?''' NOT NULL,
    NAME           VARCHAR(300) DEFAULT '?''' NOT NULL,
    CAT            INTEGER DEFAULT 1 NOT NULL,
    UNITS          INTEGER DEFAULT 1 NOT NULL,
    STORE1         INTEGER DEFAULT 1 NOT NULL,
    PVNRATE        INTEGER DEFAULT 2 NOT NULL,
    ISSERVICE      INTEGER DEFAULT 0 NOT NULL,
    ISPRODUCED     INTEGER DEFAULT 0 NOT NULL,
    SELLPRICE      DPRICEX DEFAULT 0 NOT NULL,
    BUYPRICE       DPRICEX DEFAULT 0 NOT NULL,
    PRODCOST       DPRICEX DEFAULT 0 NOT NULL,
    LASTBUYPRICE   DPRICEX DEFAULT 0 NOT NULL,
    AMOUNTINSTORE  DAMOUNT DEFAULT 0 NOT NULL,
    LASTSALEDATE   DATE,
    LASTBUYDATE    DATE
);

CREATE TABLE M_ITEMS_CAT (
    ID          INTEGER NOT NULL,
    NAME        VARCHAR(300) DEFAULT '?''' NOT NULL,
    CODE        VARCHAR(200) NOT NULL,
    ISGROUP     INTEGER DEFAULT 0 NOT NULL,
    METHOD      INTEGER DEFAULT 0 NOT NULL,
    ISSERVICES  INTEGER DEFAULT 0 NOT NULL,
    ISPRODUCED  INTEGER DEFAULT 0 NOT NULL,
    ACC6        DMAC1 DEFAULT '.?' NOT NULL,
    ACC7        DMAC1 DEFAULT '.?' NOT NULL
);

CREATE TABLE M_ITEMS_PER_STORE (
    IDITEM   INTEGER NOT NULL,
    IDSTORE  INTEGER NOT NULL,
    AMOUNT   DAMOUNT DEFAULT 0 NOT NULL
);

CREATE TABLE M_LINKS (
    ID1     INTEGER NOT NULL,
    ID2     INTEGER NOT NULL,
    IDITEM  INTEGER NOT NULL,
    AMOUNT  DAMOUNT DEFAULT 0 NOT NULL
);

CREATE TABLE M_PAYMENTTYPE (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(200)
);

CREATE TABLE M_PRICE_LISTS (
    ID    INTEGER NOT NULL,
    CODE  VARCHAR(200) DEFAULT '?' NOT NULL,
    NAME  VARCHAR(300) DEFAULT '?' NOT NULL
);

CREATE TABLE M_PRICE_LISTS_P (
    ID           INTEGER NOT NULL,
    IDL          INTEGER NOT NULL,
    IDSTORESCAT  INTEGER,
    IDSTORE      INTEGER
);

CREATE TABLE M_PRICE_LISTS_R (
    ID      INTEGER NOT NULL,
    IDL     INTEGER NOT NULL,
    IDITEM  INTEGER NOT NULL,
    PRICE   DPRICEX DEFAULT 0 NOT NULL
);

CREATE TABLE M_PVNRATES (
    ID         INTEGER NOT NULL,
    CODE       VARCHAR(10) DEFAULT '?''' NOT NULL,
    NAME       VARCHAR(300),
    RATE       MONEY DEFAULT 0 NOT NULL,
    ISREVERSE  INTEGER DEFAULT 0 NOT NULL
);

CREATE TABLE M_PVNRATES2 (
    ID             INTEGER NOT NULL,
    IDRATE         INTEGER DEFAULT 1 NOT NULL,
    IDTP           INTEGER DEFAULT 0 NOT NULL,
    IDTRTP         INTEGER DEFAULT 0 NOT NULL,
    INCURMT        INTEGER DEFAULT 0 NOT NULL,
    CHANGESIGN     INTEGER DEFAULT 0 NOT NULL,
    BASE_DEB_FIN   INTEGER NOT NULL,
    BASE_DEB_PVN   VARCHAR(10),
    BASE_CRED_FIN  INTEGER NOT NULL,
    BASE_CRED_PVN  VARCHAR(10),
    PVN_DEB_FIN    INTEGER NOT NULL,
    PVN_DEB_PVN    VARCHAR(10),
    PVN_CRED_FIN   INTEGER NOT NULL,
    PVN_CRED_PVN   VARCHAR(10),
    IDPVNTEXT      INTEGER
);

CREATE TABLE M_PVNTEXTS (
    ID         INTEGER NOT NULL,
    CODE       VARCHAR(10) DEFAULT '?''' NOT NULL,
    "VERSION"  VARCHAR(10) DEFAULT '2022''',
    TAG1       VARCHAR(300),
    TAG2       VARCHAR(300)
);

CREATE TABLE M_PVNTYPE (
    ID    INTEGER NOT NULL,
    CODE  VARCHAR(15),
    NAME  VARCHAR(200)
);

CREATE TABLE M_ROWS (
    ID         INTEGER NOT NULL,
    IDDOC      INTEGER NOT NULL,
    IDITEM     INTEGER DEFAULT 1 NOT NULL,
    IDPVNRATE  INTEGER NOT NULL,
    UNITS      INTEGER DEFAULT 1 NOT NULL,
    IDCREDROW  INTEGER,
    AMOUNT     DAMOUNT DEFAULT 0 NOT NULL,
    DISCOUNT   FLOAT DEFAULT 0 NOT NULL,
    PRICE0     DPRICEX DEFAULT 0 NOT NULL,
    PRICE      DPRICEX DEFAULT 0 NOT NULL,
    BUYPRICE   DPRICEX DEFAULT 0 NOT NULL,
    OLDPRICE   DPRICEX DEFAULT 0 NOT NULL,
    TOLDPRICE  MONEY DEFAULT 0,
    TPRICE     MONEY DEFAULT 0 NOT NULL,
    TBUYPRICE  MONEY DEFAULT 0 NOT NULL,
    IDSEQ      BIGINT DEFAULT -1 NOT NULL,
    ACC6       DMAC1 DEFAULT '.?' NOT NULL,
    ACC7       DMAC1 DEFAULT '.?' NOT NULL,
    ISGONE     INTEGER DEFAULT 0 NOT NULL
);

CREATE TABLE M_STORES (
    ID        INTEGER NOT NULL,
    TP        INTEGER DEFAULT 1 NOT NULL,
    IDCAT     INTEGER DEFAULT 1 NOT NULL,
    PVNTP     INTEGER DEFAULT 1 NOT NULL,
    CODE      VARCHAR(20),
    NAME      VARCHAR(200),
    REGNR     VARCHAR(20),
    PVNREGNR  VARCHAR(20),
    ADDR      VARCHAR(500),
    ACC21     DMAC1 DEFAULT '.?' NOT NULL,
    ACC23     DMAC1 DEFAULT '.?' NOT NULL,
    ACC53     DMAC1 DEFAULT '.?' NOT NULL
);

CREATE TABLE M_STORES_CAT (
    ID           INTEGER NOT NULL,
    CODE         VARCHAR(200) DEFAULT '?' NOT NULL,
    NAME         VARCHAR(300) DEFAULT '?' NOT NULL,
    ISGROUP      INTEGER DEFAULT 0 NOT NULL,
    IDPRICES     INTEGER,
    IDDISCOUNTS  INTEGER
);

CREATE TABLE M_STORETYPE (
    ID          INTEGER NOT NULL,
    NAME        VARCHAR(200),
    TRACKSTOCK  INTEGER DEFAULT 1 NOT NULL
);

CREATE TABLE M_TRANSACTIONTYPE (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(200)
);

CREATE TABLE M_UNITS (
    ID    INTEGER NOT NULL,
    CODE  VARCHAR(20) DEFAULT '?' NOT NULL,
    NAME  VARCHAR(100)
);

CREATE TABLE M_VEHICLES (
    ID       INTEGER NOT NULL,
    IDSTORE  INTEGER,
    NAME     VARCHAR(20),
    REGNR    VARCHAR(15)
);

CREATE TABLE P_CAT1 (
    ID       INTEGER NOT NULL,
    CODE     VARCHAR(20) NOT NULL,
    DESCR    VARCHAR(150),
    KIND     INTEGER DEFAULT 0 NOT NULL,
    IDCD     INTEGER NOT NULL,
    IDCT     INTEGER NOT NULL,
    "GROUP"  INTEGER DEFAULT 0 NOT NULL
);

CREATE TABLE P_CATD (
    ID     INTEGER NOT NULL,
    CODE   VARCHAR(20) NOT NULL,
    DESCR  VARCHAR(150),
    RATE   FLOAT DEFAULT 0 NOT NULL
);

CREATE TABLE P_CATT (
    ID      INTEGER NOT NULL,
    CODE    VARCHAR(20) NOT NULL,
    DESCR   VARCHAR(150),
    RATE    FLOAT DEFAULT 0 NOT NULL,
    KIND    INTEGER DEFAULT 0 NOT NULL,
    VALUE0  DM_MONEY DEFAULT 0 NOT NULL
);

CREATE TABLE P_DEPARTMENTS (
    ID       INTEGER NOT NULL,
    CODE     VARCHAR(20) NOT NULL,
    DESCR    VARCHAR(150),
    "GROUP"  INTEGER DEFAULT 0 NOT NULL
);

CREATE TABLE P_EVENTS (
    ID     INTEGER NOT NULL,
    CODE   VARCHAR(20) NOT NULL,
    DESCR  VARCHAR(150),
    SNR    INTEGER DEFAULT 0 NOT NULL,
    K1     INTEGER DEFAULT 0 NOT NULL
);

CREATE TABLE P_ITEMS (
    ID          INTEGER NOT NULL,
    REG_NR      VARCHAR(20) NOT NULL,
    NAME        VARCHAR(150),
    DATE1       DATE,
    DATE2       DATE,
    CAT1        INTEGER NOT NULL,
    CATD        INTEGER NOT NULL,
    CATT        INTEGER NOT NULL,
    PLACE       INTEGER NOT NULL,
    DEPARTMENT  INTEGER NOT NULL,
    VALUE0      DM_MONEY DEFAULT 0 NOT NULL,
    DEPREC      DM_MONEY DEFAULT 0 NOT NULL,
    VALUE_LEFT  DM_MONEY DEFAULT 0 NOT NULL,
    OPT         INTEGER DEFAULT 0 NOT NULL,
    STATE       INTEGER DEFAULT 1 NOT NULL,
    ZDT         TIMESTAMP,
    ZU          VARCHAR(15)
);

CREATE TABLE P_ITEMS_EVENTS (
    ID            INTEGER NOT NULL,
    IDIT          INTEGER NOT NULL,
    SNR           INTEGER DEFAULT -1 NOT NULL,
    "EVENT"       INTEGER DEFAULT 0 NOT NULL,
    DT            DATE NOT NULL,
    DTREG         DATE NOT NULL,
    DESCR         VARCHAR(200),
    DOCNR         VARCHAR(50),
    CAT1          INTEGER NOT NULL,
    CATD          INTEGER NOT NULL,
    CATT          INTEGER NOT NULL,
    PLACE         INTEGER NOT NULL,
    DEPARTMENT    INTEGER NOT NULL,
    VALUE_0       DM_MONEY DEFAULT 0 NOT NULL,
    DEPREC_0      DM_MONEY DEFAULT 0 NOT NULL,
    VALUE_LEFT    DM_MONEY DEFAULT 0 NOT NULL,
    VALUE_C       DM_MONEY DEFAULT 0 NOT NULL,
    DEPREC_C      DM_MONEY DEFAULT 0 NOT NULL,
    SELL_VALUE    DM_MONEY DEFAULT 0 NOT NULL,
    RATE_D        FLOAT DEFAULT 0 NOT NULL,
    RATE_D_MT     DM_MONEY DEFAULT 0 NOT NULL,
    MT_TOTAL      INTEGER DEFAULT 0 NOT NULL,
    MT_USED       INTEGER DEFAULT 0 NOT NULL,
    TAX_VAL       DM_MONEY DEFAULT 0 NOT NULL,
    TAX_VAL_LEFT  DM_MONEY DEFAULT 0 NOT NULL,
    TAX_VAL_C     DM_MONEY DEFAULT 0 NOT NULL,
    TAX_RATE      FLOAT DEFAULT 0 NOT NULL,
    TAX_EACH      INTEGER DEFAULT 1 NOT NULL,
    CHCOLSET      INTEGER DEFAULT 0 NOT NULL,
    ZDT           TIMESTAMP,
    ZU            VARCHAR(15)
);

CREATE TABLE P_PLACES (
    ID       INTEGER NOT NULL,
    CODE     VARCHAR(20) NOT NULL,
    DESCR    VARCHAR(150),
    ADDR     VARCHAR(500),
    "GROUP"  INTEGER DEFAULT 0 NOT NULL
);

CREATE TABLE P_TAXDEPRECYEAR (
    ID          INTEGER NOT NULL,
    YR          INTEGER DEFAULT 0 NOT NULL,
    CATT        INTEGER DEFAULT 0 NOT NULL,
    RATE        FLOAT DEFAULT 0 NOT NULL,
    KIND        INTEGER DEFAULT 0 NOT NULL,
    VALUE0      DM_MONEY DEFAULT 0 NOT NULL,
    VALUE1      DM_MONEY DEFAULT 0 NOT NULL,
    VALUEC      DM_MONEY DEFAULT 0 NOT NULL,
    DEPREC      DM_MONEY DEFAULT 0 NOT NULL,
    "COUNT"     INTEGER DEFAULT 0 NOT NULL,
    VALUE_NEW   DM_MONEY DEFAULT 0 NOT NULL,
    VALUE_ADD   DM_MONEY DEFAULT 0 NOT NULL,
    VALUE_REM   DM_MONEY DEFAULT 0 NOT NULL,
    VALUE_EXCL  DM_MONEY DEFAULT 0 NOT NULL,
    VALUE_COR   DM_MONEY DEFAULT 0 NOT NULL,
    VALUED      DM_MONEY DEFAULT 0 NOT NULL
);

CREATE TABLE PARAMS (
    ID      INTEGER NOT NULL,
    PNAME   VARCHAR(20),
    PVALUE  VARCHAR(50),
    USR     VARCHAR(15)
);

CREATE TABLE USERS (
    NM   VARCHAR(15) NOT NULL,
    PSW  VARCHAR(15),
    TP   CHAR(1),
    NR   INTEGER DEFAULT 0 NOT NULL
);

INSERT INTO A_BANKS (ID, SID, NAME) VALUES (1, 'HABALV55', 'AS Swedbank fdf');
INSERT INTO A_BANKS (ID, SID, NAME) VALUES (2, 'd', 'd');


COMMIT WORK;

INSERT INTO A_DEPARTMENTS (ID, DESCR, ACC1, ACC2, ACC3, ACC4, ACC5, ACC6, USED, USED_DT1, USED_DT2) VALUES ('adm', 'Administrācija', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL);
INSERT INTO A_DEPARTMENTS (ID, DESCR, ACC1, ACC2, ACC3, ACC4, ACC5, ACC6, USED, USED_DT1, USED_DT2) VALUES ('adm.gr', 'Grāmatcedība', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL);
INSERT INTO A_DEPARTMENTS (ID, DESCR, ACC1, ACC2, ACC3, ACC4, ACC5, ACC6, USED, USED_DT1, USED_DT2) VALUES ('adm.v', 'Vadība', '7201', '7301', NULL, NULL, NULL, NULL, 1, NULL, NULL);


COMMIT WORK;

INSERT INTO A_EVENT_TYPES (ID, DESCR, SN, IS_DATE_INT, TP1, TP2, SCODE) VALUES (1, 'Pieņemts', 0, 0, 0, 0, '11');
INSERT INTO A_EVENT_TYPES (ID, DESCR, SN, IS_DATE_INT, TP1, TP2, SCODE) VALUES (2, 'Atlaists', 1, 0, 0, 0, '21');
INSERT INTO A_EVENT_TYPES (ID, DESCR, SN, IS_DATE_INT, TP1, TP2, SCODE) VALUES (201, 'Slimības lapa A', 1, 1, 2, 0, NULL);
INSERT INTO A_EVENT_TYPES (ID, DESCR, SN, IS_DATE_INT, TP1, TP2, SCODE) VALUES (301, 'Neattaisnots kavējums', 1, 1, 3, 0, NULL);
INSERT INTO A_EVENT_TYPES (ID, DESCR, SN, IS_DATE_INT, TP1, TP2, SCODE) VALUES (5, 'Noslēgts Uzņēmuma līgums', 2, 0, 0, 0, '81');
INSERT INTO A_EVENT_TYPES (ID, DESCR, SN, IS_DATE_INT, TP1, TP2, SCODE) VALUES (302, 'Komandējums', 2, 1, 3, 0, NULL);
INSERT INTO A_EVENT_TYPES (ID, DESCR, SN, IS_DATE_INT, TP1, TP2, SCODE) VALUES (101, 'Atvaļinājums', 2, 1, 1, 0, NULL);
INSERT INTO A_EVENT_TYPES (ID, DESCR, SN, IS_DATE_INT, TP1, TP2, SCODE) VALUES (202, 'Slimības lapa B', 2, 1, 2, 0, NULL);
INSERT INTO A_EVENT_TYPES (ID, DESCR, SN, IS_DATE_INT, TP1, TP2, SCODE) VALUES (3, 'Piešķirts amats', 2, 0, 0, 0, NULL);
INSERT INTO A_EVENT_TYPES (ID, DESCR, SN, IS_DATE_INT, TP1, TP2, SCODE) VALUES (6, 'Izbeigts Uzņēmuma līgums', 3, 0, 0, 0, '82');
INSERT INTO A_EVENT_TYPES (ID, DESCR, SN, IS_DATE_INT, TP1, TP2, SCODE) VALUES (4, 'Atbrīvots no amata', 3, 0, 0, 0, NULL);
INSERT INTO A_EVENT_TYPES (ID, DESCR, SN, IS_DATE_INT, TP1, TP2, SCODE) VALUES (102, 'Bezalgas atvaļinājums', 3, 1, 1, 0, NULL);
INSERT INTO A_EVENT_TYPES (ID, DESCR, SN, IS_DATE_INT, TP1, TP2, SCODE) VALUES (203, 'Negadījums darba vietā', 3, 1, 2, 0, NULL);
INSERT INTO A_EVENT_TYPES (ID, DESCR, SN, IS_DATE_INT, TP1, TP2, SCODE) VALUES (303, 'Vidējās izpeļņas dienas', 3, 1, 3, 0, NULL);
INSERT INTO A_EVENT_TYPES (ID, DESCR, SN, IS_DATE_INT, TP1, TP2, SCODE) VALUES (304, 'Profesijas maiņa', 4, 1, 3, 0, NULL);
INSERT INTO A_EVENT_TYPES (ID, DESCR, SN, IS_DATE_INT, TP1, TP2, SCODE) VALUES (103, 'Apmaksāts mācību atvaļinājums', 4, 1, 1, 0, NULL);
INSERT INTO A_EVENT_TYPES (ID, DESCR, SN, IS_DATE_INT, TP1, TP2, SCODE) VALUES (305, 'Cits', 5, 1, 3, 0, NULL);
INSERT INTO A_EVENT_TYPES (ID, DESCR, SN, IS_DATE_INT, TP1, TP2, SCODE) VALUES (104, 'Bezalgas mācību atvaļinājums', 5, 1, 1, 0, NULL);
INSERT INTO A_EVENT_TYPES (ID, DESCR, SN, IS_DATE_INT, TP1, TP2, SCODE) VALUES (105, 'Grūtniecības un dzemdību atvaļinājums', 6, 1, 1, 0, NULL);
INSERT INTO A_EVENT_TYPES (ID, DESCR, SN, IS_DATE_INT, TP1, TP2, SCODE) VALUES (106, 'Bērna kopšanas atvaļinājums', 7, 1, 1, 0, '40');
INSERT INTO A_EVENT_TYPES (ID, DESCR, SN, IS_DATE_INT, TP1, TP2, SCODE) VALUES (107, 'Paternitātes atvaļinājums', 8, 1, 1, 0, NULL);


COMMIT WORK;

INSERT INTO A_EVENT_TYPES2 (ID, TAG, DESCR) VALUES (1, '10 01', 'Brīdinājums');
INSERT INTO A_EVENT_TYPES2 (ID, TAG, DESCR) VALUES (3, '10 02', 'Rāiens');


COMMIT WORK;

INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('0223-05-28', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2015-01-01', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2015-04-03', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2015-04-05', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2015-04-06', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2015-05-01', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2015-05-04', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2015-05-10', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2015-05-24', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2015-06-23', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2015-06-24', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2015-11-18', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2015-12-24', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2015-12-25', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2015-12-26', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2015-12-31', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2016-01-01', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2016-03-25', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2016-03-27', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2016-03-28', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2016-05-01', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2016-05-04', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2016-05-08', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2016-05-15', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2016-06-23', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2016-06-24', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2016-11-18', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2016-12-24', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2016-12-25', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2016-12-26', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2016-12-31', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2017-01-01', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2017-04-14', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2017-04-16', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2017-04-17', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2017-05-01', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2017-05-04', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2017-05-14', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2017-06-04', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2017-06-23', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2017-06-24', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2017-11-18', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2017-11-20', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2017-12-24', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2017-12-25', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2017-12-26', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2017-12-31', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2018-01-01', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2018-03-30', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2018-04-01', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2018-04-02', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2018-05-01', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2018-05-04', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2018-05-13', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2018-06-23', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2018-06-24', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2018-07-09', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2018-11-18', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2018-11-19', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2018-12-24', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2018-12-25', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2018-12-26', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2018-12-31', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2019-01-01', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2019-04-19', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2019-04-21', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2019-04-22', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2019-05-01', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2019-05-04', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2019-06-24', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2019-11-18', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2019-12-24', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2019-12-25', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2019-12-26', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2019-12-31', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2020-01-01', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2020-04-10', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2020-04-12', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2020-04-13', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2020-05-01', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2020-05-04', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2020-05-10', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2020-05-31', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2020-06-23', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2020-06-24', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2020-11-18', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2020-12-24', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2020-12-25', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2020-12-31', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2021-01-01', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2021-04-02', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2021-04-04', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2021-04-05', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2021-05-01', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2021-05-04', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2021-05-09', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2021-05-23', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2021-06-23', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2021-06-24', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2021-11-18', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2021-12-24', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2021-12-25', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2021-12-26', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2021-12-31', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2022-01-01', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2022-04-15', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2022-04-17', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2022-04-18', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2022-05-01', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2022-05-04', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2022-05-08', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2022-06-05', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2022-06-23', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2022-06-24', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2022-11-18', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2022-12-24', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2022-12-25', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2022-12-26', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2022-12-31', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2023-01-01', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2023-04-07', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2023-04-09', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2023-04-10', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2023-05-01', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2023-05-04', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2023-05-14', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2023-06-23', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2023-06-24', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2023-07-09', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2023-07-10', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2023-11-18', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2023-11-20', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2023-12-24', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2023-12-25', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2023-12-26', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2023-12-31', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2026-12-26', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2024-01-01', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2024-03-29', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2024-03-31', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2024-04-01', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2024-05-01', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2024-05-04', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2024-05-12', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2024-05-19', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2024-06-23', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2024-06-24', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2024-11-18', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2024-12-24', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2024-12-25', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2024-12-26', NULL);
INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('2024-12-31', NULL);


COMMIT WORK;

INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1001', 'Darba alga', 1, 0, 1);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1003', 'Ienākumi no intelektuālā īpašuma (izņemot autortiesību mantinieku ienākumus)', 1, 0, 1);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1004', 'Metāllūžņu pārdošanas ienākumi', 1, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1006', 'Ienākumi no nekustamā īpašuma izmantošanas (iznomāšanas, izīrēšanas)', 1, 0, 1);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1007', 'Ienākumi no citas saimnieciskās darbības', 1, 0, 1);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1008', 'Ienākumi no uzņēmuma līguma', 1, 0, 1);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1009', 'Ienākumi no kustamā īpašuma izmantošanas (iznomāšanas, izīrēšanas)', 1, 0, 1);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1010', 'Ienākumi no kokmateriālu un augoša meža atsavināšanas', 1, 0, 1);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1011', 'Dividendes', 1, 0, 1);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1012', 'Mantojuma rezultātā gūtais ienākums', 1, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1013', 'Preču pārdošana (likuma "Par iedzīvotāju ienākuma nodokli" 9.panta pirmās daļas 19.2punkta "a" apakšpunkts)', 1, 0, 1);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1014', 'No juridiskās personas saņemtais dāvinājums', 1, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1015', 'Ienākums no nekustamā īpašuma atsavināšanas', 1, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1016', 'Stipendijas', 1, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1017', 'Apdrošināšanas atlīdzība', 1, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1018', 'Ienākumi no pienākumu pildīšanas padomē vai valdē', 1, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1019', 'Procenti', 1, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1020', 'Citi ar nodokli apliekami ienākumi, no kuriem nodokli ietur izmaksas vietā', 1, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1024', 'Ienākums no privātajos pensiju fondos veikto iemaksu ieguldīšanas', 1, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1026', 'Papildpensijas kapitāls, kas veidojies no darba devēja veiktajām iemaksām privātajos pensiju fondos atbilstoši licencētiem pensiju plāniem un izmaksāts pensiju plānu dalībniekiem', 1, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1027', 'Ienākums no ieguldījumu fondu ieguldījumu apliecību pārdošanas', 1, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1032', 'Atlīdzība, kuru izmaksā sagādes un citas organizācijas par medījumu jēlādām, medījumiem un to gaļu, medību trofejām, zoobarību un citu savvaļā iegūto produkciju', 1, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1033', 'Slimības pabalsti ("B" daļa)', 1, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1034', 'Vecuma pensija', 1, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1035', 'Invaliditātes pensija', 1, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1036', 'Izdienas pensija', 1, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1037', 'Apgādnieka zaudējuma pensija', 1, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1039', 'Valsts speciālā pensija, invalīdu speciālā pensija', 1, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1040', 'Pārmaksātās valsts sociālās apdrošināšanas iemaksas, kas ir atmaksātas', 1, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1042', 'Pensija, kura izmaksāta saskaņā ar Eiropas Savienības regulām un starpvalstu līgumiem', 1, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1043', 'Iznomātā personāla ienākums', 1, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1044', 'Ienākums no dzīvības apdrošināšanas līguma ar līdzekļu uzkrāšanu', 1, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1049', 'Ienākums uz tiesas nolēmuma vai iestādes lēmuma pamata no valsts budžeta izmaksājamās kompensācijas, kas saistītas ar darba attiecībām vai to pārtraukšanu', 1, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1051', 'Ienākums no mūža pensijas apdrošināšanas līgumiem, kas veidojas no apdrošinātāja piešķirtajām gratifikācijām', 1, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1052', 'Pensijai pielīdzināms ienākums', 1, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1054', 'Ienākumam pielīdzināms aizdevums', 1, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('1056', 'Sezonas laukstrādnieku ienākums', 1, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('2006', 'Ienākumi no nekustamā īpašuma izmantošanas (iznomāšanas, izīrēšanas)', 2, 0, 1);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('2007', 'Ienākumi no citas saimnieciskās darbības', 2, 0, 1);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('2008', 'Ienākumi no uzņēmuma līguma', 2, 0, 1);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('2009', 'Ienākumi no kustamā īpašuma izmantošanas (iznomāšanas, izīrēšanas)', 2, 0, 1);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('2010', 'Ienākumi no kokmateriālu un augoša meža atsavināšanas', 2, 0, 1);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('2015', 'Ienākums no nekustamā īpašuma atsavināšanas', 2, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('2021', 'Citi ar nodokli apliekami ienākumi, no kuriem nodokli neietur izmaksas vietā', 2, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('2030', 'Ienākumi, ko saņem likvidācijas vai reorganizācijas gadījumā', 2, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('2046', 'Ienākums no kapitāla aktīvu, izņemot nekustamo īpašumu, atsavināšanas', 2, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('2047', 'Ienākums, kas gūts aizdevuma (kredīta) saistību samazināšanas vai dzēšanas rezultātā', 2, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('2054', 'Ienākumam pielīdzināms aizdevums', 2, 0, 1);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('2055', 'Samazinātu aizdevuma procentu maksājumu radītais ienākums', 2, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('3005', 'Ienākumi no sava īpašuma atsavināšanas (izņemot nekustamo īpašumu)', 3, 0, 1);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('3011', 'Dividendes', 3, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('3015', 'Ienākums no nekustamā īpašuma atsavināšanas', 3, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('3016', 'Stipendijas', 3, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('3017', 'Apdrošināšanas atlīdzība', 3, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('3022', 'Citi ar nodokli neapliekami ienākumi', 3, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('3024', 'Ienākums no privātajos pensiju fondos veikto iemaksu ieguldīšanas', 3, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('3027', 'Ienākums no ieguldījumu fondu ieguldījumu apliecību pārdošanas', 3, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('3028', 'Procentu ienākums no valsts un pašvaldību parādzīmēm', 3, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('3038', 'Valsts sociālās apdrošināšanas aģentūras izmaksātie pabalsti un atlīdzības', 3, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('3041', 'Pārmaksātās valsts sociālās apdrošināšanas brīvprātīgās iemaksas, kas ir atmaksātas', 3, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('3042', 'Pensija, kura izmaksāta saskaņā ar Eiropas Savienības regulām un starpvalstu līgumiem (punkts spēkā no 01.01.2016.)', 3, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('3044', 'Ienākums no dzīvības apdrošināšanas līguma ar līdzekļu uzkrāšanu', 3, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('3045', 'Pabalsts likumos vai Ministru kabineta noteikto normu ietvaros', 3, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('3047', 'Ienākums, kas gūts aizdevuma (kredīta) saistību samazināšanas vai dzēšanas rezultātā', 3, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('3048', 'Ienākums uz tiesas sprieduma pamata no valsts budžeta izmaksājamās kompensācijas, kas nav saistītas ar darba attiecībām vai to pārtraukšanu', 3, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('3050', 'Algota darba ienākumi par darba pienākumu veikšanu citā Eiropas Savienības dalībvalstī vai Eiropas Ekonomikas zonas valstī, vai valstī, ar kuru Latvijai ir noslēgts un stājies spēkā starptautiskais līgums par nodokļu dubultās uzlikšanas un nodokļu nemaksāšanas novēršanu (likuma „Par iedzīvotāju ienākuma nodokli” 24.panta septītā daļa)', 3, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('3053', 'Izložu vai azartspēļu laimests, kas vienā reizē vai summējot visā azartspēles organizēšanas vietas viena apmeklējuma laikā pārsniedz 3000 euro', 3, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('4002', 'Ieņēmumi no savas lauksaimniecības produkcijas un ievāktu savvaļas velšu pārdošanas', 4, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('4023', 'Citi ienākumi, kuri likumā "Par iedzīvotāju ienākuma nodokli" noteikto normu ietvaros ir neapliekams ienākums (9.panta pirmās daļas 20., 25. un 27.punkts)', 4, 0, 0);
INSERT INTO A_INCOME_CODES (ID, DESCR, P1, P2, USED) VALUES ('4025', 'Konkursos un sacensībās saņemtās mantiskās un naudas balvas (prēmijas)', 4, 0, 0);


COMMIT WORK;

INSERT INTO A_PLUSMINUS_FROM (ID, DESCR, TP1, TP2, TP3, SN, DESCR2) VALUES (1, 'no pamatalgas', 0, 0, 0, 0, NULL);
INSERT INTO A_PLUSMINUS_FROM (ID, DESCR, TP1, TP2, TP3, SN, DESCR2) VALUES (7, 'no summas pēc IIN', 0, 0, 0, 0, NULL);
INSERT INTO A_PLUSMINUS_FROM (ID, DESCR, TP1, TP2, TP3, SN, DESCR2) VALUES (5, 'no summas pēc SAI', 0, 0, 0, 0, NULL);
INSERT INTO A_PLUSMINUS_FROM (ID, DESCR, TP1, TP2, TP3, SN, DESCR2) VALUES (2, 'no aprēķinātās algas', 0, 0, 0, 0, NULL);
INSERT INTO A_PLUSMINUS_FROM (ID, DESCR, TP1, TP2, TP3, SN, DESCR2) VALUES (4, 'no summas SAI aprēķinam', 0, 0, 0, 0, NULL);
INSERT INTO A_PLUSMINUS_FROM (ID, DESCR, TP1, TP2, TP3, SN, DESCR2) VALUES (6, 'no summas IIN aprēķinam', 0, 0, 0, 0, NULL);
INSERT INTO A_PLUSMINUS_FROM (ID, DESCR, TP1, TP2, TP3, SN, DESCR2) VALUES (3, 'no algas+slimības n.+atvaļinājuma n.', 0, 0, 0, 0, NULL);


COMMIT WORK;

INSERT INTO A_PLUSMINUS_TYPES (ID, DESCR, DESCR2, SN, TP1, TP2, TP3) VALUES (1, 'Apliek ar nodokļiem', 'Apliek.', 1, 1, 1, 1);
INSERT INTO A_PLUSMINUS_TYPES (ID, DESCR, DESCR2, SN, TP1, TP2, TP3) VALUES (2, 'Neapliek ar SAI', 'NavSAI', 2, 1, 1, 0);
INSERT INTO A_PLUSMINUS_TYPES (ID, DESCR, DESCR2, SN, TP1, TP2, TP3) VALUES (3, 'Autoratlīdzība', 'Autoratl.', 3, 1, 1, 0);
INSERT INTO A_PLUSMINUS_TYPES (ID, DESCR, DESCR2, SN, TP1, TP2, TP3) VALUES (4, 'Neapliek ar nodokļiem', 'Neapliek.', 4, 1, 1, 1);
INSERT INTO A_PLUSMINUS_TYPES (ID, DESCR, DESCR2, SN, TP1, TP2, TP3) VALUES (5, 'Atvilkums pirms IIN aprēķina', 'Pirms IIN', 5, 0, 0, 0);
INSERT INTO A_PLUSMINUS_TYPES (ID, DESCR, DESCR2, SN, TP1, TP2, TP3) VALUES (6, 'Atvilkums pēc nodokļu aprēķina', 'Pēc nod.', 6, 0, 0, 1);
INSERT INTO A_PLUSMINUS_TYPES (ID, DESCR, DESCR2, SN, TP1, TP2, TP3) VALUES (51, 'Aprēķins no neto uz bruto', 'Citādi', 7, 1, 0, 1);
INSERT INTO A_PLUSMINUS_TYPES (ID, DESCR, DESCR2, SN, TP1, TP2, TP3) VALUES (101, 'Iemaksa PF (neapl. daļa)', 'PF apl', 8, 1, 0, 1);
INSERT INTO A_PLUSMINUS_TYPES (ID, DESCR, DESCR2, SN, TP1, TP2, TP3) VALUES (102, 'Iemaksa PF (apliek. daļa)', 'PF neapl', 9, 1, 0, 1);
INSERT INTO A_PLUSMINUS_TYPES (ID, DESCR, DESCR2, SN, TP1, TP2, TP3) VALUES (201, 'Dzīv.apdr.(ar līdz.uzkr.) neapl. daļa', 'DzA AU apl', 10, 1, 0, 1);
INSERT INTO A_PLUSMINUS_TYPES (ID, DESCR, DESCR2, SN, TP1, TP2, TP3) VALUES (202, 'Dzīv.apdr.(ar līdz.uzkr.) apliek. daļa', 'DzA AU neapl', 11, 1, 0, 1);
INSERT INTO A_PLUSMINUS_TYPES (ID, DESCR, DESCR2, SN, TP1, TP2, TP3) VALUES (203, 'Dzīv.apdr.(bez līdz.uzkr) neapliek. daļa', 'DzA BU apl', 12, 1, 0, 1);
INSERT INTO A_PLUSMINUS_TYPES (ID, DESCR, DESCR2, SN, TP1, TP2, TP3) VALUES (204, 'Dzīv.apdr.(bez līdz.uzkr) apliek. daļa', 'DzA BU neapl', 13, 1, 0, 1);


COMMIT WORK;

INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('0', 'Nacionālo bruņoto spēku professions', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('01', 'Virsnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('011', 'Virsnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('0110', 'Virsnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('011001', 'ĢENERĀLLEITNANTS /VICEADMIRĀLIS (Jūras spēkos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('011002', 'ĢENERĀLMAJORS /KONTRADMIRĀLIS (Jūras spēkos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('011003', 'Brigādes ĢENERĀLIS /Flotiles ADMIRĀLIS (Jūras spēkos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('011004', 'PULKVEDIS /Jūras KAPTEINIS (Jūras spēkos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('011005', 'PULKVEŽLEITNANTS /KOMANDKAPTEINIS (Jūras spēkos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('011006', 'MAJORS /KOMANDLEITNANTS (Jūras spēkos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('011007', 'KAPTEINIS /KAPTEIŅLEITNANTS (Jūras spēkos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('011008', 'VIRSLEITNANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('011009', 'LEITNANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('02', 'Instruktori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('021', 'Instruktori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('0210', 'Instruktori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('021001', 'Augstākais VIRSSERŽANTS /Augstākais BOCMANIS (Jūras spēkos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('021002', 'Galvenais VIRSSERŽANTS /Galvenais BOCMANIS (Jūras spēkos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('021003', 'Štāba VIRSSERŽANTS /Štāba BOCMANIS (Jūras spēkos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('021004', 'VIRSSERŽANTS /BOCMANIS (Jūras spēkos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('021005', 'SERŽANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('021006', 'KAPRĀLIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('03', 'Kareivji un zemessargi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('031', 'Kareivji un zemessargi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('0310', 'Kareivji un zemessargi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('031001', 'DIŽKAREIVIS /DIŽMATROZIS (Jūras spēkos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('031002', 'Vecākais ZEMESSARGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('031003', 'KAREIVIS /MATROZIS (Jūras spēkos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('031004', 'ZEMESSARGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1', 'Vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('11', 'Likumdevēji, amatpersonas un vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111', 'Likumdevēji, amatpersonas un vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1111', 'Likumdevēji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111101', 'Valsts PREZIDENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111102', 'Saeimas PRIEKŠSĒDĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111103', 'Saeimas PRIEKŠSĒDĒTĀJA BIEDRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111104', 'Saeimas SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111105', 'Saeimas SEKRETĀRA BIEDRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111106', 'Saeimas /komisijas PRIEKŠSĒDĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111107', 'Saeimas /komisijas PRIEKŠSĒDĒTĀJA BIEDRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111108', 'Saeimas /komisijas SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111109', 'Saeimas /frakcijas PRIEKŠSĒDĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111110', 'Saeimas DEPUTĀTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111111', 'Saeimas PRIEKŠSĒDĒTĀJA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111112', 'Saeimas DEPUTĀTA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111113', 'Parlamentārais SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111114', 'Saeimas /SEKRETĀRA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111115', 'Saeimas /PRIEKŠSĒDĒTĀJA BIEDRA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111116', 'Saeimas /SEKRETĀRA BIEDRA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111117', 'Ministru PREZIDENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111118', 'Ministru PREZIDENTA BIEDRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111119', 'MINISTRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111120', 'Īpašu uzdevumu MINISTRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111121', 'Republikas pilsētas pašvaldības domes DEPUTĀTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111122', 'Novada pašvaldības domes DEPUTĀTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111123', 'Republikas pilsētas pašvaldības domes PRIEKŠSĒDĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111124', 'Republikas pilsētas pašvaldības domes PRIEKŠSĒDĒTĀJA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111125', 'Novada pašvaldības domes PRIEKŠSĒDĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111126', 'Novada pašvaldības domes PRIEKŠSĒDĒTĀJA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1112', 'Valsts augstākās amatpersonas', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111201', 'Starpvalstu /institūcijas VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111202', 'Starpvalstu /institūcijas struktūrvienības VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111203', 'ĢENERĀLPROKURORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111204', 'Valsts KONTROLIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111205', 'Augstākās tiesas PRIEKŠSĒDĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111206', 'Satversmes tiesas PRIEKŠSĒDĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111207', 'Valsts PREZIDENTA PADOMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111208', 'Valsts PREZIDENTA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111209', 'Ministru PREZIDENTA biroja VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111210', 'Ministru PREZIDENTA BIEDRA sekretariāta VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111211', 'Ministru PREZIDENTA PADOMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111212', 'Ministru PREZIDENTA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111213', 'Ministru PREZIDENTA BIEDRA PADOMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111214', 'Ministru PREZIDENTA BIEDRA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111215', 'MINISTRA PADOMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111216', 'Īpašu uzdevumu MINISTRA sekretariāta VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111217', 'Īpašu uzdevumu MINISTRA sekretariāta VADĪTĀJA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111218', 'Ministru kabineta PĀRSTĀVIS starptautiskajās cilvēktiesību institūcijās', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111219', 'Ministra biroja VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111220', 'Aizsardzības PADOMNIEKS starptautiskajās organizācijās', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111221', 'PĀRSTĀVIS starptautiskajā organizācijā', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111222', 'Aizsardzības PADOMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111223', 'Valsts SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111224', 'Valsts SEKRETĀRA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111225', 'Valsts protokola VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111226', 'Valsts protokola VADĪTĀJA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111227', 'Galvenais valsts NOTĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111228', 'Galvenā valsts NOTĀRA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111229', 'Iestādes VADĪTĀJS /ĢENERĀLDIREKTORS /DIREKTORS /PRIEKŠNIEKS /PRIEKŠSĒDĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111230', 'Iestādes VADĪTĀJA VIETNIEKS /ĢENERĀLDIREKTORA VIETNIEKS /DIREKTORA VIETNIEKS /PRIEKŠNIEKA VIETNIEKS /PRIEKŠSĒDĒTĀJA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111231', 'Pārvaldes VADĪTĀJS /DIREKTORS /PRIEKŠNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111232', 'Pārvaldes VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS /PRIEKŠNIEKA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111233', 'Pulka KOMANDIERIS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111234', 'Pulka KOMANDIERA VIETNIEKS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111235', 'Valsts robežas PILNVAROTAIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111236', 'Pašvaldības iestādes VADĪTĀJS /PRIEKŠNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111237', 'Pašvaldības iestādes VADĪTĀJA VIETNIEKS /PRIEKŠNIEKA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111238', 'Pašvaldības IZPILDDIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111239', 'Pašvaldības IZPILDDIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111240', 'Komisijas PRIEKŠSĒDĒTĀJS (valsts pārvaldes jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111241', 'Komisijas PRIEKŠSĒDĒTĀJA VIETNIEKS (valsts pārvaldes jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111242', 'Komisijas LOCEKLIS (valsts pārvaldes jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111243', 'Komisijas SEKRETĀRS (valsts pārvaldes jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111244', 'TIESĪBSARGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111245', 'Padomes LOCEKLIS (valsts pārvaldes jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111246', 'Kolēģijas LOCEKLIS (valsts pārvaldes jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111247', 'Ārkārtējais un pilnvarotais VĒSTNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111248', 'Speciālo uzdevumu VĒSTNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111249', 'ĢENERĀLINSPEKTORS (ārlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111250', 'VĒSTNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111251', 'Pilnvarotais LIETVEDIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111252', 'Pagaidu pilnvarotais LIETVEDIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111253', 'PADOMNIEKS (ārlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111254', 'ĢENERĀLKONSULS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111255', 'Nozares PADOMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111256', 'Reģiona attīstības padomes PRIEKŠSĒDĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111257', 'Reģiona attīstības padomes LOCEKLIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111258', 'Komisijas LOCEKLIS (pašvaldībās)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1114', 'Biedrību un nodibinājumu amatpersonas', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111401', 'Biedrības vai nodibinājuma VADĪTĀJS /PREZIDENTS /VICEPREZIDENTS /ĢENERĀLDIREKTORS /ĢENERĀLSEKRETĀRS /PRIEKŠSĒDĒTĀJS /IZPILDDIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111402', 'Biedrības vai nodibinājuma VADĪTĀJA VIETNIEKS /PREZIDENTA VIETNIEKS /VICEPREZIDENTA VIETNIEKS /ĢENERĀLDIREKTORA VIETNIEKS /ĢENERĀLSEKRETĀRA VIETNIEKS /PRIEKŠSĒDĒTĀJA VIETNIEKS /IZPILDDIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111403', 'Biedrības vai nodibinājuma valdes PRIEKŠSĒDĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111404', 'Biedrības vai nodibinājuma valdes LOCEKLIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111405', 'Arodbiedrības VADĪTĀJS /PREZIDENTS /PRIEKŠSĒDĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111406', 'Arodbiedrības VADĪTĀJA VIETNIEKS /VICEPREZIDENTS /PRIEKŠSĒDĒTĀJA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111407', 'Arodorganizācijas VADĪTĀJS /PRIEKŠSĒDĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('111408', 'Politiskās partijas VADĪTĀJS /PREZIDENTS /PRIEKŠSĒDĒTĀJS /ĢENERĀLSEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('112', 'Rīkotājdirektori un uzņēmumu vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1120', 'Rīkotājdirektori un uzņēmumu vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('112001', 'VADĪTĀJS /DIREKTORS /ĢENERĀLDIREKTORS /PĀRVALDNIEKS /PREZIDENTS /VICEPREZIDENTS /IZPILDDIREKTORS /PRIEKŠSĒDĒTĀJS /PRIEKŠ­NIEKS /ĢENERĀLSEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('112002', 'VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS /ĢENERĀLDIREKTORA VIETNIEKS /PĀRVALDNIEKA VIETNIEKS /PREZIDENTA VIETNIEKS /VICEPREZIDENTA VIETNIEKS /IZPILDDIREKTORA VIETNIEKS /PRIEKŠSĒDĒTĀJA VIETNIEKS /PRIEKŠNIEKA VIETNIEKS /RĪKOTĀJDIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('112003', 'Tehniskais DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('112004', 'KOMERCDIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('112005', 'Ekonomikas DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('112006', 'Ražošanas DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('112007', 'Apgādes DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('112008', 'Loģistikas DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('112009', 'PĀRZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('112010', 'Valdes VADĪTĀJS /PRIEKŠSĒDĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('112011', 'Valdes VADĪTĀJA VIETNIEKS /PRIEKŠSĒDĒTĀJA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('112012', 'Padomes VADĪTĀJS /PRIEKŠSĒDĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('112013', 'Komisijas VADĪTĀJS /PRIEKŠSĒDĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('112014', 'Valdes LOCEKLIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('112015', 'Padomes LOCEKLIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('112016', 'Kolēģijas LOCEKLIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('112017', 'PROKŪRISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('112018', 'Kapitāldaļu turētāja PĀRSTĀVIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('12', 'Administratīvie vadītāji un komercdirektori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121', 'Komercpakalpojumu un administratīvie vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1211', 'Administratīvie un finanšu vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121101', 'VADĪTĀJS /DIREKTORS /PĀRVALDNIEKS (komercpakalpojumos)', 0, 1);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121102', 'VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS /IZPILDDIREKTORS (komercpakalpojumos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121103', 'Finanšu DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121104', 'Galvenais GRĀMATVEDIS', 0, 1);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121105', 'Galvenā GRĀMATVEŽA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121106', 'Administratīvais DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121107', 'Administratīvā DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121108', 'Pamatdarbības struktūrvienības VADĪTĀJS (komercpakalpojumos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121109', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS (komercpakalpojumos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121110', 'Administratīvās struktūrvienības VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121111', 'Administratīvās struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121112', 'Uzskaites struktūrvienības VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121113', 'Uzskaites struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121114', 'Budžeta struktūrvienības VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121115', 'Budžeta struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121116', 'Finanšu un attīstības struktūrvienības VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121117', 'Finanšu un attīstības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121118', 'Analītiskās struktūrvienības VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121119', 'Analītiskās struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121120', 'Juridiskā dienesta VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121121', 'Juridiskās struktūrvienības VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121122', 'Juridiskās struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121123', 'Kreditēšanas struktūrvienības VADĪTĀJS /DIREKTORs', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121124', 'Līzinga struktūrvienības VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121125', 'Darba algas struktūrvienības VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121126', 'Iekšējā audita struktūrvienības VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121127', 'Iekšējā audita struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121128', 'Reklamāciju struktūrvienības VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121129', 'Reklamāciju struktūrvienības VADĪTĀJA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121130', 'Galvenās kases VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121131', 'Starptautiskā norēķinu centra VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121132', 'Naudas pārvedumu struktūrvienības VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121133', 'Pakalpojumu struktūrvienības VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121134', 'Lietvedības struktūrvienības VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121135', 'Lietvedības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121136', 'Kancelejas VADĪTĀJS /PĀRVALDNIEKS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121137', 'Kancelejas VADĪTĀJA VIETNIEKS /PĀRVALDNIEKA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121138', 'Dokumentu pārvaldības struktūrvienības VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121139', 'Dokumentu pārvaldības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121140', 'Konsultāciju struktūrvienības VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121141', 'Konsultāciju struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121142', 'Kvalitātes un risku vadības struktūrvienības VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121143', 'Kvalitātes un risku vadības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121144', 'Grāmatvedības struktūrvienības VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121145', 'Grāmatvedības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121146', 'Stratēģiskās plānošanas un attīstības struktūrvienības VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121147', 'Stratēģiskās plānošanas un attīstības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1212', 'Personāla vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121201', 'Personāla DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121202', 'Personālvadības struktūrvienības VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121203', 'Personālvadības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121204', 'Personāla struktūrvienības VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121205', 'Personāla struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121206', 'Personāla mācību VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1213', 'Politikas un plānošanas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121301', 'Pārvaldes DIREKTORS (valsts pārvaldes jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121302', 'Pārvaldes DIREKTORA VIETNIEKS (valsts pārvaldes jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121303', 'Nozares politikas un politikas plānošanas struktūrvienības VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121304', 'Nozares politikas un politikas plānošanas struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121305', 'Pamatdarbības struktūrvienības VADĪTĀJS /DIREKTORS (valsts pārvaldes jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121306', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS (valsts pārvaldes jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121307', 'Ārējo sakaru struktūrvienības VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121308', 'Ārējo sakaru struktūrvienības VADĪTĀJA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121309', 'Pamatdarbības struktūrvienības VADĪTĀJS /DIREKTORS (ārlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121310', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS (ārlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121311', 'Muitas iestādes struktūrvienības VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121312', 'VIRSUZRAUGS (muitas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121313', 'VIRSUZRAUGA VIETNIEKS (muitas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121314', 'Muitas maiņas VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121315', 'Pamatdarbības struktūrvienības VADĪTĀJS /DIREKTORS (nodokļu administrēšanas un muitas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121316', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS (nodokļu administrēšanas un muitas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121317', 'Pamatdarbības struktūrvienības VADĪTĀJS (sabiedrības pārvaldes jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121318', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS (sabiedrības pārvaldes jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121319', 'Pamatdarbības struktūrvienības VADĪTĀJS /PRIEKŠNIEKS (tiesu varas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121320', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /PRIEKŠNIEKA VIETNIEKS (tiesu varas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121321', 'Pamatdarbības struktūrvienības VADĪTĀJS (darbinieku interešu un tiesību aizsardzības jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121322', 'Pamatdarbības struktūrvienības VADĪTĀJS (tiesību administrēšanas un pārvaldījuma jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121323', 'Pašvaldības pamatdarbības struktūrvienības VADĪTĀJS /DIREKTORS /PRIEKŠNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121324', 'Pašvaldības pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS /PRIEKŠNIEKA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121325', 'Galvenais valsts INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121326', 'Valsts INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121327', 'VirsMEŽZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121328', 'VirsMEŽZIŅA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121331', 'Vecākais MEŽZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1219', 'Citur neklasificēti administratīvie un komercpakalpojumu vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121901', 'VADĪTĀJS /DIREKTORS /PĀRVALDNIEKS (komunālajos pakalpojumos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121902', 'VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS /IZPILDDIREKTORS (komunālajos pakalpojumos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121903', 'Pamatdarbības struktūrvienības VADĪTĀJS (komunālajos pakalpojumos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121904', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS (komunālajos pakalpojumos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121905', 'Pārvaldes PRIEKŠNIEKS (sabiedriskās kārtības un drošības jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121906', 'Pārvaldes PRIEKŠNIEKA VIETNIEKS (sabiedriskās kārtības un drošības jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121907', 'Pamatdarbības struktūrvienības PRIEKŠNIEKS (sabiedriskās kārtības un drošības jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121908', 'Pamatdarbības struktūrvienības PRIEKŠNIEKA VIETNIEKS (sabiedriskās kārtības un drošības jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121909', 'Tehniskās struktūrvienības VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121910', 'Tehniskās struktūrvienības VADĪTĀJA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121911', 'Klientu apkalpošanas struktūrvienības VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121912', 'Klientu apkalpošanas struktūrvienības VADĪTĀJA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121913', 'Korespondentattiecību struktūrvienības VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121914', 'Korespondentattiecību struktūrvienības VADĪTĀJA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121915', 'Vērtspapīru darījumu struktūrvienības VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121916', 'Vērtspapīru darījumu struktūrvienības VADĪTĀJA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121917', 'Valūtu konvertācijas struktūrvienības VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121918', 'Valūtu konvertācijas struktūrvienības VADĪTĀJA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121919', 'Pasta ekspluatācijas struktūrvienības VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121920', 'Darba organizācijas struktūrvienības VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121922', 'Metodiskās struktūrvienības VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121923', 'Pasta tehniskās struktūrvienības VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121924', 'Starptautisko pasta sūtījumu struktūrvienības VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121925', 'Pasta vērtszīmju un filatēlijas struktūrvienības VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121926', 'Pasta vērtszīmju un filatēlijas struktūrvienības VADĪTĀJA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121927', 'Saimniecības struktūrvienības VADĪTĀJS /DIREKTORS /PRIEKŠNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121928', 'Saimniecības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS /PRIEKŠNIEKA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121929', 'Transporta struktūrvienības VADĪTĀJS /DIREKTORS /PRIEKŠNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121930', 'Transporta struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS /PRIEKŠNIEKA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121931', 'Struktūrvienības VADĪTĀJS (citur neklasificētos komercpakalpojumos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121932', 'Struktūrvienības VADĪTĀJA VIETNIEKS (citur neklasificētos komercpakalpojumos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121933', 'Darba aizsardzības struktūrvienības VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121934', 'Darba aizsardzības struktūrvienības VADĪTĀJA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121935', 'Poligrāfijas struktūrvienības VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121936', 'Poligrāfijas struktūrvienības VADĪTĀJA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121937', 'MEISTARS (poligrāfijas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121938', 'Pamatdarbības struktūrvienības VADĪTĀJS /DIREKTORS (apsardzes jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('121939', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS (apsardzes jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('122', 'Tirdzniecības, tirgvedības un attīstības jomas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1221', 'Tirdzniecības un tirgvedības jomas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('122101', 'Tirdzniecības DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('122102', 'Tirgvedības DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('122103', 'Tirdzniecības struktūrvienības VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('122104', 'Tirdzniecības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('122105', 'Tirgvedības struktūrvienības VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('122106', 'Tirgvedības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('122107', 'Iepirkumu struktūrvienības VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('122108', 'Iepirkumu struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1222', 'Reklāmas un sabiedrisko attiecību jomas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('122201', 'Reklāmas struktūrvienības VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('122202', 'Reklāmas struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('122203', 'Sabiedrisko attiecību struktūrvienības VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('122204', 'Sabiedrisko attiecību struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1223', 'Pētniecības un attīstības jomas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('122301', 'Pētniecības struktūrvienības VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('122302', 'Pētniecības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('122303', 'Laboratorijas VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('13', 'Ražošanas un specializēto pakalpojumu jomas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('131', 'Lauksaimniecības, mežsaimniecības un zivsaimniecības ražošanas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1311', 'Lauksaimniecības un mežsaimniecības ražošanas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('131101', 'Lauksaimniecības uzņēmuma VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('131102', 'Saimniecības VADĪTĀJA VIETNIEKS /IZPILDDIREKTORS (lauksaimniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('131103', 'Saimniecības VADĪTĀJS /DIREKTORS (mežsaimniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('131104', 'Saimniecības VADĪTĀJA VIETNIEKS /IZPILDDIREKTORS (mežsaimniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('131105', 'Saimniecības VADĪTĀJS /DIREKTORS (medību saimniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('131106', 'Saimniecības VADĪTĀJA VIETNIEKS /IZPILDDIREKTORS (medību saimniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('131107', 'Pamatdarbības struktūrvienības VADĪTĀJS /DIREKTORS (lauksaimniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('131108', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS (lauksaimniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('131109', 'Pamatdarbības struktūrvienības VADĪTĀJS /DIREKTORS (mežsaimniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('131110', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS (mežsaimniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('131111', 'Pamatdarbības struktūrvienības VADĪTĀJS /DIREKTORS (medību saimniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('131112', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS (medību saimniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('131117', 'Mežizstrādes MEISTARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1312', 'Akvakultūras un zivsaimniecības ražošanas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('131201', 'Saimniecības VADĪTĀJS /DIREKTORS (zivsaimniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('131202', 'Saimniecības VADĪTĀJA VIETNIEKS /IZPILDDIREKTORS (zivsaimniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('131203', 'Pamatdarbības struktūrvienības VADĪTĀJS /DIREKTORS (zivsaimniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('131204', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS (zivsaimniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132', 'Apstrādes un ieguves rūpniecības, būvniecības un loģistikas jomas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1321', 'Apstrādes rūpniecības jomas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132101', 'VADĪTĀJS /DIREKTORS (apstrādes rūpniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132102', 'VADĪTĀJA VIETNIEKS /IZPILDDIREKTORS (apstrādes rūpniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132103', 'Pamatdarbības struktūrvienības VADĪTĀJS /DIREKTORS (apstrādes rūpniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132104', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS (apstrādes rūpniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132105', 'Pamatdarbības struktūrvienības VADĪTĀJS /DIREKTORS (enerģētikā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132106', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS (enerģētikā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132107', 'Ražošanas maiņas VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132108', 'Vecākais MEISTARS (enerģētikā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132109', 'MEISTARS (enerģētikā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132110', 'Vecākais MEISTARS (apstrādes rūpniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132111', 'MEISTARS (apstrādes rūpniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132112', 'MEISTARS (elektrotehnikā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132113', 'Darbu VADĪTĀJS (kuģu remontā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132114', 'Būvdarbu VADĪTĀJS (kuģu būvē)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132115', 'Maiņas MEISTARS (pārtikas rūpniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1322', 'Ieguves rūpniecības jomas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132201', 'VADĪTĀJS /DIREKTORS (ieguves rūpniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132202', 'VADĪTĀJA VIETNIEKS /IZPILDDIREKTORS (ieguves rūpniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132203', 'Pamatdarbības struktūrvienības VADĪTĀJS /DIREKTORS (ieguves rūpniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132204', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS (ieguves rūpniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1323', 'Būvniecības jomas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132301', 'VADĪTĀJS /DIREKTORS (būvniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132302', 'VADĪTĀJA VIETNIEKS /IZPILDDIREKTORS (būvniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132303', 'Pamatdarbības struktūrvienības VADĪTĀJS /DIREKTORS (būvniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132304', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS (būvniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132305', 'Būvdarbu VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132306', 'BūvMEISTARS (būvniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1324', 'Transporta, sakaru, noliktavu, sagādes, sadales, loģistikas un tām radniecīgu jomu vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132401', 'VADĪTĀJS /DIREKTORS /PĀRVALDNIEKS (transportā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132402', 'VADĪTĀJA VIETNIEKS /IZPILDDIREKTORS (transportā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132403', 'VADĪTĀJS /DIREKTORS /PĀRVALDNIEKS (sakaros)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132404', 'VADĪTĀJA VIETNIEKS /IZPILDDIREKTORS (sakaros)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132405', 'VADĪTĀJS /DIREKTORS /PĀRVALDNIEKS (noliktavās)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132406', 'VADĪTĀJA VIETNIEKS /IZPILDDIREKTORS (noliktavās)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132407', 'Pamatdarbības struktūrvienības VADĪTĀJS /DIREKTORS (transportā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132408', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS (transportā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132409', 'Pamatdarbības struktūrvienības VADĪTĀJS /DIREKTORS (sakaros)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132410', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS (sakaros)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132411', 'Pamatdarbības struktūrvienības VADĪTĀJS /DIREKTORS (noliktavās)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132412', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS (noliktavās)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132413', 'Dzelzceļa stacijas PRIEKŠNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132414', 'Dzelzceļa stacijas PRIEKŠNIEKA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132415', 'Pasta nodaļas PRIEKŠNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132416', 'Pasta nodaļas PRIEKŠNIEKA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132417', 'Ceļu distances PRIEKŠNIEKS (transportā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132418', 'Ceļu distances PRIEKŠNIEKA VIETNIEKS (transportā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132419', 'Vilciena PRIEKŠNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132420', 'Signalizācijas un sakaru distances PRIEKŠNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132421', 'Signalizācijas un sakaru distances PRIEKŠNIEKA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132422', 'Lokomotīvju /vagonu depo PRIEKŠNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132423', 'Lokomotīvju /vagonu depo PRIEKŠNIEKA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132424', 'Filiāles DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132425', 'Filiāles DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132426', 'Pastmarku bāzes VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132427', 'Pastmarku bāzes VADĪTĀJA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132428', 'Iecirkņa PRIEKŠNIEKS (transportā un sakaros)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132429', 'Iecirkņa PRIEKŠNIEKA VIETNIEKS (transportā un sakaros)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132430', 'Ceha PRIEKŠNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132431', 'Ceha PRIEKŠNIEKA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132432', 'Ostas KAPTEINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132433', 'Pamatdarbības struktūrvienības VADĪTĀJS /PRIEKŠNIEKS (dzelzceļā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132434', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /PRIEKŠNIEKA VIETNIEKS (dzelzceļā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132435', 'Sagādes struktūrvienības VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132436', 'Sagādes struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132437', 'Sadales struktūrvienības VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132438', 'Sadales struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132439', 'Loģistikas struktūrvienības VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132440', 'Loģistikas struktūrvienības VADĪTĀJA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132441', 'Vecākais MEISTARS (transportā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132442', 'MEISTARS (transportā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('132443', 'Ostas KAPTEIŅA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('133', 'Informācijas un komunikācijas tehnoloģiju jomas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1330', 'Informācijas un komunikācijas tehnoloģiju jomas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('133001', 'VADĪTĀJS /DIREKTORS /PĀRVALDNIEKS (informācijas un komunikācijas tehnoloģiju jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('133002', 'VADĪTĀJA VIETNIEKS /IZPILDDIREKTORS (informācijas un komunikācijas tehnoloģiju jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('133003', 'Pamatdarbības struktūrvienības VADĪTĀJS /DIREKTORS (informācijas un komunikācijas tehnoloģiju jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('133004', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS (informācijas un komunikācijas tehnoloģiju jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('133005', 'Informācijas tehnoloģiju struktūrvienības VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('133006', 'Informācijas tehnoloģiju struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('133007', 'Elektronisko sakaru struktūrvienības VADĪTĀJS /DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('133008', 'Elektronisko sakaru struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('133009', 'Informācijas drošības VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134', 'Specializēto pakalpojumu jomas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1341', 'Bērnu sociālās aprūpes un sociālās rehabilitācijas pakalpojumu jomas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134101', 'VADĪTĀJS /DIREKTORS /PĀRVALDNIEKS (bērnu sociālās aprūpes un sociālās rehabilitācijas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134102', 'VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS /IZPILDDIREKTORS (bērnu sociālās aprūpes un sociālās rehabilitācijas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134103', 'Pamatdarbības struktūrvienības VADĪTĀJS /DIREKTORS (bērnu sociālās aprūpes un sociālās rehabilitācijas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134104', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS (bērnu sociālās aprūpes un sociālās rehabilitācijas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1342', 'Veselības aprūpes pakalpojumu jomas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134201', 'VADĪTĀJS /DIREKTORS /PĀRVALDNIEKS (veselības aprūpes jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134202', 'VADĪTĀJA VIETNIEKS /IZPILDDIREKTORS (veselības aprūpes jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134203', 'Veselības aprūpes vadības ĀRSTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134204', 'Veselības aprūpes VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134205', 'Galvenā medicīnas MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134206', 'Galvenā VECMĀTE', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1343', 'Pilngadīgo sociālās aprūpes un sociālās rehabilitācijas pakalpojumu jomas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134301', 'VADĪTĀJS /DIREKTORS (pilngadīgo sociālās aprūpes un sociālās rehabilitācijas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134302', 'VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS /IZPILDDIREKTORS (pilngadīgo sociālās aprūpes un sociālās rehabilitācijas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134303', 'Pamatdarbības struktūrvienības VADĪTĀJS /DIREKTORS (pilngadīgo sociālās aprūpes un sociālās rehabilitācijas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134304', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS (pilngadīgo sociālās aprūpes un sociālās rehabilitācijas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1344', 'Sociālās labklājības jomas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134401', 'VADĪTĀJS /DIREKTORS (sociālās labklājības jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134402', 'VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS /IZPILDDIREKTORS (sociālās labklājības jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134403', 'Sociālā dienesta VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134404', 'Sociālā dienesta VADĪTĀJA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134405', 'Bāriņtiesas PRIEKŠSĒDĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134406', 'Bāriņtiesas PRIEKŠSĒDĒTĀJA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134407', 'Pamatdarbības struktūrvienības VADĪTĀJS /DIREKTORS (sociālās labklājības jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134408', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS (sociālās labklājības jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1345', 'Izglītības jomas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134501', 'REKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134502', 'PROREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134503', 'VADĪTĀJS /DIREKTORS /PĀRVALDNIEKS (izglītības jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134504', 'VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS /IZPILDDIREKTORS (izglītības jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134505', 'DEKĀNS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134506', 'ProDEKĀNS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134507', 'Skolas PĀRZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134508', 'Skolas DIREKTORS /PRIEKŠNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134509', 'Skolas DIREKTORA VIETNIEKS /PRIEKŠNIEKA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134510', 'Koledžas DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134511', 'Koledžas DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134512', 'Profesionālās vidusskolas VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134513', 'Skolas katedras VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134514', 'Koledžas katedras VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134515', 'Mācību centra VADĪTĀJS /PRIEKŠNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134516', 'Mācību centra VADĪTĀJA VIETNIEKS /PRIEKŠNIEKA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134517', 'Mācību centra daļas PRIEKŠNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134518', 'Profesionālās augstākās izglītības programmas VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134519', 'Profesionālās augstākās izglītības kursa VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134520', 'Mācību kursu VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134521', 'Pamatdarbības struktūrvienības VADĪTĀJS /DIREKTORS (izglītības jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134522', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS (izglītības jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134523', 'Katedras VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1346', 'Finanšu un apdrošināšanas pakalpojumu jomas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134601', 'VADĪTĀJS /DIREKTORS /PĀRVALDNIEKS (finanšu un apdrošināšanas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134602', 'VADĪTĀJA VIETNIEKS /IZPILDDIREKTORS (finanšu un apdrošināšanas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134603', 'Pamatdarbības struktūrvienības VADĪTĀJS /DIREKTORS (finanšu un apdrošināšanas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134604', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS (finanšu un apdrošināšanas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1349', 'Citur neklasificētu specializēto pakalpojumu jomas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134901', 'Vides PĀRVALDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134902', 'VADĪTĀJS (personu sertificēšanas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134903', 'VADĪTĀJS (inspicēšanas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134904', 'VADĪTĀJS (kuģu reģistrēšanas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134905', 'VADĪTĀJS (hidrogrāfijas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134906', 'Pamatdarbības struktūrvienības VADĪTĀJS /DIREKTORS (farmācijas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134907', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS (farmācijas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134908', 'Pašvaldības policijas pamatdarbības struktūrvienības VADĪTĀJS /PRIEKŠNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134909', 'Pašvaldības policijas pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /PRIEKŠNIEKA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134910', 'Pamatdarbības struktūrvienības VADĪTĀJS /KOMANDIERIS /PRIEKŠNIEKS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134911', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /KOMANDIERA VIETNIEKS /PRIEKŠNIEKA VIETNIEKS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134912', 'Pamatdarbības struktūrvienības VADĪTĀJS /PRIEKŠNIEKS (apcietinājuma un brīvības atņemšanas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134913', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /PRIEKŠNIEKA VIETNIEKS (apcietinājuma un brīvības atņemšanas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134914', 'Pamatdarbības struktūrvienības VADĪTĀJS /DIREKTORS /PĀRVALDNIEKS (revīzijas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134915', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS /PĀRVALDNIEKA VIETNIEKS (revīzijas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134916', 'Galvenais INSPEKTORS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134917', 'Galvenais INSPEKTORS (apcietinājuma un brīvības atņemšanas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134918', 'Galvenais INSPEKTORS – SAPIERIS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134919', 'Vecākais valsts REVIDENTS (revīzijas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134920', 'Operatīvais DEŽURANTS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134921', 'Operatīvā DEŽURANTA VIETNIEKS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134922', 'Sakaru VIRSNIEKS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134923', 'Reģiona iestādes VECĀKAIS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134924', 'Valsts REVIDENTS (revīzijas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('134925', 'Meža ugunsdzēsības stacijas VADĪTĀJS (Valsts meža dienestā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('14', 'Viesmīlības, ēdināšanas, tirdzniecības un citu pakalpojumu jomas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('141', 'Viesmīlības un ēdināšanas pakalpojumu jomas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1411', 'Viesmīlības pakalpojumu jomas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('141101', 'Viesnīcas VADĪTĀJS /DIREKTORS /PĀRVALDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('141102', 'Viesnīcas VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('141103', 'Nometnes VADĪTĀJS /DIREKTORS /PĀRVALDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('141104', 'Nometnes VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('141105', 'Pansijas VADĪTĀJS /DIREKTORS /PĀRVALDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('141106', 'Pansijas VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('141107', 'VIESNĪCNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('141108', 'Pamatdarbības struktūrvienības VADĪTĀJS (viesnīcās)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('141109', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS (viesnīcās)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1412', 'Ēdināšanas pakalpojumu jomas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('141201', 'Restorāna VADĪTĀJS /DIREKTORS /PĀRVALDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('141202', 'Restorāna VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('141203', 'Kafejnīcas VADĪTĀJS /DIREKTORS /PĀRVALDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('141204', 'Kafejnīcas VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('141205', 'Ēdnīcas VADĪTĀJS /DIREKTORS /PĀRVALDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('141206', 'Ēdnīcas VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('141207', 'Ēdināšanas pakalpojumu ORGANIZATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('141208', 'Pamatdarbības struktūrvienības VADĪTĀJS (restorānos)', 0, 0);


COMMIT WORK;

INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('141209', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS (restorānos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('142', 'Mazumtirdzniecības un vairumtirdzniecības jomas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1420', 'Mazumtirdzniecības un vairumtirdzniecības jomas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('142001', 'VADĪTĀJS /DIREKTORS (mazumtirdzniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('142002', 'VADĪTĀJA VIETNIEKS /IZPILDDIREKTORS (mazumtirdzniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('142003', 'VADĪTĀJS /DIREKTORS (vairumtirdzniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('142004', 'VADĪTĀJA VIETNIEKS /IZPILDDIREKTORS (vairumtirdzniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('142005', 'VEIKALVEDIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('142006', 'Pamatdarbības struktūrvienības VADĪTĀJS (vairumtirdzniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('142007', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS (vairumtirdzniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('142008', 'Pamatdarbības struktūrvienības VADĪTĀJS (mazumtirdzniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('142009', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS (mazumtirdzniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143', 'Citu pakalpojumu jomas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1431', 'Sporta, atpūtas un kultūras centru vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143101', 'VADĪTĀJS /DIREKTORS /PĀRVALDNIEKS (kultūras jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143102', 'VADĪTĀJA VIETNIEKS /IZPILDDIREKTORS (kultūras jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143103', 'VADĪTĀJS /DIREKTORS /PĀRVALDNIEKS (sporta jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143104', 'VADĪTĀJA VIETNIEKS /IZPILDDIREKTORS (sporta jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143105', 'VADĪTĀJS /DIREKTORS /PĀRVALDNIEKS (tūrisma jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143106', 'VADĪTĀJA VIETNIEKS /IZPILDDIREKTORS (tūrisma jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143107', 'Ekotūrisma PĀRVALDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143108', 'Tūrisma un atpūtas organizācijas VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143109', 'PRODUCENTS (kultūras jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143110', 'IMPRESĀRIJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143111', 'Pamatdarbības struktūrvienības VADĪTĀJS /DIREKTORS (kultūras jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143112', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS (kultūras jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143113', 'Pamatdarbības struktūrvienības VADĪTĀJS /DIREKTORS (sporta jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143114', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS (sporta jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143115', 'Pamatdarbības struktūrvienības VADĪTĀJS /DIREKTORS (tūrisma un atpūtas pakalpojumu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143116', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS /DIREKTORA VIETNIEKS (tūrisma un atpūtas pakalpojumu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('1439', 'Citur neklasificētu pakalpojumu jomas vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143901', 'VADĪTĀJS /DIREKTORS /PĀRVALDNIEKS (individuālo pakalpojumu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143902', 'VADĪTĀJA VIETNIEKS /IZPILDDIREKTORS (individuālo pakalpojumu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143903', 'Pamatdarbības struktūrvienības VADĪTĀJS (individuālo pakalpojumu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143904', 'Pamatdarbības struktūrvienības VADĪTĀJA VIETNIEKS (individuālo pakalpojumu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143905', 'Pamatdarbības struktūrvienības vadītājs (automobiļu tehniskajā apkopē un remontā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143906', 'Pamatdarbības struktūrvienības vadītājA VIETNIEKS (automobiļu tehniskajā apkopē un remontā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143907', 'Pamatdarbības struktūrvienības vadītājs (sadzīves aparatūras un priekšmetu remontā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143908', 'Pamatdarbības struktūrvienības vadītājA VIETNIEKS (sadzīves aparatūras un priekšmetu remontā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143909', 'MEISTARS (automobiļu tehniskajā apkopē un remontā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143910', 'Pamatdarbības struktūrvienības vadītājs (informācijas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143911', 'Pamatdarbības struktūrvienības vadītājA VIETNIEKS (informācijas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('143912', 'Kuģa klientu apkalpošanas servisa VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2', 'Vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('21', 'Zinātnes un inženierzinātņu jomas vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211', 'Zinātnieki, fizikas un Zemes zinātņu vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2111', 'Zinātnieki, fiziķi un astronomi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211101', 'Vadošais PĒTNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211102', 'PĒTNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211103', 'ASISTENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211104', 'AERODINAMIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211105', 'ASTRONOMS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211106', 'RadioASTRONOMS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211107', 'AstroFIZIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211108', 'BALLISTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211109', 'HIDRODINAMIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211110', 'FIZIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211111', 'Akustikas FIZIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211112', 'AtomFIZIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211113', 'ElektromagnetoFIZIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211114', 'Elektronikas FIZIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211115', 'SiltumFIZIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211116', 'Gaismas FIZIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211117', 'Mehānikas FIZIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211118', 'MolekulārFIZIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211119', 'KodolFIZIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211120', 'Optikas FIZIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211121', 'Cietvielu FIZIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211122', 'Skaņas FIZIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211123', 'Teorētiskās fizikas FIZIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211124', 'TERMODINAMIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211125', 'Radioloģijas FIZIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211126', 'METROLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211127', 'Medicīnas FIZIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2112', 'Meteorologi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211201', 'KLIMATOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211202', 'METEOROLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211203', 'SINOPTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211204', 'AgroMETEOROLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211205', 'HidroMETEOROLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211206', 'AEROLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211207', 'OKEANOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211208', 'RADIOMETEOROLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211209', 'Meteoroloģijas RADIOMETRISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211210', 'AeroMETEOROLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211211', 'DendroKLIMATOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2113', 'Ķīmiķi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211301', 'KRISTALOGRĀFS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211302', 'ĶĪMIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211303', 'ANALĪTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211304', 'Kristalogrāfijas ĶĪMIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211305', 'Mazgāšanas līdzekļu ĶĪMIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211306', 'Krāsošanas ĶĪMIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211307', 'Pārtikas ĶĪMIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211308', 'Stikla ĶĪMIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211309', 'Neorganisko vielu ĶĪMIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211310', 'Ādu apstrādes ĶĪMIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211311', 'Metalurģijas ĶĪMIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211312', 'Radioaktīvo vielu ĶĪMIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211313', 'Organisko vielu ĶĪMIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211314', 'Krāsvielu ĶĪMIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211315', 'Naftas ĶĪMIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211316', 'Kosmētisko līdzekļu ĶĪMIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211317', 'Radioloģijas ĶĪMIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211318', 'ĶĪMIĶIS ANALĪTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211319', 'Ražošanas FARMACEITS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2114', 'Ģeologi un ģeofiziķi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211401', 'AerofotoĢEODĒZISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211402', 'GLACIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211403', 'ĢEODĒZISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211404', 'ĢeoFIZIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211405', 'ĢEOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211406', 'ĢeoMAGNĒTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211407', 'ĢeoMORFOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211408', 'HidroAKUSTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211409', 'HidroĢEOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211410', 'HIDROLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211411', 'MikroPALEONTOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211412', 'MINERALOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211413', 'OKEANOGRĀFS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211414', 'PALEONTOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211415', 'SEISMOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211416', 'STRATOGRĀFS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('211417', 'HIDROGRĀFS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('212', 'Matemātiķi, aktuāri un statistiķi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2120', 'Matemātiķi, aktuāri un statistiķi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('212001', 'Darījumu operāciju ANALĪTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('212002', 'Statistikas MATEMĀTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('212003', 'Lietišķās matemātikas MATEMĀTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('212004', 'Klasiskās matemātikas MATEMĀTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('212005', 'MATEMĀTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('212006', 'AKTUĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('212007', 'BIOMETRISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('212008', 'DEMOGRĀFS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('212009', 'Vecākais STATISTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('212010', 'Lauksaimniecības STATISTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('212011', 'Lietišķās statistikas STATISTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('212012', 'Biometrijas STATISTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('212013', 'Demogrāfijas STATISTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('212014', 'Ekonomikas STATISTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('212015', 'Izglītības STATISTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('212016', 'Tehnikas STATISTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('212017', 'Finanšu STATISTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('212018', 'Veselības aprūpes STATISTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('212019', 'Pārskatu STATISTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('212020', 'Medicīnas STATISTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213', 'Dabas zinātņu vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2131', 'Biologi, botāniķi, zoologi un tiem radniecīgu profesiju vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213101', 'ANATOMS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213102', 'BAKTERIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213103', 'Lauksaimniecības BAKTERIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213104', 'Piensaimniecības BAKTERIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213105', 'Zivsaimniecības BAKTERIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213106', 'Pārtikas rūpniecības BAKTERIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213107', 'Rūpniecības BAKTERIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213108', 'Medicīnas BAKTERIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213109', 'Farmācijas BAKTERIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213110', 'Augsnes BAKTERIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213111', 'Veterinārmedicīnas BAKTERIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213112', 'BIOFIZIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213113', 'BIOĶĪMIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213114', 'BIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213115', 'Saldūdens BIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213116', 'Jūras BIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213117', 'Molekulārās bioloģijas BIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213118', 'BOTĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213119', 'Ekoloģijas BOTĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213120', 'Histoloģijas BOTĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213121', 'Mikoloģijas BOTĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213122', 'Augsnes BOTĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213123', 'CITOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213124', 'Dzīvnieku CITOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213125', 'Augu CITOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213126', 'EKOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213127', 'Dzīvnieku EKOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213128', 'Augu EKOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213129', 'EMBRIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213130', 'Ģenētikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213131', 'ENTOMOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213132', 'EPIDEMIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213133', 'FARMAKOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213134', 'ToksikoFARMAKOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213135', 'FIZIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213136', 'Augu FIZIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213137', 'Dzīvnieku FIZIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213138', 'Endokrinoloģijas FIZIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213139', 'Epidemioloģijas FIZIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213140', 'Klīniskais FIZIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213141', 'Neiroloģijas FIZIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213142', 'PsihoFIZIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213143', 'ĢENĒTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213144', 'Dzīvnieku ĢENĒTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213145', 'Augu ĢENĒTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213146', 'HISTOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213147', 'Dzīvnieku HISTOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213148', 'Augu HISTOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213149', 'HidroBIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213150', 'IHTIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213151', 'IMUNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213152', 'MikroBIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213153', 'MIKOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213154', 'ORNITOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213155', 'PARAZITOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213156', 'PATOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213157', 'Augu PATOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213158', 'Dzīvnieku PATOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213159', 'HistoPATOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213160', 'Ķirurģijas PATOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213161', 'NeiroPATOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213162', 'Medicīnas PATOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213163', 'Veterinārmedicīnas PATOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213164', 'SISTEMĀTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213165', 'Dzīvnieku SISTEMĀTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213166', 'Augu SISTEMĀTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213167', 'ZOOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213168', 'VIRUSOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213169', 'HIPOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213170', 'NEMATOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213171', 'TOKSIKOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213172', 'ĢEOGRĀFS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213173', 'DendroEKOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2132', 'Lauksamniecības, mežsaimniecības un zivsaimniecības vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213201', 'Sēklkopības AGRONOMS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213202', 'AGRONOMS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213203', 'Vecākais SPECIĀLISTS MEŽKOPIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213204', 'Vecākais SPECIĀLISTS PUĶKOPIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213205', 'Vecākais SPECIĀLISTS DĀRZKOPIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213206', 'Vecākais SPECIĀLISTS DĀRZEŅKOPIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213207', 'POMOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213208', 'Vecākais SPECIĀLISTS ZIVKOPIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213209', 'Ciltslietu ZOOTEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213210', 'Zemkopības KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213211', 'Lauksaimniecības KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213212', 'Mežsaimniecības KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213213', 'Lauksaimniecības PADOMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213214', 'Zemkopības PADOMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213215', 'Mežsaimniecības PADOMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2133', 'Vides aizsardzības vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213301', 'Vides aizsardzības vecākais SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213302', 'Dabas aizsardzības vecākais SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('213303', 'Sertificēts EKSPERTS (sugu un biotopu aizsardzības jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214', 'Inženieri (izņemot elektrotehnoloģiju inženierus)', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2141', 'Rūpniecības un ražošanas inženieri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214101', 'Rūpniecības projektēšanas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214102', 'Ražošanas sagatavošanas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214103', 'Robotu INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214104', 'Darba organizācijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214105', 'Cementa TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214106', 'Keramikas TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214107', 'Stikla TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214108', 'Ādas TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214109', 'Iesaiņošanas TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214110', 'Iespiešanas TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214111', 'Audumu TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214112', 'Kokapstrādes INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214113', 'Ražošanas vadības organizācijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214114', 'Darba normēšanas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214115', 'Materiālu normēšanas TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214116', 'Vērpšanas TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214117', 'Adīšanas TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214118', 'Apģērbu KONSTRUKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214119', 'Šūšanas TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214120', 'TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214121', 'KONSTRUKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214122', 'Tekstilmateriālu apdares TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214123', 'Projektēšanas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214124', 'Ražošanas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214125', 'Apģērbu un tekstila ražošanas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214126', 'KOLORISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214127', 'Alus darīšanas TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2142', 'Būvinženieri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214201', 'BūvINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214202', 'Ēku konstrukciju būvINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214203', 'Lidostu būvINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214204', 'Tiltu būvINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214205', 'Ēku būvINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214206', 'Skursteņu būvINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214207', 'Energoauditors INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214208', 'Doku un ostu būvINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214209', 'Bagarēšanas būvINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214210', 'Ātrgaitas šoseju un ielu būvINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214211', 'Hidrotehnisko būvju būvINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214212', 'Hidroloģijas būvINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214213', 'Apūdeņošanas būvINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214214', 'Dzelzceļa būvINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214215', 'Ceļu būvINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214216', 'Sanitārtehnikas būvINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214217', 'Zemes būvju /mehānikas būvINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214218', 'Konstrukciju būvINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214219', 'Torņu būvINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214220', 'Tuneļu būvINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214221', 'Zemes rakšanas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214222', 'Hidraulikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214223', 'Hidroloģijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214224', 'Apūdeņošanas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214225', 'Sanitārijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214226', 'Būvmateriālu TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214227', 'Būvniecības TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214228', 'Meliorācijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214229', 'Transportbūvju būvINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214230', 'Būvmateriālu INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214231', 'Siltuma, gāzes un ūdens tehnoloģijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214232', 'Būvniecības tāmju INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214233', 'Inženierkomunikāciju piesaistes INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214234', 'Vienkāršotās renovācijas un rekonstrukcijas objektu INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2143', 'Vides inženieri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214301', 'Vides INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214302', 'Vides TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2144', 'Mehānikas inženieri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214401', 'Kuģu dizaina INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214402', 'Gaisa kuģu projektēšanas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214403', 'Automobiļu dizaina INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214404', 'Aeronavigācijas apkalpošanas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214405', 'Gaisa kondicionēšanas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214406', 'Automātu INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214407', 'Dīzeļu INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214408', 'Gāzes turbīnu INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214409', 'Iekšdedzes dzinēju INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214410', 'Reaktīvo dzinēju INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214411', 'Lokomotīves dzinēju INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214412', 'Eļļošanas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214413', 'Kuģu būves INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214414', 'Mehānikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214415', 'Aeronautikas /mehānikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214416', 'Lauksaimniecības /mehānikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214417', 'Gaisa kondicionēšanas /mehānikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214418', 'Pašgājējmehānismu /mehānikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214419', 'Dīzeļu /mehānikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214420', 'Gāzes turbīnu /mehānikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214421', 'Apsildes, ventilācijas un saldēšanas /mehānikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214422', 'Rūpniecisko mašīnu un darbarīku /mehānikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214423', 'Instrumentu /mehānikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214424', 'Sauszemes motoru un mašīnu /mehānikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214425', 'Ostas mehānismu /mehānikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214426', 'Kodolenerģētikas /mehānikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214427', 'Saldēšanas iekārtu /mehānikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214428', 'Motoru INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214429', 'Mehānikas TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214430', 'Metināšanas TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214431', 'Aprīkojuma INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214432', 'Mehānikas KONSTRUKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214433', 'Siltumenerģijas /pārvades un sadales INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214434', 'Medicīnas iekārtu INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214435', 'Dzelzceļa lokomotīvju /remonta INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214436', 'Vagonu /remonta INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214437', 'Medicīnas fizikālo tehnoloģiju INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214438', 'Mehatronikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214439', 'Siltumenerģētikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214440', 'Siltumtehnikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214441', 'Siltumsistēmu ekspluatācijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214442', 'Siltumiekārtu ekspluatācijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214443', 'Siltumenerģijas un siltumtehnikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214444', 'Gaisa kuģu tehniskās apkopes mehānikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214445', 'Transportsistēmu INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214446', 'Kuģu mehānikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214447', 'Mašīnu un aparātu būves INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214448', 'Siltumtehnisko iekārtu INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214449', 'Mašīnu un aparātu būves TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214450', 'Rūpniecisko iekārtu un rīku INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214451', 'MEHĀNIĶIS (inženieris)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2145', 'Ķīmijas inženieri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214501', 'Ķīmijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214502', 'Ķīmisko procesu INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214503', 'Naftas un dabasgāzes /ķīmijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214504', 'Dabasgāzes ieguves un sadales /ķīmijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214505', 'Naftas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214506', 'Raudzēšanas TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214507', 'Ķīmisko procesu TEHNOLOGS (inženieris)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214508', 'Ķīmijas TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214509', 'Šķiedru TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214510', 'Pārtikas un dzērienu TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214511', 'Degvielas TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214512', 'Krāsu TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214513', 'Papīra TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214514', 'Plastmasas TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214515', 'Polimēru TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214516', 'Gumijas TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214517', 'Riepu TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214518', 'Plastmasas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214519', 'Farmācijas TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214520', 'Ķīmisko procesu TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214521', 'Suņu un kaķu barības ražošanas TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2146', 'Ieguves rūpniecības inženieri, metalurgi un tiem radniecīgu profesiju vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214601', 'Iežguves INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214602', 'Metalurģijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214603', 'Iežguves ĢEODĒZISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214604', 'Raudzes (proves) NOTEICĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214605', 'Ieguves METALURGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214606', 'Lietuves METALURGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214607', 'Fizikālo procesu METALURGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214608', 'Radioaktīvo minerālu METALURGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214609', 'METALURGS (analītiķis)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214610', 'Ieguves TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214611', 'Velmju KALIBRĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2149', 'Citur neklasificēti inženieri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214901', 'Komunikāciju /izņemot skaitļotāju ANALĪTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214902', 'Sistēmu /izņemot skaitļotāju ANALĪTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214903', 'Sistēmu /izņemot skaitļotāju dizaina INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214904', 'Cenu veidošanas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214905', 'Plānošanas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214906', 'Sistēmu /izņemot skaitļotāju INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214907', 'Laika un kustības pētījumu INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214908', 'Zinātniski tehniskās informācijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214909', 'Patentu un izgudrojumu INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214910', 'Personāla sagatavošanas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214911', 'Standartizācijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214912', 'Energotīklu DISPEČERS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214913', 'Kurināmā sagādes un sadales DISPEČERS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214914', 'Energosistēmu INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214915', 'Kvalitātes INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214916', 'Meža TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214917', 'Iekārtu ekspluatācijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214918', 'Dzelzceļa ekspluatācijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214919', 'Metroloģijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214920', 'Naftas avāriju TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214921', 'Sertifikācijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214922', 'KomunālINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214923', 'Pasta ekspluatācijas METODIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214924', 'Mežsaimniecības INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214925', 'Mežsaimniecības TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214926', 'Ūdens un atkritumsaimniecības SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214927', 'Dzelzceļa transporta INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214928', 'Automobiļu transporta INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214929', 'Kuģu vadīšanas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214930', 'Ēku ekspluatācijas un aprīkojuma nodrošinājuma INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214931', 'Darba NORMĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214932', 'Tāmju INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214933', 'Vecākais PARFIMĒRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214934', 'PARFIMĒRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214935', 'Darba aizsardzības INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214936', 'INŽENIERINSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214937', 'INŽENIERKONTROLIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214938', 'Ugunsdrošības INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214939', 'Civilās aizsardzības INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214940', 'Ugunsdrošības un civilās aizsardzības INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214942', 'Galvenais INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214943', 'Posma INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214944', 'Ieslodzījuma vietas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214945', 'Aviācijas nelaimes gadījumu un incidentu vecākais IZMEKLĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214946', 'Aviācijas nelaimes gadījumu un incidentu IZMEKLĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214947', 'Dzelzceļa avāriju vecākais IZMEKLĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214948', 'Dzelzceļa avāriju IZMEKLĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214949', 'Jūras negadījumu vecākais IZMEKLĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214950', 'Jūras negadījumu IZMEKLĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214951', 'Ēku sistēmu INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('214952', 'Sistēmu vadības INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215', 'Elektrotehnoloģiju inženieri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2151', 'Elektroinženieri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215101', 'ElektroINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215102', 'Elektroapgaismes INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215103', 'Elektrisko sistēmu INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215104', 'Elektroenerģijas sadales elektroINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215105', 'Ģeneratoru elektroINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215106', 'Elektroenerģijas pārvades elektroINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215107', 'Elektrovilkmes elektroINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215108', 'Elektromehānisko iekārtu elektroINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215109', 'Augstsprieguma elektroINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215110', 'Releju aizsardzības un automātikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215111', 'Elektrotehnisko iekārtu elektroINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215112', 'Galvenais ENERĢĒTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215113', 'Lauksaimniecības enerģētikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215114', 'ENERĢĒTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215115', 'Kuģu elektroautomātikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215116', 'Elektroietaišu ekspluatācijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215117', 'Elektrotehnisko iekārtu INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215118', 'Dzelzceļa INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215119', 'Apsardzes tehnisko sistēmu INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215120', 'Dzelzceļa elektrosistēmu INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2152', 'Elektronikas inženieri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215201', 'Elektronikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215202', 'Skaitļotāju /elektronikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215203', 'Informācijas /elektronikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215204', 'Mērinstrumentu /elektronikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215205', 'Pusvadītāju /elektronikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215206', 'Elektronikas TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215207', 'Datortehnikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215208', 'Gaisa kuģu tehniskās apkopes avionikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215209', 'Radioelektronikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2153', 'Telekomunikāciju inženieri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215301', 'Telekomunikāciju INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215302', 'Kosmosa komunikāciju INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215303', 'Radara komunikāciju INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215304', 'Radiosakaru INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215305', 'Signālsistēmas (komunikāciju) INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215306', 'Telegrāfa (komunikāciju) INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215307', 'Telefona (komunikāciju) INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215308', 'Televīzijas (komunikāciju) INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215309', 'Telekomunikāciju TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215310', 'Telekomunikāciju KONSTRUKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('215311', 'VideoINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216', 'Arhitekti, plānotāji, ģeodēzijas un kartogrāfijas inženieri un dizaineri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2161', 'Arhitekti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216101', 'ARHITEKTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216102', 'ARHITEKTA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216103', 'Darba vides PĀRZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2162', 'Ainavu arhitekti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216201', 'Ainavu ARHITEKTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2163', 'Izstrādājumu un apģērbu dizaineri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216301', 'Izstrādājumu PROJEKTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216302', 'Mēbeļu DIZAINERS', 0, 0);


COMMIT WORK;

INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216303', 'Modes DIZAINERS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216304', 'Produktu DIZAINERS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2164', 'Pilsētplānotāji un satiksmes plānotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216401', 'Teritorijas PLĀNOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216402', 'Satiksmes PLĀNOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216403', 'Transporta /tīklu INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216404', 'Aeronavigācijas VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216405', 'Satiksmes organizācijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216406', 'Sabiedriskā transporta ORGANIZATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216407', 'Maršrutu tīkla PLĀNOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216408', 'Telpiskās attīstības PLĀNOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216409', 'Attīstības plānošanas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2165', 'Ģeodēzijas un kartogrāfijas inženieri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216501', 'Kartogrāfijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216502', 'Jūras ģeodēzijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216503', 'Fotogrammetrijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216504', 'Kadastra INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216505', 'Ģeodēzijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216506', 'Hidrogrāfijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216507', 'Zemes ierīcības INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216508', 'Aerofotogrāfijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216509', 'Ģeoinformātikas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2166', 'Grafikas, multimediju un citi dizaineri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216601', 'DatorDIZAINERS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('216602', 'Interjera DIZAINERS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('22', 'Veselības aprūpes jomas vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221', 'Ārsti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2211', 'Vispārējās prakses ārsti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221101', 'ĀRSTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221102', 'ĀRSTS (STAŽIERIS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221103', 'Ģimenes (vispārējās prakses) ĀRSTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221104', 'REZIDENTS (ģimenes (vispārējās prakses) ārsta specialitātē)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221105', 'Kuģa ĀRSTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2212', 'Specialitāšu ārsti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221201', 'ALERGOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221202', 'Bērnu ALERGOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221203', 'ALGOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221204', 'ANDROLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221205', 'ANESTEZIOLOGS, REANIMATOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221206', 'Arodslimību ĀRSTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221207', 'Arodveselības ĀRSTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221208', 'Arodveselības un arodslimību ĀRSTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221209', 'ĀRSTS (CITOLOGS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221210', 'ĀRSTS (DIETOLOGS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2212100', 'TRANSFUZIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2212101', 'TRAUMATOLOGS, ORTOPĒDS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2212102', 'TRIHOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2212103', 'UROLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2212104', 'INTERNISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2212105', 'Veselības aprūpes ĀRSTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221211', 'ĀRSTS (EKSPERTS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221212', 'ĀRSTS (ENDOKRINOLOGS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221213', 'ĀRSTS (ENDOSKOPISTS gastrointestinālajā endoskopijā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221214', 'ĀRSTS (klīniskais FARMAKOLOGS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221215', 'ĀRSTS (klīniskais FIZIOLOGS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221216', 'Fizikālās medicīnas ĀRSTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221217', 'Fizikālās un rehabilitācijas medicīnas ĀRSTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221218', 'Kara medicīnas ĀRSTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221219', 'ĀRSTS (ĢENĒTIĶIS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221220', 'Hospitālās infekcijas kontroles ĀRSTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221221', 'ĀRSTS (IMUNOLOGS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221222', 'Intensīvās terapijas ĀRSTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221223', 'Katastrofu medicīnas ĀRSTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221224', 'Laboratorijas ĀRSTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221225', 'ĀRSTS (klīniskais MIKROBIOLOGS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221226', 'ĀRSTS (MIKROBIOLOGS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221227', 'Mikrobioloģijas ĀRSTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221228', 'Neatliekamās medicīnas ĀRSTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221229', 'Neatliekamās palīdzības ĀRSTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221230', 'ĀRSTS (PARAZITOLOGS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221231', 'ĀRSTS (PATOLOGS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221232', 'ĀRSTS (paliatīvās aprūpes SPECIĀLISTS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221233', 'ĀRSTS (PERFUZIONISTS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221234', 'ProtēžORTOPĒDS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221235', 'Sociālās apdrošināšanas ĀRSTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221236', 'Sporta ĀRSTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221237', 'DERMATOLOGS, VENEROLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221238', 'Bērnu ENDOKRINOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221239', 'Tiesu medicīnas EKSPERTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221240', 'Tiesu psihiatrijas EKSPERTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221241', 'FLEBOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221242', 'FONIATRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221243', 'FTIZIOPNEIMONOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221244', 'GASTROENTEROLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221245', 'Bērnu GASTROENTEROLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221246', 'GERIATRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221247', 'GINEKOLOGS, dzemdību speciālists', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221248', 'Bērnu GINEKOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221249', 'Onkoloģijas GINEKOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221250', 'HEMATOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221251', 'HEPATOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221252', 'Bērnu HEMATOONKOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221253', 'HipnoTERAPEITS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221254', 'INFEKTOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221255', 'Bērnu INFEKTOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221256', 'KARDIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221257', 'Bērnu KARDIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221258', 'KOMBUSTIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221259', 'KOSMETOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221260', 'BALNEOLOGS (KURORTOLOGS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221261', 'ĶIRURGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221262', 'Ambulatorais ĶIRURGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221263', 'Asinsvadu ĶIRURGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221264', 'Bērnu ĶIRURGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221265', 'Endovazālais ĶIRURGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221266', 'Plastiskais ĶIRURGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221267', 'Rokas ĶIRURGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221268', 'Sirds ĶIRURGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221269', 'Torakālais ĶIRURGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221270', 'NARKOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221271', 'NEFROLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221272', 'Bērnu NEFROLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221273', 'NEIROĶIRURGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221274', 'NEIROLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221275', 'Bērnu NEIROLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221276', 'NEONATOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221277', 'OFTALMOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221278', 'Onkoloģijas ĶIRURGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221279', 'ONKOLOGS ĶĪMIJTERAPEITS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221280', 'ONKOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221281', 'ĀRSTS (OSTEOPĀTS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221282', 'OTOLARINGOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221283', 'PEDIATRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221284', 'PNEIMONOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221285', 'Bērnu PNEIMONOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221286', 'PSIHIATRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221287', 'Bērnu PSIHIATRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221288', 'RADIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221289', 'RADIOLOGS (TERAPEITS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221290', 'RADIOLOGS (DIAGNOSTS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221291', 'REHABILITOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221292', 'REIMATOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221293', 'Bērnu REIMATOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221294', 'REZIDENTS (izņemot REZIDENTUS ģimenes (vispārējās prakses) ārsta specialitātē)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221295', 'SEKSOLOGS, SEKSOPATOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221296', 'PSIHOTERAPEITS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221297', 'Manuālais TERAPEITS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221298', 'OSTEOREFLEKSOTERAPEITS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('221299', 'TRANSPLANTOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222', 'Medicīnas māsu un vecmāšu profesiju vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2221', 'Medicīnas māsu profesiju vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222101', 'Vecākā medicīnas MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222102', 'VirsMĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222103', 'Ambulatorās aprūpes MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222104', 'Ambulatorās medicīnas MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222105', 'Anestēzijas, intensīvās un neatliekamās aprūpes MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222106', 'Bērnu aprūpes MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222107', 'Bērnu MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222108', 'Dermatoveneroloģijas MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222109', 'Diabēta aprūpes MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222110', 'Diabetoloģijas un endokrinoloģijas MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222111', 'Diētas MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222112', 'Endoskopijas MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222113', 'Fizikālās un rehabilitācijas medicīnas MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222114', 'Fizikālās terapijas MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222115', 'Ftiziopulmoloģijas MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222116', 'Funkcionālās diagnostikas MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222117', 'Garīgās veselības aprūpes MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222118', 'Ginekoloģijas MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222119', 'Hemodialīzes un nieru transplantācijas MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222120', 'Infektoloģijas MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222121', 'Internās aprūpes MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222122', 'Intensīvās terapijas un anestēzijas MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222123', 'Ķirurģiskās aprūpes MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222124', 'Ķirurģijas MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222125', 'Narkoloģijas MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222126', 'Neatliekamās palīdzības MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222127', 'Neiroķirurģijas MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222128', 'Neiroloģijas MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222129', 'Oftalmoloģijas MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222130', 'Onkoloģiskās aprūpes MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222131', 'Onkoloģijas MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222132', 'Operāciju MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222133', 'Peritoneālās dialīzes MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222134', 'Pirmsskolas iestāžu un skolu MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222135', 'Podiatrijas MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222136', 'Psihiatrijas MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222137', 'Rentgenoloģijas un radioloģijas MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222138', 'Sabiedrības veselības MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222139', 'Terapijas MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222140', 'Transfuzioloģijas MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222141', 'Traumatoloģijas un ortopēdijas MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222142', 'Zobārstniecības MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222143', 'Uroloģijas MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2222', 'Vecmāšu profesiju vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222201', 'Vecākā VECMĀTE', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('222202', 'VECMĀTE', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('223', 'Alternatīvās un papildinošās medicīnas vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2230', 'Alternatīvās un papildinošās medicīnas vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('223001', 'Ajūrvēdas medicīnas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('223002', 'HOMEOPĀTS (ĀRSTS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('223003', 'Akupunktūras ĀRSTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('223004', 'NEIROPĀTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('224', 'Ārstu palīgi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2240', 'Ārstu palīgi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('224001', 'ĀRSTA PALĪGS (FELDŠERIS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('224002', 'Ambulatorās aprūpes ĀRSTA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('224003', 'Militārais PARAMEDIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('225', 'Veterinārārsti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2250', 'Veterinārārsti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('225001', 'VeterinārĀRSTS EPIDEMIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('225002', 'VeterinārĀRSTS ĶIRURGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('225003', 'VeterinārĀRSTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226', 'Citi veselības aprūpes jomas vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2261', 'Zobārsti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226101', 'Zobu PROTĒZISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226102', 'ZOBĀRSTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226103', 'ORTODONTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226104', 'ENDODONTISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226105', 'Bērnu ZOBĀRSTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226106', 'PARADONTOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226107', 'Mutes, sejas un žokļu ĶIRURGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2262', 'Farmaceiti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226201', 'FARMACEITS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226202', 'Klīniskais FARMACEITS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2263', 'Vides, darba aizsardzības un higiēnas vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226301', 'Darba aizsardzības vecākais SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226302', 'Vides veselības ANALĪTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226303', 'Sabiedrības veselības ĀRSTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226304', 'Higiēnas ĀRSTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226305', 'HIGIĒNISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226306', 'ĀRSTS (EPIDEMIOLOGS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226307', 'Sabiedrības veselības SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2264', 'Fizioterapeiti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226401', 'ElektroTERAPEITS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226402', 'FIZIOTERAPEITS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226403', 'KINEZOTERAPEITS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226404', 'ERGOTERAPEITS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226405', 'Fizikālais TERAPEITS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226406', 'REITTERAPEITS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2265', 'Uzturzinātnes un uztura speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226501', 'Uztura SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226502', 'Uzturzinātnes SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2266', 'Audiologi un runas terapeiti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226601', 'AudioLOGOPĒDS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226602', 'Runas TERAPEITS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226603', 'LOGOPĒDS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226604', 'AUDIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226605', 'Bērnu AUDIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226606', 'PEDAUDIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2267', 'Optometristi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226701', 'OPTOMETRISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2269', 'Citur neklasificēti veselības aprūpes jomas vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226901', 'Sabiedrības veselības ORGANIZATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226902', 'Sabiedrības veselības METODIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226903', 'Sabiedrības veselības ANALĪTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226904', 'Veselības veicināšanas KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226905', 'Veselības veicināšanas KOORDINĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226906', 'PODOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226907', 'Darba TERAPEITS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226908', 'Mākslas TERAPEITS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226909', 'Mūzikas TERAPEITS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226910', 'Neredzīgo TERAPEITS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226911', 'RADIOGRĀFERS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226912', 'Mākslas terapijas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226913', 'BIONIĶIS PROTĒZISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226914', 'Bionikas un protezēšanas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('226915', 'Acu PROTĒZISTS (OKULĀRISTS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('23', 'Izglītības jomas vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('231', 'Universitāšu un citu augstākās izglītības iestāžu akadēmiskais personāls', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2310', 'Universitāšu un citu augstākās izglītības iestāžu akadēmiskais personāls', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('231001', 'ASISTENTS (izglītības jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('231002', 'DOCENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('231003', 'LEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('231004', 'PROFESORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('231005', 'Asociētais PROFESORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('231007', 'Vecākais PASNIEDZĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('231008', 'PASNIEDZĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('231009', 'PEDAGOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('232', 'Profesionālās izglītības pedagogi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2320', 'Profesionālās izglītības pedagogi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('232001', 'Profesionālās izglītības SKOLOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('232002', 'Profesionālās ievirzes izglītības SKOLOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('233', 'Vidējās izglītības pedagogi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2330', 'Vidējās izglītības pedagogi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('233001', 'Vispārējās vidējās izglītības SKOLOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('234', 'Ppositionszglītības un pirmsskolas pedagogi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2341', 'Ppositionszglītības pedagogi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('234101', 'Vispārējās ppositionszglītības SKOLOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('234102', 'Sākumizglītības SKOLOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2342', 'Pirmsskolas pedagogi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('234201', 'Pirmsskolas izglītības SKOLOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('234202', 'Pirmsskolas izglītības mūzikas SKOLOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('234203', 'Pirmsskolas izglītības sporta SKOLOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235', 'Citi izglītības jomas vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2351', 'Izglītības metodikas speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235101', 'Izglītības METODIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235102', 'METODIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235103', 'Galvenais SPECIĀLISTS METODIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235104', 'Izglītības valsts INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235105', 'Valsts bērnu tiesību aizsardzības INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235106', 'Pirmsskolas izglītības METODIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2352', 'Speciālās izglītības pedagogi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235201', 'SKOLOTĀJS LOGOPĒDS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235202', 'Speciālās izglītības SKOLOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235203', 'Speciālais PEDAGOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2354', 'Citi mūzikas skolotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235401', 'Mūzikas SKOLOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235402', 'Vokālais PEDAGOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2356', 'Informācijas tehnoloģiju, komunikāciju un transportlīdzekļu instruktori un pasniedzēji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235601', 'Aviācijas INSTRUKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235602', 'Kuģu INSTRUKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235603', 'Glābšanas darbu INSTRUKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235604', 'Dzelzceļa INSTRUKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235605', 'Jūrnieku profesionālās apmācības PEDAGOGS (instruktors)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235606', 'Jūrnieku kompetences atbilstības VĒRTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235607', 'Jūrnieku kompetences atbilstības PĀRRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235608', 'Autoskolas teorētisko priekšmetu PASNIEDZĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235609', 'Autoskolas praktiskās braukšanas INSTRUKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235610', 'Bīstamu kravu pārvadāšanas transportlīdzekļu vadītāju apmācības PASNIEDZĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235611', 'Jūrnieku praktiskās apmācības PASNIEDZĒJS (instruktors)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235612', 'Jūrnieku kvalifikācijas VĒRTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235613', 'Atbilstības VĒRTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235614', 'Pasta darba organizācijas INSTRUKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235615', 'Bīstamo kravu pārvadājumu drošības konsultantu (padomnieku) apmācības PASNIEDZĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235616', 'Vecākais INSTRUKTORS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235617', 'INSTRUKTORS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2359', 'Citur neklasificēti izglītības jomas vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235901', 'Sociālais PEDAGOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235902', 'Atkarību profilakses SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235903', 'Pagarinātās dienas grupas SKOLOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235904', 'Izglītības iestādes muzeju PEDAGOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235905', 'PEDAGOGA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235906', 'Interešu izglītības SKOLOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235907', 'Internāta, dienesta viesnīcas SKOLOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235908', 'Sporta ORGANIZATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235909', 'Vecākais sporta TRENERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235910', 'SPECIĀLISTS bērnu tiesību aizsardzības jautājumos', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235911', 'Arod(amat)mācības SKOLOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235912', 'Rekreācijas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235913', 'PLĀNOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235914', 'SKOLOTĀJS MENTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('235915', 'PEDAGOGS karjeras KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('24', 'Komercdarbības un pārvaldes (administrācijas) vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('241', 'Finanšu vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2411', 'Grāmatveži', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('241101', 'Vecākais GRĀMATVEDIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('241102', 'REVIDENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('241103', 'Zvērināts REVIDENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('241104', 'Aizdevumu REVIDENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('241105', 'AUDITORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('241106', 'Informācijas sistēmu AUDITORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('241107', 'Uzraudzības AUDITORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('241108', 'Iekšējais AUDITORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('241109', 'Kredītiestāžu uzraudzības EKSPERTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('241110', 'Grāmatvedības EKSPERTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('241111', 'Metodikas EKSPERTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('241112', 'Kredītiestāžu uzraudzības ANALĪTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('241113', 'Iekšējās kontroles galvenais SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('241114', 'Iekšējās kontroles galvenais INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('241115', 'Struktūrvienību koordinācijas, profilakses un informācijas uzskaites galvenais SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2412', 'Finanšu un investīciju konsultanti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('241201', 'FINANSISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('241202', 'Komercdarbības KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('241203', 'Vecākais komercdarbības SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('241204', 'KONSULTANTS iepirkumu SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('241205', 'Nodokļu KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2413', 'Finanšu analītiķi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('241301', 'Finanšu tirgus ANALĪTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('241302', 'Finanšu ANALĪTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('241303', 'Naudas apgrozības ANALĪTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('241304', 'Naudas plūsmas ANALĪTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('241305', 'Riska ANALĪTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('241306', 'Finanšu ieguldījumu portfeļa VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('241307', 'Finanšu risku VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242', 'Pārvaldes (administrācijas) vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2421', 'Vadības un organizācijas analītiķi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242101', 'Vecākais Konsultants', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242102', 'KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242103', 'Šūšanas ražošanas KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242104', 'Medicīnas KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242105', 'Zinātniskais KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242106', 'Bīstamo kravu pārvadājumu drošības KONSULTANTS (padomnieks)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242107', 'Drošības KONSULTANTS (padomnieks)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242108', 'PADOMNIEKS (konsultants)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242109', 'Darbības nepārtrauktības VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242110', 'Darbības risku VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242111', 'Stratēģiskās vadības procesa VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2422', 'Politikas pārvaldības vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242201', 'Projekta VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242202', 'Projekta KOORDINATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242203', 'Vecākais REFERENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242204', 'REFERENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242205', 'Jaunākais REFERENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242206', 'Vecākais INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242207', 'INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242208', 'Jaunākais INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242209', 'Vecākais EKSPERTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242210', 'EKSPERTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242211', 'Jaunākais EKSPERTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242212', 'Klīnisko pētījumu VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242213', 'Zāļu reģistrācijas VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242214', 'SPA VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242215', 'Zinātniskais SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242216', 'Galvenais SPECIĀLISTS sadarbības jautājumos starp valsts un pašvaldību iestādēm', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242217', 'Vecākais KONTROLIERIS (pašvaldībās)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242218', 'KONTROLIERIS (pašvaldībās)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242219', 'Jaunākais KONTROLIERIS (pašvaldībās)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242220', 'Nekustamā īpašuma PĀRVALDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242221', 'Namu PĀRVALDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242222', 'Kancelejas pārzinis', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242223', 'Civilaizsardzības ORGANIZATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242224', 'Ārējo sakaru ORGANIZATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242225', 'Viesnīcu pakalpojumu ORGANIZATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242226', 'Pašvaldības /finanšu stabilizācijas procesa UZRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242227', 'Jaunatnes lietu SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242228', 'Penitenciārā un probācijas darba SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242229', 'Dzimtsarakstu INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242230', 'Arodbiedrību /darba KOORDINĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242231', 'Vides pārvaldības SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242232', 'Pasta SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242233', 'Licencēšanas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242234', 'Muitošanas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242235', 'Sabiedrības pārvaldes SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242236', 'Iedzīvotāju reģistrēšanas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242237', 'Dzīvojamo māju (īpašumu) apsaimniekošanas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242238', 'SPECIĀLISTS zemes nomas jautājumos', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242239', 'SPECIĀLISTS mājokļu jautājumos', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242240', 'Dzimtsarakstu SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242241', 'Nekustamā īpašuma tiesiskās reģistrācijas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242242', 'Izglītības darba SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242243', 'Pirmais SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242244', 'KONSULS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242245', 'Otrais SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242246', 'Trešais SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242247', 'VICEKONSULS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242248', 'ATAŠEJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242249', 'ATAŠEJS –VĒSTNIEKA SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242250', 'Virsmežniecības INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242252', 'Galvenais SPECIĀLISTS starptautiskās sadarbības jautājumos', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242253', 'Programmu DIREKTORS /VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242254', 'BūvINSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242255', 'BūvINSPEKTORA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242256', 'MEŽZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242257', 'Jaunatnes DARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242258', 'Personas datu aizsardzības SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2423', 'Personāla un karjeras, kvalitātes vadības sistēmu un risku vadības vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242301', 'Nodarbinātības ANALĪTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242302', 'Darba satura ANALĪTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242303', 'Personāla VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242304', 'Vecākais personāla INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242305', 'Personāla INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242306', 'Personāla atlases SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242307', 'Personāla SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242308', 'Personāla lietu PĀRZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242309', 'Profesiju izvēles KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242310', 'Karjeras KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242311', 'Procesu kvalitātes vadības INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242312', 'Kvalitātes vadības sistēmu KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242313', 'Kvalitātes vadības sistēmu SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242314', 'Kvalitātes VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242315', 'Risku vadības SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242316', 'Izaugsmes VEICINĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242317', 'SUPERVIZORS /KONSULTANTS PĀRRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2424', 'Apmācības un personāla attīstības vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242401', 'Personāla mācību KOORDINĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242402', 'Mācību projekta VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242403', 'Mācību centra vecākais PASNIEDZĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242404', 'Mācību centra PASNIEDZĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('242405', 'Personāla apmācības SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('243', 'Tirdzniecības, tirgvedības un sabiedrisko attiecību vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2431', 'Reklāmas un tirgvedības vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('243101', 'Vecākais reklāmas AĢENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('243102', 'Reklāmas VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('243103', 'Tirgvedības VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('243104', 'Tirdzniecības VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('243105', 'Pārdošanas VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('243106', 'Eksporta VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('243107', 'Klientu apkalpošanas VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('243108', 'Vecākais tirgus pētījumu ANALĪTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('243109', 'Patentu AĢENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('243110', 'Loģistikas vecākais SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('243111', 'Tūristu GIDS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('243112', 'Tūrisma ORGANIZATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('243113', 'Ekskursiju ORGANIZATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('243114', 'Lielo klientu VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('243115', 'Produktu grupas VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2432', 'Sabiedrisko attiecību vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('243201', 'Sabiedrisko attiecību VADĪTĀJS (MENEDŽERIS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('243202', 'Preses SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('243203', 'Ministru PREZIDENTA preses SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('243204', 'Ministru PREZIDENTA BIEDRA preses SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('243205', 'Ministru kabineta preses SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('243206', 'MINISTRA preses SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('243207', 'Valsts KONTROLIERA preses SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('243208', 'Sabiedrisko attiecību SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2433', 'Tehnisko un medicīnas preču tirdzniecības vecākie speciālisti (izņemot informācijas un komunikācijas tehnoloģiju (IKT))', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('243301', 'Medicīniskais PĀRSTĀVIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2434', 'Informācijas un komunikācijas tehnoloģiju tirdzniecības vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('243401', 'Komercdarbības SPECIĀLISTS (informātikā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('243402', 'Elektroniskās komercijas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('25', 'Informācijas un komunikācijas tehnoloģiju jomas vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('251', 'Programmētāji un lietojumprogrammu veidotāji un analītiķi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2511', 'Sistēmanalītiķi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('251101', 'Skaitļotāju /sistēmu ANALĪTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('251102', 'SistēmANALĪTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('251103', 'Skaitļošanas sistēmu ANALĪTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2512', 'Programmētāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('251201', 'Skaitļotāju /sistēmu KONSTRUKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('251202', 'Programmēšanas INŽENIERIS', 0, 0);


COMMIT WORK;

INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('251203', 'Mehanizētās apstrādes projektēšanas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('251204', 'Datorvadības tehnoloģiju INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('251205', 'PROGRAMMĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('251206', 'Skaitļošanas sistēmu PROJEKTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2513', 'Tīmekļa lapu un multimediju veidotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('251301', 'Skaitļotāju /komunikāciju ANALĪTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('251302', 'Informatīvo sistēmu PROJEKTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('251303', 'DATORGRAFIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('251304', 'Datorspēļu izstrādes ORGANIZATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2514', 'Lietojumprogrammu izstrādātāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('251401', 'Lietojumprogrammu IZSTRĀDĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2519', 'Citur neklasificēti programmētāji un lietojumprogrammu veidotāji un analītiķi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('251901', 'Skaitļotāju lietošanas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('251902', 'Komunikāciju PROGRAMMĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('251903', 'Tehnisko sistēmu apsardzes programmēšanas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('251904', 'Elektroniskās komunikāciju vides IZSTRĀDĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('251905', 'Informācijas sistēmu TESTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('252', 'Datu bāzu un tīklu vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2521', 'Datu bāzu veidotāji un administratori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('252101', 'Skaitļotāju /datu bāzes ANALĪTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('252102', 'Skaitļotāju /datu bāzes VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('252103', 'Informācijas tehnoloģijas projektu VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('252104', 'Datu bāzes PROGRAMMĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('252105', 'Datu bāzu INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('252106', 'Datu bāzu ADMINISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2522', 'Sistēmu administratori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('252201', 'Datorsistēmu un datortīklu ADMINISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('252202', 'Informācijas tehnoloģiju ADMINISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('252203', 'Informācijas sistēmu ADMINISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('252204', 'Informācijas sistēmu UZTURĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2523', 'Datortīklu vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('252301', 'Skaitļotāju /sistēmu INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('252302', 'Vecākais datortīkla ADMINISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('252303', 'Operāciju sistēmu INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('252304', 'Informācijas sistēmINŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2529', 'Citur neklasificēti datu bāzu un tīklu vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('252901', 'Informācijas tehnoloģiju (IT) pakalpojumu VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('252902', 'Informācijas tehnoloģiju (IT) pakalpojumu pārvaldības procesu VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('252903', 'Informācijas tehnoloģiju (IT) pakalpojumu pārvaldības procesu KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('252904', 'Interneta portāla REDAKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('252905', 'Bankomātu tīkla ADMINISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('252906', 'Interneta bankas ADMINISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('252907', 'Informācijas sistēmas drošības SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('252908', 'Ģeogrāfiskās informācijas sistēmas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('26', 'Juridisko, sociālo un kultūras lietu vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('261', 'Juridisko lietu vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2611', 'Juristi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('261101', 'JURISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('261102', 'Zvērināts ADVOKĀTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('261103', 'Zvērināta ADVOKĀTA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('261104', 'VirsPROKURORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('261105', 'VirsPROKURORA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('261106', 'PROKURORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2612', 'Tiesneši', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('261201', 'Tiesas priekšsēdētājs', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('261202', 'TIESNESIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('261203', 'SENATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('261204', 'Tiesas PRIEKŠSĒDĒTĀJA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('261205', 'Tiesu palātas PRIEKŠSĒDĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('261206', 'Tiesu kolēģijas PRIEKŠSĒDĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('261207', 'Tiesu nama PRIEKŠSĒDĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2619', 'Citur neklasificēti juridisko lietu vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('261901', 'JURISKONSULTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('261902', 'Tieslietu KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('261903', 'Vecākais tiesu EKSPERTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('261904', 'Tiesu EKSPERTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('261905', 'Zvērināts NOTĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('261906', 'Zvērināta NOTĀRA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('261907', 'Zvērināts tiesu IZPILDĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('261908', 'ĢENERĀLPROKURORA PADOMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('261909', 'Maksātnespējas procesa ADMINISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('261910', 'LIKVIDATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('261911', 'Valsts NOTĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('262', 'Bibliotekāri, arhīvisti un tiem radniecīgu profesiju vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2621', 'Arhīvisti un muzeju vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('262101', 'ARHĪVISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('262102', 'Mākslas EKSPERTS (muzejos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('262103', 'Krājuma GLABĀTĀJS (muzejos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('262104', 'Fondu GLABĀTĀJS (arhīvos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('262105', 'Ekspozīciju un izstāžu KURATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('262106', 'MUZEJPEDAGOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('262107', 'Galvenais ARHĪVISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('262108', 'Dokumentu sistēmu VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('262109', 'Arhīva EKSPERTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('262110', 'Galvenais krājuma GLABĀTĀJS (muzejos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('262111', 'Izglītojošā darba un darba ar apmeklētājiem VADĪTĀJS (muzejos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('262112', 'Apmeklētāju centra VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('262113', 'Apmeklētāju centra SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2622', 'Bibliotekāri un tiem radniecīgu profesiju vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('262201', 'BIBLIOGRĀFS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('262202', 'Vecākais BIBLIOTEKĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('262203', 'DOKUMENTĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('262204', 'INFORMĀTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('262205', 'SistēmBIBLIOTEKĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('262206', 'Fondu GLABĀTĀJS (bibliotēkās)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('262207', 'Izglītības iestādes BIBLIOTEKĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('262208', 'Metadatu REDAKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('262209', 'Metadatu VEIDOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263', 'Sociālo un reliģisko lietu vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2631', 'Ekonomisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263101', 'EKONOMETRISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263102', 'EKONOMISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263103', 'Lauksaimniecības EKONOMISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263104', 'Ekonometrijas EKONOMISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263105', 'Finanšu EKONOMISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263106', 'Ārējās tirdzniecības EKONOMISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263107', 'Darba EKONOMISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263108', 'Cenu EKONOMISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263109', 'Nodokļu EKONOMISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263110', 'Darba algas EKONOMISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263111', 'Makroekonomikas ANALĪTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263112', 'Budžeta EKONOMISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263113', 'Starptautisko ekonomisko attiecību SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263114', 'Nekustamā īpašuma EKONOMISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263115', 'Galvenais EKONOMISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2632', 'Sociologi, antropologi un tiem radniecīgu profesiju vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263201', 'ANTROPOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263202', 'ARHEOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263203', 'KRIMINOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263204', 'ETNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263205', 'EkonomĢEOGRĀFS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263206', 'FizioĢEOGRĀFS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263207', 'PolitoĢEOGRĀFS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263208', 'PENOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263209', 'SOCIĀLPATOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263210', 'SOCIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263211', 'KriminoSOCIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263212', 'Rūpniecības SOCIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263213', 'PenoSOCIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263214', 'Izglītības SOCIOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2633', 'Filozofi, vēsturnieki un politologi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263301', 'ĢENEALOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263302', 'VĒSTURNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263303', 'Ekonomikas VĒSTURNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263304', 'Politikas VĒSTURNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263305', 'Sabiedrības VĒSTURNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263306', 'Mākslas VĒSTURNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263307', 'Medicīnas vēsturnieks', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263308', 'FILOZOFS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263309', 'Politikas FILOZOFS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263310', 'POLITOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263311', 'DendroHRONOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2634', 'Psihologi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263401', 'PSIHOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263402', 'Klīniskais PSIHOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263403', 'Izglītības PSIHOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263404', 'Eksperimentālo procesu PSIHOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263405', 'Ražošanas PSIHOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263406', 'Profesiju (amatu) PSIHOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263407', 'SocioPSIHOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263408', 'Organizācijas PSIHOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263409', 'Praktiskais PSIHOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263410', 'PSIHOLOGA ASISTENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263411', 'PSIHOLOGS KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2635', 'Sociālā darba un konsultāciju vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263501', 'Sociālais DARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263502', 'Karitatīvais sociālais DARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263503', 'Sociālais DARBINIEKS darbam ar ģimeni un bērniem', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263504', 'Sociālais DARBINIEKS darbam ar veciem cilvēkiem', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263505', 'Sociālais DARBINIEKS darbam ar bezpajumtniekiem', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263506', 'Sociālais DARBINIEKS darbam ar personām ar atkarības problēmām', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263507', 'Sociālais DARBINIEKS darbam ar personām brīvības atņemšanas iestādēs un personām, kuras atbrīvotas no šīm iestādēm', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263508', 'Sociālais DARBINIEKS darbam ar personām ar funkcionāliem traucējumiem', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263509', 'Sociālais DARBINIEKS darbam ar klientiem ārstniecības iestādēs', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263510', 'Sociālais DARBINIEKS darbam ar vardarbībā cietušām personām', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263511', 'Sociālais DARBINIEKS darbam ar personu grupām', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263512', 'Kopienas sociālais DARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2636', 'Reliģisko lietu vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263601', 'ARHIBĪSKAPS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263602', 'BĪSKAPS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263603', 'BONZA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263604', 'GARĪDZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263605', 'IMAMS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263606', 'MĀCĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263607', 'MISIONĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263608', 'PRIESTERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263609', 'Katoļu PRIESTERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263610', 'RABĪNS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263611', 'TEOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263612', 'VIKĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263613', 'PRĀVESTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263614', 'KARDINĀLS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263615', 'Sociālās aprūpes karitatīvais darbinieks, DIAKONS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263616', 'Garīgās aprūpes dienesta VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263617', 'Profesionālais veselības aprūpes KAPELĀNS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263618', 'Asociētais veselības aprūpes KAPELĀNS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263619', 'KAPELĀNS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263620', 'Baznīcas MŪZIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263621', 'VIRSKAPELĀNS (Nacionālajos bruņotajos spēkos un apcietinājuma un brīvības atņemšanas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('263622', 'Pastorālais KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264', 'Rakstnieki, žurnālisti un lingvisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2641', 'Rakstnieki un tiem radniecīgu profesiju vecākie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264101', 'AUTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264102', 'BIOGRĀFS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264103', 'DRAMATURGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264104', 'DZEJNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264105', 'ESEJISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264106', 'FEĻETONISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264107', 'KRITIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264108', 'LIRIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264109', 'RAKSTNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264110', 'SCENĀRISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2642', 'Žurnālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264201', 'ŽURNĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264202', 'KOMENTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264203', 'KOREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264204', 'KORESPONDENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264205', 'REDAKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264206', 'Galvenais REDAKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264207', 'REPORTIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264208', 'Literārais REDAKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2643', 'Tulkotāji, tulki un citi lingvisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264301', 'ETIMOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264302', 'GRAFOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264303', 'TULKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264304', 'LEKSIKOGRĀFS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264305', 'LINGVISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264306', 'MORFOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264307', 'FILOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264308', 'SEMANTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264309', 'FONOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264310', 'TULKOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264311', 'Tiesas TULKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264312', 'Zīmju valodas TULKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264313', 'TERMINOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('264314', 'TULKS REFERENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265', 'Radošo un izpildītājmākslu mākslinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2651', 'Vizuālo mākslu mākslinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265101', 'BrīvMĀKSLINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265102', 'GLEZNOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265103', 'GRAFIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265104', 'KARIKATŪRISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265105', 'MĀKSLINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265106', 'Galvenais MĀKSLINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265107', 'MULTIPLIKATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265108', 'RESTAURĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265109', 'TĒLNIEKS (SKULPTORS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265110', 'Mākslinieciskais VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265111', 'Teātra apavu MODELĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265112', 'Teātra kostīmu MODELĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265113', 'MĀKSLINIEKS INSCENĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265114', 'MODELĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265115', 'Ādas apdares MĀKSLINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265116', 'Dzintara apstrādes MĀKSLINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265117', 'Kinofilmu MĀKSLINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265118', 'KokTĒLNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265119', 'INSTALATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265121', 'JuvelierMĀKSLINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265122', 'Mākslas KERAMIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265123', 'Porcelāna APGLEZNOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265124', 'MetālMĀKSLINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265125', 'PLAKĀTISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265126', 'SCENOGRĀFS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265127', 'Stikla apstrādes MĀKSLINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265128', 'TekstilMĀKSLINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265129', 'VideoMĀKSLINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265130', 'Vides MĀKSLINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265131', 'VITRĀŽISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265132', 'Teātra kostīmu MĀKSLINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265133', 'Vecākais mākslas pasākumu ORGANIZATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2652', 'Mūziķi, dziedātāji, komponisti un muzikologi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265201', 'DIRIĢENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265202', 'Galvenais DIRIĢENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265203', 'Orķestra KONCERTMEISTARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265204', 'MUZIKOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265205', 'Instrumentu MŪZIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265206', 'Pūšaminstrumentu MŪZIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265207', 'Sitaminstrumentu MŪZIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265208', 'Stīginstrumentu MŪZIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265209', 'Taustiņinstrumentu MŪZIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265210', 'SOLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265211', 'Operas VOKĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265212', 'Galvenais KORMEISTARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265213', 'KOMPONISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265214', 'Vecākais mūzikas pasākumu ORGANIZATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265215', 'Kora MĀKSLINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265216', 'Orķestra VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265217', 'Orķestra DIRIĢENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265218', 'Ansambļa VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265219', 'MŪZIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265220', 'DZIEDĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265221', 'KORMEISTARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265222', 'Operas trupas VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265223', 'Baznīcas mūzikas dzīves ORGANIZATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265224', 'Kora DIRIĢENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265225', 'KONCERTMEISTARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265226', 'VOKĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265227', 'Folkloras kopas VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265228', 'Mūzikas teorijas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2653', 'Dejotāji un horeogrāfi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265301', 'Baleta SOLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265302', 'DEJOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265303', 'HOREOGRĀFS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265304', 'Baleta MĀKSLINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265305', 'Baleta REPETITORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265306', 'BALETMEISTARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265307', 'Baleta REŽISORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265308', 'Deju kolektīvu, kopu un naktsklubu DEJOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265309', 'Baleta trupas VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265310', 'Deju kopu VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265311', 'Deju ansambļa VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265312', 'Deju kolektīva VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2654', 'Kino, teātru un tiem radniecīgu jomu režisori un producenti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265401', 'Kinofilmas DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265402', 'Radiouzveduma DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265403', 'Izrādes DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265404', 'Televīzijas uzveduma DIREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265405', 'Izrādes REŽISORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265406', 'Kinofilmas REŽISORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265407', 'Skaņu REŽISORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265408', 'Kustību REŽISORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265409', 'REŽISORA ASISTENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265410', 'Drpositionssko kopu VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265411', 'Amatierteātra kolektīva VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265412', 'Televīzijas REŽISORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265413', 'Televīzijas un kino PRODUCENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2655', 'Aktieri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265501', 'AKTIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265502', 'Leļļu teātra AKTIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2656', 'Radio, televīzijas un citu mediju diktori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265601', 'Televīzijas DIKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265602', 'Radio DIKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265603', 'DISKŽOKEJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265604', 'Radio un televīzijas KOMENTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265605', 'KONFERANSJĒ', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265606', 'Radio un televīzijas INTERVĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265607', 'SUFLIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('2659', 'Citur neklasificēti radošo un izpildītājmākslu jomas mākslinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265901', 'AKROBĀTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265902', 'Cirka MĀKSLINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265903', 'Striptīza MĀKSLINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265904', 'KLAUNS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265905', 'KOMIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265906', 'HIPNOTIZĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265907', 'ILUZIONISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265908', 'IMITĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265909', 'ŽONGLIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265910', 'Burvju MĀKSLINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265911', 'Triku MEISTARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265912', 'Leļļu MEISTARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265913', 'DRESĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('265914', 'VēderRUNĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3', 'Speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('31', 'Zinātnes un inženierzinātņu speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311', 'Fizikas un inženierzinātņu speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3111', 'Ķīmijas un fizikas zinātņu speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311101', 'Astronomijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311102', 'Fizikas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311103', 'Ģeofizikas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311104', 'Ģeoloģijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311105', 'Ķīmijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311106', 'Meteoroloģijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311107', 'Okeanogrāfijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311108', 'Ķīmijas un fizikas LABORANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311109', 'Metroloģijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311110', 'Hidroloģijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311111', 'Hidrogrāfijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3112', 'Būvniecības speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311201', 'Būvniecības KALKULĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311202', 'BūvTEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311203', 'Mērniecības būvTEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311204', 'Uzraudzības būvTEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311205', 'Apūdeņošanas būvTEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311206', 'Meliorācijas būvTEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311207', 'Inženierkomunikāciju TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311208', 'Bagarēšanas būvTEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311209', 'Konstrukciju būvTEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311210', 'Hidroloģijas būvTEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311211', 'Iekšējo iekārtu būvTEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311212', 'Hidrotehnikas būvTEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311213', 'Pazemes darbu būvTEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311214', 'Arhitektūras TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311215', 'ĢeoTEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311216', 'Ceļu būvTEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311217', 'Apdares darbu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311218', 'Būvju kadastrālās uzmērīšanas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311219', 'Industriālās apbūves SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311220', 'Apbūves aizsardzības zonu SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311221', 'Inženierkomunikāciju piesaistes galvenais SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311223', 'Ugunsdrošības INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311225', 'Ugunsdrošības TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311226', 'Civilās aizsardzības TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311227', 'Ugunsdrošības un civilās aizsardzības TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311229', 'Būvdarbu VADĪTĀJA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311230', 'Nomnieku KOORDINATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311231', 'Ceļu MEISTARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311232', 'Ceļu MEISTARA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311233', 'Mākslīgo būvju MEISTARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311234', 'Vēdināšanas un kondicionēšanas sistēmu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311235', 'Ūdens apgādes un kanalizācijas sistēmu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311236', 'Aukstumiekārtu sistēmu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311237', 'Gāzes apgādes sistēmu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311238', 'Siltumapgādes un apkures sistēmu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3113', 'Elektrotehnikas speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311301', 'Elektrības KALKULĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311302', 'ElektroTEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311303', 'Elektroapgaismes TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311304', 'Elektrosprieguma sadales TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311305', 'Elektriskās vilces TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311306', 'Elektrosistēmas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311307', 'Augstsprieguma TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311308', 'Elektrosprieguma pārvades TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311309', 'ElektroTEHNIĶIS (elektrisko iekārtu speciālists)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311310', 'Tehniskais SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311311', 'Elektrisko iekārtu SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3114', 'Elektronikas speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311401', 'Elektronikas KALKULĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311402', 'Elektronikas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311403', 'Elektronikas /kontrolmēraparātu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311404', 'Aerokosmisko /iekārtu elektronikas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311405', 'Informātikas /elektronikas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311406', 'Pusvadītāju /elektronikas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311407', 'Televīzijas komunikāciju (elektronikas) TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311408', 'Telefona komunikāciju (elektronikas) TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311409', 'Telegrāfa komunikāciju (elektronikas) TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311410', 'Elektroiekārtas vecākais TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311411', 'Elektronisko komunikāciju SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311412', 'Elektronikas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311413', 'Dzelzceļa transporta automātikas, telemehānikas un sakaru TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3115', 'Inženiermehānikas speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311501', 'Mehānikas darbu KALKULĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311502', 'Sausā doka PRIEKŠNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311503', 'Zemūdens tīrīšanas doka PRIEKŠNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311504', 'Kuģu PĀRVALDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311505', 'Aeronautikas MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311506', 'Mehānismu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311507', 'Lauksaimniecības tehnikas MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311508', 'Gaisa kondicionēšanas /mehānismu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311509', 'Automobiļu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311510', 'Dīzeļdzinēju MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311511', 'Gāzes turbīnu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311512', 'Apkures, ventilācijas un saldēšanas iekārtu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311513', 'Rūpniecisko iekārtu un rīku MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311514', 'Instrumentu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311515', 'Iekšdedzes dzinēju MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311516', 'Reaktīvo dzinēju MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311517', 'Transporta lokomotīvju dzinēju MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311518', 'Eļļošanas /mehānismu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311519', 'Jūras /mehānismu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311520', 'Dzinēju /mehānismu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311521', 'Ostas /mehānismu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311522', 'Atomenerģijas /mehānismu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311523', 'Kuģu būves MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311524', 'Motoru MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311525', 'Atomenerģijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311526', 'Ceha /iekārtu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311527', 'Siltumenerģētikas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311528', 'Pazemes darbu mehānismu un iekārtu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311529', 'Energosistēmu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311530', 'Siltumapgādes, ventilācijas un saldēšanas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311531', 'Dzelzceļa automātisko sistēmu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311532', 'Transporta lokomotīvju TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311533', 'Sliežu ceļu saimniecības TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311534', 'Mēriekārtu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311535', 'Mašīnbūves TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311536', 'Siltumenerģētikas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311537', 'MEHATRONIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311538', 'Autoapkopes SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311539', 'Lokomotīvju saimniecības TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311540', 'Transporta vagonu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311541', 'Dzelzceļa transporta pārvadājumu organizācijas un kustības drošības TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311542', 'Kraušanas darbu VADĪTĀJS (stividors)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311543', 'Gaisa kuģu tehniskās apkopes MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311544', 'Gaisa kuģu tehniskās ekspluatācijas mehānikas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311545', 'Gaisa kuģu tehniskās ekspluatācijas avionikas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311546', 'Mehatronisku sistēmu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311547', 'Kuģa TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311548', 'Sauszemes transportlīdzekļu tehniskais EKSPERTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311549', 'Ķīmiskās un bioķīmiskās rūpniecības iekārtu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311550', 'Gāzes iekārtu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311551', 'Ritošā sastāva PIEŅĒMĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311552', 'Valsts /tehniskās uzraudzības INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311553', 'Energouzraudzības INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311554', 'Tehniskās drošības INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311555', 'Katlu uzraudzības INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311556', 'Kuģošanas drošības INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311557', 'Tehniskās uzraudzības INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311558', 'Avāriju izmeklēšanas INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311559', 'Glābšanas darbu koordinācijas INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311560', 'Transportlīdzekļu tehniskās kontroles INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311561', 'Civilās aviācijas drošības uzraudzības INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311562', 'Dzelzceļa INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311563', 'Tehniskais INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311564', 'Kravas INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311565', 'Dzelzceļa MEISTARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311566', 'Mašīnbūves SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311567', 'Aukstumtehnikas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311568', 'Starptautisko kravu pārvadājumu SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311569', 'Kuģu inspekciju KOORDINĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311570', 'Kuģu kontroles INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3116', 'Inženierķīmijas speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311601', 'Ķīmijas KALKULĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311602', 'Inženierķīmijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311603', 'Dabasgāzes pārvades TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311604', 'Ķīmisko procesu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311605', 'Naftas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311606', 'Ķīmijas LABORANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311607', 'Ķīmijas TEHNOLOGA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311608', 'Analītiskās ķīmijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3117', 'Ieguves rūpniecības un metalurģijas speciālisti', 1, 0);


COMMIT WORK;

INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311701', 'Naftas un gāzes /urbumu CEMENTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311702', 'Urbumu SKĀBJOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311703', 'Metalurģijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311704', 'Metālraudzes TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311705', 'Naftas un gāzes /urbumu URBĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311706', 'Proves (raudzes) NOTEICĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3118', 'Rasētāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311801', 'RASĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311802', 'Tehnikas ILUSTRĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311803', 'Arhitektūras RASĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311804', 'Kartogrāfijas RASĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311805', 'Spiedveidnes RASĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311806', 'Tehnikas RASĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311807', 'Būvtehnikas RASĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311808', 'Elektrosistēmu RASĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311809', 'Elektronikas RASĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311810', 'Apsildes un ventilācijas sistēmu RASĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311811', 'Kuģu /tehnikas RASĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311812', 'Mehānikas RASĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311813', 'Aeronautikas RASĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311814', 'Ģeoloģijas RASĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311815', 'Ierīču un instrumentu RASĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311816', 'Litogrāfijas RASĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311817', 'Topogrāfijas RASĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311818', 'Zīmējumu un rasējumu KOPĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311819', 'Tehniskais REDAKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311820', 'KARTOGRĀFS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311821', 'FOTOGRAMMETRISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3119', 'Citur neklasificēti fizikas un inženierzinātņu speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311901', 'Metožu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311902', 'Plānošanas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311903', 'Ražošanas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311904', 'Darba aizsardzības SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311905', 'Nedatorizēto /sistēmu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311906', 'Telekomunikāciju (darba normēšanas) TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311907', 'Izmaksu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311908', 'Darba izpētes TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311909', 'Kvantitatīvās analīzes TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311910', 'Elektrotīklu DISPEČERS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311911', 'TEHNOLOGA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311912', 'Tehniskās informācijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311913', 'Kvalitātes TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311914', 'Krimināllietu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311915', 'Ieroču TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311916', 'TEHNIĶIS – KRIMINĀLISTS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311917', 'TEHNIĶIS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311918', 'Kokapstrādes TEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311919', 'Poligrāfijas ražošanas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311920', 'Pārtikas produktu ražošanas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311921', 'Trikotāžas izstrādājumu ražošanas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311922', 'Tekstiliju ražošanas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311923', 'Šūto izstrādājumu ražošanas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311924', 'Pārtikas produktu pārstrādes SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311925', 'Projektu ASISTENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311926', 'Zāģmateriālu ražošanas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311927', 'Koka izstrādājumu ražošanas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311928', 'Darba aizsardzības KOORDINATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311929', 'Darbu VADĪTĀJS (dzelzceļā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311930', 'EnergoDISPEČERS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311931', 'Saldumu un šokolādes izstrādājumu ražošanas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311932', 'Administratīvās inspekcijas INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311933', 'Pieminekļu aizsardzības INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311934', 'Apģērbu PĀRBAUDĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311935', 'Audumu PĀRBAUDĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311936', 'Kvalitātes KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311937', 'Šūšanas kvalitātes KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311938', 'Produkcijas KONTROLIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311939', 'Produkcijas drošuma INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311940', 'Produkcijas kvalitātes INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311941', 'Pārtikas produktu kvalitātes INSPEKTORA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311942', 'Pārtikas kvalitātes SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311943', 'DISPEČERS (enerģētikā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311944', 'TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311945', 'Apsardzes sistēmu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311946', 'Alus liešanas un dzesēšanas iekārtu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311947', 'Vērpto tekstiliju ražošanas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311948', 'Austo tekstiliju ražošanas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311949', 'Adīto tekstiliju ražošanas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('311950', 'Neausto drānu un izstrādājumu ražošanas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('312', 'Ieguves, apstrādes rūpniecības un būvniecības uzraugi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3121', 'Ieguves rūpniecības uzraugi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('312101', 'Ieguves rūpniecības UZRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('312102', 'Karjera UZRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3122', 'Apstrādes rūpniecības uzraugi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('312201', 'Apstrādes rūpniecības UZRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('312202', 'Montāžu UZRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('312203', 'Ražošanas VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3123', 'Būvniecības uzraugi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('312301', 'BūvUZRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('312302', 'Ceļu būvUZRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('312303', 'Tiltu būvUZRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313', 'Tehnoloģisko procesu kontroles speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3131', 'Elektrostaciju operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313101', 'Elektrospēkstacijas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313102', 'Hidroelektrospēkstacijas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313103', 'Elektrospēkstacijas /komutatora OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313104', 'Atomenerģijas /reaktora OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313105', 'Elektroģeneratora /turbīnas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313106', 'Spēkstacijas /turbīnas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313107', 'Tvaika /spēkstacijas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313108', 'Vēja /elektrostacijas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313109', 'Dīzeļģeneratora OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3132', 'Atkritumu dedzināšanas, ūdens un notekūdeņu attīrīšanas un ūdens pārstrādes iekārtu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313201', 'Dzesēšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313202', 'Karsēšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313203', 'Kompresora OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313204', 'Atkritumu sadedzināšanas /krāsns OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313205', 'Ledus ražošanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313206', 'Saldēšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313207', 'Ūdens aizsprosta OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313208', 'Ventilācijas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313209', 'Skābekļa ražošanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313210', 'Skābekļa balonu PILDĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313211', 'Ūdens ķīmiskās apstrādes OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313212', 'Ķīmisko reaģentu SAGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313213', 'Automatizētas kurināmā padeves OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313214', 'Slāpekļa /ražošanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313215', 'Sūknēšanas iekārtas APKALPOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313216', 'Spiedieniekārtu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313217', 'Attīrīšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313218', 'Filtrēšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313219', 'Notekūdeņu rūpnieciskās pārstrādes OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313220', 'Rezervuāra OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313221', 'Sūknēšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313222', 'Ūdens pārstrādes OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3133', 'Ķīmiskās pārstrādes rūpnīcu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313301', 'Ķīmisko vielu /karstās apstrādes OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313302', 'Ķīmisko vielu /filtrpreses OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313303', 'Ķīmisko vielu /separatora OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313304', 'Ķīmijas destilēšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313305', 'Reaktora OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313306', 'Radioaktīvo atkritumu /pārstrādes OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3134', 'Naftas un dabasgāzes pārstrādes rūpnīcu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313401', 'Benzīna /kontrolierīču OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313402', 'Gāzes /kontrolierīču OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313403', 'Benzīna /pārsūknēšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313404', 'Gāzes /pārsūknēšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3135', 'Metāla ražošanas procesu speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313501', 'Kausēšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313502', 'Spiedliešanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313503', 'Metāla LĒJĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313504', 'Metāla žāvēšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313505', 'Metāla apstrādes iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3139', 'Citur neklasificēti tehnoloģisko procesu kontroles speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313901', 'Papīra masas /ražošanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313902', 'Papīra masas /pārstrādāšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313903', 'Papīra masas /rafinēšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313904', 'Papīra masas /sijāšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313905', 'Papīra masas /vārīšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313906', 'Robotu UZRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313907', 'Robotu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('313908', 'Automatizētās /montāžas līnijas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314', 'Dabas zinātņu un tām radniecīgu zinātņu speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3141', 'Dabas zinātņu speciālisti (izņemot medicīnu)', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314101', 'TAKSIDERMISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314102', 'Dabaszinātņu LABORANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314103', 'Anatomijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314104', 'Bakterioloģijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314105', 'Bioķīmijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314106', 'Biofizikas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314107', 'Asins pārliešanas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314108', 'Botānikas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314109', 'Citoloģijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314110', 'Ekoloģijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314111', 'Ģenētikas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314112', 'Hematoloģijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314113', 'Histoloģijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314114', 'Farmakoloģijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314115', 'Fizioloģijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314116', 'Seroloģijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314117', 'Audu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314118', 'Zooloģijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314119', 'MikroBIOLOGA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314120', 'VIRUSOLOGA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314121', 'Pārtikas un dzērienu TEHNOLOGA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314122', 'PARAZITOLOGA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314123', 'ENTOMOLOGA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314124', 'Lopkopības PĀRRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314125', 'Vides TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314126', 'BioTEHNOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314127', 'BioTEHNOLOGA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314128', 'Piena un piena produktu TEHNOLOGA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314129', 'Vides iekārtu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314130', 'Dzīvnieku PĀRRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314131', 'Dzīvnieku vērtēšanas EKSPERTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314132', 'KINOLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3142', 'Lauksaimniecības un nekustamā īpašuma speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314201', 'Agronomijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314202', 'Kokaudzēšanas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314203', 'Puķkopības TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314204', 'Dārzkopības TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314205', 'Sakņkopības TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314206', 'Pomoloģijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314207', 'Augsnes TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314208', 'MĒRNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314209', 'ZOOTEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314210', 'Ainavu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314212', 'Nekustamā īpašuma VĒRTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314213', 'Dārzkopības SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314214', 'Stādaudzēšanas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314215', 'Nekustamā īpašuma VĒRTĒTĀJA ASISTENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314216', 'Zemes lietu SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314217', 'Nekustamā īpašuma SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314218', 'Zemkopības LABORANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314219', 'Sēklkopības TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314220', 'Lauksaimniecības ORGANIZATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314221', 'Lauku īpašuma APSAIMNIEKOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314222', 'Zemnieku KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314223', 'Lauku attīstības SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314224', 'Augu aizsardzības SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314225', 'Augkopības KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314226', 'Lopkopības KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314227', 'Lauku attīstības KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314228', 'Augkopības TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314229', 'Lopkopības TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3143', 'Mežsaimniecības speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314301', 'Meža TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314302', 'Mežkopības TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314303', 'Mežsaimniecības TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314304', 'Mežsaimniecības LABORANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('314305', 'Meža INVENTARIZATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315', 'Kuģu un gaisa kuģu vadītāji un tehniskie speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3151', 'Kuģu mehāniķi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315101', 'Vecākais MEHĀNIĶIS uz kuģiem ar galveno dzinēju jaudu 3000 kW un lielāku', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315102', 'Otrais MEHĀNIĶIS uz kuģiem ar galveno dzinēju jaudu 3000 kW un lielāku', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315103', 'Vecākais MEHĀNIĶIS uz zvejas kuģiem ar galveno dzinēju jaudu 3000 kW un lielāku', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315104', 'Otrais MEHĀNIĶIS uz zvejas kuģiem ar galveno dzinēju jaudu 3000 kW un lielāku', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315105', 'Vecākais MEHĀNIĶIS uz kuģiem ar galveno dzinēju jaudu, mazāku par 3000 kW', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315106', 'Otrais MEHĀNIĶIS uz kuģiem ar galveno dzinēju jaudu, mazāku par 3000 kW', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315107', 'Sardzes MEHĀNIĶIS uz kuģiem ar galveno dzinēju jaudu 750 kW un lielāku', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315108', 'MEHĀNIĶIS uz kuģiem ar galveno dzinēja jaudu, mazāku par 750 kW', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315109', 'Vecākais MEHĀNIĶIS uz iekšējo ūdeņu kuģiem, mazākiem par 3000 kW', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315110', 'Vecākais MEHĀNIĶIS uz iekšējo ūdeņu kuģiem, mazākiem par 1000 kW', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315111', 'MEHĀNIĶIS uz iekšējo ūdeņu kuģiem ar galveno dzinēju jaudu, mazāku par 3000 kW', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315112', 'MEHĀNIĶIS uz iekšējo ūdeņu kuģiem ar galveno dzinēju jaudu, mazāku par 1000 kW', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315113', 'Vecākais MEHĀNIĶIS uz zvejas kuģiem ar galveno dzinēju jaudu, mazāku par 3000 kW', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315114', 'Otrais MEHĀNIĶIS uz zvejas kuģiem ar galveno dzinēju jaudu, mazāku par 3000 kW', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315115', 'Sardzes MEHĀNIĶIS uz zvejas kuģiem', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315116', 'MEHĀNIĶIS uz zvejas kuģiem ar galveno dzinēju jaudu, mazāku par 750 kW', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315117', 'Kuģa galvenais elektroMEHĀNIĶIS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315118', 'Kuģa elektroMEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315119', 'Kuģa elektroMEHĀNIĶIS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315120', 'Kutera elektroMEHĀNIĶIS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315121', 'Kuģu MEHĀNIĶIS (vadības līmenī)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315122', 'Kuģu MEHĀNIĶIS (ekspluatācijas līmenī)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3152', 'Kuģu vadītāji un loči', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315201', 'KAPTEINIS uz kuģiem ar 3000 BT un lielākiem', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315202', 'Vecākais STŪRMANIS uz kuģiem ar 3000 BT un lielākiem', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315203', 'KAPTEINIS uz zvejas kuģiem ar garumu 45 m un garākiem neierobežotā zvejas rajonā', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315204', 'Vecākais STŪRMANIS uz zvejas kuģiem ar garumu 45 m un garākiem neierobežotā zvejas rajonā', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315205', 'KAPTEINIS uz kuģiem, mazākiem par 3000 BT', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315206', 'KAPTEINIS uz kuģiem, mazākiem par 500 BT', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315207', 'KAPTEINIS uz kuģiem, mazākiem par 200 BT', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315208', 'Vecākais STŪRMANIS uz kuģiem, mazākiem par 3000 BT', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315209', 'Sardzes STŪRMANIS uz kuģiem ar 500 BT un lielākiem', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315210', 'Sardzes STŪRMANIS uz kuģiem, mazākiem par 500 BT piekrastes kuģošanā', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315211', 'KAPTEINIS uz iekšējo ūdeņu kuģiem, mazākiem par 3000 BT', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315212', 'KAPTEINIS uz iekšējo ūdeņu kuģiem, mazākiem par 500 BT', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315213', 'Iekšējo ūdeņu kuģa STŪRMANIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315214', 'Tāljūras LOCIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315215', 'LOCIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315216', 'Sardzes STŪRMANIS uz zvejas kuģiem ar garumu 45 m un garākiem neierobežotā zvejas rajonā', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315217', 'KAPTEINIS uz zvejas kuģiem, īsākiem par 45 m, neierobežotā zvejas rajonā', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315218', 'Sardzes STŪRMANIS uz zvejas kuģiem, īsākiem par 45 m, neierobežotā zvejas rajonā', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315219', 'KAPTEINIS uz zvejas kuģiem, īsākiem par 45 m, ierobežotā zvejas rajonā', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315220', 'Sardzes STŪRMANIS uz zvejas kuģiem, īsākiem par 45 m, ierobežotā zvejas rajonā', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315221', 'Kuģu satiksmes OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315222', 'Kuģa KAPTEINIS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315223', 'Kutera KAPTEINIS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315224', 'Kuģa klāja VIRSNIEKS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315225', 'Kuģa STŪRMANIS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315226', 'Kuģa STŪRESVĪRS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315227', 'Peldošā celtņa MEISTARS (KAPTEINIS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315228', 'Kuģa VADĪTĀJS uz kuģiem līdz 500 BT piekrastes kuģošanā', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315229', 'Atpūtas kuģu VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315230', 'Kuģu VADĪTĀJS (vadības līmenī)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315231', 'Kuģu VADĪTĀJS (ekspluatācijas līmenī)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3153', 'Gaisa kuģu piloti un tiem radniecīgu profesiju speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315301', 'Gaisa kuģa KAPTEINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315302', 'Lidojumu INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315303', 'Gaisa kuģa STŪRMANIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315304', 'Gaisa kuģa PILOTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315305', 'Helikoptera PILOTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315306', 'Helikoptera jaunākais PILOTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315307', 'Hidroplāna PILOTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315308', 'Gaisa kuģa komercPILOTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315309', 'Helikoptera komercPILOTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315310', 'Aviolīniju transporta gaisa kuģa PILOTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315311', 'Aviolīniju transporta helikoptera PILOTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315312', 'Planiera PILOTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315313', 'Gaisa balona PILOTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315314', 'Vecākais LIDOTĀJS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315315', 'LIDOTĀJS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315316', 'LIDOTĀJS (inženieris)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315317', 'STŪRMANIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315318', 'LIDOTĀJS (radiotelefona operators)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315319', 'Gaisa kuģa PILOTS (instruktors)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315320', 'Helikoptera PILOTS (instruktors)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315321', 'Planiera PILOTS (instruktors)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315322', 'Gaisa balona PILOTS (instruktors)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315323', 'PILOTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315324', 'Deltaplāna LIDOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315325', 'LIDOTĀJS (bortmehāniķis operators)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315326', 'LIDOTĀJS (operators)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3154', 'Gaisa satiksmes vadības dispečeri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315401', 'Gaisa satiksmes DISPEČERS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315402', 'Gaisa satiksmes kontroliekārtu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315403', 'Gaisa satiksmes vadības DISPEČERS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315404', 'Lidojumu VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315405', 'Lidlauka rajona lidojumu informācijas dienesta (AFIS) OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315406', 'Speciālu ziņojumu sniegšanas lidotājiem (NOTAM) sistēmu INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315407', 'Speciālu ziņojumu sniegšanas lidotājiem (NOTAM) sistēmu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3155', 'Gaisa satiksmes drošības elektronikas speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315501', 'Gaisa satiksmes drošības TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315502', 'Lidojumu nodrošināšanas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315503', 'Elektronavigācijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315504', 'Radiolokācijas un radionavigācijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315505', 'Radiolokācijas un radionavigācijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315506', 'Radiolokācijas un radionavigācijas iekārtu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315507', 'Radiolokācijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315508', 'Radionavigācijas INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315509', 'Radiolokācijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315510', 'Radionavigācijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315511', 'Radiolokācijas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315512', 'Radionavigācijas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315513', 'Gaisa kuģu tehniskās apkopes SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315514', 'Radiokontroles punkta OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315515', 'LIDOTĀJS (kravas operators)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315516', 'Aeronavigācijas datu apstrādes sistēmu INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315517', 'Aviācijas mobilo sakaru INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315518', 'Aviācijas mobilo sakaru TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315519', 'Aviācijas fiksēto sakaru (datu pārraides tīkla) INŽENIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315520', 'Aviācijas fiksēto sakaru (datu pārraides tīkla) TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('315521', 'Aviācijas fiksēto sakaru (datu pārraides tīkla) OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('32', 'Veselības aprūpes jomas speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('321', 'Medicīnas un farmācijas speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3211', 'Vizuālās diagnostikas un terapijas iekārtu speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('321101', 'RADIOLOGA ASISTENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('321102', 'Elektrokardiogrāfijas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('321103', 'Elektroencefalogrāfijas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('321104', 'Rentgenstaru iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3212', 'Klīnisko un patoloģijas laboratoriju speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('321201', 'Patoloģijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('321202', 'Medicīnas LABORANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('321203', 'Biomedicīnas LABORANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('321204', 'Laboratorijas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3213', 'Farmaceitu asistenti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('321301', 'FARMACEITA ASISTENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3214', 'Medicīnisko protēžu un palīglīdzekļu un zobu protēžu speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('321401', 'Protēžu MEISTARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('321402', 'Tehniskais ORTOPĒDS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('321403', 'Ortopēdijas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('321404', 'Protēžu PIELĀGOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('321405', 'Zobu /protēžu MEISTARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('321406', 'Zobu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('322', 'Medicīnas māsu un vecmāšu profesiju speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3221', 'Medicīnas māsu profesiju speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('322101', 'MĀSA (Medicīnas MĀSA)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('322102', 'Iecirkņa MĀSA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('323', 'Alternatīvās un papildinošās medicīnas speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3230', 'Alternatīvās un papildinošās medicīnas speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('323001', 'DZIEDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('323002', 'FITOTERAPEITS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('323003', 'Jogas TERAPEITS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('323004', 'Jogas MEISTARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('323005', 'Jogas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('324', 'Veterinārfeldšeri un veterinārārstu asistenti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3240', 'Veterinārfeldšeri un veterinārārstu asistenti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('324001', 'VeterinārĀRSTA ASISTENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('324002', 'VeterinārFELDŠERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('324003', 'Mākslīgās apsēklošanas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325', 'Citi veselības aprūpes jomas speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3251', 'Zobārstu asistenti un palīgi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325101', 'Zobu FELDŠERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325102', 'Zobu HIGIĒNISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325103', 'Zobārsta ASISTENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3252', 'Medicīniskās dokumentācijas un informācijas apstrādes speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325201', 'Medicīniskās uzskaites un veselības aprūpes informācijas KODĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325202', 'Medicīniskās uzskaites un veselības aprūpes KOREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3254', 'Optiķi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325401', 'OPTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3255', 'Fizioterapijas speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325501', 'MASIERIS (trešā līmeņa kvalifikācija)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325502', 'FIZIOTERAPEITA ASISTENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325503', 'Bērnu MASIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325504', 'ERGOTERAPEITA ASISTENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325505', 'REITTERAPEITA ASISTENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325506', 'Akupresūras SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325507', 'Siatsu SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3257', 'Vides un darba aizsardzības inspektori un asistenti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325701', 'Valsts /darba INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325702', 'Darba INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325703', 'Vides aizsardzības INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325704', 'Sanitārais INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325705', 'Higiēnas DEZINFEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325706', 'Higiēnas ĀRSTA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325707', 'ĀRSTA (EPIDEMIOLOGA) PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325708', 'MASIERIS (ceturtā līmeņa kvalifikācija)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3258', 'Neatliekamās medicīniskās palīdzības darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325801', 'Neatliekamās palīdzības ĀRSTA PALĪGS (FELDŠERIS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3259', 'Citur neklasificēti veselības aprūpes jomas speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325901', 'ORTOĒPISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325902', 'ORTOFONISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325903', 'ORTOOPTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325904', 'Skaistumkopšanas SPECIĀLISTS (kosmetoloģijā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325905', 'KOSMĒTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325906', 'Solārija DARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325907', 'SPA SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('325908', 'AromaTERAPEITS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('33', 'Komercdarbības un pārvaldes (administrācijas) speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331', 'Finanšu un matemātikas speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3311', 'Vērtspapīru un finanšu mākleri un brokeri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331101', 'STARPNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331102', 'Valūtas maiņas STARPNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331103', 'Investīciju STARPNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331104', 'Obligāciju STARPNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331105', 'Vērtspapīru un akciju STARPNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331106', 'Biržas MĀKLERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331107', 'Parādzīmju PĀRDEVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331108', 'Vērtspapīru TIRGOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331109', 'Akciju STARPNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331110', 'DĪLERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331111', 'Banku SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331112', 'Vērtspapīru INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331113', 'Ārējā parāda ANALĪTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331114', 'BROKERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331115', 'Reģiona VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331116', 'Vērtspapīru EKSPERTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331117', 'Akreditīvu EKSPERTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331118', 'Klientu apkalpošanas PĀRZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331119', 'Norēķinu karšu PĀRZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331120', 'Norēķinu karšu izpārdošanas PĀRZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331121', 'Korespondentattiecību ADMINISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331122', 'Klientu (korporatīvo klientu) VADĪTĀJS (privātbaņķieris)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331123', 'Kontu ADMINISTRATORS (finanšu un tirdzniecības jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331124', 'Testa atslēgu ADMINISTRATORS (pārzinis)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331125', 'Norēķinu ADMINISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331126', 'Klientu KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331127', 'Maksājumu karšu SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331128', 'Maksājumu karšu izgatavošanas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331129', 'Maksājumu karšu ADMINISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331130', 'Maksājumu karšu projektu VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331131', 'Finanšu produktu attīstības projektu VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331132', 'METODIĶIS (finanšu un tirdzniecības jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331133', 'Dežurējošais maksājumu karšu ADMINISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331134', 'Tirdzniecības finansēšanas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331135', 'Dokumentāro operāciju SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331136', 'Muitas BROKERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331137', 'DEKLARANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331138', 'Maksājumu sistēmu EKSPERTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331139', 'Kredītu reģistra EKSPERTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331140', 'Reklamācijas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3312', 'Kredītu un aizņēmumu speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331201', 'Kredītu INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331202', 'Kredītprojektu VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331203', 'Kredītu ANALĪTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331204', 'Kredītportfeļa ADMINISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331205', 'Aizdevumu ADMINISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331206', 'Līzinga SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331207', 'Faktūrkreditēšanas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331208', 'Kredītu piedziņas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3313', 'Grāmatvedības speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331301', 'GRĀMATVEDIS (ceturtā līmeņa kvalifikācija)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331302', 'Valūtas darījumu GRĀMATVEDIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331303', 'Vērtspapīru GRĀMATVEDIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331304', 'Valūtas operāciju GRĀMATVEDIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331305', 'Kontu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331306', 'Kontu ADMINISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331307', 'Finanšu SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331308', 'GRĀMATVEDIS (KONSULTANTS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331309', 'Finanšu DARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331310', 'Materiālu uzskaites GRĀMATVEDIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331311', 'Tirgus operāciju un maksājumu SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3314', 'Statistikas, matemātikas un tām radniecīgu jomu speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331401', 'STATISTIĶA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331402', 'GRĀMATVEŽA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331403', 'STATISTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331404', 'AKTUĀRA ASISTENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3315', 'Novērtētāji un izsolītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331501', 'Apdrošināšanas INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331502', 'Prasību INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331503', 'IZSOLĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331504', 'Prasību KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331505', 'NOVĒRTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331506', 'Apdrošināšanas KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('331507', 'Sauszemes transportlīdzekļu tehniskais VĒRTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332', 'Tirdzniecības un iepirkumu aģenti un starpnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3321', 'Apdrošināšanas pārstāvji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332101', 'Apdrošināšanas AĢENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332102', 'Apdrošināšanas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332103', 'Apdrošināšanas STARPNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332104', 'INSPEKTORS (apdrošināšanā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3322', 'Tirdzniecības pārstāvji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332201', 'Garantijas pakalpojumu KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332202', 'Tirdzniecības AĢENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332203', 'Izpārdošanas PĀRSTĀVIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332204', 'Tirdzniecības PĀRDEVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332205', 'Ceļojošais PĀRDEVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332206', 'TIRGOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332207', 'Tirdzniecības PĀRSTĀVIS', 0, 0);


COMMIT WORK;

INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332208', 'Klientu /pārdošanas KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332209', 'Pārdošanas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332210', 'Telefonbankas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332211', 'Pārdošanas SPECIĀLISTA ASISTENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332212', 'Tirdzniecības PĀRDEVĒJA ASISTENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3323', 'Iepirkumu speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332301', 'Iepirkumu SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332302', 'Loģistikas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332303', 'Iepirkumu AĢENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332304', 'Sagādes AĢENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332305', 'SAGĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332306', 'Mazumtirdzniecības SAGĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332307', 'Vairumtirdzniecības SAGĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332308', 'Preču IEPIRCĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332309', 'Vairumtirdzniecības preču IEPIRCĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332310', 'Mazumtirdzniecības preču IEPIRCĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332311', 'TIRGZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332312', 'Vairumtirdzniecības AĢENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332313', 'Preču kategoriju VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332314', 'Iepirkumu SPECIĀLISTA ASISTENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3324', 'Tirdzniecības starpnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332401', 'Pārtikas preču STARPNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332402', 'Tirdzniecības STARPNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332403', 'Transporta STARPNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('332404', 'Tirdzniecības BROKERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333', 'Komercpakalpojumu speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3331', 'Preču pārvadājumu aģenti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333101', 'Ekspedīcijas AĢENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333102', 'Realizācijas AĢENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333103', 'EKSPEDITORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333104', 'DEKLARĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333105', 'Importa un eksporta SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3332', 'Konferenču un pasākumu organizatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333201', 'Konferenču un pasākumu ORGANIZATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333202', 'Kāzu PLĀNOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3333', 'Nodarbinātības aģenti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333301', 'Nodarbinātības AĢENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333302', 'Nodarbinātības ORGANIZATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3334', 'Nekustamā īpašuma mākleri un īpašumu pārvaldes speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333401', 'Īpašuma AĢENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333402', 'Nekustamā īpašuma AĢENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333403', 'Īpašuma PĀRDEVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333404', 'Nekustamā īpašuma PĀRDEVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333405', 'Dzīvokļu AĢENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333406', 'Nekustamā īpašuma darījumu STARPNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3339', 'Citur neklasificēti komercpakalpojumu jomas speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333901', 'Grāmatu tirdzniecības AĢENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333902', 'Muzikālo priekšnesumu AĢENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333903', 'Sporta AĢENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333904', 'Teātra AĢENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333905', 'Reklāmas komercdarbības pakalpojumu SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333906', 'Sludinājumu ievietošanas /komercdarbības pakalpojumu PĀRSTĀVIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333907', 'Reklāmas /komercpakalpojumu PĀRDEVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333908', 'Reklāmas AĢENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333909', 'Reklāmas KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333910', 'Monētu tirdzniecības AĢENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333911', 'Saziņas līdzekļu KOORDINĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333912', 'Tirgus pētījumu ANALĪTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333913', 'Apģērba etiķetes KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333915', 'Tirgvedības VADĪTĀJA ASISTENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333916', 'Loģistikas DARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333917', 'Dārzkopības KOMERCDARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333918', 'Mazumtirdzniecības KOMERCDARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333919', 'Komercdarbības SPECIĀLISTS (lauksaimniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333920', 'Komercdarbības SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333921', 'Tirgvedības un tirdzniecības SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333922', 'Agrārā sektora KOMERCDARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333923', 'Transporta pārvadājumu KOMERCDARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333924', 'Reklāmas pakalpojumu KOMERCDARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333925', 'Viesnīcu pakalpojumu KOMERCDARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333926', 'Restorāna pakalpojumu KOMERCDARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333927', 'Rūpniecības KOMERCDARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333928', 'Komercdarījumu DARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333929', 'Komercpakalpojumu DARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333930', 'Tūrisma pakalpojumu KOMERCDARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333931', 'Mākslas KOMERCDARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333932', 'Zāļu reģistrācijas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333933', 'Produktu SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333934', 'Klīnisko pētījumu SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333935', 'Reklāmas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333936', 'Reklāmas un tirgvedības projektu PLĀNOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333937', 'Eksporta SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333938', 'Ekonomikas KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333939', 'Sociālo mediju SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('333940', 'KOMERCDARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334', 'Administratīvie un specializētie sekretāri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3341', 'Biroja vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334101', 'Biroja ADMINISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334102', 'Sekretariāta VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334103', 'Vecākais LIETVEDIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334104', 'LIETVEDIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334105', 'Lietvedības galvenais INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334106', 'Lietvedības INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334107', 'Administratīvās lietvedības INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334108', 'Biroja VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3342', 'Juridiskie sekretāri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334201', 'Atbildīgais SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334202', 'Komitejas SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334203', 'Pašvaldības SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334204', 'Valdības administrācijas SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334205', 'Vēstniecības SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334206', 'Komitejas izpildSEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334207', 'Valsts pārvaldes izpildSEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334208', 'Pašvaldības administrācijas /izpildSEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334209', 'Valdības administrācijas /izpildSEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334210', 'Komisijas SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334211', 'Sabiedrības SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3343', 'Administratīvie sekretāri un izpildsekretāri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334301', 'Pārvaldes SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334302', 'Tiesas sēžu SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334303', 'Tiesas SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334304', 'SEKRETĀRS – KONSULTANTS (tiesu varas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334305', 'Ministru PREZIDENTA SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334306', 'Ārējo sakaru KOORDINĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334307', 'Diplomātiskais KURJERS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334308', 'VĒSTNIEKA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334309', 'Ekspedīcijas PĀRZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334310', 'Arhīva PĀRZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334311', 'Lietvedības PĀRZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334312', 'Vides pārvaldības KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334313', 'Projekta VADĪTĀJA ASISTENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334314', 'Bāriņtiesas PRIEKŠSĒDĒTĀJA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334315', 'Bāriņtiesas sēžu SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334316', 'Sēžu protokolu VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334317', 'Ministru PREZIDENTA preses SEKRETĀRA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334318', 'MINISTRA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334319', 'Īpašu uzdevumu ministra sekretariāta VADĪTĀJA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334320', 'Valsts SEKRETĀRA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334321', 'Valsts SEKRETĀRA VIETNIEKA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334322', 'Valsts kancelejas DIREKTORA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334323', 'VADĪTĀJA /DIREKTORA /ĢENERĀLDIREKTORA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334324', 'DIREKTORA PALĪGS (revīzijas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334325', 'Valdes PRIEKŠSĒDĒTĀJA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334326', 'VADĪTĀJA PADOMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334327', 'Iestādes VADĪTĀJA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334328', 'Koledžas DIREKTORA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334329', 'Zvērināta tiesu IZPILDĪTĀJA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334330', 'PRIEKŠNIEKA PALĪGS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334331', 'PRIEKŠNIEKA dežurējošais PALĪGS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334332', 'KOMANDIERA PALĪGS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334333', 'Operatīvā DEŽURANTA PALĪGS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334334', 'PRIEKŠNIEKA PALĪGS (apcietinājuma un brīvības atņemšanas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334335', 'Ieslodzījuma vietas PRIEKŠNIEKA dežurējošais PALĪGS (apcietinājuma un brīvības atņemšanas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334336', 'Valsts KONTROLIERA PALĪGS (revīzijas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334337', 'Valsts REVIDENTA PALĪGS (revīzijas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334338', 'DEŽURANTA PALĪGS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334339', 'INSPEKTORA PALĪGS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334340', 'EKSPERTA PALĪGS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334341', 'Padomes SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334342', 'Valdes SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334343', 'Senāta PRIEKŠSĒDĒTĀJA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334344', 'Protokola SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334345', 'Struktūrvienības VADĪTĀJA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3344', 'Medicīnas jomas sekretāri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334401', 'Ārstniecības iestādes SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('334402', 'Ārstniecības iestādes klientu un pacientu REĢISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335', 'Valsts varas īstenošanas speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3351', 'Muitnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335101', 'Vecākais muitas EKSPERTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335102', 'Vecākais muitas UZRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335103', 'Muitas EKSPERTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335104', 'Muitas UZRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335105', 'Jaunākais muitas EKSPERTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335106', 'Jaunākais muitas UZRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3352', 'Valsts nodokļu inspektori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335201', 'Galvenais nodokļu INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335202', 'Vecākais nodokļu INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335203', 'Galvenais INSPEKTORS (nodokļu administrēšanas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3353', 'Valsts sociālās apdrošināšanas speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335301', 'Pabalstu INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335302', 'Pensiju INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335303', 'Pensiju un pabalstu INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3354', 'Valsts licencēšanas speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335401', 'Licenču INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335402', 'PATENTVEDIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335403', 'Imigrācijas INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335404', 'Licencēšanas EKSPERTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3355', 'Iekšlietu inspektori un izmeklētāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335501', 'Policijas INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335502', 'Vecākais IZMEKLĒTĀJS (nodokļu administrēšanas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335503', 'IZMEKLĒTĀJS (nodokļu administrēšanas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335504', 'Jaunākais IZMEKLĒTĀJS (nodokļu administrēšanas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335505', 'Vecākais INSPEKTORS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335506', 'Vecākais INSPEKTORS - posteņa KOMANDIERIS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335507', 'Valsts robežsardzes INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335508', 'Pašvaldības policijas vecākais INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335509', 'Valsts robežsardzes vecākais VIRSNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335510', 'Sevišķi svarīgu lietu INSPEKTORS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335511', 'Vecākais iecirkņa INSPEKTORS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335512', 'Sevišķi svarīgu uzdevumu INSPEKTORS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335513', 'INSPEKTORS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335514', 'Pašvaldības policijas INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335515', 'INSPEKTORS – KRIMINĀLISTS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335516', 'INSPEKTORS – SAPIERIS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335517', 'INSPEKTORS – SNAIPERIS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335518', 'INSPEKTORS –KINOLOGS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335519', 'DežūrINSPEKTORS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335520', 'DežūrINSPEKTORS - vada KOMANDIERIS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335521', 'Iecirkņa INSPEKTORS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335522', 'Ceļu policijas INSPEKTORS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335523', 'Administratīvās prakses INSPEKTORS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335524', 'INSPEKTORS –DEŽURANTS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335525', 'INSPEKTORS (KINOLOGS – SAPIERIS) (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335526', 'Pašvaldības policijas civilās aizsardzības vecākais SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335527', 'Pašvaldības policijas civilās aizsardzības SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335528', 'Valsts robežsardzes jaunākais VIRSNIEKS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335529', 'Jaunākais INSPEKTORS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335530', 'Jaunākais INSPEKTORS – SAPIERIS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335531', 'Jaunākais INSPEKTORS – KINOLOGS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335532', 'Pašvaldības policijas jaunākais INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335533', 'Pašvaldības policijas vecākais KĀRTĪBNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335534', 'Pašvaldības policijas KĀRTĪBNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335535', 'KĀRTĪBNIEKS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335536', 'Jaunākais KĀRTĪBNIEKS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335537', 'Pašvaldības policijas jaunākais KĀRTĪBNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335538', 'Koledžas KADETS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3359', 'Citur neklasificēti valsts varas īstenošanas speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335901', 'Cenu INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335902', 'Algu INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('335903', 'Svaru un mēru INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('34', 'Juridisko, sociālo un kultūras lietu un tām radniecīgu lietu speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('341', 'Juridisko, sociālo un reliģijas lietu speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3411', 'Juristi un tiem radniecīgu profesiju speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('341101', 'PROKURORA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('341102', 'JURISTA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('341103', 'TIESNEŠA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('341104', 'Tiesas KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('341105', 'Tiesas PRIEKŠSĒDĒTĀJA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('341106', 'Tiesu kolēģijas PRIEKŠSĒDĒTĀJA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('341107', 'SENATORA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('341108', 'Tiesu EKSPERTA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('341109', 'JURISTS LINGVISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('341110', 'KONSULTANTS (zemesgrāmatu nodaļā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3412', 'Sociālā darba speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('341201', 'Sociālais APRŪPĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('341202', 'Sociālais REHABILITĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('341203', 'Sociālās palīdzības ORGANIZATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('341204', 'SurdoTULKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('341205', 'Latviešu nedzirdīgo zīmju valodas TULKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('341206', 'Bāriņtiesas LOCEKLIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('341207', 'Bāriņtiesas LOCEKĻA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('341208', 'Bāriņtiesas struktūrvienības VADĪTĀJA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('341209', 'Interešu pulciņa AUDZINĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3413', 'Reliģisko lietu speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('341301', 'Pestīšanas armijas DARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('341302', 'EVAŅĢĒLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('341303', 'ĶESTERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('341304', 'MŪKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('341305', 'MŪĶENE', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('341306', 'SLUDINĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('341307', 'Pastorālā darba SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('342', 'Sporta un fiziskās sagatavotības speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3421', 'Individuālo un komandu sporta veidu sportisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('342101', 'ATLĒTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('342102', 'Sacīkšu BRAUCĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('342103', 'ŽOKEJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('342104', 'Profesionāls SPORTISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('342105', 'ALPĪNISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3422', 'Sporta treneri, sporta instruktori un sporta speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('342201', 'Sporta INSTRUKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('342202', 'Sporta TIESNESIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('342203', 'Sporta TRENERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('342204', 'Sporta METODIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('342205', 'Sporta SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3423', 'Fiziskās sagatavotības instruktori un sporta pasākumu organizatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('342301', 'Vingrošanas nodarbību INSTRUKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('342302', 'Trenažieru zāles INSTRUKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('342303', 'Sporta pasākumu ORGANIZATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('342304', 'Sporta spēļu VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343', 'Mākslas, kultūras un kulinārijas speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3431', 'Fotogrāfi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343101', 'MikroFOTOGRĀFS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343102', 'Mākslas FOTOGRĀFS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3432', 'Dizaina speciālisti un dekoratori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343201', 'DEKORĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343202', 'Izstādes DEKORĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343203', 'Skatlogu DEKORĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343204', 'Dizaina SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343205', 'Juvelierizstrādājumu dizaina SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343206', 'Iesaiņojuma dizaina SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343207', 'Plakātu dizaina SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343208', 'Audumu dizaina SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343209', 'ILUSTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343210', 'Teātra DEKORĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343211', 'Noformēšanas MĀKSLINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343212', 'Mākslas pasākumu ORGANIZATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343213', 'Augu valsts dizaina SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343214', 'Apģērbu dizaina SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343215', 'Ādas izstrādājumu dizaina SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343216', 'Keramikas izstrādājumu dizaina SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343217', 'Koka izstrādājumu dizaina SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343218', 'Metāla izstrādājumu dizaina SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343219', 'Stikla izstrādājumu dizaina SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343220', 'Tekstilizstrādājumu dizaina SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343221', 'Interjera un reklāmas dizaina SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343222', 'Ādas izstrādājumu MODELĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343223', 'Tekstilizstrādājumu MODELĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343224', 'Rokdarbu MODELĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343225', 'Dekoratīvo objektu TĒLNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343226', 'Lietišķās mākslas izstrādājumu MODELĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343227', 'Vides DIZAINERS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343228', 'Apģērbu modelēšanas un konstruēšanas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343229', 'Tērpu stila SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343230', 'Interjera NOFORMĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343231', 'Vizuālās reklāmas NOFORMĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343232', 'Produkta dizaina SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343233', 'Vizuālās reklāmas dizaina SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343234', 'Interjera dizaina SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343235', 'Multimediju dizaina SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343236', 'Mēbeļu dizaina SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343237', 'Ādas materiālu dizaina SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343238', 'Keramikas dizaina SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343239', 'Koksnes materiālu dizaina SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343240', 'Stikla dizaina SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343241', 'Tekstilmateriālu dizaina SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343242', 'Metālmateriālu dizaina SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343243', 'Materiālu dizaina SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343244', 'Stila mēbeļu MODELĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343245', 'Dāvanu NOFORMĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343246', 'Skatlogu NOFORMĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343247', 'Foto dizaina SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343248', 'Tēlniecības objektu dizaina SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343249', 'Apģērbu MODELĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343250', 'Iespieddarbu noformējuma SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3433', 'Galeriju, muzeju un bibliotēku speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343301', 'BIBLIOTEKĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343302', 'Bibliotēku informācijas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343303', 'Izglītības iestādes BIBLIOTEKĀRS (ceturtā un trešā līmeņa kvalifikācija)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3434', 'Šefpavāri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343401', 'ŠEFPAVĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3435', 'Citi mākslas un kultūras speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343501', 'Monumentālo gleznu RESTAURATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343502', 'Stājgleznu RESTAURATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343503', 'Monumentāli dekoratīvās tēlniecības objektu RESTAURATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343504', 'Grafikas RESTAURATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343505', 'Rokrakstu, dokumentu, grāmatu RESTAURATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343506', 'Polihroma koka, zeltījumu RESTAURATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343507', 'Mēbeļu, kokgriezumu RESTAURATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343508', 'Keramikas, stikla izstrādājumu RESTAURATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343509', 'Tekstiliju RESTAURATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343510', 'Ādas, pergamenta izstrādājumu RESTAURATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343511', 'Metāla izstrādājumu RESTAURATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343512', 'Foto un kino materiālu RESTAURATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343513', 'Koka būvju RESTAURATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343514', 'Akmens būvju RESTAURATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343515', 'Arheoloģiskā materiāla RESTAURATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343516', 'RESTAURATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343517', 'ZELTĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343518', 'RESTAURATORA ASISTENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343519', 'Kultūras METODIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343520', 'Kultūras pasākumu ORGANIZATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343521', 'Kultūras pasākumu VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343522', 'Svētku REŽISORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343523', 'Kultūras VADĪTĀJS (MENEDŽERIS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343524', 'Kultūras tūrisma GIDS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343525', 'Kultūras tūrisma ORGANIZATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343526', 'Lauku tūrisma SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343527', 'Ekotūrisma SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('343528', 'Interešu pulciņa VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('35', 'Informācijas tehnoloģiju jomas speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('351', 'Informācijas tehnoloģiju darbības un lietotāju atbalsta speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3511', 'Informācijas tehnoloģiju darbības speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('351101', 'Skaitļotāja OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('351102', 'Perifērijas iekārtu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('351103', 'Datora OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('351104', 's.w.i.f.t. OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('351105', 'Mijieskaita norēķinu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('351106', 's.w.i.f.t. ADMINISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3512', 'Informācijas tehnoloģiju lietotāju atbalsta speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('351201', 'DatorTEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('351202', 'Datu bāzu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('351203', 'Programmēšanas TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('351204', 'Informācijas vadības SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3513', 'Datortīklu un datorsistēmu speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('351301', 'Datorsistēmu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('351302', 'Operāciju sistēmu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('351304', 'Informācijas sistēmu kvalitātes KONTROLIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('351305', 'Informācijas sistēmu drošības KONTROLIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('351306', 'Informācijas sistēmu drošības ADMINISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('351307', 'Datorsistēmu TESTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3514', 'Tīklu speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('351401', 'Informācijas tīkla PĀRZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('351402', 'Datortīkla ADMINISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('351403', 'Mājas lapas ADMINISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352', 'Telekomunikāciju un radiosakaru iekārtu speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3521', 'Radiosakaru un audiovizuālās jomas speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352101', 'Radio (elektronikas) TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352102', 'Radioiekārtas vecākais TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352103', 'KinoOPERATORA ASISTENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352104', 'KinoOPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352105', 'Audio iekārtu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352106', 'Kinofilmu /skaņu REDAKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352107', 'Televīzijas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352108', 'Ieskaņošanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352109', 'Mikrofona OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352110', 'Ierakstīšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352111', 'Skaņu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352112', 'Kuģa RADISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352113', 'Pārraides iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352114', 'Studijas tehniskās iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352115', 'Morzes alfabēta OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352116', 'Aviācijas /radioiekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352117', 'Sauszemes /radioiekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352118', 'Jūras /radioiekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352119', 'Telegrāfa OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352120', 'KinoPROJICĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352121', 'TELEGRĀFISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352122', 'Kuģa radioOPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352123', 'GMDSS (globālās jūras negadījumu un drošības sakaru sistēma) universālais OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352124', 'GMDSS (globālās jūras negadījumu un drošības sakaru sistēma) ierobežotais OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352125', 'Kultūras pasākumu tehniskais REŽISORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352126', 'VideoOPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352127', 'Audio un video TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('3522', 'Telekomunikāciju tehniskās attīstības speciālisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352201', 'Telekomunikāciju TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352202', 'Aerokosmisko telekomunikāciju (elektronikas) TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352203', 'Radara telekomunikāciju (elektronikas) TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352204', 'Signālsistēmu telekomunikāciju (elektronikas) TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352205', 'Telekomunikāciju SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352206', 'Tālsakaru OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352207', 'GMDSS (globālās jūras negadījumu un drošības sakaru sistēma) I klases radioELEKTRONIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('352208', 'GMDSS (globālās jūras negadījumu un drošības sakaru sistēma) II klases radioELEKTRONIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4', 'Kalpotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('41', 'Iestāžu kalpotāji un kancelejas tehnikas operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('411', 'Iestāžu kalpotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4110', 'Iestāžu kalpotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('411001', 'Vadošais biroja SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('412', 'Sekretāri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4120', 'Sekretāri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('412001', 'SEKRETĀRS', 0, 1);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('412002', 'Tehniskais SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('412003', 'Lietvedības SEKRETĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('413', 'Kancelejas tehnikas operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4131', 'Mašīnrakstītāji un dokumentu sagatavošanas darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('413101', 'MAŠĪNRAKSTĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('413102', 'STENOGRĀFS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('413103', 'Telefaksa OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('413104', 'Teleksa OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('413105', 'Teletaipa OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('413106', 'Datu ievades OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('413107', 'Teksta redaktora OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('413108', 'Tehniskais un datu apstrādes OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4132', 'Datu ievadīšanas operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('413201', 'Informācijas ievadīšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('413202', 'Elektroniskā pasta OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('413203', 'Pārkodēšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('413204', 'Signalizācijas pults OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('413205', 'Energosistēmas vadības pults OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('413206', 'Teksta MAKETĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('413207', 'Uzskaites OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('413208', 'Kalkulatoru OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('413209', 'Summatoru OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('413210', 'Dokumentu personalizācijas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('42', 'Klientu apkalpotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('421', 'Kasieri un tiem radniecīgu profesiju darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4211', 'Bankas kasieri un tiem radniecīgu profesiju darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('421101', 'Bankas KASIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('421102', 'Naudas MAINĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('421103', 'Pastmarku PĀRDEVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('421104', 'Valūtas KASIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('421105', 'KontrolKASIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('421106', 'Naudas SADALĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('421107', 'Naudas APSTRĀDĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('421108', 'Kases kontu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('421109', 'Galvenais KASIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('421110', 'Kases VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('421111', 'Pasta OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('421112', 'Bankas INKASENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('421113', 'Naudas izmaksas KASIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('421114', 'Veikala KASIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('421115', 'Bagāžas KASIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('421116', 'Preču KASIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('421117', 'Lietvedības INSPEKTORS KASIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('421118', 'KASIERIS OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4212', 'Bukmeikeri, krupjē un tiem radniecīgu profesiju spēļu industrijas darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('421201', 'BUKMEIKERS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('421202', 'KRUPJĒ', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('421203', 'Totalizatora BUKMEIKERS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('421204', 'Spēļu iekārtu PĀRRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('421205', 'Bingo kartīšu PĀRDEVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4213', 'Lombardu darbinieki un augļotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('421301', 'AUGĻOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('421302', 'NOVĒRTĒTĀJS (lombardos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4214', 'Parādu piedzinēji un tiem radniecīgu profesiju darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('421401', 'Parāda PIEDZINĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('421402', 'Ziedojumu VĀCĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('422', 'Klientu informētāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4221', 'Ceļojumu konsultanti un ceļojumu biroju darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('422101', 'Ceļojumu KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('422102', 'Ceļojumu ORGANIZATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('422103', 'Tūrisma informācijas KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('422104', 'Ceļojumu AĢENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4222', 'Apmeklētāju pieņemšanas un informēšanas darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('422201', 'PASZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('422202', 'Izziņu SNIEDZĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('422203', 'INFORMĒTĀJS (transportā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('422204', 'Klientu apkalpošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('422205', 'Telefona informācijas dienesta KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('422206', 'Telefonbankas KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('422207', 'Klientu apkalpošanas SPECIĀLISTS', 0, 0);


COMMIT WORK;

INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4223', 'Telefona komutatoru operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('422301', 'Telefona komutatora OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('422302', 'TELEFONISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('422303', 'Abonentu daļas OPERATORS (konsultants)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4224', 'Viesnīcu administratori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('422401', 'Viesu uzņemšanas ORGANIZATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('422402', 'Viesnīcas ADMINISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('422403', 'Viesnīcas klientu REĢISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4225', 'Uzziņu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('422501', 'Uzziņu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4226', 'Reģistratori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('422601', 'Klientu un pacientu REĢISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('422602', 'REĢISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4227', 'Aptauju un tirgus pētījumu intervētāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('422701', 'INTERVĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4229', 'Citur neklasificēti klientu informēšanas darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('422901', 'Ārstniecības pakalpojumu informēšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('43', 'Uzskaites un materiālo vērtību reģistrēšanas darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('431', 'Uzskaites darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4311', 'Uzskaites un grāmatvedības darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('431101', 'GRĀMATVEDIS (trešā līmeņa kvalifikācija)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('431102', 'KASIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('431103', 'Grāmatvedības UZSKAITVEDIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('431104', 'Pašizmaksas RĒĶINĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('431105', 'Remontdarbu DISPEČERS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('431106', 'Nodokļu (nodevu) ADMINISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('431107', 'RĒĶINVEDIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('431108', 'TĀMĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('431109', 'INVENTARIZATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4312', 'Statistikas, finanšu un apdrošināšanas darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('431201', 'TAKSĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('431202', 'Statistikas un finanšu UZSKAITVEDIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('431203', 'Apdrošināšanas DARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4313', 'Algu aprēķināšanas darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('431301', 'Algu GRĀMATVEDIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432', 'Materiālo vērtību un transporta darbības uzskaites darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4321', 'Noliktavu darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432101', 'Noliktavu EKSPEDITORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432102', 'MANTZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432103', 'Noliktavas PĀRZINIS', 0, 1);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432104', 'SVĒRĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432105', 'Kravas NOFORMĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432106', 'PREČZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432107', 'Produkcijas (preces) PIEŅĒMĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432108', 'Noliktavas DARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432109', 'Komplektēšanas KONTROLIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432110', 'Maiņas VECĀKAIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432111', 'Taras PĀRZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432112', 'Atgrieztās produkcijas UZSKAITVEDIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4322', 'Ražošanas uzskaites darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432201', 'Materiālu PLĀNOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432202', 'Ražošanas PLĀNOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432203', 'Ražošanas DISPEČERS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432204', 'Darbu RĪKOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432205', 'Ražošanas KONTROLIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432206', 'Galvenais saimniecības PĀRZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432207', 'Vecākais saimniecības PĀRZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432208', 'Degvielas UZSKAITVEDIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432209', 'Dzērienu ražošanas BRIGADIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4323', 'Transporta uzskaites darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432301', 'Transporta DISPEČERS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432302', 'Galvenais transporta INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432303', 'Transporta INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432304', 'Transporta KONTROLIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432305', 'Transporta biroja PĀRVALDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432306', 'Dzelzceļa pārvadājumu un kustības ORGANIZATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432307', 'Maršruta PĀRRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432308', 'Transportlīdzekļu manevru PĀRRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432309', 'Transportlīdzekļu PIEŅĒMĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432310', 'Kravas PIEŅĒMĒJS NOSŪTĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432311', 'Ātrummērīšanas lenšu NOLASĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432312', 'Stacijas DEŽURANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432313', 'Transportlīdzekļu REĢISTRĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432314', 'Līnijas dzelzceļa stacijas PRIEKŠNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432315', 'Dzelzceļa DISPEČERS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432316', 'Dzelzceļa depo DEŽURANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432317', 'Transporta grafika ANALĪTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432318', 'Lokomotīvju NORĪKOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432319', 'Autoremonta darbnīcas VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432320', 'Dzelzceļa DISPEČERA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432321', 'Dzelzceļa OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432322', 'Dzelzceļa OPERATORA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432323', 'Dzelzceļa DEŽURANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432324', 'Dzelzceļa DEŽURANTA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432325', 'Pasažieru vilciena KONTROLIERIS (revidents)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432326', 'Transporta PĀRRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432327', 'Videonovērošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432328', 'Kravas pārkraušanas darbu ORGANIZATORS ostā', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432329', 'TĀLMANIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432330', 'Kuģu AĢENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432331', 'BRIGADIERIS (ostās)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('432332', 'Ostas UZRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('44', 'Citi kalpotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('441', 'Citi kalpotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4411', 'Bibliotēku darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('441101', 'REĢISTRĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('441102', 'Bibliotēku LIETVEDIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('441103', 'Kopēšanas mašīnu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4412', 'Pasta piegādes un šķirošanas darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('441201', 'Pasta NOSŪTĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('441202', 'Pasta KURJERS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('441203', 'PASTNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('441204', 'Tiesas ZIŅNESIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('441205', 'Pasta ŠĶIROTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('441206', 'Pasta DARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4413', 'Informācijas kodētāji, korektori un tiem radniecīgu profesiju darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('441301', 'Informācijas KODĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('441302', 'Informācijas KOREKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('441303', 'Dokumentu ZĪMOGOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('441304', 'Dokumentu ŠĶIROTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4414', 'Rakstveži un tiem radniecīgu profesiju darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('441401', 'RAKSTVEDIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4415', 'Arhivēšanas un kopēšanas darbu darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('441501', 'ARHIVĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('441502', 'KOPĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4416', 'Personāla uzskaites darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('441601', 'Personāla uzskaites DARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('4419', 'Citur neklasificēti kalpotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('441901', 'TABEĻVEDIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('441902', 'UZSKAITVEDIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5', 'Pakalpojumu un tirdzniecības darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('51', 'Individuālo pakalpojumu jomas darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('511', 'Ceļojumu pavadoņi, konduktori un gidi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5111', 'Ceļojumu pavadoņi un stjuarti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('511101', 'Lidostas pasažieru apkalpošanas AĢENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('511102', 'Ielidošanas servisa  AĢENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('511103', 'Vilciena PAVADONIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('511104', 'Kuģa vecākais STJUARTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('511105', 'Kuģa STJUARTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('511106', 'Gaisa kuģa STJUARTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('511107', 'Vagonu PAVADONIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('511108', 'Dienesta vagona PAVADONIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5112', 'Transporta konduktori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('511201', 'Autobusa KONDUKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('511202', 'Pārceltuves KONDUKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('511203', 'Tramvaja KONDUKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('511204', 'Trošu vagona KONDUKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('511205', 'Pasažieru vilciena KONDUKTORS (kontrolieris)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5113', 'Ceļojumu gidi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('511301', 'Tūristu grupas VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('511302', 'Ekskursiju GIDS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('511303', 'Tūrisma GIDS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('512', 'Pavāri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5120', 'Pavāri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('512001', 'Vecākais PAVĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('512002', 'PAVĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('512003', 'Kuģa PAVĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('513', 'Viesmīļi un bārmeņi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5131', 'Viesmīļi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('513101', 'VIESMĪLIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('513102', 'Bistro pakalpojumu DARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('513103', 'Bufetes KALPOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5132', 'Bārmeņi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('513201', 'Vecākais BĀRMENIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('513202', 'BĀRMENIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('513203', 'Minibāru PĀRZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('513204', 'Kafijas dzērienu BĀRMENIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('514', 'Frizieri, skaistumkopšanas darbinieki un tiem radniecīgu profesiju darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5141', 'Frizieri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('514101', 'FRIZIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('514102', 'Parūku MEISTARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('514103', 'Frizūru MODELĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('514104', 'Dāmu FRIZIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('514105', 'Kungu FRIZIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('514106', 'Suņu FRIZIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('514107', 'FRIZIERIS -STILISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5142', 'Skaistumkopšanas un tai radniecīgu profesiju darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('514201', 'STILISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('514202', 'Vizuālā tēla STILISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('514203', 'ĢĒRBĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('514204', 'GRIMĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('514205', 'VIZĀŽISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('514206', 'ESTĒTISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('514207', 'Manikīra un pedikīra SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('514208', 'MANIKĪRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('514209', 'PEDIKĪRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('514210', 'Mikropigmentācijas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('514211', 'TETOVĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('514212', 'Dekoratīvās caurduršanas MEISTARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('514213', 'PIRTNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('514214', 'Pirts MEISTARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('514215', 'Pirts MEISTARA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515', 'Namu pārziņi un saimniecības vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5151', 'Uzkopšanas un saimniecības daļas vadītāji birojos, viesnīcās un citās iestādēs', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515101', 'ADMINISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515102', 'Nometnes PRIEKŠNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515103', 'Saimniecības VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515104', 'Teātra /galvenais ADMINISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515105', 'Virtuves VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515106', 'Sporta zāles PĀRZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515107', 'Atpūtas bāzes PĀRZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515108', 'Tiesas ADMINISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515109', 'Veļas mazgātavas VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515110', 'Mājas PĀRVALDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515111', 'Saimniecības pārzinis', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515112', 'Dienesta viesnīcas vadītājs', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515113', 'Viesu uzņemšanas dienesta SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515114', 'Viesmīlības pakalpojumu SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515115', 'Viesnīcu pakalpojumu SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515116', 'Restorānu pakalpojumu SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515117', 'Ēdināšanas pakalpojumu SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515118', 'Zāles ADMINISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515119', 'Uzkopšanas darba VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515120', 'Kapsētas PĀRZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515121', 'Kapsētas PĀRZIŅA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515122', 'SPA ADMINISTRATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515123', 'Viesnīcas stāva PĀRZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515124', 'VĪNZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5152', 'Saimniecības vadītāji mājsaimniecībās', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515201', 'EKONOMS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515202', 'MĀJSAIMNIECE', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5153', 'Namu apsaimniekotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515301', 'Namu PĀRZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515302', 'Ēku un apsaimniekojamās teritorijas PĀRZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515303', 'Namu APSAIMNIEKOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('515304', 'Uzkopšanas darbu MEISTARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('516', 'Citi individuālo pakalpojumu jomas darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5161', 'Astrologi, zīlnieki un tiem radniecīgu profesiju darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('516101', 'ASTROLOGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('516102', 'HIROMANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('516103', 'OKULTISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('516104', 'ZĪLNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('516105', 'EKSTRASENSS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('516106', 'BIOENERĢĒTIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5162', 'Pavadoņi un sulaiņi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('516201', 'PAVADONIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('516202', 'ASISTENTS personām ar invaliditāti', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('516203', 'ASISTENTS personām ar dzirdes traucējumiem', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5163', 'Apbedīšanas pakalpojumu darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('516301', 'BALZAMĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('516302', 'IEZĀRKOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('516303', 'KAPRACIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('516304', 'Apbedīšanas pakalpojumu SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('516305', 'Sēru ceremoniju MĀKSLINIEKS (vadītājs)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5164', 'Mājdzīvnieku kopēji un dzīvnieku aprūpes darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('516401', 'Zirgu TRENERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('516402', 'Suņu PAVADONIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('516403', 'Zooloģiskā dārza UZRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('516404', 'Zooloģiskā dārza STRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('516405', 'Dzīvnieku rezervāta UZRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('516406', 'Suņu audzētavas UZRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('516407', 'Vivārija dzīvnieku KOPĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('516408', 'Suņu un kaķu KOPĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5165', 'Braukšanas apmācības instruktori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('516501', 'Autovadīšanas INSTRUKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5169', 'Citur neklasificēti individuālo pakalpojumu jomas darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('516901', 'Kluba SAIMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('516902', 'PAVADONIS (izklaides pasākumos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('516903', 'Deju PARTNERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('52', 'Tirdzniecības darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('521', 'Ielu un tirgus pārdevēji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5211', 'Tirgus pārdevēji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('521101', 'Kioska PĀRDEVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('521102', 'Tirgus PĀRDEVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5212', 'Ielu tirgotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('521201', 'Preču /ielas PĀRDEVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('521202', 'Bufetes PĀRDEVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('522', 'Veikalu pārdevēji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5222', 'Vecākie pārdevēji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('522201', 'Vecākais PĀRDEVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('522202', 'Mazumtirdzniecības veikala VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('52223', 'Mazumtirdzniecības veikala VADĪTĀJA VIETNIEKS', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5223', 'Veikalu pārdevēji un pārdevēju palīgi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('522301', 'Mazumtirdzniecības veikala PĀRDEVĒJS', 0, 1);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('522302', 'Vairumtirdzniecības veikala PĀRDEVĒJS', 0, 1);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('522303', 'PĀRDEVĒJS KONSULTANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('522304', 'Mazumtirdzniecības AĢENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('522305', 'PĀRDEVĒJA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('522306', 'Nomas punkta DARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('522307', 'Tirdzniecības VEICINĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('523', 'Kasieri un biļešu pārdevēji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5230', 'Kasieri un biļešu pārdevēji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('523001', 'Biļešu kases KASIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('523002', 'Biļešu PĀRDEVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('524', 'Citi tirdzniecības darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5241', 'Tērpu demonstrētāji un citi modeļi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('524101', 'Mākslas MODELIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('524102', 'Reklāmas MODELIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('524103', 'Tērpu DEMONSTRĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5242', 'Preču demonstrētāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('524201', 'Preču DEMONSTRĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5243', 'Komivojažieri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('524301', 'KOMIVOJAŽIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5244', 'Pārdevēji pa elektroniskiem saziņas līdzekļiem', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('524401', 'Pasūtījumu pieņemšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5245', 'Pārdevēji degvielas uzpildes stacijā', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('524501', 'Degvielas uzpildes stacijas PĀRDEVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('524502', 'Degvielas uzpildes stacijas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5246', 'Ēdināšanas uzņēmuma kasieri-pārdevēji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('524601', 'Ēdināšanas uzņēmuma KASIERIS-PĀRDEVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('53', 'Individuālās aprūpes darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('531', 'Bērnu pieskatītāji un skolotāju palīgi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5311', 'Bērnu aprūpes darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('531101', 'AUKLIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('531102', 'GUVERNANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('531103', 'Skolēnu PAVADONIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('531104', 'Bērnu aprūpes un audzināšanas iestādes AUDZINĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('531105', 'Bērnu APRŪPĒTĀJS (diennakts)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('531106', 'Sociālais AUDZINĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5312', 'Skolotāju palīgi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('531201', 'SKOLOTĀJA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('532', 'Individuālās aprūpes darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5321', 'Sanitāri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('532101', 'SANITĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('532102', 'Neatliekamās palīdzības SANITĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('532103', 'MĀSAS PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('532104', 'Sterilizācijas tehniskais DARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5322', 'Individuālās mājaprūpes darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('532201', 'Slimu bērnu AUKLIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('532202', 'APRŪPĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5329', 'Citur neklasificēti individuālās aprūpes darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('532901', 'FARMACEITA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('54', 'Apsardzes pakalpojumu jomas darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541', 'Apsardzes pakalpojumu jomas darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5411', 'Ugunsdzēsēji un glābēji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541101', 'UGUNSDZĒSĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541102', 'Meža UGUNSDZĒSĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541103', 'GLĀBĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541104', 'UGUNSDZĒSĒJS GLĀBĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541105', 'Meža ugunsnovērošanas torņa DEŽURANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541106', 'Operatīvais DEŽURANTS (Valsts meža dienestā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541108', 'Ugunsdzēsības un glābšanas dienesta UGUNSDZĒSĒJS GLĀBĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541109', 'GLĀBĒJS ŪDENSLĪDĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541110', 'KĀRTĪBNIEKS GLĀBĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541111', 'GLĀBĒJS MOTORISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541112', 'Ugunsdzēsības un glābšanas dienesta UGUNSDZĒSĒJS GLĀBĒJS (autovadītājs)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5412', 'Policisti', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541201', 'Sabiedriskās kārtības SARGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5413', 'Ieslodzījuma vietu apsardzes un uzraudzības darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541301', 'Vecākais INSPEKTORS (apcietinājuma un brīvības atņemšanas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541302', 'Ieslodzījuma vietas vecākais INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541303', 'INSPEKTORS (apcietinājuma un brīvības atņemšanas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541304', 'Ieslodzījuma vietas INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541305', 'Mācību centra INSPEKTORS (apcietinājuma un brīvības atņemšanas jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541306', 'Ieslodzījuma vietu pārvaldes centrālā aparāta jaunākais INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541307', 'Ieslodzījuma vietas vecākais UZRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541308', 'Ieslodzījuma vietas UZRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541309', 'Ieslodzījuma vietas vecākais APSARGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541310', 'Ieslodzījuma vietas APSARGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541311', 'Ieslodzījuma vietas jaunākais INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5414', 'Apsardzes darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541401', 'Apsardzes dienesta VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541402', 'Apsardzes dienesta VADĪTĀJA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541403', 'Apsardzes ORGANIZATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541404', 'APSARGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541405', 'Apsardzes DARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541406', 'Apsardzes pults DEŽURANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541407', 'Apsardzes galvenais INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541408', 'Apsardzes INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541409', 'Apsardzes DISPEČERS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541410', 'Apsardzes DEŽURANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541411', 'Apsardzes dienesta KONTROLIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541412', 'Dzelzceļa apsardzes grupas VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541413', 'Dzelzceļa apsardzes grupas VADĪTĀJA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541414', 'Dzelzceļa sardzes PRIEKŠNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541415', 'Dzelzceļa apsardzes grupas INSTRUKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541416', 'Dzelzceļa apbruņots SARGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541418', 'MIESASSARGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541419', 'PATRUĻNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541420', 'Videonovērošanas iekārtu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541421', 'DISPEČERS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541422', 'Centralizētā apsardzes punkta DEŽURANTS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541423', 'INKASENTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541424', 'Inkasācijas DISPEČERS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541425', 'Inkasācijas dienesta VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541426', 'Inkasācijas dienesta VADĪTĀJA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('5419', 'Citur neklasificēti apsardzes pakalpojumu jomas darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541901', 'Drošības SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541902', 'Lidostas aviodrošības dienesta DARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541903', 'Drošības dienesta VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541904', 'Drošības dienesta VADĪTĀJA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541905', 'Drošības dienesta SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541906', 'Civilās aviācijas drošības uzraudzības SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541907', 'Bruņojuma un sakaru galvenais SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541908', 'Galvenais dežūrINSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541909', 'MEŽSARGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541910', 'Rezervāta UZRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541911', 'DEŽURANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541912', 'Eksponātu UZRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541913', 'Caurlaižu INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541914', 'Režīma UZRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541915', 'Drošības galvenais INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541916', 'Drošības INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541917', 'Bruņojuma INSPEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541918', 'Bākas UZRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541919', 'DETEKTĪVS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541920', 'Kuģošanas kompānijas aizsardzības VIRSNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541921', 'Kuģa aizsardzības VIRSNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541922', 'Ostas aizsardzības VIRSNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541923', 'Ostas aizsardzības VIRSNIEKA VIETNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('541924', 'Ostas iekārtas aizsardzības VIRSNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('6', 'Kvalificēti lauksaimniecības, mežsaimniecības un zivsaimniecības darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('61', 'Kvalificēti tirgus lauksaimniecības darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611', 'Kultūraugu audzētāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('6111', 'Labības un sakņaugu audzētāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611101', 'Graudaugu audzēšanas laukSAIMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611102', 'Linu audzēšanas laukSAIMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611103', 'Dārzeņu audzēšanas laukSAIMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611104', 'Cukurbiešu audzēšanas laukSAIMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611105', 'Kartupeļu audzēšanas laukSAIMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611106', 'Graudaugu audzēšanas laukSTRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611107', 'Linu audzēšanas laukSTRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611108', 'Dārzeņu audzēšanas laukSTRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611109', 'Cukurbiešu audzēšanas laukSTRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611110', 'Kartupeļu audzēšanas laukSTRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('6112', 'Koku un krūmu audzētāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611201', 'Augļu koku APGRIEZĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611202', 'Kokaudzētavas SAIMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611203', 'Augļu koku POTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611204', 'Augļu audzēšanas laukSAIMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611205', 'Krūmu kultūru audzēšanas laukSAIMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611206', 'Apiņu audzēšanas laukSAIMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611207', 'Augļu audzēšanas laukSTRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611208', 'Krūmu kultūru audzēšanas laukSTRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611209', 'Apiņu audzēšanas laukSTRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('6113', 'Dārznieki, dārza kultūru un stādu audzētāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611301', 'DĀRZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611302', 'Dārzniecības LAUKKOPIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611303', 'Parka DĀRZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611304', 'Siltumnīcas DĀRZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611305', 'Sēklu audzēšanas DĀRZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611306', 'Puķu AUDZĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611307', 'Sēņu AUDZĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611308', 'DĀRZKOPIS (stādu audzētājs)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611309', 'Apstādījumu KOPĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611310', 'DaiļDĀRZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611311', 'KOKKOPIS (arborists)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611312', 'DĀRZKOPIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611313', 'AUGKOPIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('6114', 'Jauktu lauksaimniecības kultūru audzētāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611401', 'LaukSAIMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('611402', 'LaukSTRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612', 'Lopkopji un tiem radniecīgu profesiju darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('6121', 'Piena lopu un citu mājdzīvnieku audzētāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612101', 'LOPKOPIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612102', 'Mājdzīvnieku audzēšanas laukSAIMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612103', 'Liellopu audzēšanas laukSAIMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612104', 'Aitu CIRPĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612105', 'GANS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612106', 'Gaļas un ādu APSTRĀDĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612107', 'Mehanizētās slaukšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612108', 'Liellopu LOPKOPIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612109', 'CŪKKOPIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612110', 'AITKOPIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612111', 'Zirgaudzētavas laukSAIMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612112', 'Cūku audzēšanas laukSAIMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612113', 'Aitu audzēšanas laukSAIMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612114', 'Kažokādu mājdzīvnieku audzēšanas laukSAIMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612115', 'Suņu AUDZĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612116', 'Sporta zirgu TRENERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612117', 'Jaunlopu KOPĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612118', 'ZIRGKOPIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612119', 'Lauku STRĀDNIEKS (lopkopībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('6122', 'Mājputnu audzētāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612201', 'Mājputnu audzēšanas laukSAIMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612202', 'Mājputnu audzēšanas laukSTRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612203', 'Inkubatora OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612204', 'PUTNKOPIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612205', 'Olu ražošanas laukSAIMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612206', 'Spalvu ŠĶIROTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('6123', 'Biškopji un zīdtārpiņu audzētāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612301', 'BIŠKOPIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612302', 'DRAVNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('6129', 'Citur neklasificēti lopkopji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612901', 'Laboratorijas dzīvnieku AUDZĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612902', 'Savvaļas /putnu AUDZĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612903', 'Savvaļas /kažokādu dzīvnieku KOPĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612904', 'Savvaļas /kažokādu dzīvnieku audzēšanas laukSAIMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('612905', 'Dzīvnieku KĀVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('613', 'Jauktu lauksaimniecības kultūru audzētāji un lopkopji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('6130', 'Jauktu lauksaimniecības kultūru audzētāji un lopkopji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('613001', 'Dažādu sugu dzīvnieku LOPKOPIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('613002', 'Dažādu sugu dzīvnieku audzēšanas laukSAIMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('613003', 'Gliemežu AUDZĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('62', 'Kvalificēti tirgus mežsaimniecības, zivsaimniecības un medību saimniecības darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('621', 'Mežkopji un tiem radniecīgu profesiju darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('6210', 'Mežkopji un tiem radniecīgu profesiju darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('621001', 'Koku AIZZĪMĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('621002', 'Koku ATZAROTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('621003', 'Koku VEDĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('621004', 'MEŽCIRTĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('621005', 'MEŽSTRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('621006', 'PLOSTNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('621007', 'Koku PLUDINĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('621008', 'Malkas SKALDĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('621009', 'ZĀĢĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('621010', 'Plostu SĒJĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('621011', 'Meža STĀDĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('621012', 'Kokmateriālu MARĶĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('621013', 'Koku KRĀVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('621014', 'Koksnes ŠĶIROTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('621015', 'Zāģu SAGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('621016', 'Pašgājēja transporta līdzekļu VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('621017', 'Vinčas VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('621018', 'Treilēšanas un iekraušanas iekārtu MAŠĪNISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('621019', 'Automatizēto meža transportlīdzekļu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('621020', 'Motorzāģa OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('621021', 'ATSVEĶOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('621022', 'OGĻDEĢIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('621023', 'Kokmateriālu UZMĒRĪTĀJS', 0, 0);


COMMIT WORK;

INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('622', 'Zivsaimniecības darbinieki un mednieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('6221', 'Akvakultūras darbinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('622101', 'Zivsaimniecības ZIVKOPIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('622102', 'Akvakultūras ZIVKOPIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('622103', 'Zivsaimniecības SAIMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('622104', 'Zivju /inkubatora STRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('6222', 'Iekšējo ūdeņu un piekrastes zvejnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('622201', 'Saldūdens un piekrastes zivju APSTRĀDĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('622202', 'Iekšējo ūdeņu un piekrastes ZVEJNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('622203', 'ŠĶIPERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('622204', 'Iekšējo ūdeņu un piekrastes zvejniecības STRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('6223', 'Jūras, tāljūras zvejnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('622301', 'Zivju apstrādes OPERATORS (tāljūras zvejā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('622302', 'Jūras, tāljūras ZVEJNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('622303', 'Vecākais TRAĻMEISTARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('622304', 'TRAĻMEISTARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('622305', 'Zivju apstrādes iekārtu STRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('6224', 'Mednieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('622401', 'Medību DZINĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('622402', 'MEDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('63', 'Personiskā patēriņa lauksaimnieki, zvejnieki, mednieki un vācēji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('633', 'Personiskam patēriņam paredzētu jauktu lauksaimniecības kultūru audzētāji un lopkopji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('6330', 'Personiskam patēriņam paredzētu jauktu lauksaimniecības kultūru audzētāji un lopkopji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('633001', 'ZEMNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7', 'Kvalificēti strādnieki un amatnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('71', 'Būvnieki un tiem radniecīgu profesiju strādnieki (izņemot elektriķus)', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711', 'Būvnieki un tiem radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7111', 'Ēku būvnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711101', 'Ēku CELTNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711102', 'BŪVNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711103', 'Būvkonstrukciju MONTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711104', 'Sausās būves CELTNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7112', 'Mūrnieki un tiem radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711201', 'BRUĢĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711202', 'Krāšņu PODNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711203', 'MŪRNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711204', 'Akmeņu MŪRNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711205', 'Kausu ODERĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711206', 'Kamīnu LICĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711207', 'Kuģu katlu un krāšņu MŪRNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7113', 'Akmeņu mūrnieki un akmeņkaļi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711301', 'AKMEŅKALIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7114', 'Betonētāji un tiem radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711401', 'BETONĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711402', 'STIEGROTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7115', 'Namdari un būvgaldnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711501', 'NAMDARIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711502', 'Guļbūves ēku CELTNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711503', 'Koka ēku CELTNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711504', 'BūvGALDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711505', 'Skatuves MONTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711506', 'Skatuves MEISTARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711507', 'Sausās būves MONTIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7119', 'Citur neklasificēti būvnieki un tiem radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711901', 'Drenu LICĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711902', 'Sastatņu MONTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711903', 'BRIGADIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711904', 'Inženiertehnisko būvju BRIGADIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711905', 'Industriālais ALPĪNISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711906', 'Koka kuģu BŪVĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711907', 'Mākslīgo būvju būvSTRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711908', 'Mākslīgo būvju STRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711909', 'Cauruļvadu MONTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711910', 'Ārējo ūdens apgādes un kanalizācijas tīklu MONTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711911', 'Ārējo gāzes tīklu MONTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711912', 'Ārējo siltumapgādes tīklu MONTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711913', 'Ugunsdzēsības sistēmu MONTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('711914', 'Gāzes sistēmu MONTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('712', 'Apdares būvdarbu strādnieki un tiem radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7121', 'Jumiķi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('712101', 'JUMIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7122', 'Grīdu seguma klājēji un flīzētāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('712201', 'Grīdas KLĀJĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('712202', 'FLĪZĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('712203', 'Mozaīkas KLĀJĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('712204', 'Parketa KLĀJĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7123', 'Apmetēji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('712301', 'APMETĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('712302', 'Apdares darbu STRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('712303', 'Dekoratīvo būvelementu VEIDOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7124', 'Izolācijas darbu veicēji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('712401', 'Hidro un siltumIZOLĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('712402', 'Akustikas IZOLĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('712403', 'Ēku SILTINĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('712404', 'IZOLĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7125', 'Stiklinieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('712501', 'STIKLINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7126', 'Sanitārtehniķi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('712601', 'SANTEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('712602', 'Sanitārtehnisko iekārtu MONTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('712604', 'Apkures sistēmu MONTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('712605', 'Ūdens apgādes un kanalizācijas sistēmu MONTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7127', 'Gaisa kondicionēšanas un atdzesēšanas iekārtu mehāniķi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('712701', 'Kondicionēšanas un aukstumiekārtu sistēmu MONTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('712703', 'Aukstuma iekārtu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('712704', 'Vēdināšanas sistēmu MONTĒTĀJS ', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('712705', 'Kuģa saldēšanas iekārtu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('713', 'Krāsotāji, būvju konstrukciju tīrītāji un tiem radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7131', 'Krāsotāji un tiem radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('713101', 'KRĀSOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('713102', 'BALSINĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('713103', 'Tapešu LĪMĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7132', 'Apsmidzinātāji un lakotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('713201', 'Transportlīdzekļu KRĀSOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('713202', 'LAKOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('713203', 'TONĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7133', 'Būvju konstrukciju tīrītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('713301', 'Būvju TĪRĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('713302', 'Konstrukciju TĪRĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('713303', 'SKURSTEŅSLAUĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('72', 'Metālapstrādes, mašīnbūves un tām radniecīgu jomu strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721', 'Valcētāji, skārdnieki un metāla konstrukciju montētāji, metāllējēji, metinātāji un tiem radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7211', 'Metālliešanas veidņu izgatavotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721101', 'Veidņu IZGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721102', 'Serdeņu IZGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721103', 'Metāllējumu VEIDOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721104', 'Metāllējumu APCIRTĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721105', 'Metāllējumu IZSITĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7212', 'Metinātāji un griezēji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721201', 'GāzMETINĀTĀJS (OAW)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721202', 'LODĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721203', 'KontaktMETINĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721204', 'Rokas lokMETINĀTĀJS (MMA)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721205', 'LokMETINĀTĀJS metināšanā ar mehanizēto iekārtu aktīvās gāzes vidē (MAG)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721206', 'LokMETINĀTĀJS metināšanā ar mehanizēto iekārtu inertās gāzes vidē (MIG)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721207', 'LokMETINĀTĀJS metināšanā ar volframa elektrodu inertās gāzes vidē (TIG)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721208', 'LokMETINĀTĀJS metināšanā ar automātiskām iekārtām', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721209', 'LāzerMETINĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721210', 'TermoGRIEZĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721211', 'Plastmasas METINĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721212', 'Metālmateriālu METINĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721213', 'Dzelzceļa METINĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721214', 'Gāzes plazmas GRIEZĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7213', 'Valcētāji un skārdnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721301', 'Skārda VALCĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721302', 'SKĀRDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721303', 'Jumtu SKĀRDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721304', 'Skārda LIECĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721305', 'Transportlīdzekļu SKĀRDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721306', 'Automobiļu SKĀRDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7214', 'Metāla konstrukciju sagatavotāji un montētāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721401', 'Metāla konstrukciju ATSLĒDZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721402', 'Kuģubūves ATSLĒDZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721403', 'Kuģu remontATSLĒDZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721404', 'KNIEDĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721405', 'Metāla GRIEZĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721406', 'AIZZĪMĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721407', 'Kuģu cauruļu ATSLĒDZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7215', 'Takelētāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721501', 'TAKELĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721502', 'Kuģu TAKELĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('721503', 'Trošu VIJĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722', 'Kalēji, instrumentu izgatavotāji un tiem radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7221', 'Kalēji un presētāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722101', 'KALĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722102', 'Metāla ŠTANCĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722103', 'Metāla PRESĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722104', 'VELMĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722105', 'ATSPEROTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722106', 'TERMISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722107', 'METĀLLĒJĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722108', 'VARKALIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7222', 'Instrumentatslēdznieki un tiem radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722201', 'ATSLĒDZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722202', 'Slēdzeņu ATSLĒDZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722203', 'Instrumentu ATSLĒDZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722204', 'Ieroču ATSLĒDZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7223', 'Metālapstrādes un citu darbgaldu strādnieki un operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722301', 'FRĒZĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722302', 'URBĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722303', 'VIRPOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722304', 'ĒVELĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722305', 'TĒSĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722306', 'Darbgaldu IESTATĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722307', 'MetālAPSTRĀDĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722308', 'Datorizētās ciparu vadības (CNC) metālapstrādes darbgaldu IESTATĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722309', 'BRIGADIERIS (dzelzceļā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722310', 'Sliežu ceļu BRIGADIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722311', 'Zemes klātnes uzturēšanas BRIGADIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722312', 'Zāģripu LABOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722313', 'Metālapstrādes tehnoloģisko līniju OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722314', 'Stiegrojuma ražošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722315', 'Ciparu vadības frēzēšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722316', 'Metāla gravēšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722317', 'Metāla griešanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722318', 'Kabeļu ražošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722319', 'Kniedēšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722320', 'Metāla liekšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722321', 'Štancēšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722322', 'Ciparu vadības virpošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722323', 'Metāla zāģēšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722324', 'Metālapstrādes darbgaldu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722325', 'Vītņu griešanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722326', 'Grātēšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722327', 'Lodēšanas iekārtu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722328', 'ELEKTROEROZISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722329', 'Atsperu tīšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722330', 'Erozijas mašīnas iekārtu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722331', 'Cauruļu liekšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722332', 'IZVIRPOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722333', 'Ražošanas BRIGADIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722334', 'Datorizētās ciparu vadības (CNC) metālapstrādes darbgaldu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7224', 'Metāla pulētāji, slīpētāji un instrumentu asinātāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722401', 'PULĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722402', 'Instrumentu ASINĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722403', 'SLĪPĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722404', 'SMIRĢELĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('722405', 'Metāla RŪDĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723', 'Mašīnu mehāniķi un remontatslēdznieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7231', 'Mehānisko transportlīdzekļu mehāniķi un remontatslēdznieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723101', 'Transporta MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723102', 'AutoMEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723103', 'Transportlīdzekļu dzinēju REGULĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723104', 'AutoATSLĒDZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723105', 'Ritošā sastāva ATSLĒDZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723106', 'Kuģu motoru MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723107', 'Sliežu ceļu /mašīnu un mehānismu REGULĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723108', 'AutoMEHĀNIĶA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723109', 'Refrižeratorsekciju MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723110', 'Transportlīdzekļu motoru MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723111', 'Kuģa ATSLĒDZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723112', 'Motociklu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723113', 'Kuģa armatūras REMONTATSLĒDZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723114', 'Dzelzceļa REMONTATSLĒDZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723115', 'Autovirsbūvju REMONTATSLĒDZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7232', 'Gaisa kuģu mehāniķi un remontatslēdznieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723201', 'Gaisa kuģa MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7233', 'Lauksaimniecības un rūpniecības mašīnu mehāniķi un remontatslēdznieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723301', 'MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723302', 'REMONTATSLĒDZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723303', 'Lauksaimniecības mašīnu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723304', 'Lauksaimniecības tehnikas REMONTATSLĒDZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723305', 'MONTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723306', 'EĻĻOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723307', 'Poligrāfisko iekārtu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723308', 'Celtniecības un ceļu būves mašīnu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723309', 'Celtniecības un ceļu būves mašīnu REMONTATSLĒDZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723310', 'Tekstilražošanas iekārtas MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723311', 'Siltumiekārtu REMONTATSLĒDZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723312', 'Siltumiekārtu apkalpošanas ATSLĒDZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723313', 'Gāzes iekārtu REMONTATSLĒDZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723314', 'MEISTARA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723315', 'Kokapstrādes iekārtu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723316', 'Metālapstrādes iekārtu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723317', 'Metālapstrādes iekārtu REMONTATSLĒDZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723318', 'Meža mašīnu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723319', 'Ķīmisko iekārtu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7234', 'Velosipēdu atslēdznieki un tiem radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('723402', 'Velosipēdu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('73', 'Amatnieki un iespieddarbu strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731', 'Amatnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7311', 'Precīzijas izstrādājumu izgatavotāji un labotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731101', 'PulksteņMEISTARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731102', 'Optikas ierīču MEISTARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731103', 'Instrumentu MEISTARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731104', 'Ortopēdijas instrumentu MEISTARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7312', 'Mūzikas instrumentu izgatavotāji un labotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731201', 'Stīgu instrumentu BŪVĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731202', 'Akordeonu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731203', 'Koka pūšamo instrumentu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731204', 'Metāla pūšamo instrumentu TEHNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731205', 'Klavieru BŪVĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731206', 'Ērģeļu BŪVĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731207', 'Mūzikas instrumentu SKAŅOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731208', 'Stīgu IZGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731209', 'Mūzikas instrumentu IZGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731210', 'Mūzikas instrumentu LABOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731211', 'Klavieru RESTAURĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731212', 'Vijoļu BŪVĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7313', 'Juvelieri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731301', 'JUVELIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731302', 'Juvelierizstrādājumu GRAVIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731303', 'SUDRABKALIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731304', 'ROTKALIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731305', 'Dārgmetālu KALĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731306', 'ZELTKALIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7314', 'Podnieki un tiem radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731401', 'PODNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731402', 'Māla PRESĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731403', 'KERAMIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7315', 'Stikla izstrādājumu izgatavotāji un apdarinātāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731501', 'Stikla PŪTĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731502', 'Stikla SLĪPĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7316', 'Dekoratīvie apgleznotāji, gravētāji un kodinātāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731601', 'Stikla GRAVIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731602', 'Stikla MATĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731603', 'APGLEZNOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731604', 'EMALJĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731605', 'DaiļKRĀSOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7317', 'Koka, pinumu un tiem radniecīgu materiālu mākslas priekšmetu izgatavotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731701', 'AMATNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731702', 'KokGRIEZĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731703', 'Koka māksliniecisko izstrādājumu IZGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731704', 'PINĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731705', 'MUCINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731706', 'RATNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731707', 'Akmens GRIEZĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731708', 'AKMEŅKALIS AMATNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731709', 'Kapu /akmens plākšņu IZGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7318', 'Tekstila, ādas un tām radniecīgu materiālu mākslas priekšmetu izgatavotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731801', 'Paklāju AUDĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731802', 'Ādas AMATNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731803', 'Apģērbu AMATNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731804', 'Tautas tērpu DARINĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731805', 'Ortopēdisko apavu IZGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731806', 'Dekoratīvo tekstiltehniku IZSTRĀDĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731807', 'Šķiedras mākslas izstrādājumu IZGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731808', 'Žalūziju IZGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731809', 'Pērlīšu izstrādājumu IZGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731810', 'Šķiedru KĀRSĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731811', 'Dzijas VĒRPĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731812', 'Šķiedru griezējs', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731813', 'Šķiedru CIRTĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731814', 'Šķiedru SMALCINĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731815', 'ADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731816', 'AUDĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731817', 'IESTATĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731818', 'TINĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731819', 'Spoļu TĪRĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731820', 'MEZGLOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731821', 'Mežģīņu DARINĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731822', 'KNIPELĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731823', 'TAMBORĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731824', 'Zvejas rīku IZGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731825', 'Ādas priekšmetu IZGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7319', 'Citur neklasificēti amatnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731901', 'FLORISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('731902', 'Floristikas SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('732', 'Iespieddarbu strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7321', 'Burtliči, iespiedgravētāji un tiem radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('732101', 'Iespieddarbu SALICĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('732102', 'Iespieddarbu MAKETĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('732104', 'Iespiedformu IZGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('732105', 'Reproiekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('732106', 'Lāzergravēšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('732107', 'BURTLICIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('732108', 'STEREOTIPISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('732109', 'GRAVIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7322', 'Iespiedēji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('732201', 'AUGSTSPIEDĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('732202', 'Ofseta IESPIEDĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('732203', 'Ofseta IESPIEDĒJA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('732204', 'FleksoIESPIEDĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('732205', 'SietSPIEDĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('732206', 'IESPIEDĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('732207', 'Iespiedmašīnas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('732208', 'Audumu /apdrukāšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('732209', 'Digitālās iespiešanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('732210', 'Plēvju līmējamās iekārtas /iespiedmašīnas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('732211', 'Auduma IESPIEDĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7323', 'Grāmatu iesējēji un apdarinātāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('732301', 'Iespieddarbu apstrādes SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('732302', 'Gatavās produkcijas piegriešanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('732303', 'BROŠĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('732304', 'Iesiešanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('732305', 'Locīšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('732306', 'GRĀMATSĒJĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('732307', 'Grāmatu LABOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('74', 'Elektrisko un elektronisko iekārtu strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741', 'Elektroiekārtu uzstādītāji un labotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7411', 'Būvelektriķi un tiem radniecīgu jomu elektriķi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741101', 'ELEKTRIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741102', 'ElektroMONTIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741103', 'Elektrotīklu ELEKTRIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741104', 'Apgaismes ELEKTRIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741105', 'BūvELEKTRIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741106', 'AutoELEKTRIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741107', 'Kuģa ELEKTRIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7412', 'Elektroiekārtu mehāniķi un atslēdznieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741201', 'ElektroATSLĒDZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741202', 'Liftu elektroMEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741203', 'Dzelzceļa elektroMONTIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741204', 'Elektromehānisko iekārtu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741205', 'Kontroles mēraparātu un automātikas elektroATSLĒDZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741206', 'Kontroles aparātu un mēriekārtu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741207', 'Sakaru elektroMEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741208', 'Peldošo līdzekļu dienesta galvenais elektroMEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741213', 'Pasažieru vilciena elektroMEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7413', 'Elektrolīniju uzstādītāji un labotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741301', 'Gaisa kabeļu LICĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741302', 'Vadu VILCĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741303', 'Elektrolīniju MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741304', 'Telefona sakaru MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741305', 'Telegrāfa sakaru MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741306', 'LīnijSTRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741307', 'Pazemes kabeļu LICĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741308', 'Lauku elektroMONTIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741309', 'Augstsprieguma līniju elektroMONTIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741310', 'Kabeļu līniju elektroMONTIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741311', 'Kabeļu trašu UZRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741312', 'Gaisvadu līniju elektroMONTIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('741313', 'Kontakttīklu elektroMONTIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('742', 'Elektronisko un telekomunikāciju iekārtu mehāniķi un labotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7421', 'Elektronikas mehāniķi un apkalpotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('742101', 'Elektronikas MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('742102', 'Elektronikas MONTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('742103', 'Signāliekārtu MONTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('742104', 'Kopēšanas tehnikas MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('742105', 'Radio MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('742106', 'Televizoru MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('742107', 'RadioELEKTRONIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('742108', 'KinoMEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('742109', 'Radio un televīzijas iekārtu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('742110', 'Elektronikas REGULĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('742111', 'Pusvadītāju aparātu būves IESTATĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7422', 'Informācijas tehnoloģiju uzstādītāji un apkalpotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('742201', 'Datortehnikas MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('742202', 'Telefonu MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('742203', 'Telekomunikāciju iekārtu MONTIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('742204', 'Telegrāfa MEHĀNIĶIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('75', 'Pārtikas produktu pārstrādes un kokapstrādes strādnieki, apģērbu izgatavošanas un citi amatnieki un tiem radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751', 'Pārtikas pārstrādes strādnieki un tiem radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7511', 'Miesnieki, zivju pārstrādātāji un tiem radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751101', 'MIESNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751102', 'Zivju APSTRĀDĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751103', 'Gaļas KŪPINĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751104', 'Gaļas IZCIRTĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751105', 'Gaļas KULINĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751106', 'Zivju KŪPINĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751107', 'Zivju KULINĀRS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751108', 'Gaļas produktu IZGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751109', 'Lopu KĀVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7512', 'Maiznieki, konditori un konfekšu ražotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751201', 'MAIZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751202', 'CEPĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751203', 'DOZĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751204', 'FORMĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751205', 'MĪCĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751206', 'KONDITORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751207', 'Mīklas GATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751208', 'Konfekšu RAŽOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751210', 'KONDITORA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751211', 'Maizes un miltu konditorijas izstrādājumu SPECIĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7513', 'Piena produktu ražotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751301', 'Sviesta MEISTARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751302', 'Siera IZGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751303', 'Piena produktu ražošanas MEISTARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751304', 'Piena produktu PĀRSTRĀDĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7514', 'Augļu, dārzeņu un tiem līdzīgu produktu pārstrādātāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751401', 'Augļu KONSERVĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751402', 'Sulas SPIEDĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751403', 'Eļļas SPIEDĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751404', 'VĀRĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751405', 'Dārzeņu KONSERVĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751406', 'ALDARIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751407', 'VĪNDARIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7515', 'Pārtikas produktu un dzērienu degustatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751501', 'ŠĶIROTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751502', 'DEGUSTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7516', 'Tabakas apstrādātāji un tās izstrādājumu ražotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('751601', 'Tabakas STRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752', 'Kokapstrādes strādnieki, mēbeļu izgatavotāji un tiem radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7521', 'Koksnes pirmapstrādes strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752101', 'Apaļkoku ŠĶIROTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752102', 'Zāģmateriālu ŽĀVĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752103', 'Koksnes IMPREGNĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7522', 'Mēbeļu un citu koka izstrādājumu ražotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752201', 'GALDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752202', 'Mēbeļu GALDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752203', 'Transporta GALDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752204', 'Būvizstrādājumu GALDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752205', 'GALDNIEKA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752206', 'Koksnes materiālu APSTRĀDĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752207', 'Koka izstrādājumu KRĀSOTĀJS LAKOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752208', 'Koka modeļu IZGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752209', 'Laivu IZGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752210', 'Koka rotaļlietu IZGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752211', 'Koka INKRUSTATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752212', 'Parketa IZGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752213', 'Zārku IZGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752214', 'Koka izstrādājumu PULĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752215', 'Koka dabisko formu izstrādājumu IZGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7523', 'Kokapstrādes instrumentu un darbgaldu regulētāji un operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752301', 'Kokapstrādes darbgaldu IESTATĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752302', 'Koka SLĪPĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752303', 'Koka ZĀĢĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752304', 'Koka URBĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752305', 'Koka VIRPOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752306', 'Programmvadības kokapstrādes darbgaldu/līniju OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752307', 'Koksnes apstrādes virpas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752308', 'Koksnes liekšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752309', 'Koksnes zāģēšanas mašīnu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752310', 'Koksnes kodināšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752311', 'Koksnes apdares iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752312', 'Mēbeļu izgatavošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752313', 'Līmēšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752314', 'Kokapstrādes iekārtu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752315', 'Kokapstrādes pusautomātisko iekārtu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752316', 'Logu izgatavošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752317', 'BRIGADIERIS (kokapstrādē)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('752318', 'Plastikāta (PVC) un alumīnija logu un durvju izgatavošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753', 'Apģērbu izgatavotāji un tiem radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7531', 'Šuvēji un cepuru izgatavotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753101', 'ŠUVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753102', 'CEPURNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753103', 'DRĒBNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753104', 'MODISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753105', 'Kostīmu MEISTARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753106', 'Dāmu apģērbu DRĒBNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753107', 'Kungu apģērbu DRĒBNIEKS', 0, 0);


COMMIT WORK;

INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753108', 'Mīksto rotaļlietu IZGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753109', 'Kažokādu DRĒBNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7532', 'Apģērbu un līdzīgu izstrādājumu modelētāji un piegriezēji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753201', 'LEKĀLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753202', 'PIEGRIEZĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753203', 'Piegriešanas izklātņu VEIDOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753204', 'Modeļu IZGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753205', 'Audumu KOMPLEKTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753206', 'Audumu IZKLĀJĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753207', 'Lekālu IZKLĀJĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7533', 'Šuvēji, izšuvēji un tiem radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753301', 'Apģērbu ŠUVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753302', 'IZŠUVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753303', 'Pārsegu/ telšu IZGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753304', 'MašīnIZŠUVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753305', 'Ādas apģērbu ŠUVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753306', 'Šūto izstrādājumu IZGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753307', 'PalīgŠUVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7534', 'Mēbeļu apvilcēji un tiem radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753401', 'TAPSĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753402', 'Mēbeļu TAPSĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753403', 'Transportlīdzekļu TAPSĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753404', 'Matraču ŠUVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753405', 'Segu ŠUVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7535', 'Kažokādu apstrādātāji un ādmiņi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753501', 'ĀDMINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753502', 'Ādu ŠĶIROTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753503', 'Ādu MIECĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753504', 'Ādu ATGAĻOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753505', 'Ādu KRĀSOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753506', 'Kažokādu KRĀSOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753507', 'Kažokādu IZSTRĀDĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7536', 'Kurpnieki un tiem radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753601', 'KURPNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753602', 'Apavu PIEGRIEZĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753603', 'Apavu LĪMĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753604', 'Apavu KRĀSOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753605', 'Modeļu apavu IZGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753606', 'KURPNIEKA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753607', 'Apavu LABOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753608', 'Apavu LABOTĀJA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753609', 'Koka apavu KURPNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('753610', 'SEGLINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('754', 'Citi amatnieki un strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7541', 'Ūdenslīdēji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('754101', 'ŪDENSLĪDĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('754102', 'Būvdarbu ŪDENSLĪDĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('754103', 'Glābšanas dienesta ŪDENSLĪDĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7542', 'Spridzinātāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('754201', 'SPRIDZINĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7543', 'Produktu vērtētāji un izmēģinātāji (izņemot pārtiku un dzērienus)', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('754301', 'KONTROLIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('754302', 'DEFEKTOSKOPISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('754303', 'IZMĒĢINĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('754304', 'DOZIMETRISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('754305', 'RADIOMETRISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('754306', 'Sliežu DEFEKTOSKOPISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('754307', 'Sliežu defektoskopijas BRIGADIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7544', 'Dezinfektori un citi kaitēkļu un nezāļu iznīcinātāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('754401', 'DEZINFEKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('7549', 'Citur neklasificēti amatnieki un strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('754901', 'LABORANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8', 'Iekārtu un mašīnu operatori un izstrādājumu montieri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('81', 'Rūpniecisko iekārtu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('811', 'Ieguves un minerālu apstrādes iekārtu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8111', 'Karjera strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('811101', 'Karjera STRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('811102', 'Paraugu NOŅĒMĒJS (karjeros)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('811103', 'Nepārtrauktas darbības iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('811104', 'Karjera ražošanas līnijas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8112', 'Minerālu un akmens apstrādes iekārtu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('811201', 'Akmens /apstrādes iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('811202', 'Drupināšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('811203', 'Šķirošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('811204', 'Kaļķakmens smalcinātāja OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8113', 'Urbumu urbēji un tiem radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('811301', 'Aku /urbšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('811302', 'Naftas un gāzes atradņu /urbšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8114', 'Cementa ražošanas, akmens un citu minerālizejvielu apstrādes iekārtu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('811401', 'Betona ražošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('811402', 'Cementa dzirnavu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('811403', 'Cementa dzirnavu OPERATORA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('812', 'Metāla apstrādes un metāla virsmas apstrādes iekārtu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8121', 'Metāla apstrādes iekārtu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('812101', 'Rūdas un metāla kausēšanas krāsns OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('812102', 'Karstās apstrādes krāsns OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('812103', 'Termiskās apstrādes iekārtu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('812104', 'Metāla stiepšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('812105', 'Liešanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('812106', 'Velmēšanas stāva OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('812107', 'Metāla KAUSĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8122', 'Metāla virsmas apstrādes iekārtu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('812201', 'ANODĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('812202', 'CINKOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('812203', 'ALVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('812204', 'ElektroPĀRKLĀJĒJS (galvanizētājs)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('812205', 'Attaukošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('812206', 'Kodināšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('812207', 'Metāla krāsošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('812208', 'Oksidēšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('812209', 'Metāla pulverizēšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('812210', 'Metāla /smilšstrūklas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('813', 'Ķīmisko un fotoizstrādājumu ražošanas iekārtu un mašīnu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8131', 'Ķīmisko izstrādājumu ražošanas iekārtu un mašīnu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('813101', 'Ķīmisko vielu /malšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('813102', 'Ķīmisko vielu /pulverizēšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('813103', 'Apdedzināšanas krāsns OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('813104', 'Ķīmisko procesu /autoklāva OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('813105', 'Asfaltbetona gatavošanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('813106', 'Bitumena gatavošanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('813107', 'Rotējošās krāsns OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('813108', 'Rotējošās krāsns OPERATORA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('813109', 'Termoķīmiskās apstrādes iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('813110', 'Ķīmisko vielu /centrbēdzes separatora OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('813111', 'Ķīmisko vielu /ekstraktu pagatavošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('813112', 'Naftas produktu /pārsūknēšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('813113', 'Smaržu /destilēšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('813114', 'Farmaceitiskās produkcijas ražošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('813115', 'Mazgāšanas līdzekļu ražošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('813116', 'Tualetes piederumu ražošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('813117', 'Ķīmisko /šķīdumu sagatavošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('813118', 'Ķīmisko vielu /kraušanas iekārtu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('813119', 'Biotehnoloģisko procesu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('813120', 'Ķīmiskās produkcijas ražošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('813121', 'Putuplasta ražošanas /putuplasta izstrādājumu ražošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8132', 'Fotoizstrādājumu ražošanas iekārtu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('813201', 'FOTOGRĀFS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('813202', 'Fotogrāfiju /iespiedmašīnas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('814', 'Gumijas, plastmasas un papīra izstrādājumu ražošanas iekārtu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8141', 'Gumijas izstrādājumu ražošanas iekārtu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('814101', 'Gumijas /veidošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('814102', 'Gumijas /apstrādes OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('814103', 'Gumijas /ražošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('814104', 'Gumijas /karstās presēšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('814105', 'Riepu /restaurācijas (apstrādes) OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('814106', 'Gumijas izstrādājumu /vulkanizācijas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('814107', 'VULKANIZĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8142', 'Plastmasas izstrādājumu ražošanas iekārtu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('814201', 'Veidošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('814202', 'Plastmasas karstās presēšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('814203', 'Spiedliešanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('814204', 'Celofāna, polietilēna /iesaiņojuma ražošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('814205', 'Plastikāta pudeļu izpūšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8143', 'Papīra izstrādājumu ražošanas iekārtu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('814301', 'Papīra un kartona piegriešanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('814302', 'Kartona /izstrādājumu ražošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('814303', 'Papīra /izstrādājumu ražošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815', 'Tekstila, kažokādas un ādas izstrādājumu ražošanas iekārtu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8151', 'Dzijas sagatavošanas, vērpšanas un šķetināšanas mašīnu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815101', 'Tekstilšķiedru apstrādes OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815102', 'Šķiedru gatavošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815103', 'Sintētisko šķiedru apstrādes OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815104', 'Diegu un dzijas /vērpšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815105', 'Diegu VĒRĒJS (tekstiliekārtās)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815106', 'Spoļu LICĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815107', 'Šķērēšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815108', 'Kāršanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815109', 'Ķemmēšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815110', 'Priekšvērpšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815111', 'Spolēšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815112', 'Dublēšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815113', 'Grodošanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815114', 'ŠĶETERĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815115', 'Teksturēšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815116', 'Apvīšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8152', 'Aušanas un adīšanas mašīnu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815201', 'Aušanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815202', 'Izšūšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815203', 'Adīšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8153', 'Šujmašīnu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815301', 'Šūšanas iekārtu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815302', 'Izšūšanas iekārtu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815303', 'Veļas un korsešu šūšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8154', 'Balināšanas, krāsošanas un audumu tīrīšanas mašīnu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815401', 'Tekstilprodukcijas balināšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815402', 'Ķīmiskās tīrīšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815403', 'Žāvēšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815404', 'Krāsošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815405', 'Gludināšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815406', 'Ūdensnecaurlaidīgu audumu ražošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815407', 'Tvaikošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815408', 'Ķīmisko šķidrumu un krāsu SAGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815409', 'Ķīmiskās apstrādes OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8155', 'Kažokādu un ādas apstrādes mašīnu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815501', 'Jēlādas apstrādes OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8156', 'Apavu un tiem radniecīgu izstrādājumu ražošanas iekārtu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815601', 'Apavu ražošanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815602', 'Ādas izstrādājumu ražošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8157', 'Veļas mazgājamo mašīnu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815701', 'Mazgāšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815702', 'Veļas mazgājamās mašīnas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8159', 'Citur neklasificēti tekstila, kažokādas un ādas izstrādājumu ražošanas iekārtu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('815901', 'Dalīšanas mašīnas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('816', 'Pārtikas un līdzīgu produktu ražošanas iekārtu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8160', 'Pārtikas un līdzīgu produktu ražošanas iekārtu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('816001', 'Pārtikas produktu ražošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('816002', 'Olu šķirošanas, iesaiņošanas, marķēšanas un iepakošanas iekārtu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('816003', 'Piena produktu ražošanas iekārtu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('816004', 'Zivju apstrādes iekārtu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('816005', 'Gaļas apstrādes iekārtu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('816006', 'Maiznīcas produkcijas ražošanas iekārtu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('816007', 'Maizes cepšanas iekārtu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('816008', 'Šokolādes ražošanas iekārtu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('816009', 'Graudu apstrādes OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('816010', 'Alus, vīna un citu dzērienu ražošanas iekārtu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('816011', 'Graudu kaltēšanas iekārtu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('816012', 'Suņu un kaķu barības ražošanas iekārtu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('816013', 'MALĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('816014', 'Alus misas VĀRĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('816015', 'Alus filtrēšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('817', 'Koksnes apstrādes un papīra ražošanas iekārtu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8171', 'Papīra masas sagatavošanas un papīra ražošanas iekārtu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('817101', 'Ražošanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('817102', 'Virsmas apdares iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('817103', 'Papīra žāvēšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('817104', 'Impregnēšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8172', 'Koksnes apstrādes iekārtu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('817201', 'Mizošanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('817202', 'Koksnes drupināšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('817203', 'Šķeldas smalcināšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('817204', 'Granulu ražošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('817205', 'Kokzāģētavas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('817206', 'Lentzāģa OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('817207', 'Gatera MAŠĪNISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('817208', 'Finieru lobīšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('817209', 'Zāģēšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('817210', 'Koksnes žāvēšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('817211', 'Šķirošanas līnijas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('817212', 'Preses OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('817213', 'Zāģmateriālu ražošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('817214', 'Finieru frēzēšanas operators', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('817215', 'Finieru saaudzēšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('817216', 'Finieru piegriešanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('817217', 'Finieru labošanas /līnijas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('817218', 'Finieru paku savākšanas /līnijas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('817219', 'Līmes sagatavošanas un formēšanas līnijas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('817220', 'Laminēšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('817221', 'Koksnes slīpēšanas /līnijas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818', 'Citu rūpniecisko iekārtu un mašīnu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8181', 'Stikla un keramikas ražošanas iekārtu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818101', 'Ķieģeļu un dakstiņu /apdedzināšanas krāsns OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818102', 'Stikla un keramikas maisīšanas iekārtas /ražošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818103', 'Stikla un keramikas malšanas iekārtas /ražošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818104', 'Māla /ražošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818105', 'Stikla šķiedras /ražošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818106', 'Keramikas GLAZĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818107', 'Stikla apstrādes līnijas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8182', 'Tvaika turbīnu, dzinēju un boileru operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818201', 'Rūpnīcas /katlu KURINĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818202', 'Tvaika mašīnas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818203', 'Katlu MAŠĪNISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818204', 'Apkures /krāšņu KURINĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818205', 'Siltumtīklu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818206', 'Turbīnu iekārtu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818213', 'Apkures iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818214', 'Gazificēto krāšņu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818215', 'Gāzes OPERATORS (krematorijā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8183', 'Iepakošanas, iepildīšanas un marķēšanas iekārtu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818301', 'Aizvākošanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818302', 'Cauruļu izolēšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818303', 'Etiķešu līmēšanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818304', 'Saiņošanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818305', 'Marķēšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818306', 'Konteineru /pildīšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818307', 'Pudeļu uzpildes OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818308', 'Robota OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818309', 'Iepildīšanas līnijas REGULĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818310', 'Iepildīšanas līnijas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8189', 'Citur neklasificēti rūpniecisko iekārtu un mašīnu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818901', 'Presēšanas iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818902', 'Šķidrumu iekārtas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818903', 'Sniega ģeneratoru OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818904', 'Vagonu mazgāšanas mašīnas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('818905', 'Griešanas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('82', 'Montieri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('821', 'Montieri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8211', 'Mehānisko mašīnu un izstrādājumu montieri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('821101', 'Rūpniecisko iekārtu MONTIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('821102', 'Montāžas darbu ATSLĒDZNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('821103', 'Sliežu ceļu MONTIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8212', 'Elektrisko un elektronisko iekārtu un izstrādājumu montieri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('821201', 'Elektroiekārtu MONTIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('821202', 'Uztīšanas iekārtas MONTIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('821203', 'AKUMULATORISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('821204', 'Audiovideoiekārtu MONTIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('821205', 'Elektronisko iekārtu MONTIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('821206', 'Pusvadītāju aparātu būves OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('821207', 'Mikroelektronikas iekārtu MONTIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('821208', 'Radioaparatūras MONTIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('821209', 'Vājstrāvu sistēmu MONTIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8219', 'Citur neklasificēti montieri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('821901', 'Metāla /mēbeļu MONTIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('821902', 'Metāla izstrādājumu MONTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('821903', 'Plastmasas izstrādājumu KOMPLEKTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('821904', 'Gumijas izstrādājumu KOMPLEKTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('821905', 'Koka izstrādājumu KOMPLEKTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('821906', 'Koka /mēbeļu KOMPLEKTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('821907', 'Kartona izstrādājumu KOMPLEKTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('821908', 'Kompozīto ražojumu MONTIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('83', 'Pašgājēju mašīnu un iekārtu vadītāji un celšanas iekārtu un mašīnu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831', 'Vilces līdzekļa vadītāji (mašīnisti) un tiem radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8311', 'Vilces līdzekļa vadītāji (mašīnisti)', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831104', 'Dīzeļlokomotīves VADĪTĀJA (MAŠĪNISTA) PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831105', 'Vilces līdzekļa VADĪTĀJS (MAŠĪNISTS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831106', 'Vilces līdzekļa VADĪTĀJA (MAŠĪNISTA) PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831107', 'Dīzeļlokomotīves VADĪTĀJS (MAŠĪNISTS) INSTRUKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831108', 'Dīzeļvilciena vadītājs (MAŠĪNISTS) INSTRUKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831109', 'Elektrovilciena vadītājs (MAŠĪNISTS) INSTRUKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831110', 'Dīzeļlokomotīves VADĪTĀJS (MAŠĪNISTS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831111', 'Dīzeļvilciena VADĪTĀJS (MAŠĪNISTS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831112', 'Elektrovilciena VADĪTĀJS (MAŠĪNISTS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831113', 'Sliežu motortransporta VADĪTĀJS (MAŠĪNISTS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831114', 'Dīzeļvilciena vadītāja (MAŠĪNISTA) PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831115', 'Elektrovilciena vadītāja (MAŠĪNISTA) PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831116', 'Sliežu motortransporta vadītāja (MAŠĪNISTA) PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831117', 'Dzelzceļa nepašgājējas mašīnas un to sastāvu OPERATORS (MAŠĪNISTS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831118', 'Dzelzceļa nepašgājējas mašīnas un to sastāvu OPERATORA (MAŠĪNISTA) PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831119', 'Vilces līdzekļa VADĪTĀJS (MAŠĪNISTS) INSTRUKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831120', 'Sliežu motortransporta VADĪTĀJS (MAŠĪNISTS) INSTRUKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831121', 'Tvaika lokomotīves VADĪTĀJA (MAŠĪNISTA) PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831122', 'Tvaika lokomotīves VADĪTĀJS (MAŠĪNISTS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831123', 'Tvaika lokomotīves VADĪTĀJS (MAŠĪNISTS) INSTRUKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8312', 'Dzelzceļa pārmijnieki, sakabinātāji un tiem radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831201', 'Dzelzceļa PĀRMIJNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831202', 'Vilcienu SASTĀDĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831203', 'Vilcienu SARGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831204', 'Dzelzceļa SIGNALIZĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831205', 'Dzelzceļa šķirošanas DEŽURANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831206', 'Dzelzceļa pārbrauktuves DEŽURANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831207', 'Vagonu APSKATĪTĀJS (remontētājs)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831208', 'Vagonu parka DEŽURANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831209', 'Līnijas dzelzceļa stacijas DEŽURANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831210', 'Vilcienu PIEŅĒMĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831211', 'Kravas vilcienu KONDUKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831212', 'Vilcienu SASTĀDĪTĀJA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831213', 'Vagonu kustības ātruma REGULĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831214', 'Ritošā sastāva EKIPĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('831215', 'Vilcienu KONDUKTORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('832', 'Transportlīdzekļu vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8321', 'Motociklu vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('832101', 'Sakaru MOTOCIKLISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('832102', 'Motocikla VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8322', 'Vieglo automobiļu, taksometru un mazietilpīgo kravas automobiļu un mikroautobusu vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('832201', 'Automobiļa VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('832202', 'Furgona VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('832203', 'Sanitārautomobiļa VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('832204', 'Mazietilpīga kravas automobiļa VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('832205', 'Taksometra VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('832206', 'Mikroautobusa VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('833', 'Smago kravas automobiļu un autobusu vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8331', 'Autobusu, trolejbusu un tramvaju vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('833101', 'Autobusa VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('833102', 'Tramvaja VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('833103', 'Trolejbusa VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('833104', 'Autobusa, trolejbusa un tramvaja VADĪTĀJS (MANEVRĒTĀJS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8332', 'Smago kravas automobiļu ar piekabēm un autovilcienu vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('833201', 'Atkritumvedēja VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('833202', 'Bīstamu kravu pārvadāšanas transportlīdzekļu VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('833203', 'Kravas automobiļa VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('833204', 'Paškrāvēja /automobiļa VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('833205', 'Vilcējautomobiļa VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('833206', 'Ielu laistīšanas /automobiļa VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('833207', 'Ielu kaisīšanas /automobiļa VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('833208', 'Specializētā /automobiļa VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('833209', 'Mehāniskā transportlīdzekļa VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('833210', 'Betona maisītāja /sūkņa VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('833211', 'Ledus atjaunošanas mašīnas VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834', 'Lauksaimniecības, zemes darbu, celšanas un citu kraušanas iekārtu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8341', 'Lauksaimniecības un mežsaimniecības mašīnu, mehānismu un iekārtu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834101', 'Kombaina VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834102', 'Lauksaimniecības mašīnu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834104', 'Kokvedēja automobiļa VADĪTĀJS ', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834105', 'Traktora VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834106', 'Traktortehnikas VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834107', 'Meža mašīnu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8342', 'Zemes racēju un tiem līdzīgu mašīnu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834201', 'Bagarēšanas mašīnu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834202', 'Betona ieklājēja VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834203', 'Betona ieklājēja OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834204', 'Asfaltēšanas ieklājēja VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834205', 'Asfalta ieklājēja OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834206', 'Zemes urbšanas mašīnu OPERATORS (celtniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834207', 'Buldozera VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834208', 'Pamatu veltņa VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834209', 'Asfalta veltņa VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834210', 'Ekskavatora VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834211', 'Kūdras ieguves mašīnas MAŠĪNISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834212', 'Pāļdziņa VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834213', 'Gudronatora VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834214', 'Autogreidera VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834215', 'Sliežu ceļa mašīnu IESTATĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834216', 'Ceļa frēzes VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834217', 'Ceļa frēzes OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834218', 'Pašgājēja iekrāvēja VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834219', 'Bruģēšanas mašīnas VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834220', 'Ceļu marķēšanas mašīnas vadītājs', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834221', 'Citas speciālās pašgājējtehnikas VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834222', 'Zemessmēlēja VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834223', 'Ceļa veltņa OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834224', 'Greideru un skrēperu VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834225', 'Zemes pārvietošanas iekārtu OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834226', 'Cauruļlicēja VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8343', 'Autoceltņu un citu kraušanas iekārtu operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834301', 'Celtņa OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834302', 'Elevatora OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834303', 'Eskalatora OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834304', 'Kuģa /celtņa OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834305', 'Vinčas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834306', 'Autoceltņa /automobiļa VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834307', 'Transportiera APKALPOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834308', 'Pacēlāja MAŠĪNISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834309', 'Iekraušanas iekārtas APKALPOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834310', 'Hidrokrāvēja MAŠĪNISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834311', 'Metalurģiskās iekārtas /celtņa OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834312', 'Dzelzceļa celtņa VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834313', 'Dzelzceļa celtņa VADĪTĀJA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834314', 'DOKERS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834315', 'DOKERU BRIGADIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834316', 'Autotorņa VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8344', 'Autoiekrāvēju operatori', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834401', 'Lifta /platformas OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834402', 'Autokrāvēja VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834403', 'Elektrokrāvēja OPERATORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834404', 'Elektrokāra VADĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('834405', 'Lidostas KRĀVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('835', 'Kuģu klāja komandas un tām radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('8350', 'Kuģu klāja komandas un tām radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('835001', 'BOCMANIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('835002', 'Kuģa BOCMANIS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('835003', 'Kuģa MATROZIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('835004', 'Iekšējo ūdeņu kuģa MATROZIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('835005', 'MATROZIS MOTORISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('835006', 'Kuģa MOTORISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('835007', 'Kuģa sūkņu MAŠĪNISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('835008', 'Kuģa SIGNALIZĒTĀJS (iekšlietu jomā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('835009', 'Kuģu TAUVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9', 'Vienkāršās professions', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('91', 'Apkopēji un palīgi mājas darbos', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('911', 'Māju, viesnīcu un biroju apkopēji un palīgi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9111', 'Mājstrādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('911101', 'MĀJKALPOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9112', 'Biroju, viesnīcu un citu telpu apkopēji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('911201', 'APKOPĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('911202', 'TĪRĪTĀJS (roku darba)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('911203', 'Viesnīcas ISTABENIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('911204', 'ISTABENIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('911205', 'Tūrisma mītnes ISTABENIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('911206', 'Sabiedrisko tualešu APKOPĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('912', 'Transportlīdzekļu, logu un veļas mazgātāji un citu ar rokām veicamu tīrīšanas darbu izpildītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9121', 'Veļas mazgātāji un gludinātāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('912101', 'Veļas MAZGĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('912102', 'Veļas GLUDINĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('912103', 'Veļas PĀRZINIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('912104', 'TĪRĪTĀJS (ķīmiskajā tīrīšanā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9122', 'Transportlīdzekļu mazgātāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('912201', 'Transportlīdzekļu TĪRĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('912202', 'Automobiļu MAZGĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9123', 'Logu mazgātāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('912301', 'Logu /vitrīnu stiklu MAZGĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9129', 'Citi tīrīšanas darbu veicēji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('912901', 'Trauku MAZGĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('912902', 'MAZGĀTĀJS (roku darba)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('912903', 'TĪRĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('92', 'Lauksaimniecības, mežsaimniecības un zivsaimniecības strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('921', 'Lauksaimniecības, mežsaimniecības un zivsaimniecības strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9211', 'Lauksaimniecības kultūru audzēšanas saimniecības strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('921101', 'Saimniecības STRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('921102', 'Sezonas lauksaimniecības STRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9212', 'Mājlopu fermu strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('921201', 'ZIRGKOPĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('921202', 'LOPKOPĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('921203', 'SLAUCĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9213', 'Jauktu lauksaimniecības kultūru un lopkopības fermu strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('921301', 'Lauksaimniecības /fermas STRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('921302', 'Lauksaimniecības palīgSTRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9214', 'Dārzkopības strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('921401', 'Dārzniecības STRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('921402', 'Siltumnīcas STRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('921403', 'Labiekārtošanas STRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9215', 'Mežstrādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('921501', 'Mežsaimniecības STRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9216', 'Zivsaimniecības un akvakultūras strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('921601', 'Zivsaimniecības STRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('921602', 'Akvakultūras STRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('93', 'Raktuvju, būvniecības, ražošanas un transporta strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('931', 'Raktuvju un būvniecības strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9311', 'Raktuvju un karjeru strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('931101', 'Kūdras ieguves palīgSTRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9312', 'Inženierbūvju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('931201', 'Ceļa būves palīgSTRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('931202', 'Dzelzceļa STRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('931203', 'APGAITNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('931204', 'Inženiertehnisko būvju remonta STRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('931205', 'Ceļa marķējumu KRĀSOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('931206', 'ASFALTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('931207', 'Mākslīgo būvju palīgSTRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9313', 'Ēku būvniecības strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('931301', 'BūvSTRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('931302', 'RemontSTRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('932', 'Rūpniecības un citi strādnieki', 1, 0);


COMMIT WORK;

INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9321', 'Iesaiņotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('932101', 'IESAIŅOTĀJS (roku darba)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('932102', 'KOMPLEKTĒTĀJS (IESAIŅOTĀJS)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('932103', 'KOMPLEKTĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9329', 'Citur neklasificēti strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('932901', 'ŠĶIROTĀJS (roku darba)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('932902', 'MONTĒTĀJS (roku darba)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('932903', 'Izejvielu SAGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('932904', 'Produkcijas NOŅĒMĒJS (no mašīnas)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('932905', 'Spoļu ATTINĒJS (roku darba)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('932906', 'Karstā metāla NOVĀCĒJS (no velmēšanas stāva)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('932907', 'Iespieddarbu pēcapstrādes STRĀDNIEKS (roku darba)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('932908', 'Ceha STRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('932909', 'PalīgSTRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('932910', 'Izstrādājumu MARĶĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('932911', 'Naftas produktu LĒJĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('932912', 'Naftas produktu PIEŅĒMĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('932913', 'Slēpošanas un snovborda inventāra apkopes STRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('932914', 'SPOLĒTĀJS (roku darba)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('932915', 'Elektroiekārtu izolācijas SAGATAVOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('932916', 'Trikotāžas izstrādājumu FORMĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('932917', 'Paraugu NOŅĒMĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('932918', 'Kārtridžu uzpildes pakalpojumu DARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('933', 'Transporta strādnieki un krāvēji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9331', 'Ar roku vai pedāļiem darbināmu transportlīdzekļu vadītāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('933101', 'VeloRIKŠA', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9332', 'Kučieri', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('933201', 'KUČIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9333', 'Krāvēji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('933301', 'KRĀVĒJS (roku darba)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('933302', 'STROPĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('933303', 'REKVIZITORS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('933304', 'Skatuves STRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('933305', 'Transporta STRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('933306', 'Noliktavas STRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('933307', 'SIGNALIZĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('933308', 'Tehniskais STRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('933309', 'RATIŅSTŪMĒJS (lielveikalos)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9334', 'Preču izvietotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('933401', 'Preču IZVIETOTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('933402', 'Tirdzniecības zāles DARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('94', 'Pārtikas produktu sagatavošanas palīgstrādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('941', 'Pārtikas produktu sagatavošanas palīgstrādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9411', 'Pārtikas produktu sagatavošanas palīgstrādnieki ātrās ēdināšanas uzņēmumos', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('941101', 'Ātrās ēdināšanas STRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9412', 'Virtuves strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('941201', 'PAVĀRA PALĪGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('941202', 'Virtuves DARBINIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('941203', 'Zivju VĒRĒJS (roku darbs)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('941204', 'Zivju RETINĀTĀJS (roku darbs)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('941205', 'Šprotu PAKOTĀJS (roku darbs)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('95', 'Ielu strādnieki un ielu pārdevēji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('951', 'Ielu strādnieki un tiem radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9510', 'Ielu strādnieki un tiem radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('951001', 'Apavu TĪRĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('951002', 'Plakātu LĪMĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('951003', 'Automašīnu logu MAZGĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('952', 'Ielu pārdevēji (izņemot pārtikas preces)', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9520', 'Ielu pārdevēji (izņemot pārtikas preces)', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('952001', 'Laikrakstu PĀRDEVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('952002', 'Preču IZNĒSĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('952003', 'KOLPORTIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('952004', 'Teātra programmu PĀRDEVĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('96', 'Atkritumu savācēji un citu vienkāršo profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('961', 'Atkritumu savācēji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9611', 'Atkritumu savākšanas un pārstrādes strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('961101', 'Atkritumu SAVĀCĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('961102', 'Izgāztuves DEŽURANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9612', 'Atkritumu šķirotāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('961201', 'Atkritumu ŠĶIROTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('961202', 'Otrreizējo izejvielu ŠĶIROTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9613', 'Sētnieki un tiem radniecīgu profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('961301', 'SĒTNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('961302', 'Ielu SLAUCĪTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('961303', 'Dzīvnieku ĶĒRĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('961304', 'Sezonas STRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('962', 'Citi vienkāršo profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9621', 'Kurjeri, sūtījumu piegādātāji un bagāžas nesēji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('962101', 'KURJERS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('962102', 'Preču PIEGĀDĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9622', 'Gadījuma darbu strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('962201', 'Gadījuma darbu STRĀDNIEKS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9623', 'Skaitītāju nolasītāji un pārdošanas automātu naudas savācēji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('962301', 'Naudas automātu kontrolKASIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('962302', 'Uzskaites rādījumu REĢISTRĒTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9624', 'Ūdens pienesēji un malkas sagādātāji', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('962401', 'Malkas SAGĀDĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('962402', 'Ūdens SAGĀDĀTĀJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('9629', 'Citur neklasificēti vienkāršo profesiju strādnieki', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('962901', 'ŠVEICARS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('962902', 'Biļešu KONTROLIERIS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('962903', 'GARDEROBISTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('962904', 'Ēkas UZRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('962905', 'Ēkas DEŽURANTS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('962906', 'Muzeja izstāžu un ekspozīciju zāļu UZRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('962907', 'Ēkas un teritorijas UZRAUGS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('962908', 'Meža un pļavas veltes VĀCĒJS', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('962909', 'GARDEROBISTS (apstrādes rūpniecībā)', 0, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('*', 'Visi', 1, 0);
INSERT INTO A_PROFESSIONS (ID, DESCR, CAT, USED) VALUES ('**', 'Atzīmētie', 1, 0);


COMMIT WORK;

INSERT INTO A_RATES (ID, ONDATE, IIN_LIKME, SIDD_PAMATLIKME, SIDN_PAMATLIKME, SIDD_PENS, SIDN_PENS, SIDD_IZDPENS, SIDN_IZDPENS, SIDD_IESLODZ, SIDN_IESLODZ, SIDD_IESLODZ_PENS, SIDN_IESLODZ_PENS, NEPLIEK_MIN, APGAD, INVALID_12, INVALID_3, REPR, PRET, URN, MIN_PAY_MONTH, MIN_PAY_HOUR, IIN_LIKME_2, IIN_LIKME_3, IIN_SLIEKSNIS_1, IIN_SLIEKSNIS_2) VALUES (1, '2014-01-01', 24, 23.59, 10.5, 20.16, 8.96, 21.79, 9.69, 20.77, 9.23, 17.42, 7.74, 75, 165, 154, 120, 154, 154, 0.36, 320, 1.93, 0, 0, 0, 0);
INSERT INTO A_RATES (ID, ONDATE, IIN_LIKME, SIDD_PAMATLIKME, SIDN_PAMATLIKME, SIDD_PENS, SIDN_PENS, SIDD_IZDPENS, SIDN_IZDPENS, SIDD_IESLODZ, SIDN_IESLODZ, SIDD_IESLODZ_PENS, SIDN_IESLODZ_PENS, NEPLIEK_MIN, APGAD, INVALID_12, INVALID_3, REPR, PRET, URN, MIN_PAY_MONTH, MIN_PAY_HOUR, IIN_LIKME_2, IIN_LIKME_3, IIN_SLIEKSNIS_1, IIN_SLIEKSNIS_2) VALUES (2, '2015-01-01', 23, 23.59, 10.5, 19.86, 8.84, 21.5, 9.57, 20.5, 9.13, 16.88, 7.51, 75, 165, 154, 120, 154, 154, 0.36, 360, 2.16, 0, 0, 0, 0);
INSERT INTO A_RATES (ID, ONDATE, IIN_LIKME, SIDD_PAMATLIKME, SIDN_PAMATLIKME, SIDD_PENS, SIDN_PENS, SIDD_IZDPENS, SIDN_IZDPENS, SIDD_IESLODZ, SIDN_IESLODZ, SIDD_IESLODZ_PENS, SIDN_IESLODZ_PENS, NEPLIEK_MIN, APGAD, INVALID_12, INVALID_3, REPR, PRET, URN, MIN_PAY_MONTH, MIN_PAY_HOUR, IIN_LIKME_2, IIN_LIKME_3, IIN_SLIEKSNIS_1, IIN_SLIEKSNIS_2) VALUES (4, '2016-01-01', 23, 23.59, 10.5, 19.9, 8.85, 21.51, 9.57, 20.1, 8.95, 16.51, 7.35, 75, 175, 154, 120, 154, 154, 0.36, 370, 2.37, 0, 0, 0, 0);
INSERT INTO A_RATES (ID, ONDATE, IIN_LIKME, SIDD_PAMATLIKME, SIDN_PAMATLIKME, SIDD_PENS, SIDN_PENS, SIDD_IZDPENS, SIDN_IZDPENS, SIDD_IESLODZ, SIDN_IESLODZ, SIDD_IESLODZ_PENS, SIDN_IESLODZ_PENS, NEPLIEK_MIN, APGAD, INVALID_12, INVALID_3, REPR, PRET, URN, MIN_PAY_MONTH, MIN_PAY_HOUR, IIN_LIKME_2, IIN_LIKME_3, IIN_SLIEKSNIS_1, IIN_SLIEKSNIS_2) VALUES (5, '2017-01-01', 23, 23.59, 10.5, 20.57, 9.16, 21.85, 9.72, 19.89, 8.85, 16.98, 7.56, 60, 175, 154, 120, 154, 154, 0.36, 380, 2.37, 0, 0, 0, 0);
INSERT INTO A_RATES (ID, ONDATE, IIN_LIKME, SIDD_PAMATLIKME, SIDN_PAMATLIKME, SIDD_PENS, SIDN_PENS, SIDD_IZDPENS, SIDN_IZDPENS, SIDD_IESLODZ, SIDN_IESLODZ, SIDD_IESLODZ_PENS, SIDN_IESLODZ_PENS, NEPLIEK_MIN, APGAD, INVALID_12, INVALID_3, REPR, PRET, URN, MIN_PAY_MONTH, MIN_PAY_HOUR, IIN_LIKME_2, IIN_LIKME_3, IIN_SLIEKSNIS_1, IIN_SLIEKSNIS_2) VALUES (6, '2018-01-01', 20, 24.09, 11, 21.31, 9.56, 22.52, 10.12, 20.4, 9.17, 17.59, 7.91, 200, 200, 154, 120, 154, 154, 0.36, 430, 2.8, 23, 31.4, 1667, 4583);
INSERT INTO A_RATES (ID, ONDATE, IIN_LIKME, SIDD_PAMATLIKME, SIDN_PAMATLIKME, SIDD_PENS, SIDN_PENS, SIDD_IZDPENS, SIDN_IZDPENS, SIDD_IESLODZ, SIDN_IESLODZ, SIDD_IESLODZ_PENS, SIDN_IESLODZ_PENS, NEPLIEK_MIN, APGAD, INVALID_12, INVALID_3, REPR, PRET, URN, MIN_PAY_MONTH, MIN_PAY_HOUR, IIN_LIKME_2, IIN_LIKME_3, IIN_SLIEKSNIS_1, IIN_SLIEKSNIS_2) VALUES (7, '2019-01-01', 20, 24.09, 11, 21.31, 9.56, 22.52, 10.12, 20.4, 9.17, 17.59, 7.91, 230, 230, 154, 120, 154, 154, 0.36, 430, 2.8, 23, 31.4, 1667, 4583);
INSERT INTO A_RATES (ID, ONDATE, IIN_LIKME, SIDD_PAMATLIKME, SIDN_PAMATLIKME, SIDD_PENS, SIDN_PENS, SIDD_IZDPENS, SIDN_IZDPENS, SIDD_IESLODZ, SIDN_IESLODZ, SIDD_IESLODZ_PENS, SIDN_IESLODZ_PENS, NEPLIEK_MIN, APGAD, INVALID_12, INVALID_3, REPR, PRET, URN, MIN_PAY_MONTH, MIN_PAY_HOUR, IIN_LIKME_2, IIN_LIKME_3, IIN_SLIEKSNIS_1, IIN_SLIEKSNIS_2) VALUES (8, '2020-01-01', 20, 24.09, 11, 21.31, 9.56, 22.52, 10.12, 20.4, 9.17, 17.59, 7.91, 300, 250, 154, 120, 154, 154, 0.36, 430, 2.8, 23, 31.4, 1667, 4583);
INSERT INTO A_RATES (ID, ONDATE, IIN_LIKME, SIDD_PAMATLIKME, SIDN_PAMATLIKME, SIDD_PENS, SIDN_PENS, SIDD_IZDPENS, SIDN_IZDPENS, SIDD_IESLODZ, SIDN_IESLODZ, SIDD_IESLODZ_PENS, SIDN_IESLODZ_PENS, NEPLIEK_MIN, APGAD, INVALID_12, INVALID_3, REPR, PRET, URN, MIN_PAY_MONTH, MIN_PAY_HOUR, IIN_LIKME_2, IIN_LIKME_3, IIN_SLIEKSNIS_1, IIN_SLIEKSNIS_2) VALUES (9, '2021-01-01', 20, 23.59, 10.5, 20.77, 9.25, 21.94, 9.76, 19.93, 8.87, 17.24, 7.67, 300, 250, 154, 120, 154, 154, 0.36, 500, 3.17, 23, 31.4, 1667, 4583);
INSERT INTO A_RATES (ID, ONDATE, IIN_LIKME, SIDD_PAMATLIKME, SIDN_PAMATLIKME, SIDD_PENS, SIDN_PENS, SIDD_IZDPENS, SIDN_IZDPENS, SIDD_IESLODZ, SIDN_IESLODZ, SIDD_IESLODZ_PENS, SIDN_IESLODZ_PENS, NEPLIEK_MIN, APGAD, INVALID_12, INVALID_3, REPR, PRET, URN, MIN_PAY_MONTH, MIN_PAY_HOUR, IIN_LIKME_2, IIN_LIKME_3, IIN_SLIEKSNIS_1, IIN_SLIEKSNIS_2) VALUES (10, '2022-01-01', 20, 23.59, 10.5, 20.77, 9.25, 21.94, 9.76, 19.93, 8.87, 17.24, 7.67, 300, 250, 154, 120, 154, 154, 0.36, 500, 3.17, 23, 31.4, 1667, 4583);
INSERT INTO A_RATES (ID, ONDATE, IIN_LIKME, SIDD_PAMATLIKME, SIDN_PAMATLIKME, SIDD_PENS, SIDN_PENS, SIDD_IZDPENS, SIDN_IZDPENS, SIDD_IESLODZ, SIDN_IESLODZ, SIDD_IESLODZ_PENS, SIDN_IESLODZ_PENS, NEPLIEK_MIN, APGAD, INVALID_12, INVALID_3, REPR, PRET, URN, MIN_PAY_MONTH, MIN_PAY_HOUR, IIN_LIKME_2, IIN_LIKME_3, IIN_SLIEKSNIS_1, IIN_SLIEKSNIS_2) VALUES (11, '2023-01-01', 20, 23.59, 10.5, 20.77, 9.25, 21.94, 9.76, 19.93, 8.87, 17.24, 7.67, 300, 250, 154, 120, 154, 154, 0.36, 620, 4.31, 23, 31.4, 1667, 4583);
INSERT INTO A_RATES (ID, ONDATE, IIN_LIKME, SIDD_PAMATLIKME, SIDN_PAMATLIKME, SIDD_PENS, SIDN_PENS, SIDD_IZDPENS, SIDN_IZDPENS, SIDD_IESLODZ, SIDN_IESLODZ, SIDD_IESLODZ_PENS, SIDN_IESLODZ_PENS, NEPLIEK_MIN, APGAD, INVALID_12, INVALID_3, REPR, PRET, URN, MIN_PAY_MONTH, MIN_PAY_HOUR, IIN_LIKME_2, IIN_LIKME_3, IIN_SLIEKSNIS_1, IIN_SLIEKSNIS_2) VALUES (12, '2024-01-01', 20, 23.59, 10.5, 20.77, 9.25, 21.94, 9.76, 19.93, 8.87, 17.24, 7.67, 300, 250, 154, 120, 154, 154, 0.36, 700, 4.93, 23, 31.4, 1667, 4583);


COMMIT WORK;

INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (1, '11', 'Darba ņēmēja statusa iegūšana', 1, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (2, '12', 'Tāda darba ņēmēja statusa iegūšana, kurš ir pakļauts valsts pensiju apdrošināšanai, invaliditātes apdrošināšanai, maternitātes un slimības apdrošināšanai, vecāku apdrošināšanai un sociālajai apdrošināšanai pret nelaimes gadījumiem darbā un arodslimībām (darba ņēmējam, kurš ir izdienas pensijas saņēmējs vai invalīds – valsts speciālās pensijas saņēmējs)', 0, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (3, '13', 'Tāda darba ņēmēja statusa iegūšana, kurš ir pakļauts valsts pensiju apdrošināšanai, maternitātes un slimības apdrošināšanai, vecāku apdrošināšanai un sociālajai apdrošināšanai pret nelaimes gadījumiem darbā un arodslimībām (darba ņēmējam, kurš ir sasniedzis vecumu, kas dod tiesības saņemt valsts vecuma pensiju, vai kuram ir piešķirta valsts vecuma pensija (tai skaitā priekšlaicīgi), un darba ņēmējam, kuram ir piešķirta valsts vecuma pensija ar atvieglotiem noteikumiem)', 0, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (4, '14', 'Darba ņēmēja statusa iegūšana, ja persona tiek nodarbināta brīvības atņemšanas soda izciešanas laikā', 1, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (5, '15', 'Tāda darba ņēmēja statusa iegūšana, kurš tiek nodarbināts brīvības atņemšanas soda izciešanas laikā un ir pakļauts valsts pensiju apdrošināšanai (darba ņēmējam, kurš ir sasniedzis vecumu, kas dod tiesības saņemt valsts vecuma pensiju, vai kuram ir piešķirta valsts vecuma pensija (tai skaitā priekšlaicīgi), un darba ņēmējam, kuram ir piešķirta valsts vecuma pensija ar atvieglotiem noteikumiem)', 0, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (6, '16', 'Mikrouzņēmuma darbinieka statusa iegūšana', 1, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (7, '17', 'Tāda mikrouzņēmuma darbinieka statusa iegūšana, kurš ir pakļauts valsts pensiju apdrošināšanai, invaliditātes apdrošināšanai, maternitātes un slimības apdrošināšanai, vecāku apdrošināšanai un sociālajai apdrošināšanai pret nelaimes gadījumiem darbā un arodslimībām (darba ņēmējam, kurš ir izdienas pensijas saņēmējs vai invalīds – valsts speciālās pensijas saņēmējs)', 0, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (8, '18', 'Tāda mikrouzņēmuma darbinieka statusa iegūšana, kurš ir pakļauts valsts pensiju apdrošināšanai, maternitātes un slimības apdrošināšanai, vecāku apdrošināšanai un sociālajai apdrošināšanai pret nelaimes gadījumiem darbā un arodslimībām (darba ņēmējam, kurš ir sasniedzis vecumu, kas dod tiesības saņemt valsts vecuma pensiju, vai kuram ir piešķirta valsts vecuma pensija (tai skaitā priekšlaicīgi), un darba ņēmējam, kuram ir piešķirta valsts vecuma pensija ar atvieglotiem noteikumiem)', 0, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (9, '21', 'Darba ņēmēja vai mikrouzņēmuma darbinieka statusa zaudēšana, pamatojoties uz darba ņēmēja uzteikumu', 1, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (10, '22', 'Darba ņēmēja vai mikrouzņēmuma darbinieka statusa zaudēšana sakarā ar darba ņēmēja pārkāpumu atbilstoši normatīvajiem aktiem, kuros', 1, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (11, '23', 'Darba ņēmēja vai mikrouzņēmuma darbinieka statusa zaudēšana sakarā ar darba devēja vai mikrouzņēmuma nodokļa maksātāja likvidāciju', 1, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (12, '24', 'Darba ņēmēja vai mikrouzņēmuma darbinieka statusa zaudēšana sakarā ar nespēju veikt nolīgto darbu veselības stāvokļa dēļ', 1, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (13, '25', 'Darba ņēmēja vai mikrouzņēmuma darbinieka statusa zaudēšana citos gadījumos', 1, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (30, '29', 'Darba ņēmēja statusa zaudēšana, pamatojoties uz darba ņēmēja iesniegumu Valsts ieņēmumu dienestam', 1, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (14, '31', 'Darba ņēmēja apdrošināšanas statusa maiņa – darba ņēmējs, kurš ir apdrošināms atbilstoši visiem valsts sociālās apdrošināšanas veidiem (darba ņēmējam, kam ir pārtraukta izdienas pensijas vai valsts speciālās pensijas izmaksa)', 0, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (15, '32', 'Darba ņēmēja apdrošināšanas statusa maiņa – darba ņēmējs, kurš ir pakļauts valsts pensiju apdrošināšanai, invaliditātes apdrošināšanai, maternitātes un slimības apdrošināšanai, vecāku apdrošināšanai un sociālajai apdrošināšanai pret nelaimes gadījumiem darbā un arodslimībām (darba ņēmējam, kam ir piešķirta izdienas pensija vai valsts speciālā pensija)', 0, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (16, '33', 'Darba ņēmēja apdrošināšanas statusa maiņa – darba ņēmējs, kurš ir pakļauts valsts pensiju apdrošināšanai, maternitātes un slimības apdrošināšanai, vecāku apdrošināšanai un sociālajai apdrošināšanai pret nelaimes gadījumiem darbā un arodslimībām (darba ņēmējam, kurš ir sasniedzis vecumu, kas dod tiesības saņemt valsts vecuma pensiju, vai kuram ir piešķirta valsts vecuma pensija (tai skaitā priekšlaicīgi), un darba ņēmējam, kuram ir piešķirta valsts vecuma pensija ar atvieglotiem noteikumiem)', 0, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (17, '34', 'Darba ņēmēja, kurš tiek nodarbināts brīvības atņemšanas soda izciešanas laikā, statusa maiņa – darba ņēmējs, kurš ir pakļauts valsts pensiju apdrošināšanai (darba ņēmējam, kurš ir sasniedzis vecumu, kas dod tiesības saņemt valsts vecuma pensiju, vai kuram ir piešķirta valsts vecuma pensija (tai skaitā priekšlaicīgi), un darba ņēmējam, kuram ir piešķirta valsts vecuma pensija ar atvieglotiem noteikumiem)', 0, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (18, '35', 'Mikrouzņēmuma darbinieka apdrošināšanas statusa maiņa – mikrouzņēmuma darbinieks, kurš ir apdrošināms atbilstoši visiem valsts sociālās apdrošināšanas veidiem (mikrouzņēmuma darbiniekam, kam ir pārtraukta izdienas pensijas vai valsts speciālās pensijas izmaksa)', 0, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (19, '36', 'Mikrouzņēmuma darbinieka apdrošināšanas statusa maiņa – mikrouzņēmuma darbinieks, kurš ir pakļauts valsts pensiju apdrošināšanai, invaliditātes apdrošināšanai, maternitātes un slimības apdrošināšanai, vecāku apdrošināšanai un sociālajai apdrošināšanai pret nelaimes gadījumiem darbā un arodslimībām (mikrouzņēmuma darbiniekam, kam ir piešķirta izdienas pensija vai valsts speciālā pensija)', 0, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (20, '37', 'Mikrouzņēmuma darbinieka apdrošināšanas statusa maiņa – mikrouzņēmuma darbinieks, kurš ir pakļauts valsts pensiju apdrošināšanai, maternitātes un slimības apdrošināšanai, vecāku apdrošināšanai un sociālajai apdrošināšanai pret nelaimes gadījumiem darbā un arodslimībām (mikrouzņēmuma darbiniekam, kurš ir sasniedzis vecumu, kas dod tiesības saņemt valsts vecuma pensiju, vai kuram ir piešķirta valsts vecuma pensija (tai skaitā priekšlaicīgi), un mikrouzņēmuma darbiniekam, kuram ir piešķirta valsts vecuma pensija ar atvieglotiem noteikumiem)', 0, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (21, '40', 'Datums, ar kuru darba ņēmējam vai mikrouzņēmuma darbiniekam ir piešķirts bērna kopšanas atvaļinājums vai atvaļinājums bez darba algas', 1, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (22, '41', 'Datums, kurā darba ņēmējs', 1, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (23, '50', 'Datums, ar kuru darba ņēmējam vai mikrouzņēmuma darbiniekam ir piešķirts atvaļinājums bez darba algas saglabāšanas', 1, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (24, '51', 'Datums, kurā darba ņēmējs vai mikrouzņēmuma darbinieks ir sācis darbu pēc atvaļinājuma bez darba algas saglabāšanas', 1, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (25, '61', 'Darba ņēmēja statusa iegūšana, ja persona tiek nodarbināta sezonas rakstura darbos', 1, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (26, '71', 'Tāda darba ņēmēja statusa iegūšana, kurš uzsāk darbu ārvalstīs', 1, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (27, '72', 'Tāda darba ņēmēja statusa iegūšana, kurš izbeidz darbu ārvalstīs', 1, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (28, '81', 'Fiziska persona, ar kuru ir noslēgts uzņēmuma līgums', 1, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (29, '82', 'Fiziska persona, ar kuru ir izbeigts uzņēmuma līgums', 1, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (32, '91', 'Datums, ar kuru darba ņēmējam vai mikrouzņēmuma darbiniekam (bērna tēvam) ir piešķirts atvaļinājums sakarā ar bērna piedzimšanu', 1, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (33, '92', 'Datums, ar kuru darba ņēmējs vai mikrouzņēmuma darbinieks (bērna tēvs) ir sācis darbu pēc atvaļinājuma sakarā ar bērna piedzimšanu', 1, 0, 0);
INSERT INTO A_REPORT_CODES (ID, CODE, DESCR, USED, TP1, TP2) VALUES (31, 'PM', 'Darba ņēmēja professions (aroda, amata, specialitātes) maiņa', 1, 0, 0);


COMMIT WORK;

INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0010000', 'Rīga');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0050000', 'Daugavpils');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0090000', 'Jelgava');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0110000', 'Jēkabpils');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0130000', 'Jūrmala');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0170000', 'Liepāja');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0210000', 'Rēzekne');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0250000', 'Valmiera');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0270000', 'Ventspils');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0320200', 'Aizkraukles novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0320201', 'Aizkraukles pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0320244', 'Aizkraukles pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0321000', 'Jaunjelgavas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0321007', 'Jaunjelgavas pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0321027', 'Jaunjelgavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0321050', 'Daudzeses pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0321078', 'Seces pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0321080', 'Sērenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0321084', 'Staburaga pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0321086', 'Sunākstes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0321400', 'Pļaviņu novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0321413', 'Pļaviņu pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0321442', 'Aiviekstes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0321458', 'Klintaines pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0321492', 'Vietalvas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0326100', 'Kokneses novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0326146', 'Bebru pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0326154', 'Iršu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0326160', 'Kokneses pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0327100', 'Neretas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0327166', 'Mazzalves pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0327170', 'Neretas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0327174', 'Pilskalnes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0327196', 'Zalves pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0328200', 'Skrīveru novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0360200', 'Alūksnes novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0360201', 'Alūksnes pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0360242', 'Alsviķu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0360244', 'Annas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0360252', 'Ilzenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0360256', 'Jaunalūksnes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0360258', 'Jaunannas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0360260', 'Jaunlaicenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0360264', 'Kalncempju pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0360268', 'Liepnas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0360272', 'Malienas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0360274', 'Mālupes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0360276', 'Mārkalnes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0360280', 'Pededzes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0360288', 'Veclaicenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0360294', 'Zeltiņu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0360296', 'Ziemera pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0360800', 'Apes novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0360805', 'Apes pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0360825', 'Apes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0360848', 'Gaujienas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0360884', 'Trapenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0360890', 'Virešu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0380200', 'Balvu novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0380201', 'Balvu pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0380246', 'Balvu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0380248', 'Bērzkalnes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0380250', 'Bērzpils pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0380252', 'Briežuciema pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0380256', 'Krišjāņu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0380258', 'Kubulu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0380266', 'Lazdulejas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0380286', 'Tilžas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0380290', 'Vectilžas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0380294', 'Vīksnas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0381600', 'Viļakas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0381615', 'Viļakas pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0381660', 'Kupravas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0381670', 'Medņevas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0381678', 'Susāju pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0381682', 'Šķilbēnu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0381692', 'Vecumu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0381698', 'Žīguru pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0384400', 'Baltinavas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0387500', 'Rugāju novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0387564', 'Lazdukalna pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0387574', 'Rugāju pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0400200', 'Bauskas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0400201', 'Bauskas pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0400246', 'Brunavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0400250', 'Ceraukstes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0400252', 'Codes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0400256', 'Dāviņu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0400260', 'Gailīšu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0400268', 'Īslīces pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0400272', 'Mežotnes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0400292', 'Vecsaules pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0406400', 'Iecavas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0407700', 'Rundāles novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0407776', 'Rundāles pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0407788', 'Svitenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0407796', 'Viesturu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0409500', 'Vecumnieku novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0409544', 'Bārbeles pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0409562', 'Kurmenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0409580', 'Skaistkalnes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0409584', 'Stelpes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0409590', 'Valles pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0409594', 'Vecumnieku pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0420200', 'Cēsu novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0420201', 'Cēsu pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0420290', 'Vaives pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0421200', 'Līgatnes novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0421211', 'Līgatnes pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0421262', 'Līgatnes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0424701', 'Amatas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0424742', 'Amatas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0424746', 'Drabešu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0424768', 'Nītaures pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0424778', 'Skujenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0424796', 'Zaubes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0425700', 'Jaunpiebalgas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0425756', 'Jaunpiebalgas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0425798', 'Zosēnu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0427300', 'Priekuļu novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0427360', 'Liepas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0427364', 'Mārsnēnu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0427372', 'Priekuļu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0427394', 'Veselavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0427500', 'Pārgaujas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0427574', 'Raiskuma pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0427580', 'Stalbes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0427582', 'Straupes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0427700', 'Raunas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0427748', 'Drustu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0427776', 'Raunas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0429300', 'Vecpiebalgas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0429350', 'Dzērbenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0429354', 'Inešu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0429358', 'Kaives pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0429386', 'Taurenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0429392', 'Vecpiebalgas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440200', 'Daugavpils novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440242', 'Ambeļu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440246', 'Biķernieku pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440250', 'Demenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440252', 'Dubnas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440260', 'Kalkūnes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440262', 'Kalupes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440264', 'Laucesas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440268', 'Līksnas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440270', 'Maļinovas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440272', 'Medumu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440274', 'Naujenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440276', 'Nīcgales pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440284', 'Salienas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440286', 'Skrudalienas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440288', 'Sventes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440292', 'Tabores pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440294', 'Vaboles pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440296', 'Vecsalienas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440298', 'Višķu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440801', 'Ilūkstes novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440807', 'Ilūkstes pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440815', 'Subates pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440835', 'Prodes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440844', 'Bebrenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440854', 'Dvietes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440856', 'Eglaines pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440880', 'Pilskalnes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0440890', 'Šēderes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0460200', 'Dobeles novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0460201', 'Dobeles pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0460242', 'Annenieku pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0460246', 'Auru pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0460252', 'Bērzes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0460254', 'Bikstu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0460260', 'Dobeles pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0460268', 'Jaunbērzes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0460272', 'Krimūnu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0460280', 'Naudītes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0460284', 'Penkules pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0460298', 'Zebrenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0460800', 'Auces novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0460805', 'Auces pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0460825', 'Vecauces pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0460850', 'Bēnes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0460864', 'Īles pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0460876', 'Lielauces pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0460890', 'Ukru pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0460894', 'Vītiņu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0468900', 'Tērvetes novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0468944', 'Augstkalnes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0468956', 'Bukaišu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0468988', 'Tērvetes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0500200', 'Gulbenes novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0500201', 'Gulbenes pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0500244', 'Beļavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0500248', 'Daukstu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0500252', 'Druvienas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0500256', 'Galgauskas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0500260', 'Jaungulbenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0500264', 'Lejasciema pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0500268', 'Litenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0500272', 'Lizuma pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0500276', 'Līgo pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0500284', 'Rankas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0500288', 'Stāmerienas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0500290', 'Stradu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0500294', 'Tirzas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0540200', 'Jelgavas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0540248', 'Elejas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0540252', 'Glūdas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0540256', 'Jaunsvirlaukas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0540258', 'Kalnciema pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0540260', 'Lielplatones pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0540262', 'Līvbērzes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0540270', 'Platones pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0540274', 'Sesavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0540282', 'Svētes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0540286', 'Valgundes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0540290', 'Vilces pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0540292', 'Vircavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0540296', 'Zaļenieku pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0546701', 'Ozolnieku novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0546744', 'Cenu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0546766', 'Ozolnieku pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0546778', 'Salgales pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0560200', 'Jēkabpils novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0560248', 'Ābeļu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0560252', 'Dignājas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0560254', 'Dunavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0560266', 'Kalna pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0560274', 'Leimaņu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0560282', 'Rubenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0560298', 'Zasas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0560800', 'Aknīstes novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0560805', 'Aknīstes pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0560825', 'Aknīstes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0560844', 'Asares pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0560862', 'Gārsenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0561800', 'Viesītes novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0561815', 'Viesītes pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0561835', 'Viesītes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0561858', 'Elkšņu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0561880', 'Rites pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0561888', 'Saukas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0566900', 'Krustpils novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0566946', 'Atašienes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0566968', 'Krustpils pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0566970', 'Kūku pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0566976', 'Mežāres pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0566994', 'Variešu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0566996', 'Vīpes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0568700', 'Salas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0568786', 'Salas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0568790', 'Sēlpils pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0600202', 'Krāslavas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0600201', 'Krāslavas pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0600248', 'Aulejas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0600262', 'Indras pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0600264', 'Izvaltas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0600268', 'Kalniešu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0600270', 'Kaplavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0600274', 'Kombuļu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0600278', 'Krāslavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0600284', 'Piedrujas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0600286', 'Robežnieku pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0600288', 'Skaistas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0600296', 'Ūdrīšu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0601000', 'Dagdas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0601009', 'Dagdas pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0601042', 'Andrupenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0601044', 'Andzeļu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0601046', 'Asūnes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0601050', 'Bērziņu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0601054', 'Dagdas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0601056', 'Ezernieku pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0601076', 'Konstantinovas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0601080', 'Ķepovas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0601090', 'Svariņu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0601092', 'Šķaunes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0604300', 'Aglonas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0604342', 'Aglonas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0604358', 'Grāveru pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0604372', 'Kastuļinas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0604394', 'Šķeltovas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0620200', 'Kuldīgas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0620201', 'Kuldīgas pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0620246', 'Ēdoles pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0620250', 'Gudenieku pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0620254', 'Īvandes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0620258', 'Kabiles pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0620260', 'Kurmāles pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0620264', 'Laidu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0620272', 'Padures pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0620274', 'Pelču pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0620280', 'Rendas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0620284', 'Rumbas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0620290', 'Snēpeles pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0620292', 'Turlavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0620296', 'Vārmes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0621200', 'Skrundas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0621209', 'Skrundas pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0621229', 'Skrundas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0621268', 'Nīkrāces pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0621278', 'Raņķu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0621282', 'Rudbāržu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0624200', 'Alsungas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0640600', 'Aizputes novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0640605', 'Aizputes pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0640642', 'Aizputes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0640648', 'Cīravas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0640666', 'Kalvenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0640668', 'Kazdangas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0640672', 'Lažas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0640801', 'Durbes novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0640807', 'Durbes pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0640827', 'Durbes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0640850', 'Dunalkas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0640888', 'Tadaiķu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0640894', 'Vecpils pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0641000', 'Grobiņas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0641009', 'Grobiņas pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0641044', 'Bārtas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0641056', 'Gaviezes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0641060', 'Grobiņas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0641076', 'Medzes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0641401', 'Pāvilostas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0641413', 'Pāvilostas pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0641486', 'Sakas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0641496', 'Vērgales pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0641600', 'Priekules novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0641615', 'Priekules pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0641646', 'Bunkas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0641658', 'Gramzdas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0641664', 'Kalētu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0641682', 'Priekules pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0641698', 'Virgas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0647900', 'Nīcas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0647978', 'Nīcas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0647980', 'Otaņķu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0648500', 'Rucavas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0648552', 'Dunikas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0648584', 'Rucavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0649300', 'Vaiņodes novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0649354', 'Embūtes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0649392', 'Vaiņodes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0660200', 'Limbažu novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0660201', 'Limbažu pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0660252', 'Katvaru pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0660264', 'Limbažu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0660268', 'Pāles pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0660276', 'Skultes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0660280', 'Umurgas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0660284', 'Vidrižu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0660288', 'Viļķenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0661000', 'Alojas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0661007', 'Alojas pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0661017', 'Staiceles pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0661027', 'Alojas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0661037', 'Staiceles pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0661044', 'Braslavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0661048', 'Brīvzemnieku pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0661400', 'Salacgrīvas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0661405', 'Ainažu pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0661415', 'Salacgrīvas pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0661425', 'Ainažu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0661435', 'Salacgrīvas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0661460', 'Liepupes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0680200', 'Ludzas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0680201', 'Ludzas pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0680246', 'Briģu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0680250', 'Cirmas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0680258', 'Isnaudas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0680260', 'Istras pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0680278', 'Nirzas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0680280', 'Ņukšu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0680286', 'Pildas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0680288', 'Pureņu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0680292', 'Rundēnu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0681000', 'Kārsavas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0681009', 'Kārsavas pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0681054', 'Goliševas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0681068', 'Malnavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0681070', 'Mežvidu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0681072', 'Mērdzenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0681094', 'Salnavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0681801', 'Zilupes novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0681817', 'Zilupes pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0681864', 'Lauderu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0681884', 'Pasienes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0681896', 'Zaļesjes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0684901', 'Ciblas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0684944', 'Blontu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0684948', 'Ciblas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0684966', 'Līdumnieku pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0684990', 'Pušmucovas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0684998', 'Zvirgzdenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0700200', 'Madonas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0700201', 'Madonas pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0700242', 'Aronas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0700244', 'Barkavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0700246', 'Bērzaunes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0700250', 'Dzelzavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0700262', 'Kalsnavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0700266', 'Lazdonas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0700268', 'Liezēres pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0700270', 'Ļaudonas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0700274', 'Mārcienas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0700276', 'Mētrienas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0700282', 'Ošupes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0700286', 'Praulienas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0700290', 'Sarkaņu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0700296', 'Vestienas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0700800', 'Cesvaines novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0700807', 'Cesvaines pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0700827', 'Cesvaines pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0701400', 'Lubānas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0701413', 'Lubānas pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0701458', 'Indrānu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0701800', 'Varakļānu novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0701817', 'Varakļānu pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0701878', 'Murmastienes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0701894', 'Varakļānu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0705500', 'Ērgļu novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0705554', 'Ērgļu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0705560', 'Jumurdas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0705592', 'Sausnējas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0740202', 'Ogres novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0740201', 'Ogres pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0740252', 'Krapes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0740256', 'Ķeipenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0740260', 'Lauberes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0740268', 'Madlienas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0740272', 'Mazozolu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0740276', 'Meņģeles pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0740280', 'Ogresgala pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0740288', 'Suntažu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0740292', 'Taurupes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0740600', 'Ikšķiles novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0740605', 'Ikšķiles pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0740625', 'Tīnūžu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0741001', 'Ķeguma novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0741009', 'Ķeguma pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0741029', 'Tomes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0741044', 'Birzgales pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0741084', 'Rembates pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0741401', 'Lielvārdes novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0741413', 'Lielvārdes pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0741433', 'Lielvārdes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0741448', 'Jumpravas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0741464', 'Lēdmanes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0760202', 'Preiļu novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0760201', 'Preiļu pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0760244', 'Aizkalnes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0760256', 'Pelēču pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0760258', 'Preiļu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0760274', 'Saunas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0761201', 'Līvānu novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0761211', 'Līvānu pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0761252', 'Jersikas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0761266', 'Rožupes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0761268', 'Rudzātu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0761282', 'Sutru pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0761286', 'Turku pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0766300', 'Riebiņu novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0766348', 'Galēnu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0766362', 'Riebiņu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0766370', 'Rušonas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0766376', 'Silajāņu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0766378', 'Sīļukalna pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0766380', 'Stabulnieku pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0769101', 'Vārkavas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0769164', 'Rožkalnu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0769190', 'Upmalas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0769194', 'Vārkavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0780200', 'Rēzeknes novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0780242', 'Audriņu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0780244', 'Bērzgales pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0780246', 'Čornajas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0780250', 'Dricānu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0780252', 'Feimaņu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0780254', 'Gaigalavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0780256', 'Griškānu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0780258', 'Ilzeskalna pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0780260', 'Kantinieku pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0780262', 'Kaunatas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0780266', 'Lendžu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0780268', 'Lūznavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0780270', 'Maltas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0780272', 'Mākoņkalna pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0780274', 'Nagļu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0780276', 'Ozolaines pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0780278', 'Ozolmuižas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0780280', 'Pušas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0780282', 'Rikavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0780284', 'Nautrēnu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0780286', 'Sakstagala pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0780288', 'Silmalas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0780292', 'Stoļerovas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0780294', 'Stružānu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0780296', 'Vērēmu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0781800', 'Viļānu novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0781817', 'Viļānu pilsēta');


COMMIT WORK;

INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0781848', 'Dekšāres pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0781890', 'Sokolku pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0781898', 'Viļānu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0800600', 'Baldones novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0800605', 'Baldones pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0800625', 'Baldones pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0800800', 'Ķekavas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0800807', 'Baložu pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0800856', 'Daugmales pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0800870', 'Ķekavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0801000', 'Olaines novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0801009', 'Olaines pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0801080', 'Olaines pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0801200', 'Salaspils novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0801211', 'Salaspils pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0801231', 'Salaspils pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0801400', 'Saulkrastu novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0801413', 'Saulkrastu pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0801433', 'Saulkrastu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0801601', 'Siguldas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0801615', 'Siguldas pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0801642', 'Allažu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0801666', 'Mores pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0801694', 'Siguldas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0801800', 'Inčukalna novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0801817', 'Vangažu pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0801864', 'Inčukalna pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0804400', 'Ādažu novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0804900', 'Babītes novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0804948', 'Babītes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0804988', 'Salas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0805200', 'Carnikavas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0806000', 'Garkalnes novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0806900', 'Krimuldas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0806956', 'Lēdurgas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0806968', 'Krimuldas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0807400', 'Mālpils novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0807600', 'Mārupes novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0808400', 'Ropažu novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0809200', 'Sējas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0809600', 'Stopiņu novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0840200', 'Saldus novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0840201', 'Saldus pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0840248', 'Ezeres pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0840256', 'Jaunauces pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0840258', 'Jaunlutriņu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0840262', 'Kursīšu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0840266', 'Lutriņu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0840270', 'Nīgrandes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0840272', 'Novadnieku pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0840276', 'Pampāļu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0840282', 'Rubas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0840286', 'Saldus pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0840288', 'Šķēdes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0840292', 'Vadakstes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0840294', 'Zaņas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0840296', 'Zirņu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0840298', 'Zvārdes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0840601', 'Brocēnu novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0840605', 'Brocēnu pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0840625', 'Cieceres pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0840644', 'Blīdenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0840652', 'Gaiķu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0840680', 'Remtes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0880200', 'Talsu novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0880201', 'Talsu pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0880213', 'Sabiles pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0880215', 'Stendes pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0880217', 'Valdemārpils pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0880237', 'Ārlavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0880242', 'Abavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0880246', 'Balgales pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0880254', 'Ģibuļu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0880258', 'Īves pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0880264', 'Ķūļciema pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0880268', 'Laidzes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0880270', 'Laucienes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0880272', 'Lībagu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0880274', 'Lubes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0880286', 'Strazdes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0880292', 'Valdgales pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0880294', 'Vandzenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0880296', 'Virbu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0885100', 'Dundagas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0885150', 'Dundagas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0885162', 'Kolkas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0887600', 'Mērsraga novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0888301', 'Rojas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0900200', 'Tukuma novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0900201', 'Tukuma pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0900246', 'Degoles pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0900248', 'Džūkstes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0900254', 'Irlavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0900258', 'Jaunsātu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0900268', 'Lestenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0900274', 'Pūres pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0900278', 'Sēmes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0900280', 'Slampes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0900284', 'Tumes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0900296', 'Zentenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0901201', 'Kandavas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0901211', 'Kandavas pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0901244', 'Cēres pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0901262', 'Kandavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0901270', 'Matkules pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0901288', 'Vānes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0901292', 'Zantes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0901294', 'Zemītes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0905100', 'Engures novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0905150', 'Engures pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0905166', 'Lapmežciema pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0905182', 'Smārdes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0905700', 'Jaunpils novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0905756', 'Jaunpils pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0905790', 'Viesatu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0940200', 'Valkas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0940201', 'Valkas pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0940252', 'Ērģemes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0940266', 'Kārķu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0940288', 'Valkas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0940292', 'Vijciema pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0940296', 'Zvārtavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0941600', 'Smiltenes novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0941615', 'Smiltenes pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0941644', 'Bilskas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0941646', 'Blomes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0941648', 'Brantu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0941658', 'Grundzāles pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0941670', 'Launkalnes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0941674', 'Palsmanes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0941680', 'Smiltenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0941690', 'Variņu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0941800', 'Strenču novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0941813', 'Sedas pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0941817', 'Strenču pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0941860', 'Jērcēnu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0941876', 'Plāņu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0960200', 'Kocēnu novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0960244', 'Bērzaines pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0960252', 'Dikļu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0960264', 'Kocēnu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0960288', 'Vaidavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0960296', 'Zilākalna pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0961000', 'Mazsalacas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0961011', 'Mazsalacas pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0961031', 'Mazsalacas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0961076', 'Ramatas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0961082', 'Sēļu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0961084', 'Skaņkalnes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0961600', 'Rūjienas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0961615', 'Rūjienas pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0961656', 'Ipiķu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0961658', 'Jeru pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0961668', 'Lodes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0961694', 'Vilpulkas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0964700', 'Beverīnas novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0964746', 'Brenguļu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0964762', 'Kauguru pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0964784', 'Trikātas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0967101', 'Burtnieku novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0967148', 'Burtnieku pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0967154', 'Ēveles pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0967170', 'Matīšu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0967178', 'Rencēnu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0967190', 'Valmieras pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0967192', 'Vecates pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0967300', 'Naukšēnu novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0967366', 'Ķoņu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0967372', 'Naukšēnu pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0980200', 'Ventspils novads');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0980213', 'Piltenes pilsēta');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0980233', 'Piltenes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0980244', 'Ances pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0980250', 'Jūrkalnes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0980256', 'Popes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0980260', 'Puzes pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0980266', 'Tārgales pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0980270', 'Ugāles pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0980274', 'Usmas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0980278', 'Užavas pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0980284', 'Vārves pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0980290', 'Ziru pagasts');
INSERT INTO A_TERITORIAL_CODES (ID, DESCR) VALUES ('0980294', 'Zlēku pagasts');


COMMIT WORK;

INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('11', 'Nemateriālie ieguldijumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('1210', 'Zeme, ēkas', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('1220', 'Iekārtas un mašīnas', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('1221', 'Iekārtas un mašīnas ar ES finansējumu', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('1230', 'Pārējie pamatlīdzekļi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('1231', 'Pārēie pamatlīdzekļi līzings', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('1240', 'Pamatlīdzekļu izveidošanas izmaksas', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('1291', 'Ēku nolietojums', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('1292', 'Iekārtu un mašīnu nolietojums', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('1293', 'Pārējo pamatlīdzekļu nolietojums', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('1294', 'Iekārtu un mašīnu ar ES finansējumu nolietojums', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('13', 'Ilgtermiņa finansu ieguldijumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('2110', 'Izejvielas un materiāli', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('2120', 'Nepabeigtie ražojumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('2130', 'Gatavie ražojumi un preces pārdošanai', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('2140', 'Nepabeigtie pasūtijumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('2190', 'Avansa maksājumi par precēm', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('22', 'Produktīvie un darba lopi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('2310', 'Norēķini ar pircējiem un pasūtītājiem', NULL, 'DB');
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('2380', 'Avansa norēķini', 'CN', NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('2410', 'Nākamo periodu izdevumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('2610', 'kase', 'KA', NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('2620', 'Swedbank EUR', 'BA', NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('2621', 'Swedbank', 'BA', NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('3110', 'Pamatkapitāls', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('3210', 'Privātiem nolūkiem izņemti līdzekļi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('3220', 'Privātie ieguldijumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('3310', 'Rezerves kapitāls', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('3330', 'Citas likumā paredzētas rezerves', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('3350', 'Statūtos paredzētās rezerves', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('3360', 'Pārējās rezerves', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('3410', 'Pārskata gada nesadalītā peļņa', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('3420', 'Iepriekšējo gadu nesadalītā peļņa', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('5140', 'Citi aizņēmumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('51411', 'Līzings 1', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('51412', 'Līzings 2', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('5150', 'Īstermiņa aizņēmumi no kredītiestādēm', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('5160', 'Ilgtermiņa aizņēmumi no kredītiestādēm', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('5210', 'Norēķini par saņemtajiem avansiem', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('5310', 'Norēķini ar piegādātājiem', NULL, 'KR');
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('5550', 'Norēķini par parādiem personālam', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('5610', 'Norēķini ar personālu', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('5620', 'Norēķini par ieturējumiem', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('5710', 'UIN', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('5722', 'IIN', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('5723', 'VSAOI', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('5724', 'Nekustāmā īpašuma nodklis', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('5725', 'Dabas resursu nodokis', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('5726', 'Akcīzes nodoklis', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('5727', 'Valsts nodevas', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('5731', 'PVN', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('5736', 'Kokmateriālu PVN', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('5910', 'Nākamo periodu ieņēmumi (ilgtermiņa)', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('5920', 'Nākamo periodu ieņēmumi (īstermiņa)', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('6111', 'Lauksaimn.ieņēmumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('6112', 'Nelauksaimn.ieņēmumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('6113', 'Pakalpojumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('6114', 'Blakusprodukti', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('6520', 'Pārējie ieņēmumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('6521', 'Subsīdijas', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('6522', 'Akcīzes nodokļa kompensācija', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('6530', 'Ieņēmumi no zemes gabalu iznomāšanas', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('6540', 'Ieņēmumi no apgrozāmo līdzekļu pārdošanas', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('6550', 'Ieņēmumi no pamatlīdzekļu pārdošanas', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('6580', 'Papildu ieguldijumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('6590', 'Kapitālieguldijumiem veiktie darbi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7110', 'Materiāli', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7111', 'Materiāli', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7112', 'Tehnikas uzturēšana', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7113', 'Smērvielas', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7114', 'Kurināmais', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('71151', 'Benzīns', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('71152', 'Dīzelis', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('71153', 'Smērvielas', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('71154', 'Tehnikas uzturēšana', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7117', 'Kurināmais', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7118', 'Pakalpojumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7119', 'Citi materiāli', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7120', 'Preču iepirkšanas un piegādes izdevumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7140', 'Taras izdevumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7150', 'Muitas un ievednodevas', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7160', 'Pārējie ārējie izdevumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7170', 'Samaksa par darbiem un pakalpojumiem no ārienes', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7190', 'Krājumu vērtības izmaiņas', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7210', 'Strādnieku algas', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7211', 'Algas nelauksaimnieciskajai ražošanai', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7310', 'Sociālās apdrošināšanas maksājumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7311', 'VSAOI nelauksaimnieciskajai ražošanai', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7330', 'Uzņēmējdarbības riska nodeva', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7410', 'Nemateriālo ieguldijumu vērtības norakstīšana', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7420', 'Pamatlīdzekļu nolietojums', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7421', 'Nolietojums pamatlīdzekļiem ar ES finansējumu', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7510', 'Dabas aizsardzības izdevumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7521', 'Saimniecības izdevumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7522', 'Elektrība', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7523', 'Gāze', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7524', 'Atkritumu izvešana', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7525', 'Tehnikas uzturēšana', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7526', 'Telpu uzturēšana', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7527', 'Komunālie maksājumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7528', 'Nomas maksa', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7529', 'Dažādi materiāli', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7540', 'Apdrošināšanas maksājumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7550', 'Pārējie saimnieciskās darbības izdevumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7552', 'Nodevas', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7553', 'Neizskaitāmais PVN', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7560', 'Darbinieku apmācības izdevumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7570', 'Komandējumu izdevumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7610', 'Tara', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7620', 'Preču transportēšanas izdevumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7630', 'Preču transporta apdrošināšana', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7640', 'Samaksātās komisijas naudas', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7650', 'Citi pārdošanas izdevumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7651', 'Reklāma', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7710', 'Sakaru izdevumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7711', 'Pasta izdevumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7720', 'Kantora (biroja) izdevumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7730', 'Jurista pakalpojumu apmaksa', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7740', 'Gada pārskata un revīzijas izdevumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7750', 'Naudas apgrozijuma blakus izdevumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7760', 'Transporta izdevumi administrācijas vajadzībām', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7770', 'Citi administrācijas izdevumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7771', 'Konsultācijas', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7772', 'Reprezentācijas', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('7810', 'Iepriekšējo periodu izmaksas', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('8120', 'Pārējie ieņēmumi no procentiem', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('8150', 'Ienākumi no valūtas kursa samazināšanās', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('8160', 'Saņemtās soda naudas un līgumsodi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('8170', 'Peļņa no valūtas pirkšanas vai pārdošanas', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('8190', 'Citi ieņēmumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('8191', 'Personīgie ieņēmumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('8192', 'Attaisnotie personīgie ieņēmumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('8193', 'ES projekta finansējums', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('8220', 'Samaksātie procenti', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('8240', 'Ilgtermiņa aizdevumu procentu samaksa', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('8250', 'Zaudējumi no valūtas kursa pazemināšanās', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('8260', 'Samaksātas soda naudas un līgumsodi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('8270', 'Zaudējumi no valūtas pirkšanas vai pārdošanas', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('8290', 'Citi izdevumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('8291', 'Personīgie izdevumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('8292', 'Attaisnotie personīgie izdevumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('8293', 'Ziedojumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('8310', 'Ārkārtas ieņēmumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('8410', 'Ārkārtas izdevumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('8610', 'Peļņa vai zaudējumi', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('8810', 'UIN', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('8820', 'Dabas resursu nodoklis', NULL, NULL);
INSERT INTO F_ACP21 (AC, NAME, ID1, ID2) VALUES ('8830', 'Nekustāmā īpašuma nodoklis', NULL, NULL);


COMMIT WORK;

INSERT INTO F_ACP23 (IDX, NAME, ID1, ID2) VALUES ('BA', 'Banka', '01      ', 1);
INSERT INTO F_ACP23 (IDX, NAME, ID1, ID2) VALUES ('CIE', 'Ienākumi, kas neattiecas uz nodokli', '08      ', 4);
INSERT INTO F_ACP23 (IDX, NAME, ID1, ID2) VALUES ('CIZ', 'Neuzrādāmie izdevumi', '13      ', 4);
INSERT INTO F_ACP23 (IDX, NAME, ID1, ID2) VALUES ('CN', 'Cita nauda', '03      ', 1);
INSERT INTO F_ACP23 (IDX, NAME, ID1, ID2) VALUES ('DIZ', 'Darba alga un tai pielīdzināmie izdevumi', NULL, 3);
INSERT INTO F_ACP23 (IDX, NAME, ID1, ID2) VALUES ('KA', 'Kase', '02      ', 1);
INSERT INTO F_ACP23 (IDX, NAME, ID1, ID2) VALUES ('LIE', 'Ienākumi no lauksaimniecības', '04      ', 2);
INSERT INTO F_ACP23 (IDX, NAME, ID1, ID2) VALUES ('LIZ', 'Izdevumi lauksaimniecībai', '09      ', 3);
INSERT INTO F_ACP23 (IDX, NAME, ID1, ID2) VALUES ('LIZ1', 'Izdevumi lauksaimniecībai ierobežotā apmērā', '14      ', 3);
INSERT INTO F_ACP23 (IDX, NAME, ID1, ID2) VALUES ('MIZ', 'Samaksātais mikrouzņēmuma nodoklis', NULL, 3);
INSERT INTO F_ACP23 (IDX, NAME, ID1, ID2) VALUES ('NIE', 'Ienākumi no citurienes', '05      ', 2);
INSERT INTO F_ACP23 (IDX, NAME, ID1, ID2) VALUES ('NIZ', 'Nelauksaimnieciskie izdevumi', '10      ', 3);
INSERT INTO F_ACP23 (IDX, NAME, ID1, ID2) VALUES ('NIZ1', 'Nelauksaimnieciskie izdevumi ierobežotā apmērā', '15      ', 3);
INSERT INTO F_ACP23 (IDX, NAME, ID1, ID2) VALUES ('PIZ', 'Proporcionāli sadalāmie izdevumi', '11      ', 3);
INSERT INTO F_ACP23 (IDX, NAME, ID1, ID2) VALUES ('SUB', 'Subsīdijas', '06      ', 2);
INSERT INTO F_ACP23 (IDX, NAME, ID1, ID2) VALUES ('ZIE', 'Neapliekamie ienākumi', '07      ', 4);
INSERT INTO F_ACP23 (IDX, NAME, ID1, ID2) VALUES ('ZIZ', 'Neatskaitāmie izdevumi', '12      ', 4);


COMMIT WORK;

INSERT INTO F_ACP24 (IDX, NAME, UNIT, PRICE) VALUES ('aa', 'aaa', NULL, 0);
INSERT INTO F_ACP24 (IDX, NAME, UNIT, PRICE) VALUES ('fff', 'qqq', NULL, 0);
INSERT INTO F_ACP24 (IDX, NAME, UNIT, PRICE) VALUES ('LK', 'Saimniecība', NULL, 0);
INSERT INTO F_ACP24 (IDX, NAME, UNIT, PRICE) VALUES ('sss', 'qqq', NULL, 0);
INSERT INTO F_ACP24 (IDX, NAME, UNIT, PRICE) VALUES ('TL', 'Vekals + saimniecība', NULL, 0);
INSERT INTO F_ACP24 (IDX, NAME, UNIT, PRICE) VALUES ('TR', 'Veikals', NULL, 0);


COMMIT WORK;

INSERT INTO F_ACP25 (IDX, NAME, ID1) VALUES ('0', 'Nav PVN', '0       ');
INSERT INTO F_ACP25 (IDX, NAME, ID1) VALUES ('104', 'ar PVN 21 % likmi apliekamie darījumi (arī pašpatēriņš)', '0       ');
INSERT INTO F_ACP25 (IDX, NAME, ID1) VALUES ('106', 'Atgriezta prece', '0       ');
INSERT INTO F_ACP25 (IDX, NAME, ID1) VALUES ('107', 'apliekami ar PVN 22% likmi', '0       ');
INSERT INTO F_ACP25 (IDX, NAME, ID1) VALUES ('108', 'apliekami ar PVN 12% likmi', '0       ');
INSERT INTO F_ACP25 (IDX, NAME, ID1) VALUES ('204', 'PVN ar 21 % likmi apliekamiem darījumiem', '0       ');
INSERT INTO F_ACP25 (IDX, NAME, ID1) VALUES ('206', 'PVN ar 22 % likmi apliekamiem darījumiem', '1       ');
INSERT INTO F_ACP25 (IDX, NAME, ID1) VALUES ('207', 'PVN ar 12 % likmi apliekamiem darījumiem', '1       ');
INSERT INTO F_ACP25 (IDX, NAME, ID1) VALUES ('305', 'PVN 21 % par precēm un pakalpojumiem iekšzemē savas saimnieciskās darbības nodrošināšanai', '0       ');
INSERT INTO F_ACP25 (IDX, NAME, ID1) VALUES ('307', 'PVN 22 % par precēm un pakalpojumiem iekšzemē savas saimnieciskās darbības nodrošināšanai', '1       ');
INSERT INTO F_ACP25 (IDX, NAME, ID1) VALUES ('308', 'PVN 12 % par precēm un pakalpojumiem iekšzemē savas saimnieciskās darbības nodrošināšanai', '1       ');
INSERT INTO F_ACP25 (IDX, NAME, ID1) VALUES ('400', 'Ar PVN neapliekamie izdevumi', '0       ');
INSERT INTO F_ACP25 (IDX, NAME, ID1) VALUES ('401', 'Saņemtās preces un pakalpojumi iekšzemē ', '0       ');
INSERT INTO F_ACP25 (IDX, NAME, ID1) VALUES ('505', 'Atkal PVN 21%', '0       ');
INSERT INTO F_ACP25 (IDX, NAME, ID1) VALUES ('507', 'Atkal PVN 22%', '0       ');
INSERT INTO F_ACP25 (IDX, NAME, ID1) VALUES ('508', 'Atkal PVN 12%', '0       ');
INSERT INTO F_ACP25 (IDX, NAME, ID1) VALUES ('A01', 'Samaksāts PVN budžetam', '0       ');
INSERT INTO F_ACP25 (IDX, NAME, ID1) VALUES ('A02', 'Atgriezta pārmaksa', '0       ');
INSERT INTO F_ACP25 (IDX, NAME, ID1) VALUES ('K041', 'Piegādāto kokmateriāli apliekamām personām (neizmantojot mazumtirdzniecības tīklu) ', '0       ');
INSERT INTO F_ACP25 (IDX, NAME, ID1) VALUES ('K044', 'piegādāti kokmater. Citās ES dalībvalstīs', '0       ');
INSERT INTO F_ACP25 (IDX, NAME, ID1) VALUES ('K051', 'Sniegto pakalpojumi apliekamām personām', '0       ');
INSERT INTO F_ACP25 (IDX, NAME, ID1) VALUES ('K061', 'Saņemto kokmateriāli no apliekamām personām (neizmantojot mazumtirdzniecības tīklu) ', '0       ');
INSERT INTO F_ACP25 (IDX, NAME, ID1) VALUES ('K063', 'no neapliekamām personām (neizmantojot mazumtirdzniecības tīklu)', '0       ');
INSERT INTO F_ACP25 (IDX, NAME, ID1) VALUES ('K071', 'Saņemto pakalpojumi no apliekamām personām', '0       ');
INSERT INTO F_ACP25 (IDX, NAME, ID1) VALUES ('K101', 'PVN par kokmateriāliem, kas saņemti no apliekamām personām', '0       ');
INSERT INTO F_ACP25 (IDX, NAME, ID1) VALUES ('K105', 'PVN par pakalpojumiem, kas saņemti no apliekamām personām', '0       ');
INSERT INTO F_ACP25 (IDX, NAME, ID1) VALUES ('K108', 'PVN par kokmateriāliem, kas piegādāti apliekamām personām', '0       ');
INSERT INTO F_ACP25 (IDX, NAME, ID1) VALUES ('K109', 'PVN par pakalpojumiem, kas sniegti apliekamām personām', '0       ');


COMMIT WORK;

INSERT INTO F_ACP25A (IDX, NAME) VALUES ('0', 'Nav PVN');
INSERT INTO F_ACP25A (IDX, NAME) VALUES ('1', 'Ir PVN');


COMMIT WORK;

INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('101', 'ar PVN 18 % likmi apliekamie darījumi (arī pašpatēriņš)', 18, '41', 8, 31, 1, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('102', 'ar PVN 5 % likmi apliekamie darījumi (arī pašpatēriņš)', 5, '42.1', 9, 31, 1, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('104', 'ar PVN 21 % likmi apliekamie darījumi (arī pašpatēriņš)', 21, '41', 8, 31, 1, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('105', 'ar PVN 10 % likmi apliekamie darījumi (arī pašpatēriņš)', 10, '42', 9, 31, 1, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('106', 'Atgriezta prece', 0, '', 0, 0, 0, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('107', 'ar PVN 22 % likmi apliekamie darījumi (arī pašpatēriņš)', 22, '41', 8, 31, 1, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('108', 'ar PVN 12 % likmi apliekamie darījumi (arī pašpatēriņš)', 12, '42', 9, 31, 1, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('110', 'Ar 0% apliekamie darijumi', 0, '', 10, 0, 0, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('111', '- darījumi, kas veikti  brīvostās un SEZ', 0, '44', 101, 31, 1, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('112', '- uz ES dalībvalstīm piegādātās preces', 0, 'G', 102, 0, 71, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('113', '- citās ES dalībvalstīs uzstādītās vai montētās preces', 0, '46', 103, 0, 0, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('114', '- uz ES dalībvalstīm piegādātie jaunie transportlīdzekļi', 0, '47', 104, 0, 0, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('115', '- par sniegtajiem pakalpojumiem', 0, '48', 105, 0, 0, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('116', '- eksportētās preces', 0, '481', 106, 0, 0, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('117', 'ārpuskopienas preču piegādes muitas noliktavās un brīvajās zonās', 0, '46', 103, 0, 0, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('118', 'Citās valstīs veiktie darījumi', 0, '48.2', 12, 31, 1, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('121', 'Ar PVN neapliekamie darījumi', 0, '', 13, 0, 0, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('131', 'No ES dalībvalstīm saņemtās preces (18 %)', 18, 'G', 14, 0, 12, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('132', 'No ES dalībvalstīm saņemtās preces (5 %)', 5, 'G', 15, 0, 12, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('133', 'No ES dalībvalstīm saņemtās preces (21 %)', 21, 'G', 14, 0, 12, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('134', 'No ES dalībvalstīm saņemtās preces (10 %)', 10, 'G', 15, 0, 12, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('135', 'No ES dalībvalstīm saņemtie pakalpojumi (21 %)', 21, 'P', 14, 0, 12, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('136', 'No ES dalībvalstīm saņemtās preces (22 %)', 22, 'G', 14, 0, 12, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('137', 'No ES dalībvalstīm saņemtie pakalpojumi (22 %)', 22, 'P', 14, 0, 12, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('201', 'PVN ar 18 % likmi apliekamiem darījumiem', 18, '41', 16, 32, 2, 0, 1);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('202', 'PVN ar 5 % likmi apliekamiem darījumiem', 5, '42.1', 17, 32, 2, 0, 1);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('204', 'PVN ar 21 % likmi apliekamiem darījumiem', 21, '41', 16, 32, 2, 0, 1);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('205', 'PVN ar 10 % likmi apliekamiem darījumiem', 10, '42', 17, 32, 2, 0, 1);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('206', 'PVN ar 22 % likmi apliekamiem darījumiem', 22, '41', 16, 32, 2, 0, 1);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('207', 'PVN ar 12 % likmi apliekamiem darījumiem', 12, '42', 17, 32, 2, 0, 1);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('211', 'par saņemtajiem pakalpojumiem', 21, '48.2', 18, 32, 2, 0, 1);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('231', 'PVN ar 18 % likmi apliekamām precēm, kas saņemtas no ES dalībvalstīm', 18, '', 19, 0, 13, 0, 2);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('232', 'PVN ar 5 % likmi apliekamām precēm, kas saņemtas no ES dalībvalstīm', 5, '', 20, 0, 13, 0, 2);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('233', 'PVN ar 21 % likmi apliekamām precēm, kas saņemtas no ES dalībvalstīm', 21, '', 19, 0, 13, 0, 2);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('234', 'PVN ar 10 % likmi apliekamām precēm, kas saņemtas no ES dalībvalstīm', 10, '', 20, 0, 13, 0, 2);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('235', 'PVN ar 21 % likmi apliekamiem pakalpojumiem, kas saņemtas no ES dalībvalstīm', 21, '', 19, 0, 13, 0, 2);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('236', 'PVN ar 22 % likmi apliekamām precēm, kas saņemtas no ES dalībvalstīm', 22, '', 19, 0, 13, 0, 2);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('237', 'PVN ar 12 % likmi apliekamām precēm, kas saņemtas no ES dalībvalstīm', 12, '', 20, 0, 13, 0, 2);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('238', 'PVN ar 22 % likmi apliekamiem pakalpojumiem, kas saņemtas no ES dalībvalstīm', 22, '', 19, 0, 13, 0, 2);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('251', 'Atskaitāmais priekšnodoklis vai aprēķinātais nodoklis saskaņā ar likuma 13.2 pantu', 21, '', 0, 0, 0, 0, 1);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('301', 'PVN 18 % par precēm un pakalpojumiem iekšzemē savas saimnieciskās darbības nodrošināšanai', 18, 'A', 27, 1, 4, 0, 1);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('302', 'PVN 5 % par precēm un pakalpojumiem iekšzemē savas saimnieciskās darbības nodrošināšanai', 5, 'A', 27, 1, 4, 0, 1);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('304', 'zemnieku saimniecībām izmaksātā PVN kompensācija', 12, 'K', 30, 1, 4, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('305', 'PVN 21 % par precēm un pakalpojumiem iekšzemē savas saimnieciskās darbības nodrošināšanai', 21, 'A', 27, 1, 4, 0, 1);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('306', 'PVN 10 % par precēm un pakalpojumiem iekšzemē savas saimnieciskās darbības nodrošināšanai', 10, 'A', 27, 1, 4, 0, 1);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('307', 'PVN 22 % par precēm un pakalpojumiem iekšzemē savas saimnieciskās darbības nodrošināšanai', 22, 'A', 27, 1, 4, 0, 1);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('308', 'PVN 12 % par precēm un pakalpojumiem iekšzemē savas saimnieciskās darbības nodrošināšanai', 12, 'A', 27, 1, 4, 0, 1);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('311', 'par importētajām precēm savas saimnieciskās darbības nodrošināšanai', 1, 'I', 26, 1, 4, 0, 3);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('321', 'Aprēķinātā PVN summa saskaņā ar likuma 92.panta pirmās daļas 4.punktu (izņemot 64.rindu)', 1, 'N', 28, 1, 4, 0, 3);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('331', 'aprēķinātais priekšnodoklis par precēm, kas saņemtas no ES dalībvalstīm', 1, 'G', 29, 2, 6, 0, 2);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('332', 'aprēķinātais priekšnodoklis par pakalpojumiem, kas saņemtas no ES dalībvalstīm', 1, 'P', 29, 2, 6, 0, 2);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('341', 'Neatskaitāmais priekšnodoklis', 0, '', 0, 0, 0, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('351', 'Atskaitāmais priekšnodoklis vai aprēķinātais nodoklis saskaņā ar likuma 13.2 pantu', 0, '', 0, 0, 0, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('400', 'Ar PVN neapliekamie izdevumi', 0, '', 0, 0, 9, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('401', 'Saņemtās preces un pakalpojumi iekšzemē ', 0, 'A', 23, 0, 8, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('411', 'Importētās preces ', 0, 'I', 22, 0, 8, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('421', 'Saņemtie pakalpojumi, par kuriem PVN maksā pakalpojumu saņēmējs', 0, '', 24, 0, 8, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('431', 'Preces, kas saņemtas no ES dalībvalstīm', 0, 'G', 25, 0, 0, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('501', 'Atkal PVN 18%', 18, '', 0, 0, 9, 0, 1);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('502', 'Atkal PVN 5%', 5, '', 0, 0, 9, 0, 1);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('504', 'Atkal PVN 12%', 12, '', 0, 0, 9, 0, 1);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('505', 'Atkal PVN 21%', 21, '', 0, 0, 9, 0, 1);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('506', 'Atkal PVN 10%', 10, '', 0, 0, 9, 0, 1);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('507', 'Atkal PVN 22%', 22, '', 0, 0, 9, 0, 1);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('508', 'Atkal PVN 12%', 12, '', 0, 0, 9, 0, 1);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('A01', 'Maksājumi budžetam', 0, '', 0, 0, 10, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('A02', 'Atgriezta pārmaksa', 0, '', 0, 0, 10, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('B01', 'ieņēmumi no būvniecības pakalpojumiem', 0, '41.1', 8, 21, 1, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('B02', 'saņemtie būvniecības pakalpojumi', 0, 'R3', 23, 0, 8, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('B11', 'aprēķinātais PVN no būvniecības pakalpojumiem', 1, '41.1', 8, 22, 2, 1, 2);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('B12', 'PVN par saņemtajiem būvniecības pakalpojumiem', 1, 'R3', 201, 0, 5, 1, 2);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K041', 'Piegādātie kokmateriāli apliekamām personām (neizmantojot mazumtirdzniecības tīklu) ', 0, '41.1', 8, 21, 1, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K042', 'Piegādātie kokmateriāli, izmantojot mazumtirdzniecības tīklu', 0, '', 8, 0, 1, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K043', 'Piegādātie kokmateriāli, neapliekamām personām (neizmantojot mazumtirdzniecības tīklu) ', 0, '41', 8, 31, 1, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K044', 'Piegādātie kokmateriāli  citās Eiropas Savienības dalībvalstīs', 0, 'G', 12, 0, 71, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K045', 'Piegādātie kokmateriāli brīvajās zonās un muitas noliktavās piegādātie kokmateriāli, kas ievesti Latvijas Republikā no treājām valstīm vai trešajām teritorijām un nav izlaisti brīvam apgrozijumam iekšzemē', 0, '', 0, 0, 0, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K046', 'Piegādāto kokmateriāli trešajās valstīs, vai trešajās teritorijās reģistrētām personām, kas nav reģistrētas VID apliekamo personu reģistrā', 0, '481', 16, 0, 8, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K051', 'Sniegtie pakalpojumi apliekamām personām', 0, '41.1', 8, 21, 1, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K052', 'Sniegtie pakalpojumi neapliekamām personām', 0, '41', 8, 31, 1, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K053', 'Sniegtie pakalpojumi citās Eiropas Savienības dalībvalstīs', 0, 'P', 15, 0, 72, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K054', 'Sniegtie pakalpojumi brīvajās zonās un muitas noliktavās sniegtie pakalpojumi, kas tieši saistīti ar kokmateriāliem, kas ievesti Latvijas Republikā no treājām valstīm vai trešajām teritorijām un nav izlaisti brīvam apgrozijumam iekšzemē', 0, '', 0, 0, 0, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K055', 'Sniegto pakalpojumi trešajās valstīs, vai trešajās teritorijās reģistrētām personām, kas nav reģistrētas VID apliekamo personu reģistrā', 0, '481', 16, 0, 0, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K061', 'Saņemtie kokmateriāli no apliekamām personām (neizmantojot mazumtirdzniecības tīklu) ', 0, 'R1', 23, 0, 8, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K062', 'Saņemtie kokmateriāli, izmantojot mazumtirdzniecības tīklu', 0, '', 23, 0, 8, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K063', 'no neapliekamām personām (neizmantojot mazumtirdzniecības tīklu)', 0, '', 0, 0, 0, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K064', 'brīvajās zonās un muitas noliktavās piegādātie kokmateriāli, kas ievesti Latvijas Republikā no treājām valstīm vai trešajām teritorijām un nav izlaisti brīvam apgrozijumam iekšzemē', 0, '', 0, 0, 0, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K065', 'brīvajās zonās un muitas noliktavās ar PVN 0 % likmi saņemto kokmateriālu vērtība, ja kokmateriāli ievesti Latvijas Republikā no trešajām valstīm vai trešajām teritorijām un nav izlaisti brīvam apgrozījumam iekšzemē', 0, '', 23, 0, 8, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K071', 'Saņemtie pakalpojumi no apliekamām personām', 0, 'R1', 23, 0, 8, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K072', 'Saņemtie pakalpojumi no neapliekamām personām', 0, '', 0, 0, 0, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K073', 'Saņemtie pakalpojumi pakalpojumi, kas apliekami ar PVN 0 procentu likmi ', 0, '', 0, 0, 0, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K08', 'Neapliekamo darījumu veikšanai izmantoto kokmateriālu vērtība', 0, '', 0, 0, 0, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K09', 'Neapliekamo darījumu veikšanai izmantoto pakalpojumu vērtība', 0, '', 0, 0, 0, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K101', 'PVN par kokmateriāliem, kas saņemti no apliekamām personām', 1, 'R1', 201, 11, 5, 1, 2);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K102', 'PVN par kokmateriāliem, kas piegādāti, izmantojot mazumtirdzniecības tīklu', 1, '', 16, 0, 0, 1, 3);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K103', 'PVN par kokmateriāliem, kas piegādāti neapliekamām personāmi, neizmantojot mazumtirdzniecības tīklu', 1, '41', 16, 32, 2, 1, 3);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K104', 'PVN par kokmateriāliem, kas piegādāti citās ES dalībvalstīs vai trešajās valstīs, vai trešajās teritorijās reģistrētām personām, kas nav reģistrētas VID', 1, '', 16, 0, 0, 1, 2);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K105', 'PVN par pakalpojumiem, kas saņemti no apliekamām personām', 1, 'R1', 201, 11, 5, 1, 2);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K106', 'PVN par pakalpojumiem, kas sniegti neapliekamām personām', 1, '41.1', 16, 32, 2, 1, 3);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K107', 'PVN par pakalopjumiem, kas sniegti citās ES dalībvalstīs vai trešajās valstīs, vai trešajās teritorijās reģistrētām personām, kas nav reģistrētas VID', 1, '', 16, 0, 3, 1, 2);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K108', 'PVN par kokmateriāliem, kas piegādāti apliekamām personām', 1, '41.1', 16, 22, 2, 1, 2);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K109', 'PVN par pakalpojumiem, kas sniegti apliekamām personām', 1, '41.1', 16, 22, 2, 1, 2);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K111', 'Samaksātais PVN par kokmateriāliem, kas iegādāti, izmantojot mazumtirdzniecības tīklu', 0, 'A', 27, 0, 4, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('D01', 'Pārdota prece (mobīlie telefoni, planšetdatori, klēpjdatori, ...)', 0, '41.1', 8, 21, 1, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('D02', 'Saņemta prece (mobīlie telefoni, planšetdatori, klēpjdatori, ...)', 0, 'R4', 23, 0, 8, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('D11', 'PVN par pārdoto (mobīlie telefoni, planšetdatori, klēpjdatori, ...)', 1, '41.1', 8, 22, 2, 1, 2);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('D12', 'PVN par saņemto (mobīlie telefoni, planšetdatori, klēpjdatori, ...)', 1, 'R4', 201, 0, 5, 1, 2);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('1121', '- uz ES dalībvalstīm piegādātās preces (42.p.)', 0, 'G', 102, 0, 71, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('B03', 'ieņēmumi no būvniecības izstrādājumu piegādēm', 0, '41.1', 8, 21, 1, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('B04', 'saņemtie būvniecības izstrādājumi', 0, 'R9', 23, 0, 8, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('B13', 'aprēķinātais PVN no būvniecības izstrādājumu piegādēm', 1, '41.1', 8, 22, 2, 1, 2);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('B14', 'PVN par saņemtajiem būvniecības izstrādājumiem', 1, 'R9', 201, 0, 5, 1, 2);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('D03', 'Pārdota prece (sadzīves elektronisko iekārtas un aparatūra)', 0, '41.1', 8, 21, 1, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('D04', 'Saņemta prece (sadzīves elektronisko iekārtas un aparatūra)', 0, 'R8', 23, 0, 8, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('D13', 'PVN par pārdoto (sadzīves elektronisko iekārtas un aparatūra)', 1, '41.1', 8, 22, 2, 1, 2);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('D14', 'PVN par saņemto (sadzīves elektronisko iekārtas un aparatūra)', 1, 'R8', 201, 0, 5, 1, 2);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('138', 'No ES dalībvalstīm saņemtās preces (12 %)', 12, 'G', 14, 0, 12, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('M01', 'ieņēmumi no metālizstrādājumu piegādēm un saistītiem pakalpojumiem', 0, '41.1', 8, 21, 1, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('M02', 'saņemtie metālizstrādājumi un saistītie pakalpojumi', 0, 'R7', 23, 0, 8, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('M11', 'aprēķinātais PVN no ieņēmumi no metālizstrādājumu piegādēm un saistītiem pakalpojumiem', 1, '41.1', 8, 22, 2, 1, 2);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('M12', 'PVN par saņemtajiem metālizstrādājumiem un saistītiem pakalpojumiem', 1, 'R7', 201, 0, 5, 1, 2);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('361', 'Vieglo transportlīdzekļu iegāde un imports, PVN 21% likme', 21, 'C', 27, 1, 4, 0, 1);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('432', 'Pakalpojumi, kas saņemtas no ES dalībvalstīm', 0, 'P', 25, 0, 0, 0, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('G01', 'Piegādāta prece (graudaugi un tehniskas kultūras)', 0, '41.1', 8, 21, 1, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('G02', 'Saņemta prece (graudaugi un tehniskas kultūras)', 0, 'R5', 23, 0, 8, 1, 0);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('G11', 'PVN par piegādāto prece (graudaugi un tehniskas kultūras)', 1, '41.1', 8, 22, 2, 1, 2);
INSERT INTO F_ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('G12', 'PVN par saņemto prece (graudaugi un tehniskas kultūras)', 1, 'R5', 201, 0, 5, 1, 2);


COMMIT WORK;

INSERT INTO F_BALA1 (BALID, DESCR, TA, TP) VALUES ('B1', 'Bilance', 'Aktīvs', 'Pasīvs');
INSERT INTO F_BALA1 (BALID, DESCR, TA, TP) VALUES ('P1', 'Peļņas un zaudējumu aprēķins', NULL, NULL);


COMMIT WORK;

INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (3, '001', 'B1', 'AK', 'V', '1.ILGTERMIŅA IEGULDĪJUMI', '230', NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (23, '002', 'B1', 'AK', 'V', '     1. Nemateriālie ieguldijumi', '060', NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (24, '010', 'B1', 'AK', 'S', '       1. Pētniecības darba un uzņēmuma attīstibas izmaksas', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (28, '020', 'B1', 'AK', 'S', '       2. Koncesijas, patenti, licences, preču zīmes un tamlīdzīgas tiesības', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (29, '030', 'B1', 'AK', 'S', '       3. Citi nemateriālie ieguldijumi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (30, '040', 'B1', 'AK', 'S', '       4. Uzņēmuma nemateriālā vērtiba', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (31, '050', 'B1', 'AK', 'S', '       5. Avansa maksājumi par nemateriālajiem ieguldījumiem', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (32, '060', 'B1', 'AK', 'K', '     1.KOPĀ', '010', '050', NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (33, '07', 'B1', 'AK', 'V', '     2. Pamatlīdzekļi', '130', NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (34, '070', 'B1', 'AK', 'S', '       1. Zemes gabali, ēkas, būves un ilggadīgie stādijumi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (35, '080', 'B1', 'AK', 'S', '       2. Ilgtermiņa ieguldijumi nomātos pamatlīdzekļos', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (36, '090', 'B1', 'AK', 'S', '       3. Iekārtas un mašīnas', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (37, '100', 'B1', 'AK', 'S', '       4. Pārējie pamatlīdzekļi un inventārs', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (38, '110', 'B1', 'AK', 'S', '       5. Pamatlīdzekļu izveidošana un nepabeigto celtniecības objektu izmaksas', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (39, '120', 'B1', 'AK', 'S', '       6. Avansa maksājumi par pamatlīdzekļiem', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (40, '130', 'B1', 'AK', 'K', '     2.KOPĀ', '070', '120', NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (41, '14', 'B1', 'AK', 'V', '     3. Ilgtermiņa finansu ieguldijumi', '220', NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (42, '140', 'B1', 'AK', 'S', '       1. Līdzdalība radniecīgo uzņēmumu kapitālā', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (43, '150', 'B1', 'AK', 'S', '       2. Aizdevumi radniecīgajiem uzņēmumiem', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (44, '160', 'B1', 'AK', 'S', '       3. Līdzdalība asociēto uzņēmumu kapitālā', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (45, '170', 'B1', 'AK', 'S', '       4. Aizdevumi asociētajiem uzņēmumiem', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (46, '180', 'B1', 'AK', 'S', '       5. Pārējie vērtspapīri un ieguldijumi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (47, '190', 'B1', 'AK', 'S', '       6. Pārējie aizdevumi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (48, '200', 'B1', 'AK', 'S', '       7. Pašu akcijas un daļas', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (49, '210', 'B1', 'AK', 'S', '       8. Aizdevumi uzņēmuma līdzīpašniekiem un vadībai', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (50, '220', 'B1', 'AK', 'K', '     3.KOPĀ', '140', '210', NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (51, '230', 'B1', 'AK', 'K', '1.iedaļas kopsumma', '010', '210', NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (52, '238', 'B1', 'AK', 'V', '2.APGROZĀMIE LĪDZEKĻI', '450', NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (53, '239', 'B1', 'AK', 'V', '     1. Krājumi', '300', NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (54, '240', 'B1', 'AK', 'S', '       1. Izejvielas, pamatmateriāli un palīgmateriāli', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (55, '250', 'B1', 'AK', 'S', '       2. Nepabeigtie ražojumi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (56, '260', 'B1', 'AK', 'S', '       3. Gatavie ražojumi un preces pārdošanai', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (57, '270', 'B1', 'AK', 'S', '       4. Nepabeigtie pasūtījumi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (58, '280', 'B1', 'AK', 'S', '       5. Avansa maksājumi par precēm', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (59, '290', 'B1', 'AK', 'S', '       6. Darba dzīvniekieki un produktivie dzīvniekieki', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (60, '300', 'B1', 'AK', 'K', '     1.KOPĀ', '240', '290', NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (61, '31', 'B1', 'AK', 'V', '     2. Debitori', '390', NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (62, '310', 'B1', 'AK', 'S', '       1. Pircēju un pasūtītāju parādi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (63, '320', 'B1', 'AK', 'S', '       2. Radniecīgo uzņēmumu parādi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (64, '330', 'B1', 'AK', 'S', '       3. Asociēto uzņēmumu parādi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (65, '340', 'B1', 'AK', 'S', '       4. Citi debitori', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (66, '350', 'B1', 'AK', 'S', '       5. Neiemaksātās daļas sabiedrības kapitālā', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (67, '360', 'B1', 'AK', 'S', '       6. Aizdevumi uzņēmuma līdzīpašniekiem un vadībai', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (68, '370', 'B1', 'AK', 'S', '       7. Nākamo periodu izmaksas', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (69, '380', 'B1', 'AK', 'S', '       8. Uzkrātie ieņēmumi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (70, '390', 'B1', 'AK', 'K', '     2.KOPĀ', '310', '380', NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (71, '40', 'B1', 'AK', 'V', '     3.Vērtspapiri un līdzdalība kapitālos', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (72, '400', 'B1', 'AK', 'S', '       1. Līdzdalība radniecīgo uzņēmuma kapitālā', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (73, '410', 'B1', 'AK', 'S', '       2. Pašu akcijas un daļas', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (74, '420', 'B1', 'AK', 'S', '       3. Pārējie vērtspapīri un līdzdalība kapitālos', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (75, '430', 'B1', 'AK', 'K', '     3.KOPĀ', '400', '420', NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (76, '440', 'B1', 'AK', 'S', '     4. NAUDA', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (77, '450', 'B1', 'AK', 'K', '2.iedaļas kopsumma', '240', '420', NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (78, '460', 'B1', 'AK', 'K', 'BILANCE', '010', '440', NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (79, '46', 'B1', 'PA', 'V', '1.PAŠU KAPITĀLS', '560', NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (80, '460', 'B1', 'PA', 'S', '  1. Akciju vai daļu kapitāls (pamatkapitāls)', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (81, '470', 'B1', 'PA', 'S', '  2. Akciju emisijas uzcenojums', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (82, '480', 'B1', 'PA', 'S', '  3. Ilgtermiņa ieguldījumu pārvērtēšanas rezerve', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (83, '49', 'B1', 'PA', 'S', '  4. Rezerves', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (84, '490', 'B1', 'PA', 'S', '    a) likumā noteiktās rezerves', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (85, '500', 'B1', 'PA', 'S', '    b) rezerves pašu akcijām vai daļām', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (86, '510', 'B1', 'PA', 'S', '    c) uzņēmuma statūtos noteiktās rezerves', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (87, '520', 'B1', 'PA', 'S', '    d) pārējās rezerves', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (88, '530', 'B1', 'PA', 'K', '  4.KOPĀ', '490', '520', NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (89, '54', 'B1', 'PA', 'S', '  5. Nesadalītā peļņa', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (90, '540', 'B1', 'PA', 'S', '    a) iepriekšējo gadu nesadalitā peļņa', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (91, '550', 'B1', 'PA', 'S', '    b) pārskata gada nesadalītā peļņa', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (92, '560', 'B1', 'PA', 'K', '1.iedaļas kopsumma', '460', '560', NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (93, '57', 'B1', 'PA', 'V', '2.UZKRĀJUMI', '600', NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (94, '570', 'B1', 'PA', 'S', ' 1. Uzkrājumi pensijām un tamlīdzīgām saistībām', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (95, '580', 'B1', 'PA', 'S', ' 2. Uzkrājumi paredzamajiem nodokļiem', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (96, '590', 'B1', 'PA', 'S', ' 3. Citi uzkrājumi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (97, '600', 'B1', 'PA', 'K', '2.iedaļas kopsumma', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (98, '608', 'B1', 'PA', 'V', '3.KREDITORI (īstermiņa un ilgtermiņa)', '920', NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (99, '609', 'B1', 'PA', 'V', '1.Ilgtermiņa kreditori', '750', NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (100, '610', 'B1', 'PA', 'S', ' 1. Aizņēmumi pret obligācijām', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (101, '620', 'B1', 'PA', 'S', ' 2. Akcijās pārvēršamie aizņēmumi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (102, '630', 'B1', 'PA', 'S', ' 3. Aizņēmumi no kredītiestādēm', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (103, '640', 'B1', 'PA', 'S', ' 4. Citi aizņēmumi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (104, '650', 'B1', 'PA', 'S', ' 5. No pircējiem saņamtie avansi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (105, '660', 'B1', 'PA', 'S', ' 6. Parādi piegādatājiem un darbuzņēmējiem', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (106, '670', 'B1', 'PA', 'S', ' 7. Maksājamie vekseļi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (107, '680', 'B1', 'PA', 'S', ' 8. Parādi radniecīgajiem uzņēmumiem', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (108, '690', 'B1', 'PA', 'S', ' 9. Parādi asociētajiem uzņēmumiem', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (109, '700', 'B1', 'PA', 'S', ' 10. Nodokļi un sociālās nodrošināšanas maksājumi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (110, '710', 'B1', 'PA', 'S', ' 11. Pārējie kreditori', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (111, '720', 'B1', 'PA', 'S', ' 12. Nākamo periodu ieņēmumi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (112, '730', 'B1', 'PA', 'S', ' 13. Pārskata gada dividendes', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (113, '740', 'B1', 'PA', 'S', ' 14. Iepriekšējo gadu neizmaksātās dividendes', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (114, '750', 'B1', 'PA', 'S', '1.KOPĀ', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (115, '76', 'B1', 'PA', 'V', '1.Īstermiņa kreditori', '910', NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (131, '760', 'B1', 'PA', 'S', ' 1. Aizņēmumi pret obligācijām', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (132, '770', 'B1', 'PA', 'S', ' 2. Akcijās pārvēršamie aizņēmumi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (133, '780', 'B1', 'PA', 'S', ' 3. Aizņēmumi no kredītiestādēm', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (134, '790', 'B1', 'PA', 'S', ' 4. Citi aizņēmumi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (135, '800', 'B1', 'PA', 'S', ' 5. No pircējiem saņamtie avansi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (136, '810', 'B1', 'PA', 'S', ' 6. Parādi piegādatājiem un darbuzņēmējiem', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (137, '820', 'B1', 'PA', 'S', ' 7. Maksājamie vekseļi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (138, '830', 'B1', 'PA', 'S', ' 8. Parādi radniecīgajiem uzņēmumiem', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (139, '840', 'B1', 'PA', 'S', ' 9. Parādi asociētajiem uzņēmumiem', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (140, '850', 'B1', 'PA', 'S', ' 10. Nodokļi un sociālās nodrošināšanas maksājumi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (141, '860', 'B1', 'PA', 'S', ' 11. Pārējie kreditori', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (142, '870', 'B1', 'PA', 'S', ' 12. Nākamo periodu ieņēmumi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (143, '880', 'B1', 'PA', 'S', ' 13. Pārskata gada dividendes', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (144, '890', 'B1', 'PA', 'S', ' 14. Iepriekšējo gadu neizmaksātās dividendes', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (145, '900', 'B1', 'PA', 'S', ' 15. Uzkrātās saistības', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (146, '910', 'B1', 'PA', 'K', '2.KOPĀ', '760', '900', NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (147, '920', 'B1', 'PA', 'K', '3.iedaļas kopsumma', '620', '900', NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (148, '930', 'B1', 'PA', 'K', 'BILANCE', '460', '900', NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (149, '010', 'P1', 'PA', 'K', 'Neto apgrozijums', '011', '019', NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (150, '011', 'P1', 'PA', 'S', '  ieņēmumi no veikala', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (151, '012', 'P1', 'PA', 'S', '  lauksaimniecības ieņēmumi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (152, '020', 'P1', 'PA', 'K', 'Pārdotās produkcijas ražošanas izmaksas', '021', '039', NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (153, '021', 'P1', 'PA', 'S', '  izejvielas, materiāli un preces pārdošanai', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (154, '022', 'P1', 'PA', 'S', '  degviela', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (155, '023', 'P1', 'PA', 'S', '  algas', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (156, '024', 'P1', 'PA', 'S', '  elektrība', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (157, '025', 'P1', 'PA', 'S', '  nomas maksa', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (158, '026', 'P1', 'PA', 'S', '  saimniecības izdevumi, telpu uzturēšana', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (160, '027', 'P1', 'PA', 'S', '  nolietojums', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (161, '028', 'P1', 'PA', 'S', '  tehnikas uzturēšana', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (162, '029', 'P1', 'PA', 'S', '  pārējās izmaksaas', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (163, '040', 'P1', 'PA', 'K', 'Bruto peļņa', '001', '039', NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (164, '050', 'P1', 'PA', 'K', 'Pārdošanas izmaksas', '051', '059', NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (165, '051', 'P1', 'PA', 'S', '  nomas maksa', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (166, '052', 'P1', 'PA', 'S', '  reklāma', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (167, '053', 'P1', 'PA', 'S', '  preču transports', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (168, '054', 'P1', 'PA', 'S', '  tara', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (169, '055', 'P1', 'PA', 'S', '  citi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (170, '060', 'P1', 'PA', 'K', 'Administrācijas izmaksas', '061', '069', NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (171, '061', 'P1', 'PA', 'S', '  sakari', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (172, '062', 'P1', 'PA', 'S', '  biroja izdevumi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (173, '063', 'P1', 'PA', 'S', '  grāmatvedības, juristu un citi pakalpojumi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (174, '064', 'P1', 'PA', 'S', '  bankas pakalpojumi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (175, '065', 'P1', 'PA', 'S', '  transporta izdevumi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (176, '066', 'P1', 'PA', 'S', '  pārējie', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (177, '080', 'P1', 'PA', 'K', 'Pārējās uzņēmuma saimnieciskās darbības izmaksas', '081', '099', NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (178, '081', 'P1', 'PA', 'S', '  apdrošināšana', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (179, '082', 'P1', 'PA', 'S', '  nodevas', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (180, '083', 'P1', 'PA', 'S', '  pārējie', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (181, '084', 'P1', 'PA', 'S', '  neatskaitāmais PVN', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (182, '085', 'P1', 'PA', 'S', '  komandējumi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (183, '086', 'P1', 'PA', 'S', '  zaudējumi no valūtas kursa pazemināšanās', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (184, '087', 'P1', 'PA', 'S', '  soda naudas', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (185, '088', 'P1', 'PA', 'S', '  personīgie izdevumi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (186, '089', 'P1', 'PA', 'S', '  pārējie', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (187, '100', 'P1', 'PA', 'K', 'Pārējie procentu ieņēmumi un tamlīdzīgi ieņēmumi', '101', '109', NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (188, '070', 'P1', 'PA', 'K', 'Pārējie uzņēmuma saimnieciskās darbības ieņēmumi', '070', '079', NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (189, '071', 'P1', 'PA', 'S', '  subsīdijas', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (190, '072', 'P1', 'PA', 'S', '  akcīzes nodokļa kompensācija', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (191, '073', 'P1', 'PA', 'S', '  ieņēmumi no pamatlīdzekļu pārdošanas', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (192, '074', 'P1', 'PA', 'S', '  pārējie', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (193, '101', 'P1', 'PA', 'S', NULL, NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (194, '110', 'P1', 'PA', 'K', 'Procentu maksājumi un tamlīdzīgas izmaksas', '111', '119', NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (195, '111', 'P1', 'PA', 'S', '  samaksātie %', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (196, '112', 'P1', 'PA', 'S', '  valūtas kursu svārstības', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (197, '113', 'P1', 'PA', 'S', '  citi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (198, '150', 'P1', 'PA', 'K', 'Ārkārtas ieņēmumi', '151', '159', NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (199, '151', 'P1', 'PA', 'S', NULL, NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (200, '160', 'P1', 'PA', 'K', 'Ārkārtas izdevumi', '161', '169', NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (201, '161', 'P1', 'PA', 'S', NULL, NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (202, '170', 'P1', 'PA', 'K', 'Peļņa vai zaudējumi pirms nodokļiem', '001', '169', NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (203, '180', 'P1', 'PA', 'S', 'Uzņēmuma ienākuma nodoklis par pārskata periodu', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (204, '181', 'P1', 'PA', 'S', 'Pārējie nodokļi', NULL, NULL, NULL, NULL);
INSERT INTO F_BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (205, '200', 'P1', 'PA', 'K', 'Peļņa vai zaudējumi pēc nodokļiem', '001', '199', NULL, NULL);


COMMIT WORK;

INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (15, 3, 'Db', '1*');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (19, 34, 'Db', '1210');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (20, 36, 'Db', '1220');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (21, 37, 'Db', '1230');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (22, 38, 'Db', '1240');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (23, 34, 'Db', '1291');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (24, 36, 'Db', '1292');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (25, 37, 'Db', '1293');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (26, 54, 'Db', '2110');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (27, 55, 'Db', '2120');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (28, 56, 'Db', '2130');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (29, 57, 'Db', '2140');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (30, 58, 'Db', '2190');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (31, 59, 'Db', '22');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (32, 62, 'Db', '2310');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (33, 65, 'Db', '2380');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (34, 68, 'Db', '2410');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (35, 76, 'Db', '26*');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (36, 80, 'Kr', '3110');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (37, 84, 'Kr', '3310');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (38, 84, 'Kr', '3330');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (39, 86, 'Kr', '3350');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (40, 87, 'Kr', '3360');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (41, 90, 'Kr', '3420');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (42, 91, 'Kr', '6*');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (43, 91, 'Kr', '7*');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (44, 91, 'Kr', '8*');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (45, 102, 'Kr', '5160');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (46, 133, 'Kr', '5150');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (47, 134, 'Kr', '5140');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (48, 135, 'Kr', '5210');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (49, 136, 'Kr', '531*');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (50, 140, 'Kr', '57*');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (51, 141, 'Kr', '5550');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (52, 141, 'Kr', '56*');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (53, 153, 'Kr', '7110');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (54, 153, 'Kr', '7112');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (55, 153, 'Kr', '7113');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (56, 153, 'Kr', '7114');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (57, 154, 'Kr', '71151');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (58, 154, 'Kr', '71152');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (59, 155, 'Kr', '7210');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (60, 155, 'Kr', '7211');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (61, 155, 'Kr', '7310');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (62, 155, 'Kr', '7311');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (63, 155, 'Kr', '7330');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (64, 156, 'Kr', '7522');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (66, 158, 'Kr', '7521');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (67, 158, 'Kr', '7524');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (68, 158, 'Kr', '7526');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (69, 158, 'Kr', '7527');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (70, 158, 'Kr', '7523');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (71, 160, 'Kr', '7410');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (72, 160, 'Kr', '7420');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (73, 161, 'Kr', '7525');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (75, 162, 'Kr', '7120');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (76, 162, 'Kr', '7140');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (77, 162, 'Kr', '7150');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (78, 162, 'Kr', '7160');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (79, 162, 'Kr', '717*');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (80, 162, 'Kr', '7529');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (81, 165, 'Kr', '7528');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (82, 166, 'Kr', '7651');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (83, 167, 'Kr', '7620');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (84, 167, 'Kr', '7630');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (85, 168, 'Kr', '7610');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (86, 169, 'Kr', '7650');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (87, 171, 'Kr', '771*');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (88, 172, 'Kr', '7720');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (89, 173, 'Kr', '7730');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (90, 173, 'Kr', '7740');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (91, 174, 'Kr', '7750');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (92, 175, 'Kr', '7760');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (93, 173, 'Kr', '7771');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (94, 176, 'Kr', '7770');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (95, 176, 'Kr', '7772');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (96, 178, 'Kr', '7540');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (97, 179, 'Kr', '7552');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (98, 180, 'Kr', '7550');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (99, 180, 'Kr', '7551');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (100, 181, 'Kr', '7553');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (101, 182, 'Kr', '7570');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (102, 180, 'Kr', '7560');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (103, 183, 'Kr', '8250');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (104, 184, 'Kr', '8260');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (105, 185, 'Kr', '8291');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (106, 185, 'Kr', '8292');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (107, 186, 'Kr', '8290');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (108, 186, 'Kr', '8293');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (109, 189, 'Kr', '6521');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (110, 190, 'Kr', '6522');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (111, 191, 'Kr', '6550');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (112, 192, 'Kr', '6520');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (113, 192, 'Kr', '6530');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (114, 192, 'Kr', '6540');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (115, 192, 'Kr', '6580');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (116, 192, 'Kr', '6590');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (117, 193, 'Kr', '8120');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (118, 193, 'Kr', '8150');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (119, 193, 'Kr', '8160');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (120, 193, 'Kr', '8170');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (121, 193, 'Kr', '8190');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (122, 192, 'Kr', '8190');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (123, 192, 'Kr', '8191');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (124, 192, 'Kr', '8192');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (125, 195, 'Kr', '8220');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (126, 195, 'Kr', '8240');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (127, 196, 'Kr', '8250');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (128, 196, 'Kr', '8270');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (130, 199, 'Kr', '8310');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (131, 201, 'Kr', '8410');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (132, 203, 'Kr', '8810');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (133, 204, 'Kr', '8820');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (134, 204, 'Kr', '8830');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (135, 150, 'Kr', '6*');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (136, 151, 'Kr', '6111');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (137, 157, 'Kr', NULL);
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (138, 87, 'Kr', '3220');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (139, 153, 'Db', '7111');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (140, 158, 'Db', '75292');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (141, 154, 'Kr', '71153');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (142, 161, 'Kr', '71154');
INSERT INTO F_BALA3 (ID, ID2, TP, AC) VALUES (143, 153, 'Kr', '7119');


COMMIT WORK;

INSERT INTO F_BANKS (ID, NAME) VALUES ('HABALV55', 'AS Swedbank');


COMMIT WORK;

INSERT INTO F_DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('EKA č', NULL, 'EKA č', NULL, NULL, '2');
INSERT INTO F_DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('iep.ak.', 'Iepirkuma akts', 'Iep.ak.', NULL, NULL, '5');
INSERT INTO F_DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('Kr.rēķ.', 'Kredītrēķins', 'Kr.rēķ', NULL, NULL, '4');
INSERT INTO F_DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('KTPRi', 'Izrakstīta KTPR', 'KTPR', NULL, NULL, '1');
INSERT INTO F_DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('KTPRm', 'Apmaksāta KTPR', 'KTPR', NULL, NULL, '1');
INSERT INTO F_DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('KTPRs', 'Saņemta KTPR', 'KTPR', NULL, NULL, '1');
INSERT INTO F_DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('KV', NULL, 'KV', NULL, NULL, '2');
INSERT INTO F_DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('Līg.', 'Līgums', 'Līg.', NULL, NULL, '5');
INSERT INTO F_DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('MD', 'Muitas deklarācija', NULL, NULL, NULL, '6');
INSERT INTO F_DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('MU', 'Maksājuma uzdevums', NULL, NULL, NULL, '3');
INSERT INTO F_DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('PPRdi', 'Izrakstīta PPR debitors', 'PPR', NULL, 'IZRPZ', '1');
INSERT INTO F_DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('PPRdm', 'Saņemta samaksa par PPR no debitora', 'PPR', NULL, NULL, '1');
INSERT INTO F_DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('PPRdu', 'Izrakstīta un apmaksāta PPR', 'PPR', NULL, 'IZRPZ', '1');
INSERT INTO F_DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('PPRka', 'Atgriezta prece piegādātājam', 'PPR', NULL, 'IZRPZ', '1');
INSERT INTO F_DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('PPRkm', 'Samaksāta PPR kreditoram', 'PPR', NULL, NULL, '1');
INSERT INTO F_DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('PPRks', 'Saņemta PPR kreditors', 'PPR', NULL, 'SANPZ', '1');
INSERT INTO F_DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('PPRku', 'Saņemta un apmaksāta PPR', 'PPR', NULL, 'SANPZ', '1');
INSERT INTO F_DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('Rēķ', 'Rēķins', 'Rēķ', NULL, NULL, '1');


COMMIT WORK;

INSERT INTO F_DOCTYPA (ID, NAME) VALUES ('APMPZ', 'Apmaksātās PZ');
INSERT INTO F_DOCTYPA (ID, NAME) VALUES ('IEPAK', NULL);
INSERT INTO F_DOCTYPA (ID, NAME) VALUES ('IZRPZ', 'Izrakstīta PPR');
INSERT INTO F_DOCTYPA (ID, NAME) VALUES ('KTPRI', 'Izrakstīta KTPR');
INSERT INTO F_DOCTYPA (ID, NAME) VALUES ('KTPRS', 'Saņemta KTPR');
INSERT INTO F_DOCTYPA (ID, NAME) VALUES ('KtprVA', 'Atgriezts pēc ..');
INSERT INTO F_DOCTYPA (ID, NAME) VALUES ('KtprVR', 'Realizācija');
INSERT INTO F_DOCTYPA (ID, NAME) VALUES ('KtprVS', 'Struktūrvienībām');
INSERT INTO F_DOCTYPA (ID, NAME) VALUES ('nePPR', 'Ne PPR');
INSERT INTO F_DOCTYPA (ID, NAME) VALUES ('PPRdi', 'Izrakstīta PPR debitors');
INSERT INTO F_DOCTYPA (ID, NAME) VALUES ('PPRdm', 'Saņemta samaksa par PPR no debitora');
INSERT INTO F_DOCTYPA (ID, NAME) VALUES ('PPRdu', 'Izrakstīta un apmaksāta PPR');
INSERT INTO F_DOCTYPA (ID, NAME) VALUES ('PPRka', 'Atgriezta prece piegādātājam');
INSERT INTO F_DOCTYPA (ID, NAME) VALUES ('PPRkm', 'Samaksāta PPR kreditoram');
INSERT INTO F_DOCTYPA (ID, NAME) VALUES ('PPRks', 'Saņemta PPR kreditors');
INSERT INTO F_DOCTYPA (ID, NAME) VALUES ('PPRku', 'Saņemta un apmaksāta PPR');
INSERT INTO F_DOCTYPA (ID, NAME) VALUES ('SANPZ', 'Saņemtās PZ');


COMMIT WORK;

INSERT INTO F_DOCTYPB (IDA, ID) VALUES ('APMPZ', 'PPRdm');
INSERT INTO F_DOCTYPB (IDA, ID) VALUES ('IEPAK', 'iep.ak.');
INSERT INTO F_DOCTYPB (IDA, ID) VALUES ('IZRPZ', 'PPRdi');
INSERT INTO F_DOCTYPB (IDA, ID) VALUES ('KTPRI', 'KTPRi');
INSERT INTO F_DOCTYPB (IDA, ID) VALUES ('KTPRS', 'KTPRs');
INSERT INTO F_DOCTYPB (IDA, ID) VALUES ('KtprVR', 'KTPRi');
INSERT INTO F_DOCTYPB (IDA, ID) VALUES ('nePPR', 'EKA č');
INSERT INTO F_DOCTYPB (IDA, ID) VALUES ('PPRdi', 'PPRdi');
INSERT INTO F_DOCTYPB (IDA, ID) VALUES ('PPRdm', 'PPRdm');
INSERT INTO F_DOCTYPB (IDA, ID) VALUES ('PPRdu', 'PPRdu');
INSERT INTO F_DOCTYPB (IDA, ID) VALUES ('PPRka', 'PPRka');
INSERT INTO F_DOCTYPB (IDA, ID) VALUES ('PPRkm', 'PPRkm');
INSERT INTO F_DOCTYPB (IDA, ID) VALUES ('PPRks', 'PPRks');
INSERT INTO F_DOCTYPB (IDA, ID) VALUES ('PPRku', 'PPRku');
INSERT INTO F_DOCTYPB (IDA, ID) VALUES ('SANPZ', 'PPRks');
INSERT INTO F_DOCTYPB (IDA, ID) VALUES ('APMPZ', 'PPRdu');
INSERT INTO F_DOCTYPB (IDA, ID) VALUES ('APMPZ', 'PPRkm');
INSERT INTO F_DOCTYPB (IDA, ID) VALUES ('APMPZ', 'PPRku');
INSERT INTO F_DOCTYPB (IDA, ID) VALUES ('APMPZ', 'KTPRm');
INSERT INTO F_DOCTYPB (IDA, ID) VALUES ('IZRPZ', 'PPRdu');
INSERT INTO F_DOCTYPB (IDA, ID) VALUES ('IZRPZ', 'KTPRi');
INSERT INTO F_DOCTYPB (IDA, ID) VALUES ('SANPZ', 'PPRku');
INSERT INTO F_DOCTYPB (IDA, ID) VALUES ('nePPR', 'iep.ak.');
INSERT INTO F_DOCTYPB (IDA, ID) VALUES ('nePPR', 'KV');
INSERT INTO F_DOCTYPB (IDA, ID) VALUES ('nePPR', 'Līg.');


COMMIT WORK;

INSERT INTO F_PERSONTYP (ID, IDX, NAME) VALUES (1, 'DB', 'Debitors');
INSERT INTO F_PERSONTYP (ID, IDX, NAME) VALUES (2, 'KR', 'Kreditors');


COMMIT WORK;

INSERT INTO M_ACCOUNTTYPE (ID, NAME) VALUES (1, '.?');
INSERT INTO M_ACCOUNTTYPE (ID, NAME) VALUES (2, 'Noliktava');
INSERT INTO M_ACCOUNTTYPE (ID, NAME) VALUES (3, 'Izmaksas');
INSERT INTO M_ACCOUNTTYPE (ID, NAME) VALUES (4, 'Ieņēmumi');
INSERT INTO M_ACCOUNTTYPE (ID, NAME) VALUES (5, 'Debitors');
INSERT INTO M_ACCOUNTTYPE (ID, NAME) VALUES (6, 'Kreditors');


COMMIT WORK;

INSERT INTO M_ACCOUNTS (ID, NAME, TP) VALUES ('2110', 'Izejvielas5', 2);
INSERT INTO M_ACCOUNTS (ID, NAME, TP) VALUES ('2131', 'Preces pārdošanai A', 2);
INSERT INTO M_ACCOUNTS (ID, NAME, TP) VALUES ('2132', 'Preces pārdošanai B', 2);
INSERT INTO M_ACCOUNTS (ID, NAME, TP) VALUES ('7110', 'Iepirkuma izmaksas', 3);
INSERT INTO M_ACCOUNTS (ID, NAME, TP) VALUES ('.?', 'Nenoteikts', 1);
INSERT INTO M_ACCOUNTS (ID, NAME, TP) VALUES ('7191', 'Korekcijas', 3);
INSERT INTO M_ACCOUNTS (ID, NAME, TP) VALUES ('6111', 'Pārdotā prece', 4);
INSERT INTO M_ACCOUNTS (ID, NAME, TP) VALUES ('2310', 'Debitori', 5);
INSERT INTO M_ACCOUNTS (ID, NAME, TP) VALUES ('5310', 'Kreditori', 6);
INSERT INTO M_ACCOUNTS (ID, NAME, TP) VALUES ('6112', 'Piegādes pakalpojumi', 4);
INSERT INTO M_ACCOUNTS (ID, NAME, TP) VALUES ('7170', 'Piegādes pakalpojumi', 3);
INSERT INTO M_ACCOUNTS (ID, NAME, TP) VALUES ('8000', '?', 1);


COMMIT WORK;

INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (1, 'Afganistāna', 'AFG', 'AF');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (2, 'Albānija', 'ALB', 'AL');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (3, 'Alžīrija', 'DZA', 'DZ');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (4, 'Amerikāņu Samoa', 'ASM', 'AS');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (5, 'Amerikas Savienotās Valstis', 'USA', 'US');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (6, 'Andora', 'AND', 'AD');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (7, 'Angilja', 'AIA', 'AI');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (8, 'Angola', 'AGO', 'AO');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (9, 'Antarktika', 'ATA', 'AQ');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (10, 'Antigva un Barbuda', 'ATG', 'AG');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (11, 'Apvienotie Arābu Emirāti', 'ARE', 'AE');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (12, 'Argentīna', 'ARG', 'AR');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (13, 'Armēnija', 'ARM', 'AM');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (14, 'Aruba', 'ABW', 'AW');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (15, 'ASV Mazās Aizjūras Salas', 'UMI', 'UM');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (16, 'ASV Virdžīnas', 'VIR', 'VI');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (17, 'Austrālija', 'AUS', 'AU');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (18, 'Austrija', 'AUT', 'AT');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (19, 'Austrumtimora', 'TLS', 'TL');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (20, 'Azerbaidžāna', 'AZE', 'AZ');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (21, 'Bahamas', 'BHS', 'BS');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (22, 'Bahreina', 'BHR', 'BH');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (23, 'Bangladeša', 'BGD', 'BD');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (24, 'Barbadosa', 'BRB', 'BB');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (25, 'Baltkrievija', 'BLR', 'BY');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (26, 'Beliza', 'BLZ', 'BZ');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (27, 'Beļģija', 'BEL', 'BE');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (28, 'Benina', 'BEN', 'BJ');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (29, 'Bermuda', 'BMU', 'BM');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (30, 'Bolīvija', 'BOL', 'BO');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (31, 'Bonaire, Sintēstatiusa un Saba[a]', 'BES', 'BQ');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (32, 'Bosnija un Hercegovina', 'BIH', 'BA');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (33, 'Botsvana', 'BWA', 'BW');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (34, 'Brazīlija', 'BRA', 'BR');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (35, 'Britu Virdžīnas', 'VGB', 'VG');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (36, 'Bruneja', 'BRN', 'BN');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (37, 'Bulgārija', 'BGR', 'BG');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (38, 'Burkinafaso', 'BFA', 'BF');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (39, 'Burundi', 'BDI', 'BI');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (40, 'Butāna', 'BTN', 'BT');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (41, 'Buvē Sala', 'BVT', 'BV');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (42, 'Centrālāfrikas Republika', 'CAF', 'CF');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (43, 'Čada', 'TCD', 'TD');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (44, 'Čehija', 'CZE', 'CZ');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (45, 'Čīle', 'CHL', 'CL');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (46, 'Dānija', 'DNK', 'DK');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (47, 'Dienvidāfrika', 'ZAF', 'ZA');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (48, 'Dienviddžordžija un Dienvidsendviču Salas', 'SGS', 'GS');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (49, 'Dienvidsudāna', 'SSD', 'SS');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (50, 'Dominika', 'DMA', 'DM');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (51, 'Dominikāna', 'DOM', 'DO');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (52, 'Džērsija', 'JEY', 'JE');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (53, 'Džibutija', 'DJI', 'DJ');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (54, 'Ēģipte', 'EGY', 'EG');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (55, 'Ekvadora', 'ECU', 'EC');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (56, 'Ekvatoriālā Gvineja', 'GNQ', 'GQ');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (57, 'Eritreja', 'ERI', 'ER');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (58, 'Etiopija', 'ETH', 'ET');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (59, 'Fēru Salas', 'FRO', 'FO');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (60, 'Fidži', 'FJI', 'FJ');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (61, 'Filipīnas', 'PHL', 'PH');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (62, 'Folklenda Salas', 'FLK', 'FK');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (63, 'Francija', 'FRA', 'FR');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (64, 'Francijas Dienvidjūru un Antarktikas Zemes', 'ATF', 'TF');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (65, 'Franču Polinēzija', 'PYF', 'PF');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (66, 'Gabona', 'GAB', 'GA');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (67, 'Gajāna', 'GUY', 'GY');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (68, 'Gambija', 'GMB', 'GM');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (69, 'Gana', 'GHA', 'GH');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (70, 'Gērnsija', 'GGY', 'GG');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (71, 'Gibraltārs', 'GIB', 'GI');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (72, 'Grenāda', 'GRD', 'GD');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (73, 'Grenlande', 'GRL', 'GL');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (74, 'Grieķija', 'GRC', 'GR');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (75, 'Gruzija', 'GEO', 'GE');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (76, 'Guama', 'GUM', 'GU');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (77, 'Gvadelupa', 'GLP', 'GP');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (78, 'Gvatemala', 'GTM', 'GT');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (79, 'Gviāna', 'GUF', 'GF');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (80, 'Gvineja', 'GIN', 'GN');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (81, 'Gvineja-Bisava', 'GNB', 'GW');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (82, 'Haiti', 'HTI', 'HT');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (83, 'Hērda Sala un Makdonalda Salas', 'HMD', 'HM');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (84, 'Hondurasa', 'HND', 'HN');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (85, 'Honkonga (Sjangana)', 'HKG', 'HK');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (86, 'Horvātija', 'HRV', 'HR');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (87, 'Igaunija', 'EST', 'EE');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (88, 'Indija', 'IND', 'IN');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (89, 'Indijas Okeāna Britu Teritorija', 'IOT', 'IO');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (90, 'Indonēzija', 'IDN', 'ID');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (91, 'Irāka', 'IRQ', 'IQ');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (92, 'Irāna', 'IRN', 'IR');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (93, 'Īrija', 'IRL', 'IE');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (94, 'Īslande', 'ISL', 'IS');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (95, 'Itālija', 'ITA', 'IT');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (96, 'Izraēla', 'ISR', 'IL');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (97, 'Jamaika', 'JAM', 'JM');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (98, 'Japāna', 'JPN', 'JP');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (99, 'Jaunkaledonija', 'NCL', 'NC');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (100, 'Jaunzēlande', 'NZL', 'NZ');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (101, 'Jemena', 'YEM', 'YE');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (102, 'Jordānija', 'JOR', 'JO');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (103, 'Kaboverde', 'CPV', 'CV');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (104, 'Kaimanu Salas', 'CYM', 'KY');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (105, 'Kambodža', 'KHM', 'KH');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (106, 'Kamerūna', 'CMR', 'CM');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (107, 'Kanāda', 'CAN', 'CA');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (108, 'Katara', 'QAT', 'QA');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (109, 'Kazahstāna', 'KAZ', 'KZ');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (110, 'Kenija', 'KEN', 'KE');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (111, 'Kipra', 'CYP', 'CY');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (112, 'Kirasao', 'CUW', 'CW');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (113, 'Kirgizstāna', 'KGZ', 'KG');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (114, 'Kiribati', 'KIR', 'KI');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (115, 'Kokosu (Kīlinga) Salas', 'CCK', 'CC');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (116, 'Kolumbija', 'COL', 'CO');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (117, 'Komoras', 'COM', 'KM');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (118, 'Kongo', 'COG', 'CG');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (119, 'Kongo Demokrātiskā Republika', 'COD', 'CD');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (120, 'Korejas Republika (Dienvidkoreja)[b]', 'KOR', 'KR');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (121, 'Korejas TDR (Ziemeļkoreja)[c]', 'PRK', 'KP');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (122, 'Kostarika', 'CRI', 'CR');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (123, 'Kotdivuāra', 'CIV', 'CI');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (124, 'Krievija', 'RUS', 'RU');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (125, 'Kuba', 'CUB', 'CU');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (126, 'Kuka Salas', 'COK', 'CK');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (127, 'Kuveita', 'KWT', 'KW');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (128, 'Ķīna', 'CHN', 'CN');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (129, 'Laosa', 'LAO', 'LA');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (130, 'Latvija', 'LVA', 'LV');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (131, 'Lesoto', 'LSO', 'LS');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (132, 'Libāna', 'LBN', 'LB');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (133, 'Libērija', 'LBR', 'LR');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (134, 'Lībija', 'LBY', 'LY');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (135, 'Lielbritānija', 'GBR', 'GB');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (136, 'Lietuva', 'LTU', 'LT');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (137, 'Lihtenšteina', 'LIE', 'LI');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (138, 'Luksemburga', 'LUX', 'LU');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (139, 'Madagaskara', 'MDG', 'MG');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (140, 'Majota', 'MYT', 'YT');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (141, 'Makao (Aomiņa)', 'MAC', 'MO');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (142, 'Malaizija', 'MYS', 'MY');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (143, 'Malāvija', 'MWI', 'MW');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (144, 'Maldīvija', 'MDV', 'MV');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (145, 'Mali', 'MLI', 'ML');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (146, 'Malta', 'MLT', 'MT');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (147, 'Maroka', 'MAR', 'MA');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (148, 'Māršala Salas', 'MHL', 'MH');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (149, 'Martinika', 'MTQ', 'MQ');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (150, 'Maurīcija', 'MUS', 'MU');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (151, 'Mauritānija', 'MRT', 'MR');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (152, 'Meksika', 'MEX', 'MX');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (153, 'Melnkalne', 'MNE', 'ME');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (154, 'Mena', 'IMN', 'IM');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (155, 'Mikronēzija', 'FSM', 'FM');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (156, 'Mjanma', 'MMR', 'MM');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (157, 'Moldova', 'MDA', 'MD');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (158, 'Monako', 'MCO', 'MC');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (159, 'Mongolija', 'MNG', 'MN');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (160, 'Montserrata', 'MSR', 'MS');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (161, 'Mozambika', 'MOZ', 'MZ');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (162, 'Namībija', 'NAM', 'NA');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (163, 'Nauru', 'NRU', 'NR');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (164, 'Nepāla', 'NPL', 'NP');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (165, 'Nīderlande', 'NLD', 'NL');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (166, 'Nigēra', 'NER', 'NE');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (167, 'Nigērija', 'NGA', 'NG');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (168, 'Nikaragva', 'NIC', 'NI');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (169, 'Niue', 'NIU', 'NU');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (170, 'Norfolkas Sala', 'NFK', 'NF');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (171, 'Norvēģija', 'NOR', 'NO');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (172, 'Olande', 'ALA', 'AX');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (173, 'Omāna', 'OMN', 'OM');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (174, 'Pakistāna', 'PAK', 'PK');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (175, 'Palau', 'PLW', 'PW');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (176, 'Palestīna', 'PSE', 'PS');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (177, 'Panama', 'PAN', 'PA');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (178, 'Papua-Jaungvineja', 'PNG', 'PG');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (179, 'Paragvaja', 'PRY', 'PY');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (180, 'Peru', 'PER', 'PE');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (181, 'Pitkērna', 'PCN', 'PN');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (182, 'Polija', 'POL', 'PL');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (183, 'Portugāle', 'PRT', 'PT');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (184, 'Puertoriko', 'PRI', 'PR');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (185, 'Reinjona', 'REU', 'RE');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (186, 'Rietumsahāra', 'ESH', 'EH');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (187, 'Ruanda', 'RWA', 'RW');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (188, 'Rumānija', 'ROU', 'RO');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (189, 'Salvadora', 'SLV', 'SV');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (190, 'Samoa', 'WSM', 'WS');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (191, 'Sanmarīno', 'SMR', 'SM');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (192, 'Santome un Prinsipi', 'STP', 'ST');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (193, 'Saūda Arābija', 'SAU', 'SA');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (194, 'Seišelas', 'SYC', 'SC');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (195, 'Senbartelmī', 'BLM', 'BL');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (196, 'Senegāla', 'SEN', 'SN');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (197, 'Senmartēna', 'MAF', 'MF');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (198, 'Senpjēra un Mikelona', 'SPM', 'PM');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (199, 'Sentkitsa un Nevisa', 'KNA', 'KN');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (200, 'Sentlūsija', 'LCA', 'LC');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (201, 'Sentvinsenta un Grenadīnas', 'VCT', 'VC');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (202, 'Serbija', 'SRB', 'RS');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (203, 'Singapūra', 'SGP', 'SG');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (204, 'Sīrija', 'SYR', 'SY');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (205, 'Sintmārtena', 'SXM', 'SX');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (206, 'Sjerraleone', 'SLE', 'SL');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (207, 'Slovākija', 'SVK', 'SK');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (208, 'Slovēnija', 'SVN', 'SI');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (209, 'Somālija', 'SOM', 'SO');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (210, 'Somija', 'FIN', 'FI');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (211, 'Spānija', 'ESP', 'ES');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (212, 'Sudāna', 'SDN', 'SD');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (213, 'Surinama', 'SUR', 'SR');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (214, 'Svalbāra, Jana Majena sala', 'SJM', 'SJ');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (215, 'Svazilenda', 'SWZ', 'SZ');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (216, 'Svētās Helēnas Sala', 'SHN', 'SH');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (217, 'Šrilanka', 'LKA', 'LK');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (218, 'Šveice', 'CHE', 'CH');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (219, 'Tadžikistāna', 'TJK', 'TJ');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (220, 'Taivāna', 'TWN', 'TW');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (221, 'Taizeme', 'THA', 'TH');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (222, 'Tanzānija', 'TZA', 'TZ');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (223, 'Tērksas un Kaikosas', 'TCA', 'TC');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (224, 'Togo', 'TGO', 'TG');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (225, 'Tokelau', 'TKL', 'TK');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (226, 'Tonga', 'TON', 'TO');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (227, 'Trinidāda un Tobāgo', 'TTO', 'TT');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (228, 'Tunisija', 'TUN', 'TN');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (229, 'Turcija', 'TUR', 'TR');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (230, 'Turkmenistāna', 'TKM', 'TM');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (231, 'Tuvalu', 'TUV', 'TV');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (232, 'Uganda', 'UGA', 'UG');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (233, 'Ukraina', 'UKR', 'UA');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (234, 'Ungārija', 'HUN', 'HU');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (235, 'Urugvaja', 'URY', 'UY');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (236, 'Uzbekistāna', 'UZB', 'UZ');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (237, 'Vācija', 'DEU', 'DE');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (238, 'Vanuatu', 'VUT', 'VU');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (239, 'Vatikāns (Svētais Krēsls)', 'VAT', 'VA');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (240, 'Venecuēla', 'VEN', 'VE');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (241, 'Vjetnama', 'VNM', 'VN');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (242, 'Volisa un Futuna', 'WLF', 'WF');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (243, 'Zālamana Salas', 'SLB', 'SB');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (244, 'Zambija', 'ZMB', 'ZM');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (245, 'Ziemeļmaķedonija', 'MKD', 'MK');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (246, 'Ziemeļu Marianas Salas', 'MNP', 'MP');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (247, 'Ziemsvētku Sala', 'CXR', 'CX');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (248, 'Zimbabve', 'ZWE', 'ZW');
INSERT INTO M_COUNTRIES (ID, NAME, CODE3, CODE2) VALUES (249, 'Zviedrija', 'SWE', 'SE');


COMMIT WORK;

INSERT INTO M_PVNTYPE (ID, CODE, NAME) VALUES (1, '.?', 'Nenoteikts');
INSERT INTO M_PVNTYPE (ID, CODE, NAME) VALUES (2, 'IA', 'Iekšzemē apliekama persona');
INSERT INTO M_PVNTYPE (ID, CODE, NAME) VALUES (7, 'NAV', 'Nav PVN');
INSERT INTO M_PVNTYPE (ID, CODE, NAME) VALUES (3, 'IN', 'Iekšzemē neapliekama persona');
INSERT INTO M_PVNTYPE (ID, CODE, NAME) VALUES (4, 'EA', 'Eiropas kopienā apliekama persona');
INSERT INTO M_PVNTYPE (ID, CODE, NAME) VALUES (5, 'EN', 'Eiropas kopienā neapliekama persona');
INSERT INTO M_PVNTYPE (ID, CODE, NAME) VALUES (6, 'T', 'Trešās valstis');


COMMIT WORK;

INSERT INTO M_STORES_CAT (ID, CODE, NAME, ISGROUP, IDPRICES, IDDISCOUNTS) VALUES (1, '.?', 'Nenoteikts', 0, NULL, NULL);
INSERT INTO M_STORES_CAT (ID, CODE, NAME, ISGROUP, IDPRICES, IDDISCOUNTS) VALUES (2, 'P', 'Piegādātāji', 0, NULL, NULL);
INSERT INTO M_STORES_CAT (ID, CODE, NAME, ISGROUP, IDPRICES, IDDISCOUNTS) VALUES (3, 'R', 'Pircēji', 1, NULL, NULL);
INSERT INTO M_STORES_CAT (ID, CODE, NAME, ISGROUP, IDPRICES, IDDISCOUNTS) VALUES (4, 'R-M', 'Pircēji - mazi', 0, NULL, NULL);
INSERT INTO M_STORES_CAT (ID, CODE, NAME, ISGROUP, IDPRICES, IDDISCOUNTS) VALUES (5, 'R-V', 'Pircēji - lieli', 0, NULL, NULL);


COMMIT WORK;

INSERT INTO M_STORETYPE (ID, NAME, TRACKSTOCK) VALUES (1, 'nenoteikts', 0);
INSERT INTO M_STORETYPE (ID, NAME, TRACKSTOCK) VALUES (2, 'noliktava', 1);
INSERT INTO M_STORETYPE (ID, NAME, TRACKSTOCK) VALUES (3, 'darbinieks', 1);
INSERT INTO M_STORETYPE (ID, NAME, TRACKSTOCK) VALUES (4, 'partneris', 0);
INSERT INTO M_STORETYPE (ID, NAME, TRACKSTOCK) VALUES (6, 'pakalpojumi', 0);
INSERT INTO M_STORETYPE (ID, NAME, TRACKSTOCK) VALUES (7, 'citi', 0);
INSERT INTO M_STORETYPE (ID, NAME, TRACKSTOCK) VALUES (5, 'partneris turētājs', 1);
INSERT INTO M_STORETYPE (ID, NAME, TRACKSTOCK) VALUES (8, 'Noliktava ārpus', 0);
INSERT INTO M_STORETYPE (ID, NAME, TRACKSTOCK) VALUES (9, 'Ražošana', 0);


COMMIT WORK;

INSERT INTO M_STORES (ID, TP, IDCAT, PVNTP, CODE, NAME, REGNR, PVNREGNR, ADDR, ACC21, ACC23, ACC53) VALUES (2, 2, 1, 2, 'N1', 'Noliktava 1', NULL, NULL, NULL, '2131', '2310', '5310');
INSERT INTO M_STORES (ID, TP, IDCAT, PVNTP, CODE, NAME, REGNR, PVNREGNR, ADDR, ACC21, ACC23, ACC53) VALUES (3, 2, 1, 2, 'N2', 'Noliktava 2', NULL, NULL, NULL, '2131', '2310', '5310');
INSERT INTO M_STORES (ID, TP, IDCAT, PVNTP, CODE, NAME, REGNR, PVNREGNR, ADDR, ACC21, ACC23, ACC53) VALUES (4, 4, 1, 2, 'pieg1', 'Piegādātājs 1', NULL, NULL, NULL, '2131', '2310', '5310');
INSERT INTO M_STORES (ID, TP, IDCAT, PVNTP, CODE, NAME, REGNR, PVNREGNR, ADDR, ACC21, ACC23, ACC53) VALUES (5, 4, 1, 2, 'pieg2', 'Piegādātājs 2', NULL, NULL, NULL, '2131', '2310', '5310');
INSERT INTO M_STORES (ID, TP, IDCAT, PVNTP, CODE, NAME, REGNR, PVNREGNR, ADDR, ACC21, ACC23, ACC53) VALUES (6, 4, 1, 2, 'pieg3', 'Piegādātājs 3', NULL, NULL, NULL, '2131', '2310', '5310');
INSERT INTO M_STORES (ID, TP, IDCAT, PVNTP, CODE, NAME, REGNR, PVNREGNR, ADDR, ACC21, ACC23, ACC53) VALUES (7, 4, 4, 2, 'pirc1', 'Pircējs 1', NULL, NULL, NULL, '2110', '2310', '5310');
INSERT INTO M_STORES (ID, TP, IDCAT, PVNTP, CODE, NAME, REGNR, PVNREGNR, ADDR, ACC21, ACC23, ACC53) VALUES (8, 4, 4, 2, 'pirc2', 'Pircējs 2', NULL, NULL, NULL, '2110', '2310', '5310');
INSERT INTO M_STORES (ID, TP, IDCAT, PVNTP, CODE, NAME, REGNR, PVNREGNR, ADDR, ACC21, ACC23, ACC53) VALUES (9, 4, 5, 2, 'pirc3', 'Pircējs 3', NULL, NULL, NULL, '2110', '2310', '5310');
INSERT INTO M_STORES (ID, TP, IDCAT, PVNTP, CODE, NAME, REGNR, PVNREGNR, ADDR, ACC21, ACC23, ACC53) VALUES (1, 1, 1, 1, '.?', 'Nenoteikts', NULL, NULL, NULL, '.?', '.?', '.?');
INSERT INTO M_STORES (ID, TP, IDCAT, PVNTP, CODE, NAME, REGNR, PVNREGNR, ADDR, ACC21, ACC23, ACC53) VALUES (10, 1, 1, 1, 'aaa', '?', NULL, NULL, NULL, '.?', '.?', '.?');


COMMIT WORK;

INSERT INTO M_BANKS (ID, CODE, NAME) VALUES (1, NULL, '"Swedbank" AS');
INSERT INTO M_BANKS (ID, CODE, NAME) VALUES (2, NULL, 'AS "SEB banka"');
INSERT INTO M_BANKS (ID, CODE, NAME) VALUES (3, NULL, 'AS "Citadele banka"');


COMMIT WORK;

INSERT INTO M_ITEMS_CAT (ID, NAME, CODE, ISGROUP, METHOD, ISSERVICES, ISPRODUCED, ACC6, ACC7) VALUES (1, 'Nenoteikts', '.?', 0, 0, 0, 0, '?', '?');
INSERT INTO M_ITEMS_CAT (ID, NAME, CODE, ISGROUP, METHOD, ISSERVICES, ISPRODUCED, ACC6, ACC7) VALUES (2, 'Kat. A', 'A', 1, 0, 0, 0, '?', '?');
INSERT INTO M_ITEMS_CAT (ID, NAME, CODE, ISGROUP, METHOD, ISSERVICES, ISPRODUCED, ACC6, ACC7) VALUES (3, 'Kat. A-A', 'A-A', 1, 0, 0, 0, '?', '?');
INSERT INTO M_ITEMS_CAT (ID, NAME, CODE, ISGROUP, METHOD, ISSERVICES, ISPRODUCED, ACC6, ACC7) VALUES (4, 'Kat. A-B', 'A-B', 1, 0, 0, 0, '6111', '7110');
INSERT INTO M_ITEMS_CAT (ID, NAME, CODE, ISGROUP, METHOD, ISSERVICES, ISPRODUCED, ACC6, ACC7) VALUES (5, 'Kat. A-A-01', 'A-A-01', 0, 0, 0, 0, '6111', '7110');
INSERT INTO M_ITEMS_CAT (ID, NAME, CODE, ISGROUP, METHOD, ISSERVICES, ISPRODUCED, ACC6, ACC7) VALUES (6, 'Kat. A-A-02', 'A-A-02', 0, 0, 0, 0, '6111', '7110');
INSERT INTO M_ITEMS_CAT (ID, NAME, CODE, ISGROUP, METHOD, ISSERVICES, ISPRODUCED, ACC6, ACC7) VALUES (7, 'Kat. A-A-03', 'A-A-03', 0, 0, 0, 0, '6111', '7110');
INSERT INTO M_ITEMS_CAT (ID, NAME, CODE, ISGROUP, METHOD, ISSERVICES, ISPRODUCED, ACC6, ACC7) VALUES (8, 'Kat. A-B-01', 'A-B-01', 0, 0, 0, 0, '6111', '7110');
INSERT INTO M_ITEMS_CAT (ID, NAME, CODE, ISGROUP, METHOD, ISSERVICES, ISPRODUCED, ACC6, ACC7) VALUES (9, 'Kat. A-B-02', 'A-B-02', 0, 0, 0, 0, '6111', '7110');
INSERT INTO M_ITEMS_CAT (ID, NAME, CODE, ISGROUP, METHOD, ISSERVICES, ISPRODUCED, ACC6, ACC7) VALUES (10, 'Kat. B', 'B', 1, 0, 0, 0, '6111', '7110');
INSERT INTO M_ITEMS_CAT (ID, NAME, CODE, ISGROUP, METHOD, ISSERVICES, ISPRODUCED, ACC6, ACC7) VALUES (11, 'Kat. B-01', 'B-01', 0, 0, 0, 0, '6112', '7170');


COMMIT WORK;

INSERT INTO M_PVNRATES (ID, CODE, NAME, RATE, ISREVERSE) VALUES (1, 'A21', 'Prece 21%', 21, 0);
INSERT INTO M_PVNRATES (ID, CODE, NAME, RATE, ISREVERSE) VALUES (2, 'A05', 'Prece 5%', 5, 0);
INSERT INTO M_PVNRATES (ID, CODE, NAME, RATE, ISREVERSE) VALUES (4, 'D21', 'Datortehnika 21%', 21, 1);
INSERT INTO M_PVNRATES (ID, CODE, NAME, RATE, ISREVERSE) VALUES (5, 'G21', 'Graudaugi 21%', 21, 1);
INSERT INTO M_PVNRATES (ID, CODE, NAME, RATE, ISREVERSE) VALUES (6, 'M21', 'Metālizstrādājumi 21%', 21, 1);
INSERT INTO M_PVNRATES (ID, CODE, NAME, RATE, ISREVERSE) VALUES (7, 'B21', 'Būvniecības pakalpojumi 21%', 21, 1);
INSERT INTO M_PVNRATES (ID, CODE, NAME, RATE, ISREVERSE) VALUES (8, 'K21', 'Kokmateriāli 21%', 21, 1);
INSERT INTO M_PVNRATES (ID, CODE, NAME, RATE, ISREVERSE) VALUES (3, 'P21', 'Pakalpojumi 21%', 21, 0);


COMMIT WORK;

INSERT INTO M_UNITS (ID, CODE, NAME) VALUES (1, '.?', 'Nenoteikts');
INSERT INTO M_UNITS (ID, CODE, NAME) VALUES (2, 'gab.', 'Gabali');
INSERT INTO M_UNITS (ID, CODE, NAME) VALUES (3, 'kg', 'Kilogrami');
INSERT INTO M_UNITS (ID, CODE, NAME) VALUES (4, 't', 'Tonnas');
INSERT INTO M_UNITS (ID, CODE, NAME) VALUES (5, 'litri', 'Litri');
INSERT INTO M_UNITS (ID, CODE, NAME) VALUES (6, 'm3', 'Kubikmetri');
INSERT INTO M_UNITS (ID, CODE, NAME) VALUES (7, 'm2', 'Kvadrtmetri');


COMMIT WORK;

INSERT INTO M_ITEMS (ID, BARCODE, NAME, CAT, UNITS, STORE1, PVNRATE, ISSERVICE, ISPRODUCED, SELLPRICE, BUYPRICE, PRODCOST, LASTBUYPRICE, AMOUNTINSTORE, LASTSALEDATE, LASTBUYDATE) VALUES (1, '.?', 'Nenoteikts', 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, NULL, NULL);
INSERT INTO M_ITEMS (ID, BARCODE, NAME, CAT, UNITS, STORE1, PVNRATE, ISSERVICE, ISPRODUCED, SELLPRICE, BUYPRICE, PRODCOST, LASTBUYPRICE, AMOUNTINSTORE, LASTSALEDATE, LASTBUYDATE) VALUES (2, '002', 'Prece 2', 5, 2, 2, 1, 0, 0, 10, 7, 0, 0, 15, NULL, NULL);
INSERT INTO M_ITEMS (ID, BARCODE, NAME, CAT, UNITS, STORE1, PVNRATE, ISSERVICE, ISPRODUCED, SELLPRICE, BUYPRICE, PRODCOST, LASTBUYPRICE, AMOUNTINSTORE, LASTSALEDATE, LASTBUYDATE) VALUES (3, '001', 'Prece 1', 5, 2, 2, 1, 0, 0, 5, 3, 0, 0, 5, NULL, NULL);
INSERT INTO M_ITEMS (ID, BARCODE, NAME, CAT, UNITS, STORE1, PVNRATE, ISSERVICE, ISPRODUCED, SELLPRICE, BUYPRICE, PRODCOST, LASTBUYPRICE, AMOUNTINSTORE, LASTSALEDATE, LASTBUYDATE) VALUES (4, '003', 'Prece 3', 6, 2, 2, 1, 0, 0, 7, 5, 0, 0, 0, NULL, NULL);
INSERT INTO M_ITEMS (ID, BARCODE, NAME, CAT, UNITS, STORE1, PVNRATE, ISSERVICE, ISPRODUCED, SELLPRICE, BUYPRICE, PRODCOST, LASTBUYPRICE, AMOUNTINSTORE, LASTSALEDATE, LASTBUYDATE) VALUES (5, '004', 'Prece 4', 11, 2, 2, 1, 0, 0, 20, 15, 0, 0, 0, NULL, NULL);


COMMIT WORK;

INSERT INTO M_DOCTYPES (ID, CODE, NAME, OPTYPE) VALUES (1, '.?', 'Nenoteikts', 0);
INSERT INTO M_DOCTYPES (ID, CODE, NAME, OPTYPE) VALUES (2, 'Iepirkums', 'Iepirkums', 1);
INSERT INTO M_DOCTYPES (ID, CODE, NAME, OPTYPE) VALUES (3, 'Realizēts', 'Realizacija', 2);
INSERT INTO M_DOCTYPES (ID, CODE, NAME, OPTYPE) VALUES (4, 'Atgr.pieg.', 'Atgriezts piegādātajam', 2);
INSERT INTO M_DOCTYPES (ID, CODE, NAME, OPTYPE) VALUES (8, 'Pārvietots', 'Pārvietots', 0);
INSERT INTO M_DOCTYPES (ID, CODE, NAME, OPTYPE) VALUES (5, 'Pirc.atgr.', 'Atgriezts no pircēja', 2);
INSERT INTO M_DOCTYPES (ID, CODE, NAME, OPTYPE) VALUES (9, 'Sāk.atl.', 'Sākuma atlikumi', 1);
INSERT INTO M_DOCTYPES (ID, CODE, NAME, OPTYPE) VALUES (10, 'Norakstīts', 'Norakstīts', 2);
INSERT INTO M_DOCTYPES (ID, CODE, NAME, OPTYPE) VALUES (11, 'Pierakstīts', 'Pierakstīts', 1);
INSERT INTO M_DOCTYPES (ID, CODE, NAME, OPTYPE) VALUES (6, 'Kr.iep.', 'Kredītrēķins no piegādātāja', 2);
INSERT INTO M_DOCTYPES (ID, CODE, NAME, OPTYPE) VALUES (7, 'Kr.pirc.', 'Kredītrēķins pircējam', 2);
INSERT INTO M_DOCTYPES (ID, CODE, NAME, OPTYPE) VALUES (12, 'Izlietots', 'Izlietots', 2);
INSERT INTO M_DOCTYPES (ID, CODE, NAME, OPTYPE) VALUES (13, 'Saražots', 'Saražots', 1);
INSERT INTO M_DOCTYPES (ID, CODE, NAME, OPTYPE) VALUES (14, 'Saņemti pakalp.', 'Saņemti pakalpojumi', 0);
INSERT INTO M_DOCTYPES (ID, CODE, NAME, OPTYPE) VALUES (15, 'Sniegti pakalp.', 'Sniegti pakalpojumi', 0);


COMMIT WORK;

INSERT INTO M_PAYMENTTYPE (ID, NAME) VALUES (1, 'Bankas pārskaitijums');
INSERT INTO M_PAYMENTTYPE (ID, NAME) VALUES (2, 'Skaidrā naudā');
INSERT INTO M_PAYMENTTYPE (ID, NAME) VALUES (3, 'Ar priekšapmaksu');


COMMIT WORK;

INSERT INTO M_TRANSACTIONTYPE (ID, NAME) VALUES (1, 'Preču piegāde');
INSERT INTO M_TRANSACTIONTYPE (ID, NAME) VALUES (2, 'Preču atgriešana');
INSERT INTO M_TRANSACTIONTYPE (ID, NAME) VALUES (3, 'Iekšēja pārvietošana');
INSERT INTO M_TRANSACTIONTYPE (ID, NAME) VALUES (4, 'Sākuma atlikumi');
INSERT INTO M_TRANSACTIONTYPE (ID, NAME) VALUES (5, 'Atlikumu korekcijas');
INSERT INTO M_TRANSACTIONTYPE (ID, NAME) VALUES (0, '.?');


COMMIT WORK;

INSERT INTO M_DOCS (ID, DT, SR, NR, TP, PVNTYPE, STATE, IDSTOREIN, IDSTOREOUT, IDCREDDOC, CREDDOCDT, SUMM, IDSEQ, ACCIN, ACCOUT, CREDDOCSR, CREDDOCNR, IDCARRIER, IDADDRESSOUT, IDADDRESSIN, IDVEHICLE, IDTRANSACTIONTYPE, IDPAYMENTTYPE, IDDRIVER, ACCOUNTINGTP, ACCTP1, ACCTP2, WEVATPAYER, DUEDATE) VALUES (2, '2023-01-01', NULL, '1', 2, 2, 3, 2, 4, NULL, NULL, 350.9, 3, '2131', '5310', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL, 1, 1, 1, 1, NULL);
INSERT INTO M_DOCS (ID, DT, SR, NR, TP, PVNTYPE, STATE, IDSTOREIN, IDSTOREOUT, IDCREDDOC, CREDDOCDT, SUMM, IDSEQ, ACCIN, ACCOUT, CREDDOCSR, CREDDOCNR, IDCARRIER, IDADDRESSOUT, IDADDRESSIN, IDVEHICLE, IDTRANSACTIONTYPE, IDPAYMENTTYPE, IDDRIVER, ACCOUNTINGTP, ACCTP1, ACCTP2, WEVATPAYER, DUEDATE) VALUES (3, '2023-01-02', NULL, NULL, 3, 2, 3, 7, 2, NULL, NULL, 90.75, 6, '2310', '2131', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL, 1, 1, 1, 1, NULL);
INSERT INTO M_DOCS (ID, DT, SR, NR, TP, PVNTYPE, STATE, IDSTOREIN, IDSTOREOUT, IDCREDDOC, CREDDOCDT, SUMM, IDSEQ, ACCIN, ACCOUT, CREDDOCSR, CREDDOCNR, IDCARRIER, IDADDRESSOUT, IDADDRESSIN, IDVEHICLE, IDTRANSACTIONTYPE, IDPAYMENTTYPE, IDDRIVER, ACCOUNTINGTP, ACCTP1, ACCTP2, WEVATPAYER, DUEDATE) VALUES (4, '2023-01-02', NULL, NULL, 3, 2, 3, 7, 2, NULL, NULL, 121, 8, '2310', '2131', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL, 1, 0, 1, 1, NULL);
INSERT INTO M_DOCS (ID, DT, SR, NR, TP, PVNTYPE, STATE, IDSTOREIN, IDSTOREOUT, IDCREDDOC, CREDDOCDT, SUMM, IDSEQ, ACCIN, ACCOUT, CREDDOCSR, CREDDOCNR, IDCARRIER, IDADDRESSOUT, IDADDRESSIN, IDVEHICLE, IDTRANSACTIONTYPE, IDPAYMENTTYPE, IDDRIVER, ACCOUNTINGTP, ACCTP1, ACCTP2, WEVATPAYER, DUEDATE) VALUES (7, '2023-01-04', NULL, NULL, 3, 2, 2, 7, 2, NULL, NULL, 272.25, 26, '2310', '2131', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL, 1, 0, 0, 1, NULL);
INSERT INTO M_DOCS (ID, DT, SR, NR, TP, PVNTYPE, STATE, IDSTOREIN, IDSTOREOUT, IDCREDDOC, CREDDOCDT, SUMM, IDSEQ, ACCIN, ACCOUT, CREDDOCSR, CREDDOCNR, IDCARRIER, IDADDRESSOUT, IDADDRESSIN, IDVEHICLE, IDTRANSACTIONTYPE, IDPAYMENTTYPE, IDDRIVER, ACCOUNTINGTP, ACCTP1, ACCTP2, WEVATPAYER, DUEDATE) VALUES (5, '2023-01-03', NULL, NULL, 2, 2, 3, 2, 4, NULL, NULL, 36.3, 10, '2131', '5310', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL, 1, 0, 1, 1, NULL);
INSERT INTO M_DOCS (ID, DT, SR, NR, TP, PVNTYPE, STATE, IDSTOREIN, IDSTOREOUT, IDCREDDOC, CREDDOCDT, SUMM, IDSEQ, ACCIN, ACCOUT, CREDDOCSR, CREDDOCNR, IDCARRIER, IDADDRESSOUT, IDADDRESSIN, IDVEHICLE, IDTRANSACTIONTYPE, IDPAYMENTTYPE, IDDRIVER, ACCOUNTINGTP, ACCTP1, ACCTP2, WEVATPAYER, DUEDATE) VALUES (8, '2023-01-05', NULL, NULL, 3, 1, 0, 2, 4, NULL, NULL, 0, 0, '2131', '2310', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL, 1, 1, 1, 1, NULL);
INSERT INTO M_DOCS (ID, DT, SR, NR, TP, PVNTYPE, STATE, IDSTOREIN, IDSTOREOUT, IDCREDDOC, CREDDOCDT, SUMM, IDSEQ, ACCIN, ACCOUT, CREDDOCSR, CREDDOCNR, IDCARRIER, IDADDRESSOUT, IDADDRESSIN, IDVEHICLE, IDTRANSACTIONTYPE, IDPAYMENTTYPE, IDDRIVER, ACCOUNTINGTP, ACCTP1, ACCTP2, WEVATPAYER, DUEDATE) VALUES (6, '2023-01-04', NULL, NULL, 5, 2, 3, 7, 2, NULL, NULL, -90.75, 16, '2310', '2131', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL, 1, 0, 1, 1, NULL);


COMMIT WORK;

INSERT INTO M_INV_DOCS (ID, DT, NR, IDSTORE, STATE, PERSONS) VALUES (1, '2023-01-28', NULL, 2, 2, 'Jānis Bērziņš
Dace Skudra');
INSERT INTO M_INV_DOCS (ID, DT, NR, IDSTORE, STATE, PERSONS) VALUES (2, '2023-05-02', NULL, 1, 0, NULL);


COMMIT WORK;

INSERT INTO M_INV_ROWS (ID, IDDOC, IDITEM, IDUNITS, AM_COUNTED_1, AM_COUNTED_2, AM_CALC, AM_DIFF) VALUES (1, 1, 3, 2, 10, NULL, 5, -5);
INSERT INTO M_INV_ROWS (ID, IDDOC, IDITEM, IDUNITS, AM_COUNTED_1, AM_COUNTED_2, AM_CALC, AM_DIFF) VALUES (3, 1, 2, 2, 0, 0, 15, 15);


COMMIT WORK;

INSERT INTO M_ITEMS_PER_STORE (IDITEM, IDSTORE, AMOUNT) VALUES (3, 2, 5);
INSERT INTO M_ITEMS_PER_STORE (IDITEM, IDSTORE, AMOUNT) VALUES (2, 2, 15);


COMMIT WORK;

INSERT INTO M_ROWS (ID, IDDOC, IDITEM, IDPVNRATE, UNITS, IDCREDROW, AMOUNT, DISCOUNT, PRICE0, PRICE, BUYPRICE, OLDPRICE, TOLDPRICE, TPRICE, TBUYPRICE, IDSEQ, ACC6, ACC7, ISGONE) VALUES (1, 2, 3, 1, 2, NULL, 50, 0, 3, 3, 3, 0, 0, 150, 150, 1, '6111', '7110', 1);
INSERT INTO M_ROWS (ID, IDDOC, IDITEM, IDPVNRATE, UNITS, IDCREDROW, AMOUNT, DISCOUNT, PRICE0, PRICE, BUYPRICE, OLDPRICE, TOLDPRICE, TPRICE, TBUYPRICE, IDSEQ, ACC6, ACC7, ISGONE) VALUES (2, 2, 2, 1, 2, NULL, 20, 0, 7, 7, 7, 0, 0, 140, 140, 2, '6111', '7110', 0);
INSERT INTO M_ROWS (ID, IDDOC, IDITEM, IDPVNRATE, UNITS, IDCREDROW, AMOUNT, DISCOUNT, PRICE0, PRICE, BUYPRICE, OLDPRICE, TOLDPRICE, TPRICE, TBUYPRICE, IDSEQ, ACC6, ACC7, ISGONE) VALUES (3, 3, 3, 1, 2, NULL, 5, 0, 5, 5, 3, 0, 0, 25, 15, 4, '6111', '7110', 0);
INSERT INTO M_ROWS (ID, IDDOC, IDITEM, IDPVNRATE, UNITS, IDCREDROW, AMOUNT, DISCOUNT, PRICE0, PRICE, BUYPRICE, OLDPRICE, TOLDPRICE, TPRICE, TBUYPRICE, IDSEQ, ACC6, ACC7, ISGONE) VALUES (4, 3, 2, 1, 2, NULL, 5, 0, 10, 10, 7, 0, 0, 50, 35, 5, '6111', '7110', 0);
INSERT INTO M_ROWS (ID, IDDOC, IDITEM, IDPVNRATE, UNITS, IDCREDROW, AMOUNT, DISCOUNT, PRICE0, PRICE, BUYPRICE, OLDPRICE, TOLDPRICE, TPRICE, TBUYPRICE, IDSEQ, ACC6, ACC7, ISGONE) VALUES (5, 4, 3, 1, 2, NULL, 20, 0, 5, 5, 3, 0, 0, 100, 60, 7, '6111', '7110', 0);
INSERT INTO M_ROWS (ID, IDDOC, IDITEM, IDPVNRATE, UNITS, IDCREDROW, AMOUNT, DISCOUNT, PRICE0, PRICE, BUYPRICE, OLDPRICE, TOLDPRICE, TPRICE, TBUYPRICE, IDSEQ, ACC6, ACC7, ISGONE) VALUES (6, 5, 3, 1, 2, NULL, 10, 0, 3, 3, 3, 0, 0, 30, 30, 9, '6111', '7110', 0);
INSERT INTO M_ROWS (ID, IDDOC, IDITEM, IDPVNRATE, UNITS, IDCREDROW, AMOUNT, DISCOUNT, PRICE0, PRICE, BUYPRICE, OLDPRICE, TOLDPRICE, TPRICE, TBUYPRICE, IDSEQ, ACC6, ACC7, ISGONE) VALUES (7, 6, 3, 1, 2, NULL, -15, 0, 5, 5, 3, 5, 75, -75, 45, 15, '6111', '7110', 0);
INSERT INTO M_ROWS (ID, IDDOC, IDITEM, IDPVNRATE, UNITS, IDCREDROW, AMOUNT, DISCOUNT, PRICE0, PRICE, BUYPRICE, OLDPRICE, TOLDPRICE, TPRICE, TBUYPRICE, IDSEQ, ACC6, ACC7, ISGONE) VALUES (8, 7, 3, 1, 2, NULL, 45, 0, 5, 5, 3, 0, 0, 225, 135, 25, '6111', '7110', 0);
INSERT INTO M_ROWS (ID, IDDOC, IDITEM, IDPVNRATE, UNITS, IDCREDROW, AMOUNT, DISCOUNT, PRICE0, PRICE, BUYPRICE, OLDPRICE, TOLDPRICE, TPRICE, TBUYPRICE, IDSEQ, ACC6, ACC7, ISGONE) VALUES (9, 8, 3, 1, 2, NULL, 1, 0, 3.12, 3.12, 3.12, 0, 0, 3.12, 3.12, 1, '6111', '7110', 0);


COMMIT WORK;

INSERT INTO M_LINKS (ID1, ID2, IDITEM, AMOUNT) VALUES (2, 4, 2, 5);
INSERT INTO M_LINKS (ID1, ID2, IDITEM, AMOUNT) VALUES (1, 3, 3, 5);
INSERT INTO M_LINKS (ID1, ID2, IDITEM, AMOUNT) VALUES (1, 5, 3, 20);
INSERT INTO M_LINKS (ID1, ID2, IDITEM, AMOUNT) VALUES (1, 7, 3, -15);
INSERT INTO M_LINKS (ID1, ID2, IDITEM, AMOUNT) VALUES (5, 7, 3, 15);
INSERT INTO M_LINKS (ID1, ID2, IDITEM, AMOUNT) VALUES (1, 8, 3, 40);
INSERT INTO M_LINKS (ID1, ID2, IDITEM, AMOUNT) VALUES (6, 8, 3, 5);


COMMIT WORK;

INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (78, 6, 2, 2, 0, 0, 2, 'M02', 4, NULL, 1, 'M12', 1, '0', 9);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (3, 1, 2, 2, 0, 0, 2, '401', 4, NULL, 1, '305', 4, NULL, 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (4, 1, 3, 2, 0, 0, 2, NULL, 4, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (79, 6, 3, 2, 0, 0, 2, NULL, 4, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (80, 6, 4, 2, 0, 0, 2, NULL, 4, '133', 1, '331', 1, '233', NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (5, 1, 4, 2, 0, 0, 2, NULL, 4, '133', 1, '331', 1, '233', NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (6, 1, 5, 2, 0, 0, 2, NULL, 4, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (7, 1, 6, 2, 0, 0, 2, NULL, 4, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (8, 1, 2, 3, 0, 0, 3, NULL, 5, '104', 3, NULL, 1, '204', 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (9, 1, 3, 3, 0, 0, 3, NULL, 5, '104', 3, NULL, 1, '204', 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (10, 1, 4, 3, 0, 0, 3, NULL, 5, '112', 0, NULL, 0, NULL, 5);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (11, 1, 5, 3, 0, 0, 3, NULL, 5, '104', 3, NULL, 1, '204', 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (12, 1, 6, 3, 0, 0, 3, NULL, 5, '118', 0, NULL, 0, NULL, 4);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (13, 2, 2, 2, 0, 0, 2, '401', 4, NULL, 1, '302', 4, NULL, 2);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (14, 2, 3, 2, 0, 0, 2, NULL, 4, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (81, 6, 5, 2, 0, 0, 2, NULL, 4, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (16, 1, 2, 4, 0, 0, 4, NULL, 2, NULL, 4, NULL, 1, '305', 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (17, 1, 3, 4, 0, 0, 4, NULL, 2, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (18, 1, 2, 5, 0, 1, 5, '104', 3, NULL, 1, '204', 3, NULL, 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (19, 1, 3, 5, 0, 1, 5, '104', 3, NULL, 1, '204', 3, NULL, 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (20, 1, 2, 6, 0, 0, 4, NULL, 2, NULL, 4, NULL, 1, '305', 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (21, 1, 3, 6, 0, 0, 4, NULL, 2, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (22, 1, 2, 7, 0, 1, 5, '104', 3, NULL, 1, '204', 3, NULL, 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (23, 1, 3, 7, 0, 1, 5, '104', 3, NULL, 1, '204', 3, NULL, 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (82, 6, 6, 2, 0, 0, 2, NULL, 4, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (83, 6, 2, 3, 0, 0, 3, NULL, 5, 'M01', 0, NULL, 0, NULL, 9);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (84, 6, 3, 3, 0, 0, 3, NULL, 5, '104', 3, NULL, 1, '204', 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (85, 6, 4, 3, 0, 0, 3, NULL, 5, '112', 0, NULL, 0, NULL, 5);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (86, 6, 5, 3, 0, 0, 3, NULL, 5, '104', 3, NULL, 1, '204', 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (87, 6, 6, 3, 0, 0, 3, NULL, 5, '118', 0, NULL, 0, NULL, 4);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (26, 2, 2, 3, 0, 0, 3, NULL, 5, '102', 3, NULL, 1, '202', 2);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (28, 2, 2, 4, 0, 0, 4, NULL, 2, NULL, 4, NULL, 1, '302', 2);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (29, 2, 3, 4, 0, 0, 4, NULL, 2, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (30, 2, 2, 5, 0, 0, 5, '102', 3, NULL, 1, '202', 3, NULL, 2);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (31, 2, 3, 5, 0, 0, 5, '102', 3, NULL, 1, '202', 3, NULL, 2);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (32, 2, 2, 6, 0, 0, 4, NULL, 2, NULL, 4, NULL, 1, '302', 2);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (33, 2, 3, 6, 0, 0, 4, NULL, 2, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (34, 2, 2, 7, 0, 0, 5, '102', 3, NULL, 1, '202', 3, NULL, 2);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (35, 2, 3, 7, 0, 0, 5, '102', 3, NULL, 1, '202', 3, NULL, 2);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (36, 3, 2, 2, 0, 0, 6, '401', 4, NULL, 1, '305', 4, NULL, 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (37, 3, 3, 2, 0, 0, 6, NULL, 4, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (38, 3, 4, 2, 0, 0, 6, NULL, 4, '135', 1, '332', 1, '235', NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (39, 3, 5, 2, 0, 0, 6, NULL, 4, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (40, 3, 6, 2, 0, 0, 6, NULL, 4, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (41, 3, 2, 3, 0, 0, 3, NULL, 5, '104', 3, NULL, 1, '204', 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (42, 3, 3, 3, 0, 0, 3, NULL, 5, '104', 3, NULL, 1, '204', 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (43, 3, 4, 3, 0, 0, 3, NULL, 5, '104', 3, NULL, 1, '204', NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (44, 3, 5, 3, 0, 0, 3, NULL, 5, '104', 3, NULL, 1, '204', 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (45, 3, 6, 3, 0, 0, 3, NULL, 5, '104', 3, NULL, 1, '204', NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (88, 6, 2, 4, 0, 0, 4, NULL, 2, 'M02', 1, '0', 1, 'M12', 9);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (89, 6, 3, 4, 0, 0, 4, NULL, 2, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (90, 6, 2, 5, 0, 0, 5, 'M01', 3, NULL, 0, NULL, 0, NULL, 9);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (91, 6, 3, 5, 0, 0, 5, '104', 3, NULL, 1, '204', 3, NULL, 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (92, 6, 2, 6, 0, 0, 4, NULL, 2, 'M02', 1, '0', 1, 'M12', 9);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (93, 6, 3, 6, 0, 0, 4, NULL, 2, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (94, 6, 2, 7, 0, 0, 5, 'M01', 3, NULL, 0, NULL, 0, NULL, 9);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (95, 6, 3, 7, 0, 0, 5, '104', 3, NULL, 1, '204', 3, NULL, 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (96, 7, 2, 2, 0, 0, 2, 'B02', 4, NULL, 1, 'B12', 1, '0', 8);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (97, 7, 3, 2, 0, 0, 2, NULL, 4, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (98, 7, 4, 2, 0, 0, 2, NULL, 4, '133', 1, '331', 1, '233', NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (99, 7, 5, 2, 0, 0, 2, NULL, 4, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (46, 4, 2, 2, 0, 0, 2, 'D02', 4, NULL, 1, 'D12', 1, '0', 10);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (47, 4, 3, 2, 0, 0, 2, NULL, 4, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (48, 4, 4, 2, 0, 0, 2, NULL, 4, '133', 1, '331', 1, '233', NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (49, 4, 5, 2, 0, 0, 2, NULL, 4, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (50, 4, 6, 2, 0, 0, 2, NULL, 4, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (51, 4, 2, 3, 0, 0, 3, NULL, 5, 'D01', 0, NULL, 0, NULL, 10);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (52, 4, 3, 3, 0, 0, 3, NULL, 5, '104', 3, NULL, 1, '204', 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (53, 4, 4, 3, 0, 0, 3, NULL, 5, '112', 0, NULL, 0, NULL, 5);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (54, 4, 5, 3, 0, 0, 3, NULL, 5, '104', 3, NULL, 1, '204', 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (55, 4, 6, 3, 0, 0, 3, NULL, 5, '118', 0, NULL, 0, NULL, 4);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (100, 7, 6, 2, 0, 0, 2, NULL, 4, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (101, 7, 2, 3, 0, 0, 3, NULL, 5, 'B01', 0, NULL, 0, NULL, 8);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (102, 7, 3, 3, 0, 0, 3, NULL, 5, '104', 3, NULL, 1, '204', 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (103, 7, 4, 3, 0, 0, 3, NULL, 5, '112', 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (56, 4, 2, 4, 0, 0, 4, NULL, 2, 'D02', 1, '0', 1, 'D12', 10);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (57, 4, 3, 4, 0, 0, 4, NULL, 2, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (58, 4, 2, 5, 0, 0, 5, 'D01', 3, NULL, 0, NULL, 0, NULL, 10);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (59, 4, 3, 5, 0, 0, 5, '104', 3, NULL, 1, '204', 3, NULL, 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (60, 4, 2, 6, 0, 0, 4, NULL, 2, 'D02', 1, '0', 1, 'D12', 10);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (61, 4, 3, 6, 0, 0, 4, NULL, 2, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (62, 4, 2, 7, 0, 0, 5, 'D01', 3, NULL, 0, NULL, 0, NULL, 10);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (63, 4, 3, 7, 0, 0, 5, '104', 3, NULL, 1, '204', 3, NULL, 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (104, 7, 5, 3, 0, 0, 3, NULL, 5, '104', 3, NULL, 1, '204', 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (64, 5, 2, 2, 0, 0, 2, 'G02', 4, NULL, 1, 'G12', 1, '0', 11);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (65, 5, 3, 2, 0, 0, 2, NULL, 4, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (66, 5, 4, 2, 0, 0, 2, NULL, 4, '133', 1, '331', 1, '233', NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (67, 5, 5, 2, 0, 0, 2, NULL, 4, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (68, 5, 6, 2, 0, 0, 2, NULL, 4, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (105, 7, 6, 3, 0, 0, 3, NULL, 5, '118', 0, NULL, 0, NULL, 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (106, 7, 2, 4, 0, 0, 4, NULL, 2, 'B02', 1, '0', 1, 'B12', 8);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (107, 7, 3, 4, 0, 0, 4, NULL, 2, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (108, 7, 2, 5, 0, 0, 5, 'B01', 3, NULL, 0, NULL, 0, NULL, 8);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (109, 7, 3, 5, 0, 0, 5, '104', 3, NULL, 1, '204', 3, NULL, 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (110, 7, 2, 6, 0, 0, 4, NULL, 2, 'B02', 1, '0', 1, 'B12', 8);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (69, 5, 2, 3, 0, 0, 3, NULL, 5, 'G01', 0, NULL, 0, NULL, 11);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (70, 5, 3, 3, 0, 0, 3, NULL, 5, '104', 3, NULL, 1, '204', 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (71, 5, 4, 3, 0, 0, 3, NULL, 5, '112', 0, NULL, 0, NULL, 5);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (72, 5, 5, 3, 0, 0, 3, NULL, 5, '104', 3, NULL, 1, '204', 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (73, 5, 6, 3, 0, 0, 3, NULL, 5, '118', 0, NULL, 0, NULL, 4);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (111, 7, 3, 6, 0, 0, 4, NULL, 2, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (112, 7, 2, 7, 0, 0, 5, 'B01', 3, NULL, 0, NULL, 0, NULL, 8);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (113, 7, 3, 7, 0, 0, 5, '104', 3, NULL, 1, '204', 3, NULL, 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (114, 8, 2, 2, 0, 0, 2, 'K061', 4, NULL, 1, 'K101', 1, '0', 7);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (115, 8, 3, 2, 0, 0, 2, 'K063', 4, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (116, 8, 4, 2, 0, 0, 2, NULL, 4, '133', 1, '331', 1, '233', NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (74, 5, 2, 4, 0, 0, 4, NULL, 2, 'G02', 1, '0', 1, 'G12', 11);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (75, 5, 3, 4, 0, 0, 4, NULL, 2, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (117, 8, 5, 2, 0, 0, 2, NULL, 4, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (118, 8, 6, 2, 0, 0, 2, NULL, 4, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (119, 8, 2, 3, 0, 0, 3, NULL, 5, 'K041', 0, NULL, 0, NULL, 7);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (120, 8, 3, 3, 0, 0, 3, NULL, 5, 'K043', 3, NULL, 1, 'K103', 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (121, 8, 4, 3, 0, 0, 3, NULL, 5, 'K044', 0, NULL, 0, NULL, 5);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (122, 8, 5, 3, 0, 0, 3, NULL, 5, 'K043', 3, NULL, 1, 'K103', 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (123, 8, 6, 3, 0, 0, 3, NULL, 5, 'K046', 0, NULL, 0, NULL, 4);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (124, 8, 2, 4, 0, 0, 4, NULL, 2, 'K061', 1, '0', 1, 'K101', 7);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (125, 8, 3, 4, 0, 0, 4, NULL, 2, 'K063', 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (126, 8, 2, 5, 0, 0, 5, 'K041', 3, NULL, 0, NULL, 0, NULL, 7);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (127, 8, 3, 5, 0, 0, 5, 'K043', 3, NULL, 1, 'K103', 3, NULL, 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (128, 8, 2, 6, 0, 0, 4, NULL, 2, 'K061', 1, '0', 1, 'K101', 7);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (129, 8, 3, 6, 0, 0, 4, NULL, 2, 'K063', 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (130, 8, 2, 7, 0, 0, 5, 'K041', 3, NULL, 0, NULL, 0, NULL, 7);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (131, 8, 3, 7, 0, 0, 5, 'K043', 3, NULL, 1, 'K103', 3, NULL, 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (132, 5, 2, 5, 0, 0, 5, 'G01', 3, NULL, 0, NULL, 0, NULL, 11);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (133, 5, 2, 6, 0, 0, 4, NULL, 2, 'G02', 1, '0', 1, 'G12', 11);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (134, 5, 2, 7, 0, 0, 5, 'G01', 3, NULL, 0, NULL, 0, NULL, 11);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (135, 5, 3, 5, 0, 0, 5, '104', 3, NULL, 1, '204', 3, NULL, 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (136, 5, 3, 6, 0, 0, 4, NULL, 2, NULL, 0, NULL, 0, NULL, NULL);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (137, 5, 3, 7, 0, 0, 5, '104', 3, NULL, 1, '204', 3, NULL, 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (138, 2, 3, 3, 0, 0, 3, NULL, 5, '102', 3, NULL, 1, '202', 2);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (139, 1, 2, 7, 1, 0, 3, NULL, 5, '104', 3, NULL, 1, '204', 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (140, 1, 3, 7, 1, 0, 3, NULL, 5, '104', 3, NULL, 1, '204', 1);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (141, 2, 2, 7, 1, 0, 3, NULL, 5, '102', 3, NULL, 1, '202', 2);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (142, 2, 3, 7, 1, 0, 3, NULL, 5, '102', 3, NULL, 1, '202', 2);
INSERT INTO M_PVNRATES2 (ID, IDRATE, IDTP, IDTRTP, INCURMT, CHANGESIGN, BASE_DEB_FIN, BASE_DEB_PVN, BASE_CRED_FIN, BASE_CRED_PVN, PVN_DEB_FIN, PVN_DEB_PVN, PVN_CRED_FIN, PVN_CRED_PVN, IDPVNTEXT) VALUES (143, 1, 2, 6, 1, 1, 2, '401', 4, NULL, 1, '305', 4, NULL, 1);


COMMIT WORK;

INSERT INTO M_PVNTEXTS (ID, CODE, "VERSION", TAG1, TAG2) VALUES (1, 'A21', NULL, 'Ar PVN 21% likmi apliekamie darijumi', 'PVN 21%');
INSERT INTO M_PVNTEXTS (ID, CODE, "VERSION", TAG1, TAG2) VALUES (2, 'A5', NULL, 'Ar PVN 5% likmi apliekamie darijumi', 'PVN 5%');
INSERT INTO M_PVNTEXTS (ID, CODE, "VERSION", TAG1, TAG2) VALUES (3, 'A12', NULL, 'Ar PVN 12% likmi apliekamie darijumi', 'PVN 12%');
INSERT INTO M_PVNTEXTS (ID, CODE, "VERSION", TAG1, TAG2) VALUES (4, 'PrExp0', NULL, 'Ar 0% likmi apliekamie darijumi saskaņā ar likuma 43. pantu 1. punktu', 'PVN 0%');
INSERT INTO M_PVNTEXTS (ID, CODE, "VERSION", TAG1, TAG2) VALUES (5, 'EK0', NULL, 'Ar 0% likmi apliekamie darijumi saskaņā ar likuma 43. pantu 4. punktu', 'PVN 0%');
INSERT INTO M_PVNTEXTS (ID, CODE, "VERSION", TAG1, TAG2) VALUES (6, 'PaExp0', NULL, 'Ar 0% likmi apliekamie darijumi saskaņā ar likuma 46. pantu 1. punktu', 'PVN 0%');
INSERT INTO M_PVNTEXTS (ID, CODE, "VERSION", TAG1, TAG2) VALUES (7, 'Koks', NULL, 'Darijumu summa, kurai piemēro likuma 141. pantu', NULL);
INSERT INTO M_PVNTEXTS (ID, CODE, "VERSION", TAG1, TAG2) VALUES (8, 'Buvp.', NULL, 'Darijumu summa, kurai piemēro likuma 142. pantu', NULL);
INSERT INTO M_PVNTEXTS (ID, CODE, "VERSION", TAG1, TAG2) VALUES (9, 'Met', NULL, 'Darijumu summa, kurai piemēro likuma 143.4. pantu', NULL);
INSERT INTO M_PVNTEXTS (ID, CODE, "VERSION", TAG1, TAG2) VALUES (10, 'Dat', NULL, 'Darijumu summa, kurai piemēro likuma 143.1. pantu', NULL);
INSERT INTO M_PVNTEXTS (ID, CODE, "VERSION", TAG1, TAG2) VALUES (11, 'Graudi', NULL, 'Darijumu summa, kurai piemēro likuma 143.2. pantu', NULL);


COMMIT WORK;

INSERT INTO USERS (NM, PSW, TP, NR) VALUES ('Admin', NULL, 'A   ', 0);
INSERT INTO USERS (NM, PSW, TP, NR) VALUES ('SYSTEM', NULL, 'A   ', 0);


COMMIT WORK;

INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (90, 'CompName', 'SIA Pia', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (91, 'CompRegNr', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (92, 'CompMName', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (93, 'CompPhone', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (94, 'CompAddr', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (95, 'CompAddrInd', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (97, 'CompRegNrPVN', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (98, 'CompMpk', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (124, 'CompYear', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (137, 'USRNM', 'Admin', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (150, 'LOGCHDT', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (162, 'MSGONDEL', 'true', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (163, 'MSGONCOPY', '0', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (164, '44CHCOL', '0010', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (165, 'LOGIT', '1', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (166, 'LOGITA', '1', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (167, 'LOGTM', '300', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (174, 'RSD', '01.01.2023', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (175, 'RED', '31.01.2023', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (176, 'RpvnD', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (177, 'BALID', 'B1', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (194, 'AVRAC', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (195, 'AVNorSD', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (196, 'AVNorED', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (197, 'NorPers', '*', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (198, 'NorPersPK', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (199, 'AVNorNR', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (200, 'version', '012', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (201, 'CompVID', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (202, 'ACCPH', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9728, 'RAC', '2610', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9729, 'RPER', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9730, 'RACX', '*', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9731, 'RACNM', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9732, 'DLTYP', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9733, 'RAP1', '*', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9734, 'RAP2', '*', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9735, 'RAP3', '*', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9736, 'RAP4', '*', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9737, 'RAP5', '*', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9738, 'RAP6', '*', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9739, 'CSD', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9740, 'CED', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9837, 'RpvAmats', 'gramatvedis', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9838, 'RpvVards', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9839, 'RpvUzvards', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10228, 'UPRNP', 'true', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10229, 'UPRIIN', 'true', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10230, 'UPRIINIEN', 'true', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10231, 'UPRIINIZD', 'true', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10232, 'UPRIINIENV', 'NIE', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10233, 'UPRIINIZDV', 'NIZ', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10234, 'UPRPVN', 'true', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10235, 'UPRPVNIEN', 'true', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10236, 'UPRPVNIZD', 'false', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10237, 'UPRPVNIENV', '107', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10238, 'UPRPVNIZDV', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10239, 'UPRPVNDEB', 'true', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10240, 'UPRPVNKRED', 'true', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10241, 'UPRPVN5', 'true', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10242, 'UPRPVNDEBV', '305', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10243, 'UPRPVNKREDV', '207', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10244, 'UPRPVNREQPVN', 'true', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10245, 'UPRPVNREQIEN', 'true', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10246, 'UPRPVN5V', '507', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10247, 'OSD', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10248, 'OED', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10249, 'OCL', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10250, 'OAC11', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10251, 'OAC12', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10252, 'OAC13', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10253, 'OAC14', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10254, 'OAC15', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10255, 'OAC21', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10256, 'OAC22', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10257, 'OAC23', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10258, 'OAC24', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10259, 'OAC25', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10260, 'OOR', 'true', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10261, 'CompAddr1', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10262, 'CompAddr2', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10263, 'CompAddr3', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10264, 'CompAddr4', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10265, 'CompAccName', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10266, 'CompAccPh', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10267, 'BankId', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10268, 'BankName', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10269, 'BankAcc', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10270, 'CompVID', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10271, 'CHCOL', '1101', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10272, 'RpvnRG1', '1430', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10273, 'LinkDocsYR', '3', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10274, 'RekinaIzr', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (23, 'CompAddrG', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (14, 'LoadMts', '30', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (13, 'HideTotelSSH', 'true', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (12, 'IINSimple', 'true', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (36, 'roundup', 'false', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10329, 'MAINSTORE', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10330, 'DECIMALSINPRICES', '2', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10331, 'ShowItemDataPanel', 'true', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10332, 'ShowItemsFilterPanel', 'true', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10333, 'ActiveDate', '01.01.0001', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10334, 'CHCOLCURR', 'false', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10335, 'MFILTERDOCSDT1', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10336, 'MFILTERDOCSDT2', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10337, 'MFILTERDOCSTP', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10338, 'MFILTERDOCSSTATE', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10339, 'MFILTERDOCSOUT', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10340, 'MFILTERDOCSIN', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10341, 'MFILTERDOCSINOROUT', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10342, 'ODOCGR', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10343, 'CHECKISGONE', '0', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10344, 'PersDataOnlyUsed', 'false', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10345, 'HideBonusList', 'false', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10346, 'SHPosTitle', 'false', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10347, 'RVARDS', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10348, 'RAMATS', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10349, 'RTELEFONS', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10350, 'REPDT', '24.05.2023', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10351, 'RPAYDAY', '15', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10352, 'RSKAIDRA1', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10353, 'RSKAIDRA2', '', 'Admin');


COMMIT WORK;

INSERT INTO P_CATD (ID, CODE, DESCR, RATE) VALUES (1, '0', 'Nav nolietojuma', 0);
INSERT INTO P_CATD (ID, CODE, DESCR, RATE) VALUES (2, '10 zeme', 'Zeme', 0);
INSERT INTO P_CATD (ID, CODE, DESCR, RATE) VALUES (3, '20 ēkas', 'Ēkas', 10);
INSERT INTO P_CATD (ID, CODE, DESCR, RATE) VALUES (4, '30 iek', 'Ražošanas iekārtas', 20);
INSERT INTO P_CATD (ID, CODE, DESCR, RATE) VALUES (5, '40 dat', 'Datortehnika', 35);
INSERT INTO P_CATD (ID, CODE, DESCR, RATE) VALUES (6, '50 pār', 'Pārējie', 20);
INSERT INTO P_CATD (ID, CODE, DESCR, RATE) VALUES (0, '?', 'Nenoteikts', 0);


COMMIT WORK;

INSERT INTO P_CATT (ID, CODE, DESCR, RATE, KIND, VALUE0) VALUES (1, '0', 'Nav nolietojuma', 0, 0, 0);
INSERT INTO P_CATT (ID, CODE, DESCR, RATE, KIND, VALUE0) VALUES (2, '1', 'Ēkas', 20, 1, 0);
INSERT INTO P_CATT (ID, CODE, DESCR, RATE, KIND, VALUE0) VALUES (3, '3', 'Skaitļošanas iekārtas', 70, 0, 0);
INSERT INTO P_CATT (ID, CODE, DESCR, RATE, KIND, VALUE0) VALUES (4, '4', 'Pārējie', 40, 0, 0);
INSERT INTO P_CATT (ID, CODE, DESCR, RATE, KIND, VALUE0) VALUES (0, '?', 'Nenoteikts', 0, 0, 0);
INSERT INTO P_CATT (ID, CODE, DESCR, RATE, KIND, VALUE0) VALUES (5, '4a', 'Vieglās automašīnas', 30, 1, 0);


COMMIT WORK;

INSERT INTO P_CAT1 (ID, CODE, DESCR, KIND, IDCD, IDCT, "GROUP") VALUES (1, '1 zeme', 'Zeme', 0, 2, 1, 0);
INSERT INTO P_CAT1 (ID, CODE, DESCR, KIND, IDCD, IDCT, "GROUP") VALUES (2, '2 ekas', 'Ēkas', 0, 3, 2, 1);
INSERT INTO P_CAT1 (ID, CODE, DESCR, KIND, IDCD, IDCT, "GROUP") VALUES (3, '2 ekas adm', 'Administrācijas ēkas ', 0, 3, 2, 0);
INSERT INTO P_CAT1 (ID, CODE, DESCR, KIND, IDCD, IDCT, "GROUP") VALUES (4, '3 raz', 'Ražošanas iekārtas', 0, 4, 4, 0);
INSERT INTO P_CAT1 (ID, CODE, DESCR, KIND, IDCD, IDCT, "GROUP") VALUES (5, '4 par', 'Pārējie', 0, 6, 4, 0);
INSERT INTO P_CAT1 (ID, CODE, DESCR, KIND, IDCD, IDCT, "GROUP") VALUES (0, '?', 'Nenoteikts', 0, 0, 0, 0);


COMMIT WORK;

INSERT INTO P_DEPARTMENTS (ID, CODE, DESCR, "GROUP") VALUES (1, 'adm', 'Administrācija', 0);
INSERT INTO P_DEPARTMENTS (ID, CODE, DESCR, "GROUP") VALUES (0, '?', 'Nenoteikts', 0);


COMMIT WORK;

INSERT INTO P_EVENTS (ID, CODE, DESCR, SNR, K1) VALUES (2, 'iegeks', 'Iegāde un nodošana ekspluatācijā', 10, 1);
INSERT INTO P_EVENTS (ID, CODE, DESCR, SNR, K1) VALUES (3, 'ieg', 'Iegāde', 20, 1);
INSERT INTO P_EVENTS (ID, CODE, DESCR, SNR, K1) VALUES (4, 'izv', 'Izveide', 30, 1);
INSERT INTO P_EVENTS (ID, CODE, DESCR, SNR, K1) VALUES (5, 'eks', 'Nodošana ekspluatācijā', 40, 1);
INSERT INTO P_EVENTS (ID, CODE, DESCR, SNR, K1) VALUES (10, 'vieta', 'Pārvietošana', 50, 1);
INSERT INTO P_EVENTS (ID, CODE, DESCR, SNR, K1) VALUES (20, 'parvert', 'Pārvērtēšana', 60, 1);
INSERT INTO P_EVENTS (ID, CODE, DESCR, SNR, K1) VALUES (21, 'rekat', 'Kategorijas izmaiņa', 70, 1);
INSERT INTO P_EVENTS (ID, CODE, DESCR, SNR, K1) VALUES (22, 'kapit', 'Kapitālās izmaksas', 80, 1);
INSERT INTO P_EVENTS (ID, CODE, DESCR, SNR, K1) VALUES (30, 'nelieto', 'Pārtrauc lietošanu', 90, 1);
INSERT INTO P_EVENTS (ID, CODE, DESCR, SNR, K1) VALUES (31, 'lieto', 'Atsāk lietošanu', 100, 1);
INSERT INTO P_EVENTS (ID, CODE, DESCR, SNR, K1) VALUES (40, 'likvid', 'Likvidācija', 110, 1);
INSERT INTO P_EVENTS (ID, CODE, DESCR, SNR, K1) VALUES (50, 'noliet', 'Nolietojuma aprēķins', 120, 0);
INSERT INTO P_EVENTS (ID, CODE, DESCR, SNR, K1) VALUES (0, '?', 'Nenoteikts', 0, 1);
INSERT INTO P_EVENTS (ID, CODE, DESCR, SNR, K1) VALUES (100, 'apr', 'Aprēķins', 130, 0);
INSERT INTO P_EVENTS (ID, CODE, DESCR, SNR, K1) VALUES (1, 'pienuzsk', 'Pieņemts uzskaitē', 1, 1);


COMMIT WORK;

INSERT INTO P_PLACES (ID, CODE, DESCR, ADDR, "GROUP") VALUES (1, 'adm', 'Administrācijas birojs', 'Brīvības 1', 0);
INSERT INTO P_PLACES (ID, CODE, DESCR, ADDR, "GROUP") VALUES (0, '?', 'Nenoteikts', '-', 0);


COMMIT WORK;



/******************************************************************************/
/***                           Unique constraints                           ***/
/******************************************************************************/

ALTER TABLE A_PIECEWORK_CATALOG ADD CONSTRAINT A_UNQ1_PIECEWORK_CATALOG_CODE UNIQUE (CODE);


/******************************************************************************/
/***                              Primary keys                              ***/
/******************************************************************************/

ALTER TABLE A_BANKS ADD CONSTRAINT PK_A_BANKS PRIMARY KEY (ID);
ALTER TABLE A_DEPARTMENTS ADD CONSTRAINT PK_A_DEPARTMENTS PRIMARY KEY (ID);
ALTER TABLE A_EVENTS ADD CONSTRAINT PK_A_EVENTS PRIMARY KEY (ID);
ALTER TABLE A_EVENT_TYPES ADD CONSTRAINT PK_A_EVENT_TYPES PRIMARY KEY (ID);
ALTER TABLE A_EVENT_TYPES2 ADD CONSTRAINT PK_A_EVENT_TYPES2 PRIMARY KEY (ID);
ALTER TABLE A_FP_PAYLISTS ADD CONSTRAINT PK_A_FP_PAYLISTS PRIMARY KEY (ID);
ALTER TABLE A_FP_PAYLISTS_R ADD CONSTRAINT PK_A_FP_PAYLISTS_R PRIMARY KEY (ID);
ALTER TABLE A_HOLIDAYS ADD CONSTRAINT PK_A_HOLIDAYS PRIMARY KEY (DT);
ALTER TABLE A_INCOME_CODES ADD CONSTRAINT PK_A_INCOME_CODES PRIMARY KEY (ID);
ALTER TABLE A_PASTDATA ADD CONSTRAINT PK_A_PASTDATA PRIMARY KEY (ID);
ALTER TABLE A_PASTDATA_2 ADD CONSTRAINT PK_A_PASTDATA_2 PRIMARY KEY (ID);
ALTER TABLE A_PAYLISTS ADD CONSTRAINT PK_A_PAYLISTS PRIMARY KEY (ID);
ALTER TABLE A_PAYLISTS_R ADD CONSTRAINT PK_A_PAYLISTS_R PRIMARY KEY (ID);
ALTER TABLE A_PAYLIST_TEMPL ADD CONSTRAINT PK_A_PAYLIST_TEMPL PRIMARY KEY (ID);
ALTER TABLE A_PAYLIST_TEMPL_R ADD CONSTRAINT PK_A_PAYLIST_TEMPL_R PRIMARY KEY (ID);
ALTER TABLE A_PERSONS ADD CONSTRAINT PK_A_PERSONS PRIMARY KEY (ID);
ALTER TABLE A_PERSONS_FIZ ADD CONSTRAINT PK_A_PERSONS_FIZ PRIMARY KEY (ID);
ALTER TABLE A_PERSONS_R ADD CONSTRAINT PK_A_PERSONS_R PRIMARY KEY (ID);
ALTER TABLE A_PIECEWORK ADD CONSTRAINT PK_A_PIECEWORK PRIMARY KEY (ID);
ALTER TABLE A_PIECEWORK_CATALOG ADD CONSTRAINT PK_A_PIECEWORK_CATALOG PRIMARY KEY (ID);
ALTER TABLE A_PIECEWORK_CATSTRUCT ADD CONSTRAINT PK_A_PIECEWORK_CATSTRUCT PRIMARY KEY (ID);
ALTER TABLE A_PLUSMINUS_FROM ADD CONSTRAINT PK_A_PLUSMINUS_FROM PRIMARY KEY (ID);
ALTER TABLE A_PLUSMINUS_TYPES ADD CONSTRAINT PK_A_PLUSMINUS_TYPES PRIMARY KEY (ID);
ALTER TABLE A_POSITIONS ADD CONSTRAINT PK_A_POSITIONS PRIMARY KEY (ID);
ALTER TABLE A_POSITIONS_PLUSMINUS ADD CONSTRAINT PK_A_POSITIONS_PLUSMINUS PRIMARY KEY (ID);
ALTER TABLE A_POSITIONS_R ADD CONSTRAINT PK_A_POSITIONS_R PRIMARY KEY (ID);
ALTER TABLE A_PROFESSIONS ADD CONSTRAINT PK_A_PROFESSIONS PRIMARY KEY (ID);
ALTER TABLE A_RATES ADD CONSTRAINT PK_A_RATES PRIMARY KEY (ID);
ALTER TABLE A_REPORT_CODES ADD CONSTRAINT PK_A_REPORT_CODES PRIMARY KEY (ID);
ALTER TABLE A_SALARY_PLUSMINUS ADD CONSTRAINT PK_A_SALARY_PLUSMINUS PRIMARY KEY (ID);
ALTER TABLE A_SALARY_SHEETS ADD CONSTRAINT PK_A_SALARY_SHEETS PRIMARY KEY (ID);
ALTER TABLE A_SALARY_SHEETS_R ADD CONSTRAINT PK_A_SALARY_SHEETS_R PRIMARY KEY (ID);
ALTER TABLE A_SALARY_SHEETS_R_HIST ADD CONSTRAINT PK_A_SALARY_SHEETS_R_HIST PRIMARY KEY (IDH);
ALTER TABLE A_SALARY_SHEET_TEMPL ADD CONSTRAINT PK_A_SALARY_SHEET_TEMPL PRIMARY KEY (ID);
ALTER TABLE A_SALARY_SHEET_TEMPL_R ADD CONSTRAINT PK_A_SALARY_SHEET_TEMPL_R PRIMARY KEY (ID);
ALTER TABLE A_TEMP_REP_INKP ADD CONSTRAINT PK_A_TEMP_REP_INKP PRIMARY KEY (IDP);
ALTER TABLE A_TEMP_REP_PDT ADD CONSTRAINT PK_A_TEMP_REP_PDT PRIMARY KEY (IDP);
ALTER TABLE A_TERITORIAL_CODES ADD CONSTRAINT PK_A_TERITORIAL_CODES PRIMARY KEY (ID);
ALTER TABLE A_TIMEPLAN_LIST ADD CONSTRAINT PK_A_TIMEPLAN_LIST PRIMARY KEY (ID);
ALTER TABLE A_TIMESHEET ADD CONSTRAINT PK_A_TIMESHEET PRIMARY KEY (ID);
ALTER TABLE A_TIMESHEET_LISTS ADD CONSTRAINT PK_A_TIMESHEET_LISTS PRIMARY KEY (ID);
ALTER TABLE A_TIMESHEET_LISTS_R ADD CONSTRAINT PK_A_TIMESHEET_LISTS_R PRIMARY KEY (ID);
ALTER TABLE A_TIMESHEET_TEMPL ADD CONSTRAINT PK_A_TIMESHEET_TEMPL PRIMARY KEY (ID);
ALTER TABLE A_TIMESHEET_TEMPL_R ADD CONSTRAINT PK_A_TIMESHEET_TEMPL_R PRIMARY KEY (ID);
ALTER TABLE A_UNTAXED_MIN ADD CONSTRAINT PK_A_UNTAXED_MIN PRIMARY KEY (ID);
ALTER TABLE F_ACP1 ADD CONSTRAINT PK__F_ACP1 PRIMARY KEY (ACPID);
ALTER TABLE F_ACP21 ADD CONSTRAINT PK__F_ACP21 PRIMARY KEY (AC);
ALTER TABLE F_ACP211 ADD CONSTRAINT PK__F_ACP211 PRIMARY KEY (IDX);
ALTER TABLE F_ACP22 ADD CONSTRAINT PK__F_ACP22 PRIMARY KEY (IDX);
ALTER TABLE F_ACP23 ADD CONSTRAINT PK__F_ACP23 PRIMARY KEY (IDX);
ALTER TABLE F_ACP24 ADD CONSTRAINT PK__F_ACP24 PRIMARY KEY (IDX);
ALTER TABLE F_ACP25 ADD CONSTRAINT PK__F_ACP25 PRIMARY KEY (IDX);
ALTER TABLE F_ACP25A ADD CONSTRAINT PK__F_ACP25A PRIMARY KEY (IDX);
ALTER TABLE F_ACP6 ADD CONSTRAINT PK__F_ACP6 PRIMARY KEY (IDX);
ALTER TABLE F_ACPLAN ADD CONSTRAINT PK__F_ACPLAN PRIMARY KEY (AC);
ALTER TABLE F_ACPVN ADD CONSTRAINT PK__F_ACPVN PRIMARY KEY (ID);
ALTER TABLE F_BAL0 ADD CONSTRAINT PK__F_BAL0 PRIMARY KEY (ID);
ALTER TABLE F_BALA1 ADD CONSTRAINT PK__F_BALA1 PRIMARY KEY (BALID);
ALTER TABLE F_BALA2 ADD CONSTRAINT PK__F_BALA2 PRIMARY KEY (ID);
ALTER TABLE F_BALA21 ADD CONSTRAINT PK__F_BALA21 PRIMARY KEY (ID);
ALTER TABLE F_BALA3 ADD CONSTRAINT PK__F_BALA3 PRIMARY KEY (ID);
ALTER TABLE F_BANKS ADD CONSTRAINT PK__F_BANKS PRIMARY KEY (ID);
ALTER TABLE F_CURRENCY ADD CONSTRAINT PK__F_CURRENCY PRIMARY KEY (ID, DETE);
ALTER TABLE F_DOCS0 ADD CONSTRAINT PK_DOCS0 PRIMARY KEY (ID);
ALTER TABLE F_DOCTYP ADD CONSTRAINT PK__F_DOCTYP PRIMARY KEY (ID);
ALTER TABLE F_DOCTYPA ADD CONSTRAINT PK__F_DOCTYPA PRIMARY KEY (ID);
ALTER TABLE F_DOCTYPB ADD CONSTRAINT PK__F_DOCTYPB PRIMARY KEY (IDA, ID);
ALTER TABLE F_LOGX ADD CONSTRAINT PK__F_LOGX PRIMARY KEY (ID);
ALTER TABLE F_LOPS ADD CONSTRAINT PK__F_LOPS PRIMARY KEY (IDL);
ALTER TABLE F_LOPSD ADD CONSTRAINT PK__F_LOPSD PRIMARY KEY (IDL);
ALTER TABLE F_LXOP ADD CONSTRAINT PK__F_LXOP PRIMARY KEY (ID);
ALTER TABLE F_OPS ADD CONSTRAINT PK__F_OPS PRIMARY KEY (ID);
ALTER TABLE F_OPSD ADD CONSTRAINT PK__F_OPSD PRIMARY KEY (ID);
ALTER TABLE F_OPSD_YEAR_SEQ ADD CONSTRAINT PK__F_OPSD_YEAR PRIMARY KEY (YR);
ALTER TABLE F_PERSONS ADD CONSTRAINT PK__F_PERSONS PRIMARY KEY (CLID);
ALTER TABLE F_PERSONTYP ADD CONSTRAINT PK__F_PERSONTY PRIMARY KEY (ID);
ALTER TABLE F_ROPS1A ADD CONSTRAINT PK__F_F_ROPS1A PRIMARY KEY (ID);
ALTER TABLE F_ROPS2A ADD CONSTRAINT PK__F_ROPS2A PRIMARY KEY (ID);
ALTER TABLE F_ROPS2B ADD CONSTRAINT PK__F_ROPS2B PRIMARY KEY (ID);
ALTER TABLE F_ROPS3A ADD CONSTRAINT PK__F_ROPS3A PRIMARY KEY (ID);
ALTER TABLE F_TABLE1 ADD CONSTRAINT PK__F_TABLE1 PRIMARY KEY (ID);
ALTER TABLE F_TREM ADD CONSTRAINT PK__F_TREM PRIMARY KEY (ID);
ALTER TABLE F_TREPA1 ADD CONSTRAINT PK__F_TREPA1 PRIMARY KEY (ID);
ALTER TABLE F_TREPAPAN ADD CONSTRAINT PK__F_TREPAPAN PRIMARY KEY (ID);
ALTER TABLE F_TREPDARZ1 ADD CONSTRAINT PK__F_TREPDARZ1 PRIMARY KEY (ID);
ALTER TABLE F_TREPDARZ2 ADD CONSTRAINT PK__F_TREPDARZ2 PRIMARY KEY (ID);
ALTER TABLE F_TREPDOCS1 ADD CONSTRAINT PK__F_TREPDOCS1 PRIMARY KEY (ID);
ALTER TABLE F_TREPDOCS2 ADD CONSTRAINT PK__F_TREPDOCS2 PRIMARY KEY (ID);
ALTER TABLE F_TREPDOCSS ADD CONSTRAINT PK__F_TREPDOCSS PRIMARY KEY (ID);
ALTER TABLE F_TREPMT ADD CONSTRAINT PK__F_TREPMT PRIMARY KEY (ID);
ALTER TABLE F_TREPOPS ADD CONSTRAINT F_TREPOPS PRIMARY KEY (ID);
ALTER TABLE F_TREPOPSD ADD CONSTRAINT PK_TREPOPSD PRIMARY KEY (ID);
ALTER TABLE F_TREPPVNZ1 ADD CONSTRAINT PK__F_TREPPVNZ1 PRIMARY KEY (ID);
ALTER TABLE F_TREPUDOCS ADD CONSTRAINT PK__F_TREPUDOCS PRIMARY KEY (ID);
ALTER TABLE F_TTEMP_BALA21 ADD CONSTRAINT PK_TTEMP_BALA21 PRIMARY KEY (ID);
ALTER TABLE F_TTEMP_BALAC ADD CONSTRAINT PK_TTEMP_BALAC PRIMARY KEY (ID);
ALTER TABLE F_TTEMP_BALMT1 ADD CONSTRAINT PK_TTEMP_BALMT1 PRIMARY KEY (ID);
ALTER TABLE F_TTEMP_BALMT2 ADD CONSTRAINT PK_TTEMP_BALMT2 PRIMARY KEY (ID);
ALTER TABLE F_TTEMP_PVN1 ADD CONSTRAINT PK_TTEMP_PVN1 PRIMARY KEY (ID)
USING INDEX PK_TTEMP_PVN1_ID;
ALTER TABLE F_TTEMP_PVN2 ADD CONSTRAINT PK_TTEMP_PVN2 PRIMARY KEY (CLID);
ALTER TABLE F_TUDOCLISTS ADD CONSTRAINT PK__F_TUDOCLIS PRIMARY KEY (ID);
ALTER TABLE F_TUDOCS ADD CONSTRAINT PK__F_TUDOCS PRIMARY KEY (ID);
ALTER TABLE F_TUPDFIELDS ADD CONSTRAINT PK__F_TUPDFIEL PRIMARY KEY (ID);
ALTER TABLE F_TUPVN1 ADD CONSTRAINT PK__F_TUPVN1 PRIMARY KEY (ID);
ALTER TABLE M_ACCOUNTS ADD CONSTRAINT PK_M_ACCOUNTS PRIMARY KEY (ID);
ALTER TABLE M_ACCOUNTTYPE ADD CONSTRAINT PK_M_ACCOUNTTYPE PRIMARY KEY (ID);
ALTER TABLE M_ADDRESSSES ADD CONSTRAINT PK_M_ADDRESSSES PRIMARY KEY (ID);
ALTER TABLE M_BANKACCOUNTS ADD CONSTRAINT PK_M_BANKACCOUNTS PRIMARY KEY (ID);
ALTER TABLE M_BANKS ADD CONSTRAINT PK_M_BANKS PRIMARY KEY (ID);
ALTER TABLE M_CONTACTS ADD CONSTRAINT PK_M_CONTACTS PRIMARY KEY (ID);
ALTER TABLE M_COUNTRIES ADD CONSTRAINT PK_M_COUNTRIES PRIMARY KEY (ID);
ALTER TABLE M_DISC_LISTS ADD CONSTRAINT PK_M_DISC_LISTS PRIMARY KEY (ID);
ALTER TABLE M_DISC_LISTS_P ADD CONSTRAINT PK_M_DISC_LISTS_P PRIMARY KEY (ID);
ALTER TABLE M_DISC_LISTS_R ADD CONSTRAINT PK_M_DISC_LISTS_R PRIMARY KEY (ID);
ALTER TABLE M_DOCS ADD CONSTRAINT PK_M_DOCS PRIMARY KEY (ID);
ALTER TABLE M_DOCTYPES ADD CONSTRAINT PK_M_DOCTYPES PRIMARY KEY (ID);
ALTER TABLE M_INV_DOCS ADD CONSTRAINT PK_M_INV_DOCS PRIMARY KEY (ID);
ALTER TABLE M_INV_ROWS ADD CONSTRAINT PK_M_INV_ROWS PRIMARY KEY (ID);
ALTER TABLE M_ITEMS ADD CONSTRAINT PK_M_ITEMS PRIMARY KEY (ID);
ALTER TABLE M_ITEMS_CAT ADD CONSTRAINT PK_M_ITEMS_CAT PRIMARY KEY (ID);
ALTER TABLE M_ITEMS_PER_STORE ADD CONSTRAINT PK_M_ITEMS_PER_STORE PRIMARY KEY (IDITEM, IDSTORE);
ALTER TABLE M_LINKS ADD CONSTRAINT PK_M_LINKS PRIMARY KEY (ID1, ID2);
ALTER TABLE M_PAYMENTTYPE ADD CONSTRAINT PK_M_PAYMENTTYPE PRIMARY KEY (ID);
ALTER TABLE M_PRICE_LISTS ADD CONSTRAINT PK_M_PRICE_LISTS PRIMARY KEY (ID);
ALTER TABLE M_PRICE_LISTS_P ADD CONSTRAINT PK_M_PRICE_LISTS_P PRIMARY KEY (ID);
ALTER TABLE M_PRICE_LISTS_R ADD CONSTRAINT PK_M_PRICE_LISTS_R PRIMARY KEY (ID);
ALTER TABLE M_PVNRATES ADD CONSTRAINT PK_M_PVNRATES PRIMARY KEY (ID);
ALTER TABLE M_PVNRATES2 ADD CONSTRAINT PK_M_PVNRATES2 PRIMARY KEY (ID);
ALTER TABLE M_PVNTEXTS ADD CONSTRAINT PK_M_PVNTEXTS PRIMARY KEY (ID);
ALTER TABLE M_PVNTYPE ADD CONSTRAINT PK_M_PVNTYPE PRIMARY KEY (ID);
ALTER TABLE M_ROWS ADD CONSTRAINT PK_M_ROWS PRIMARY KEY (ID);
ALTER TABLE M_STORES ADD CONSTRAINT PK_M_STORES PRIMARY KEY (ID);
ALTER TABLE M_STORES_CAT ADD CONSTRAINT PK_M_STORES_CAT PRIMARY KEY (ID);
ALTER TABLE M_STORETYPE ADD CONSTRAINT PK_M_STORETYPE PRIMARY KEY (ID);
ALTER TABLE M_TRANSACTIONTYPE ADD CONSTRAINT PK_M_TRANSACTIONTYPE PRIMARY KEY (ID);
ALTER TABLE M_UNITS ADD CONSTRAINT PK_M_UNITS PRIMARY KEY (ID);
ALTER TABLE M_VEHICLES ADD CONSTRAINT PK_M_VEHICLES PRIMARY KEY (ID);
ALTER TABLE PARAMS ADD CONSTRAINT PK__PARAMS PRIMARY KEY (ID);
ALTER TABLE P_CAT1 ADD CONSTRAINT PK_P_CAT1 PRIMARY KEY (ID);
ALTER TABLE P_CATD ADD CONSTRAINT PK_P_CATD PRIMARY KEY (ID);
ALTER TABLE P_CATT ADD CONSTRAINT PK_P_CATT PRIMARY KEY (ID);
ALTER TABLE P_DEPARTMENTS ADD CONSTRAINT PK_P_DEPARTMENTS PRIMARY KEY (ID);
ALTER TABLE P_EVENTS ADD CONSTRAINT PK_P_EVENTS PRIMARY KEY (ID);
ALTER TABLE P_ITEMS ADD CONSTRAINT PK_P_ITEMS PRIMARY KEY (ID);
ALTER TABLE P_ITEMS_EVENTS ADD CONSTRAINT PK_P_ITEMS_EVENTS PRIMARY KEY (ID);
ALTER TABLE P_PLACES ADD CONSTRAINT PK_P_PLACES PRIMARY KEY (ID);
ALTER TABLE P_TAXDEPRECYEAR ADD CONSTRAINT PK_P_TAXDEPRECYEAR PRIMARY KEY (ID);
ALTER TABLE USERS ADD CONSTRAINT PK__USERS PRIMARY KEY (NM);


/******************************************************************************/
/***                              Foreign keys                              ***/
/******************************************************************************/

ALTER TABLE A_EVENTS ADD CONSTRAINT FK_A_EVENTS_IDA FOREIGN KEY (IDA) REFERENCES A_POSITIONS (ID);
ALTER TABLE A_EVENTS ADD CONSTRAINT FK_A_EVENTS_IDN FOREIGN KEY (IDN) REFERENCES A_EVENT_TYPES (ID);
ALTER TABLE A_EVENTS ADD CONSTRAINT FK_A_EVENTS_IDN2 FOREIGN KEY (IDN2) REFERENCES A_EVENT_TYPES2 (ID);
ALTER TABLE A_EVENTS ADD CONSTRAINT FK_A_EVENTS_IDP FOREIGN KEY (IDP) REFERENCES A_PERSONS (ID);
ALTER TABLE A_FP_PAYLISTS_R ADD CONSTRAINT FK_A_FP_PAYLISTS_R_IDP FOREIGN KEY (IDP) REFERENCES A_PERSONS_FIZ (ID);
ALTER TABLE A_FP_PAYLISTS_R ADD CONSTRAINT FK_A_FP_PAYLISTS_R_IDS FOREIGN KEY (IDS) REFERENCES A_FP_PAYLISTS (ID);
ALTER TABLE A_PASTDATA ADD CONSTRAINT FK_A_PASTDATA_IDP FOREIGN KEY (IDP) REFERENCES A_PERSONS (ID);
ALTER TABLE A_PASTDATA_2 ADD CONSTRAINT FK_A_PASTDATA_2_IDP FOREIGN KEY (IDP) REFERENCES A_PERSONS (ID);
ALTER TABLE A_PAYLISTS ADD CONSTRAINT FK_A_PAYLISTS_DEP FOREIGN KEY (DEP) REFERENCES A_DEPARTMENTS (ID);
ALTER TABLE A_PAYLISTS_R ADD CONSTRAINT FK_A_PAYLISTS_R_IDAM FOREIGN KEY (IDAM) REFERENCES A_POSITIONS (ID);
ALTER TABLE A_PAYLISTS_R ADD CONSTRAINT FK_A_PAYLISTS_R_IDP FOREIGN KEY (IDP) REFERENCES A_PERSONS (ID);
ALTER TABLE A_PAYLISTS_R ADD CONSTRAINT FK_A_PAYLISTS_R_IDS FOREIGN KEY (IDS) REFERENCES A_PAYLISTS (ID);
ALTER TABLE A_PAYLIST_TEMPL ADD CONSTRAINT FK_A_PAYLIST_TEMPL_DEP FOREIGN KEY (DEP) REFERENCES A_DEPARTMENTS (ID);
ALTER TABLE A_PAYLIST_TEMPL_R ADD CONSTRAINT FK_A_PAYLIST_TEMPL_R_IDAM FOREIGN KEY (IDAM) REFERENCES A_POSITIONS (ID);
ALTER TABLE A_PAYLIST_TEMPL_R ADD CONSTRAINT FK_A_PAYLIST_TEMPL_R_IDP FOREIGN KEY (IDP) REFERENCES A_PERSONS (ID);
ALTER TABLE A_PAYLIST_TEMPL_R ADD CONSTRAINT FK_A_PAYLIST_TEMPL_R_IDS FOREIGN KEY (IDS) REFERENCES A_PAYLIST_TEMPL (ID);
ALTER TABLE A_PERSONS ADD CONSTRAINT FK_A_PERSONS_BANK_ID FOREIGN KEY (BANK_ID) REFERENCES A_BANKS (ID);
ALTER TABLE A_PERSONS_FIZ ADD CONSTRAINT FK_A_PERSONS_FIZ_BANK_ID FOREIGN KEY (BANK_ID) REFERENCES A_BANKS (ID);
ALTER TABLE A_PERSONS_R ADD CONSTRAINT FK_A_PERSONS_R_IDP FOREIGN KEY (IDP) REFERENCES A_PERSONS (ID) ON DELETE CASCADE;
ALTER TABLE A_PIECEWORK ADD CONSTRAINT FK_A_PIECEWORK_IDA FOREIGN KEY (IDA) REFERENCES A_POSITIONS (ID);
ALTER TABLE A_PIECEWORK ADD CONSTRAINT FK_A_PIECEWORK_IDK FOREIGN KEY (IDK) REFERENCES A_PIECEWORK_CATALOG (ID);
ALTER TABLE A_PIECEWORK ADD CONSTRAINT FK_A_PIECEWORK_IDP FOREIGN KEY (IDP) REFERENCES A_PERSONS (ID);
ALTER TABLE A_PIECEWORK_CATALOG ADD CONSTRAINT FK_A_PIECEWORK_CATALOG_IDS FOREIGN KEY (IDS) REFERENCES A_PIECEWORK_CATSTRUCT (ID);
ALTER TABLE A_POSITIONS ADD CONSTRAINT FK_A_POSITIONS_IDDEP FOREIGN KEY (IDDEP) REFERENCES A_DEPARTMENTS (ID);
ALTER TABLE A_POSITIONS ADD CONSTRAINT FK_A_POSITIONS_IDP FOREIGN KEY (IDP) REFERENCES A_PERSONS (ID);
ALTER TABLE A_POSITIONS_PLUSMINUS ADD CONSTRAINT FK_A_POSITIONS_PLUSMINUS_IDA FOREIGN KEY (IDA) REFERENCES A_POSITIONS (ID);
ALTER TABLE A_POSITIONS_PLUSMINUS ADD CONSTRAINT FK_A_POSITIONS_PLUSMINUS_IDNO FOREIGN KEY (IDNO) REFERENCES A_PLUSMINUS_FROM (ID);
ALTER TABLE A_POSITIONS_PLUSMINUS ADD CONSTRAINT FK_A_POSITIONS_PLUSMINUS_IDP FOREIGN KEY (IDP) REFERENCES A_PERSONS (ID);
ALTER TABLE A_POSITIONS_PLUSMINUS ADD CONSTRAINT FK_A_POSITIONS_PLUSMINUS_IDSV FOREIGN KEY (IDSV) REFERENCES A_PLUSMINUS_TYPES (ID);
ALTER TABLE A_POSITIONS_R ADD CONSTRAINT FK_A_POSITIONS_R_IDA FOREIGN KEY (IDA) REFERENCES A_POSITIONS (ID);
ALTER TABLE A_POSITIONS_R ADD CONSTRAINT FK_A_POSITIONS_R_IDDEP FOREIGN KEY (IDDEP) REFERENCES A_DEPARTMENTS (ID);
ALTER TABLE A_SALARY_PLUSMINUS ADD CONSTRAINT FK_A_SALARY_PLUSMINUS_IDA FOREIGN KEY (IDA) REFERENCES A_POSITIONS (ID);
ALTER TABLE A_SALARY_PLUSMINUS ADD CONSTRAINT FK_A_SALARY_PLUSMINUS_IDAP FOREIGN KEY (IDAP) REFERENCES A_POSITIONS_PLUSMINUS (ID);
ALTER TABLE A_SALARY_PLUSMINUS ADD CONSTRAINT FK_A_SALARY_PLUSMINUS_IDNO FOREIGN KEY (IDNO) REFERENCES A_PLUSMINUS_FROM (ID);
ALTER TABLE A_SALARY_PLUSMINUS ADD CONSTRAINT FK_A_SALARY_PLUSMINUS_IDP FOREIGN KEY (IDP) REFERENCES A_PERSONS (ID);
ALTER TABLE A_SALARY_PLUSMINUS ADD CONSTRAINT FK_A_SALARY_PLUSMINUS_IDSV FOREIGN KEY (IDSV) REFERENCES A_PLUSMINUS_TYPES (ID);
ALTER TABLE A_SALARY_PLUSMINUS ADD CONSTRAINT FK_A_SALARY_PLUSMINUS_IDSX FOREIGN KEY (IDSX) REFERENCES A_SALARY_SHEETS_R (ID);
ALTER TABLE A_SALARY_SHEETS ADD CONSTRAINT FK_A_SALARY_SHEETS_DEP FOREIGN KEY (DEP) REFERENCES A_DEPARTMENTS (ID);
ALTER TABLE A_SALARY_SHEETS_R ADD CONSTRAINT FK_A_SALARY_SHEETS_R_IDAM FOREIGN KEY (IDAM) REFERENCES A_POSITIONS (ID);
ALTER TABLE A_SALARY_SHEETS_R ADD CONSTRAINT FK_A_SALARY_SHEETS_R_IDP FOREIGN KEY (IDP) REFERENCES A_PERSONS (ID);
ALTER TABLE A_SALARY_SHEETS_R ADD CONSTRAINT FK_A_SALARY_SHEETS_R_IDS FOREIGN KEY (IDS) REFERENCES A_SALARY_SHEETS (ID);
ALTER TABLE A_SALARY_SHEETS_R ADD CONSTRAINT FK_A_SALARY_SHEETS_R_IDST FOREIGN KEY (IDST) REFERENCES A_SALARY_SHEETS (ID);
ALTER TABLE A_SALARY_SHEET_TEMPL ADD CONSTRAINT FK_A_SALARY_SHEET_TEMPL_DEP FOREIGN KEY (DEP) REFERENCES A_DEPARTMENTS (ID);
ALTER TABLE A_SALARY_SHEET_TEMPL_R ADD CONSTRAINT FK_A_SALARY_SHEET_TEMPL_R_IDAM FOREIGN KEY (IDAM) REFERENCES A_POSITIONS (ID);
ALTER TABLE A_SALARY_SHEET_TEMPL_R ADD CONSTRAINT FK_A_SALARY_SHEET_TEMPL_R_IDP FOREIGN KEY (IDP) REFERENCES A_PERSONS (ID);
ALTER TABLE A_SALARY_SHEET_TEMPL_R ADD CONSTRAINT FK_A_SALARY_SHEET_TEMPL_R_IDS FOREIGN KEY (IDS) REFERENCES A_SALARY_SHEET_TEMPL (ID);
ALTER TABLE A_TIMESHEET ADD CONSTRAINT FK_A_TIMESHEET_IDL FOREIGN KEY (IDL) REFERENCES A_TIMESHEET_LISTS_R (ID);
ALTER TABLE A_TIMESHEET ADD CONSTRAINT FK_A_TIMESHEET_IDP FOREIGN KEY (IDP) REFERENCES A_TIMEPLAN_LIST (ID);
ALTER TABLE A_TIMESHEET_LISTS ADD CONSTRAINT FK_A_TIMESHEET_LISTS_DEP FOREIGN KEY (DEP) REFERENCES A_DEPARTMENTS (ID);
ALTER TABLE A_TIMESHEET_LISTS_R ADD CONSTRAINT FK_A_TIMESHEET_LISTS_R_IDAM FOREIGN KEY (IDAM) REFERENCES A_POSITIONS (ID);
ALTER TABLE A_TIMESHEET_LISTS_R ADD CONSTRAINT FK_A_TIMESHEET_LISTS_R_IDP FOREIGN KEY (IDP) REFERENCES A_PERSONS (ID);
ALTER TABLE A_TIMESHEET_LISTS_R ADD CONSTRAINT FK_A_TIMESHEET_LISTS_R_IDS FOREIGN KEY (IDS) REFERENCES A_TIMESHEET_LISTS (ID);
ALTER TABLE A_TIMESHEET_TEMPL ADD CONSTRAINT FK_A_TIMESHEET_TEMPL_DEP FOREIGN KEY (DEP) REFERENCES A_DEPARTMENTS (ID);
ALTER TABLE A_TIMESHEET_TEMPL_R ADD CONSTRAINT FK_A_TIMESHEET_TEMPL_R_IDAM FOREIGN KEY (IDAM) REFERENCES A_POSITIONS (ID);
ALTER TABLE A_TIMESHEET_TEMPL_R ADD CONSTRAINT FK_A_TIMESHEET_TEMPL_R_IDP FOREIGN KEY (IDP) REFERENCES A_PERSONS (ID);
ALTER TABLE A_TIMESHEET_TEMPL_R ADD CONSTRAINT FK_A_TIMESHEET_TEMPL_R_IDPL FOREIGN KEY (IDPL) REFERENCES A_TIMEPLAN_LIST (ID);
ALTER TABLE A_TIMESHEET_TEMPL_R ADD CONSTRAINT FK_A_TIMESHEET_TEMPL_R_IDS FOREIGN KEY (IDS) REFERENCES A_TIMESHEET_TEMPL (ID);
ALTER TABLE A_UNTAXED_MIN ADD CONSTRAINT FK_A_UNTAXED_MIN_IDP FOREIGN KEY (IDP) REFERENCES A_PERSONS (ID);
ALTER TABLE F_BAL0 ADD CONSTRAINT FK_F_BAL0_AC1_ACP21_AC FOREIGN KEY (AC11) REFERENCES F_ACP21 (AC);
ALTER TABLE F_BAL0 ADD CONSTRAINT FK_F_BAL0_AC4_ACP24_IDX FOREIGN KEY (AC24) REFERENCES F_ACP24 (IDX);
ALTER TABLE F_BAL0 ADD CONSTRAINT FK_F_BAL0_CLID_PERSONS_CLID FOREIGN KEY (CLID) REFERENCES F_PERSONS (CLID);
ALTER TABLE F_BALA2 ADD CONSTRAINT FK_F_BALA2_BALID_BALA1_BALID FOREIGN KEY (BALID) REFERENCES F_BALA1 (BALID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE F_BALA3 ADD CONSTRAINT FK_F_BALA3_ID2_BALA2_ID FOREIGN KEY (ID2) REFERENCES F_BALA2 (ID) ON DELETE CASCADE;
ALTER TABLE F_DOCS0 ADD CONSTRAINT FK_F_DOCS0_AC_ACP21_AC FOREIGN KEY (AC) REFERENCES F_ACP21 (AC);
ALTER TABLE F_DOCS0 ADD CONSTRAINT FK_F_DOCS0_CLID_PERSONS_CLID FOREIGN KEY (CLID) REFERENCES F_PERSONS (CLID);
ALTER TABLE F_DOCS0 ADD CONSTRAINT FK_F_DOCS0_DOCTYP_DOCTYP_ID FOREIGN KEY (DOCTYP) REFERENCES F_DOCTYP (ID);
ALTER TABLE F_DOCTYPB ADD CONSTRAINT FK_F_DOCTYPB_IDA_DOCTYPA_ID FOREIGN KEY (IDA) REFERENCES F_DOCTYPA (ID) ON UPDATE CASCADE;
ALTER TABLE F_DOCTYPB ADD CONSTRAINT FK_F_DOCTYPB_ID_DOCTYP_ID FOREIGN KEY (ID) REFERENCES F_DOCTYP (ID) ON UPDATE CASCADE;
ALTER TABLE F_OPS ADD CONSTRAINT FK_F_OPS_AC11_ACP21_AC FOREIGN KEY (AC11) REFERENCES F_ACP21 (AC);
ALTER TABLE F_OPS ADD CONSTRAINT FK_F_OPS_AC12_ACP21_AC FOREIGN KEY (AC12) REFERENCES F_ACP21 (AC);
ALTER TABLE F_OPS ADD CONSTRAINT FK_F_OPS_AC13_ACP23_IDX FOREIGN KEY (AC13) REFERENCES F_ACP23 (IDX);
ALTER TABLE F_OPS ADD CONSTRAINT FK_F_OPS_AC14_ACP24_IDX FOREIGN KEY (AC14) REFERENCES F_ACP24 (IDX);
ALTER TABLE F_OPS ADD CONSTRAINT FK_F_OPS_AC15_ACP25_IDX FOREIGN KEY (AC15) REFERENCES F_ACP25 (IDX);
ALTER TABLE F_OPS ADD CONSTRAINT FK_F_OPS_AC21_ACP21_AC FOREIGN KEY (AC21) REFERENCES F_ACP21 (AC);
ALTER TABLE F_OPS ADD CONSTRAINT FK_F_OPS_AC22_ACP21_AC FOREIGN KEY (AC22) REFERENCES F_ACP21 (AC);
ALTER TABLE F_OPS ADD CONSTRAINT FK_F_OPS_AC23_ACP23_IDX FOREIGN KEY (AC23) REFERENCES F_ACP23 (IDX);
ALTER TABLE F_OPS ADD CONSTRAINT FK_F_OPS_AC24_ACP24_IDX FOREIGN KEY (AC24) REFERENCES F_ACP24 (IDX);
ALTER TABLE F_OPS ADD CONSTRAINT FK_F_OPS_AC25_ACP25_IDX FOREIGN KEY (AC25) REFERENCES F_ACP25 (IDX);
ALTER TABLE F_OPS ADD CONSTRAINT FK_F_OPS_DOCID_OPSD_ID FOREIGN KEY (DOCID) REFERENCES F_OPSD (ID) ON DELETE CASCADE;
ALTER TABLE F_OPSD ADD CONSTRAINT FK_F_OPSD_CLID2_PERSONS_CLID FOREIGN KEY (CLID2) REFERENCES F_PERSONS (CLID);
ALTER TABLE F_OPSD ADD CONSTRAINT FK_F_OPSD_CLID_PERSONS_CLID FOREIGN KEY (CLID) REFERENCES F_PERSONS (CLID);
ALTER TABLE F_OPSD ADD CONSTRAINT FK_F_OPSD_DOCTYP_DOCTYP_ID FOREIGN KEY (DOCTYP) REFERENCES F_DOCTYP (ID);
ALTER TABLE M_ACCOUNTS ADD CONSTRAINT FK_M_ACCOUNTS_TP FOREIGN KEY (TP) REFERENCES M_ACCOUNTTYPE (ID);
ALTER TABLE M_ADDRESSSES ADD CONSTRAINT FK_M_ADDRESSSES_IDCOUNTRY FOREIGN KEY (IDCOUNTRY) REFERENCES M_COUNTRIES (ID);
ALTER TABLE M_ADDRESSSES ADD CONSTRAINT FK_M_ADDRESSSES_IDSTORE FOREIGN KEY (IDSTORE) REFERENCES M_STORES (ID);
ALTER TABLE M_BANKACCOUNTS ADD CONSTRAINT FK_M_BANKACCOUNTS_IDBANK FOREIGN KEY (IDBANK) REFERENCES M_BANKS (ID);
ALTER TABLE M_BANKACCOUNTS ADD CONSTRAINT FK_M_BANKACCOUNTS_IDSTORE FOREIGN KEY (IDSTORE) REFERENCES M_STORES (ID);
ALTER TABLE M_CONTACTS ADD CONSTRAINT FK_M_CONTACTS_IDSTORE FOREIGN KEY (IDSTORE) REFERENCES M_STORES (ID);
ALTER TABLE M_DISC_LISTS_P ADD CONSTRAINT FK_M_DISC_LISTS_P_IDL FOREIGN KEY (IDL) REFERENCES M_DISC_LISTS (ID);
ALTER TABLE M_DISC_LISTS_P ADD CONSTRAINT FK_M_DISC_LISTS_P_IDSTORE FOREIGN KEY (IDSTORE) REFERENCES M_STORES (ID);
ALTER TABLE M_DISC_LISTS_P ADD CONSTRAINT FK_M_DISC_LISTS_P_IDSTORESCAT FOREIGN KEY (IDSTORESCAT) REFERENCES M_STORES_CAT (ID);
ALTER TABLE M_DISC_LISTS_R ADD CONSTRAINT FK_M_DISC_LISTS_R_IDITEM FOREIGN KEY (IDITEM) REFERENCES M_ITEMS (ID);
ALTER TABLE M_DISC_LISTS_R ADD CONSTRAINT FK_M_DISC_LISTS_R_IDITEMSCAT FOREIGN KEY (IDITEMSCAT) REFERENCES M_ITEMS_CAT (ID);
ALTER TABLE M_DISC_LISTS_R ADD CONSTRAINT FK_M_DISC_LISTS_R_IDL FOREIGN KEY (IDL) REFERENCES M_DISC_LISTS (ID);
ALTER TABLE M_DOCS ADD CONSTRAINT FK_M_DOCS_IDADDRESSIN FOREIGN KEY (IDADDRESSIN) REFERENCES M_ADDRESSSES (ID);
ALTER TABLE M_DOCS ADD CONSTRAINT FK_M_DOCS_IDADDRESSOUT FOREIGN KEY (IDADDRESSOUT) REFERENCES M_ADDRESSSES (ID);
ALTER TABLE M_DOCS ADD CONSTRAINT FK_M_DOCS_IDCARRIER FOREIGN KEY (IDCARRIER) REFERENCES M_STORES (ID);
ALTER TABLE M_DOCS ADD CONSTRAINT FK_M_DOCS_IDDRIVER FOREIGN KEY (IDDRIVER) REFERENCES M_CONTACTS (ID);
ALTER TABLE M_DOCS ADD CONSTRAINT FK_M_DOCS_IDPAYMENTTYPE FOREIGN KEY (IDPAYMENTTYPE) REFERENCES M_PAYMENTTYPE (ID);
ALTER TABLE M_DOCS ADD CONSTRAINT FK_M_DOCS_IDSTOREIN FOREIGN KEY (IDSTOREIN) REFERENCES M_STORES (ID);
ALTER TABLE M_DOCS ADD CONSTRAINT FK_M_DOCS_IDSTOREOUT FOREIGN KEY (IDSTOREOUT) REFERENCES M_STORES (ID);
ALTER TABLE M_DOCS ADD CONSTRAINT FK_M_DOCS_IDTRANSACTIONTYPE FOREIGN KEY (IDTRANSACTIONTYPE) REFERENCES M_TRANSACTIONTYPE (ID);
ALTER TABLE M_DOCS ADD CONSTRAINT FK_M_DOCS_IDVEHICLE FOREIGN KEY (IDVEHICLE) REFERENCES M_VEHICLES (ID);
ALTER TABLE M_DOCS ADD CONSTRAINT FK_M_DOCS_TP FOREIGN KEY (TP) REFERENCES M_DOCTYPES (ID);
ALTER TABLE M_INV_DOCS ADD CONSTRAINT FK_M_INV_DOCS_IDSTORE FOREIGN KEY (IDSTORE) REFERENCES M_STORES (ID);
ALTER TABLE M_INV_ROWS ADD CONSTRAINT FK_M_INV_ROWS_IDDOC FOREIGN KEY (IDDOC) REFERENCES M_INV_DOCS (ID);
ALTER TABLE M_INV_ROWS ADD CONSTRAINT FK_M_INV_ROWS_IDITEM FOREIGN KEY (IDITEM) REFERENCES M_ITEMS (ID);
ALTER TABLE M_INV_ROWS ADD CONSTRAINT FK_M_INV_ROWS_IDUNITS FOREIGN KEY (IDUNITS) REFERENCES M_UNITS (ID);
ALTER TABLE M_ITEMS ADD CONSTRAINT FK_M_ITEMS_CAT FOREIGN KEY (CAT) REFERENCES M_ITEMS_CAT (ID);
ALTER TABLE M_ITEMS ADD CONSTRAINT FK_M_ITEMS_PVNRATE FOREIGN KEY (PVNRATE) REFERENCES M_PVNRATES (ID);
ALTER TABLE M_ITEMS ADD CONSTRAINT FK_M_ITEMS_STORE1 FOREIGN KEY (STORE1) REFERENCES M_STORES (ID);
ALTER TABLE M_ITEMS ADD CONSTRAINT FK_M_ITEMS_UNITS FOREIGN KEY (UNITS) REFERENCES M_UNITS (ID);
ALTER TABLE M_ITEMS_PER_STORE ADD CONSTRAINT FK_M_ITEMS_PER_STORE_IDITEM FOREIGN KEY (IDITEM) REFERENCES M_ITEMS (ID);
ALTER TABLE M_ITEMS_PER_STORE ADD CONSTRAINT FK_M_ITEMS_PER_STORE_IDSTORE FOREIGN KEY (IDSTORE) REFERENCES M_STORES (ID);
ALTER TABLE M_LINKS ADD CONSTRAINT FK_M_LINKS_ID1 FOREIGN KEY (ID1) REFERENCES M_ROWS (ID);
ALTER TABLE M_LINKS ADD CONSTRAINT FK_M_LINKS_ID2 FOREIGN KEY (ID2) REFERENCES M_ROWS (ID);
ALTER TABLE M_PRICE_LISTS_P ADD CONSTRAINT FK_M_PRICE_LISTS_P_IDL FOREIGN KEY (IDL) REFERENCES M_PRICE_LISTS (ID);
ALTER TABLE M_PRICE_LISTS_P ADD CONSTRAINT FK_M_PRICE_LISTS_P_IDSTORE FOREIGN KEY (IDSTORE) REFERENCES M_STORES (ID);
ALTER TABLE M_PRICE_LISTS_P ADD CONSTRAINT FK_M_PRICE_LISTS_P_IDSTORESCAT FOREIGN KEY (IDSTORESCAT) REFERENCES M_STORES_CAT (ID);
ALTER TABLE M_PRICE_LISTS_R ADD CONSTRAINT FK_M_PRICE_LISTS_R_IDITEM FOREIGN KEY (IDITEM) REFERENCES M_ITEMS (ID);
ALTER TABLE M_PRICE_LISTS_R ADD CONSTRAINT FK_M_PRICE_LISTS_R_IDL FOREIGN KEY (IDL) REFERENCES M_PRICE_LISTS (ID);
ALTER TABLE M_PVNRATES2 ADD CONSTRAINT FK_M_PVNRATES2_IDRATE FOREIGN KEY (IDRATE) REFERENCES M_PVNRATES (ID);
ALTER TABLE M_PVNRATES2 ADD CONSTRAINT FK_M_PVNRATES2_IDTP FOREIGN KEY (IDTP) REFERENCES M_PVNTYPE (ID);
ALTER TABLE M_ROWS ADD CONSTRAINT FK_M_ROWS_IDDOC FOREIGN KEY (IDDOC) REFERENCES M_DOCS (ID);
ALTER TABLE M_ROWS ADD CONSTRAINT FK_M_ROWS_IDITEM FOREIGN KEY (IDITEM) REFERENCES M_ITEMS (ID);
ALTER TABLE M_ROWS ADD CONSTRAINT FK_M_ROWS_IDPVNRATE FOREIGN KEY (IDPVNRATE) REFERENCES M_PVNRATES (ID);
ALTER TABLE M_ROWS ADD CONSTRAINT FK_M_ROWS_UNITS FOREIGN KEY (UNITS) REFERENCES M_UNITS (ID);
ALTER TABLE M_STORES ADD CONSTRAINT FK_M_STORES_IDCAT FOREIGN KEY (IDCAT) REFERENCES M_STORES_CAT (ID);
ALTER TABLE M_STORES ADD CONSTRAINT FK_M_STORES_PVNTP FOREIGN KEY (PVNTP) REFERENCES M_PVNTYPE (ID);
ALTER TABLE M_STORES ADD CONSTRAINT FK_M_STORES_TP FOREIGN KEY (TP) REFERENCES M_STORETYPE (ID);
ALTER TABLE M_VEHICLES ADD CONSTRAINT FK_M_VEHICLES_IDSTORE FOREIGN KEY (IDSTORE) REFERENCES M_STORES (ID);
ALTER TABLE PARAMS ADD CONSTRAINT FK_PARAMS_USR_USERS_NM FOREIGN KEY (USR) REFERENCES USERS (NM) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE P_CAT1 ADD CONSTRAINT FK_P_CAT1_IDCD FOREIGN KEY (IDCD) REFERENCES P_CATD (ID);
ALTER TABLE P_CAT1 ADD CONSTRAINT FK_P_CAT1_IDCT FOREIGN KEY (IDCT) REFERENCES P_CATT (ID);
ALTER TABLE P_ITEMS ADD CONSTRAINT FK_P_ITEMS_CAT1 FOREIGN KEY (CAT1) REFERENCES P_CAT1 (ID);
ALTER TABLE P_ITEMS ADD CONSTRAINT FK_P_ITEMS_CATD FOREIGN KEY (CATD) REFERENCES P_CATD (ID);
ALTER TABLE P_ITEMS ADD CONSTRAINT FK_P_ITEMS_CATT FOREIGN KEY (CATT) REFERENCES P_CATT (ID);
ALTER TABLE P_ITEMS ADD CONSTRAINT FK_P_ITEMS_DEPARTMENT FOREIGN KEY (DEPARTMENT) REFERENCES P_DEPARTMENTS (ID);
ALTER TABLE P_ITEMS ADD CONSTRAINT FK_P_ITEMS_PLACE FOREIGN KEY (PLACE) REFERENCES P_PLACES (ID);
ALTER TABLE P_ITEMS_EVENTS ADD CONSTRAINT FK_P_ITEMS_EVENTS_CAT1 FOREIGN KEY (CAT1) REFERENCES P_CAT1 (ID);
ALTER TABLE P_ITEMS_EVENTS ADD CONSTRAINT FK_P_ITEMS_EVENTS_CATD FOREIGN KEY (CATD) REFERENCES P_CATD (ID);
ALTER TABLE P_ITEMS_EVENTS ADD CONSTRAINT FK_P_ITEMS_EVENTS_CATT FOREIGN KEY (CATT) REFERENCES P_CATT (ID);
ALTER TABLE P_ITEMS_EVENTS ADD CONSTRAINT FK_P_ITEMS_EVENTS_DEPARTMENT FOREIGN KEY (DEPARTMENT) REFERENCES P_DEPARTMENTS (ID);
ALTER TABLE P_ITEMS_EVENTS ADD CONSTRAINT FK_P_ITEMS_EVENTS_EVENT FOREIGN KEY ("EVENT") REFERENCES P_EVENTS (ID);
ALTER TABLE P_ITEMS_EVENTS ADD CONSTRAINT FK_P_ITEMS_EVENTS_IDIT FOREIGN KEY (IDIT) REFERENCES P_ITEMS (ID);
ALTER TABLE P_ITEMS_EVENTS ADD CONSTRAINT FK_P_ITEMS_EVENTS_PLACE FOREIGN KEY (PLACE) REFERENCES P_PLACES (ID);
ALTER TABLE P_TAXDEPRECYEAR ADD CONSTRAINT FK_P_TAXDEPRECYEAR_CATT FOREIGN KEY (CATT) REFERENCES P_CATT (ID);


/******************************************************************************/
/***                                Indices                                 ***/
/******************************************************************************/

CREATE INDEX A_EVENTS_IDA ON A_EVENTS (IDA);
CREATE INDEX A_EVENTS_IDN ON A_EVENTS (IDN);
CREATE INDEX A_EVENTS_IDN2 ON A_EVENTS (IDN2);
CREATE INDEX A_EVENTS_IDP ON A_EVENTS (IDP);
CREATE UNIQUE INDEX A_EVENT_TYPES2_TAG ON A_EVENT_TYPES2 (TAG);
CREATE INDEX A_FP_PAYLISTS_MT ON A_FP_PAYLISTS (MT);
CREATE INDEX A_FP_PAYLISTS_YR ON A_FP_PAYLISTS (YR);
CREATE INDEX A_PAYLISTS_R_IDAM ON A_PAYLISTS_R (IDAM);
CREATE INDEX A_PAYLISTS_R_IDP ON A_PAYLISTS_R (IDP);
CREATE INDEX A_PAYLISTS_R_IDS ON A_PAYLISTS_R (IDS);
CREATE INDEX A_PAYLIST_TEMPL_R_IDAM ON A_PAYLIST_TEMPL_R (IDAM);
CREATE INDEX A_PAYLIST_TEMPL_R_IDP ON A_PAYLIST_TEMPL_R (IDP);
CREATE INDEX A_PAYLIST_TEMPL_R_IDS ON A_PAYLIST_TEMPL_R (IDS);
CREATE INDEX A_PERSONS_R_IDP ON A_PERSONS_R (IDP);
CREATE INDEX A_PIECEWORK_IDA ON A_PIECEWORK (IDA);
CREATE INDEX A_PIECEWORK_IDK ON A_PIECEWORK (IDK);
CREATE INDEX A_PIECEWORK_IDP ON A_PIECEWORK (IDP);
CREATE INDEX A_PIECEWORK_CATALOG_IDS ON A_PIECEWORK_CATALOG (IDS);
CREATE INDEX A_POSITIONS_IDP ON A_POSITIONS (IDP);
CREATE INDEX A_POSITIONS_PLUSMINUS_IDA ON A_POSITIONS_PLUSMINUS (IDA);
CREATE INDEX A_POSITIONS_PLUSMINUS_IDNO ON A_POSITIONS_PLUSMINUS (IDNO);
CREATE INDEX A_POSITIONS_PLUSMINUS_IDSV ON A_POSITIONS_PLUSMINUS (IDSV);
CREATE INDEX A_POSITIONS_R_IDA ON A_POSITIONS_R (IDA);
CREATE UNIQUE INDEX A_RATES_ONDATE ON A_RATES (ONDATE);
CREATE INDEX A_SALARY_PLUSMINUS_IDA ON A_SALARY_PLUSMINUS (IDA);
CREATE INDEX A_SALARY_PLUSMINUS_IDAP ON A_SALARY_PLUSMINUS (IDP);
CREATE INDEX A_SALARY_PLUSMINUS_IDNO ON A_SALARY_PLUSMINUS (IDNO);
CREATE INDEX A_SALARY_PLUSMINUS_IDSV ON A_SALARY_PLUSMINUS (IDSV);
CREATE INDEX A_SALARY_PLUSMINUS_IDSX ON A_SALARY_PLUSMINUS (IDSX);
CREATE INDEX A_SALARY_SHEETS_R_IDAM ON A_SALARY_SHEETS_R (IDAM);
CREATE INDEX A_SALARY_SHEETS_R_IDP ON A_SALARY_SHEETS_R (IDP);
CREATE INDEX A_SALARY_SHEETS_R_IDS ON A_SALARY_SHEETS_R (IDS);
CREATE INDEX A_SALARY_SHEETS_R_IDST ON A_SALARY_SHEETS_R (IDST);
CREATE INDEX A_SALARY_SHEETS_R_IDSX ON A_SALARY_SHEETS_R (IDSX);
CREATE INDEX A_SALARY_SHEET_TEMPL_R_IDAM ON A_SALARY_SHEET_TEMPL_R (IDAM);
CREATE INDEX A_SALARY_SHEET_TEMPL_R_IDP ON A_SALARY_SHEET_TEMPL_R (IDP);
CREATE INDEX A_SALARY_SHEET_TEMPL_R_IDS ON A_SALARY_SHEET_TEMPL_R (IDS);
CREATE INDEX A_TIMESHEET_AMID ON A_TIMESHEET (AMID);
CREATE INDEX A_TIMESHEET_IDL ON A_TIMESHEET (IDL);
CREATE INDEX A_TIMESHEET_IDP ON A_TIMESHEET (IDP);
CREATE INDEX A_TIMESHEET_PERID ON A_TIMESHEET (PERID);
CREATE INDEX A_TIMESHEET_LISTS_R_IDS ON A_TIMESHEET_LISTS_R (IDS);
CREATE INDEX A_TIMESHEET_TEMPL_R_IDS ON A_TIMESHEET_TEMPL_R (IDS);
CREATE INDEX A_UNTAXED_MIN_IDP ON A_UNTAXED_MIN (IDP);
CREATE UNIQUE INDEX A_UNTAXED_MIN_IDP_ONDATE ON A_UNTAXED_MIN (IDP, ONDATE);
CREATE INDEX F_ACP1_ACPID ON F_ACP1 (ACPID);
CREATE UNIQUE INDEX F_ACP21_AC ON F_ACP21 (AC);
CREATE INDEX F_ACP21_ID1 ON F_ACP21 (ID1);
CREATE INDEX F_ACP21_ID2 ON F_ACP21 (ID2);
CREATE INDEX F_ACP211_ID1 ON F_ACP211 (ID1);
CREATE UNIQUE INDEX F_ACP211_IDX ON F_ACP211 (IDX);
CREATE UNIQUE INDEX F_ACP22_IDX ON F_ACP22 (IDX);
CREATE INDEX F_ACP23_ID1 ON F_ACP23 (ID1);
CREATE UNIQUE INDEX F_ACP23_IDX ON F_ACP23 (IDX);
CREATE UNIQUE INDEX F_ACP24_IDX ON F_ACP24 (IDX);
CREATE INDEX F_ACP25_ID1 ON F_ACP25 (ID1);
CREATE UNIQUE INDEX F_ACP25_IDX ON F_ACP25 (IDX);
CREATE UNIQUE INDEX F_ACP25A_IDX ON F_ACP25A (IDX);
CREATE UNIQUE INDEX F_ACP6_IDX ON F_ACP6 (IDX);
CREATE INDEX F_ACPVN_ID ON F_ACPVN (ID);
CREATE INDEX F_BAL0_AC11 ON F_BAL0 (AC11);
CREATE INDEX F_BAL0_AC24 ON F_BAL0 (AC24);
CREATE INDEX F_BAL0_CLID ON F_BAL0 (CLID);
CREATE INDEX F_BALA1_ID ON F_BALA1 (BALID);
CREATE INDEX F_BALA2_BALID ON F_BALA2 (BALID);
CREATE INDEX F_BALA2_ID ON F_BALA2 (ID);
CREATE INDEX F_BALA21_BID ON F_BALA21 (BID);
CREATE INDEX F_BALA21_ID ON F_BALA21 (ID);
CREATE INDEX F_BALA3_ID ON F_BALA3 (ID);
CREATE INDEX F_BALA3_ID2 ON F_BALA3 (ID2);
CREATE INDEX F_FK_DOCS0_AC ON F_DOCS0 (AC);
CREATE INDEX F_DOCTYP_ID ON F_DOCTYP (ID);
CREATE INDEX F_DOCTYP_ID1 ON F_DOCTYP (ID1);
CREATE INDEX F_DOCTYPA_ID ON F_DOCTYPA (ID);
CREATE INDEX F_DOCTYPB_ID ON F_DOCTYPB (ID);
CREATE INDEX F_DOCTYPB_IDA ON F_DOCTYPB (IDA);
CREATE INDEX F_LOGX_ID ON F_LOGX (ID);
CREATE INDEX F_LOGX_LID ON F_LOGX (LID);
CREATE INDEX F_LOPS_DOCID ON F_LOPS (DOCID);
CREATE INDEX F_LOPS_DTL ON F_LOPS (DTL);
CREATE INDEX F_LOPS_DTLD ON F_LOPS (DTLD);
CREATE INDEX F_LOPS_ID ON F_LOPS (ID);
CREATE UNIQUE INDEX F_LOPS_IDL ON F_LOPS (IDL);
CREATE INDEX F_LOPSD_CLID ON F_LOPSD (CLID);
CREATE INDEX F_LOPSD_CLID2 ON F_LOPSD (CLID2);
CREATE INDEX F_LOPSD_DATE ON F_LOPSD (DETE);
CREATE INDEX F_LOPSD_ID ON F_LOPSD (ID);
CREATE UNIQUE INDEX F_LOPSD_IDL ON F_LOPSD (IDL);
CREATE INDEX F_LOPSD_ZDT ON F_LOPSD (ZDT);
CREATE INDEX F_LOPSD_ZNR ON F_LOPSD (ZNR);
CREATE INDEX F_LXOP_AD ON F_LXOP (AD);
CREATE INDEX F_LXOP_AR ON F_LXOP (AR);
CREATE INDEX F_LXOP_ID ON F_LXOP (ID);
CREATE INDEX F_OPS_AC11 ON F_OPS (AC11);
CREATE INDEX F_OPS_AC12 ON F_OPS (AC12);
CREATE INDEX F_OPS_AC13 ON F_OPS (AC13);
CREATE INDEX F_OPS_AC14 ON F_OPS (AC14);
CREATE INDEX F_OPS_AC15 ON F_OPS (AC15);
CREATE INDEX F_OPS_AC21 ON F_OPS (AC21);
CREATE INDEX F_OPS_AC22 ON F_OPS (AC22);
CREATE INDEX F_OPS_AC23 ON F_OPS (AC23);
CREATE INDEX F_OPS_AC24 ON F_OPS (AC24);
CREATE INDEX F_OPS_AC25 ON F_OPS (AC25);
CREATE INDEX F_OPS_DOCID ON F_OPS (DOCID);
CREATE INDEX F_DOCS0_CLID ON F_OPSD (CLID);
CREATE INDEX F_DOCS0_DOCTYP ON F_OPSD (DOCTYP);
CREATE INDEX F_OPSD_CLID ON F_OPSD (CLID);
CREATE INDEX F_OPSD_CLID1 ON F_OPSD (CLID2);
CREATE INDEX F_OPSD_DOCTYP ON F_OPSD (DOCTYP);
CREATE INDEX F_OPSD_ZNR ON F_OPSD (ZNR);
CREATE INDEX F_PERSONS_CLID ON F_PERSONS (CLID);
CREATE INDEX F_PERSONTYP_ID ON F_PERSONTYP (ID);
CREATE INDEX F_PERSONTYP_IDX ON F_PERSONTYP (IDX);
CREATE INDEX F_ROPS1A_CLID ON F_ROPS1A (CLID);
CREATE INDEX F_ROPS1A_CLID1 ON F_ROPS1A (CLID2);
CREATE INDEX F_ROPS1A_DID ON F_ROPS1A (DID);
CREATE INDEX F_ROPS1A_SPID ON F_ROPS1A (SPID);
CREATE INDEX F_ROPS2A_AC ON F_ROPS2A (AC);
CREATE INDEX F_ROPS2A_ID ON F_ROPS2A (ID);
CREATE INDEX F_ROPS2A_SPID ON F_ROPS2A (SPID);
CREATE INDEX F_ROPS2B_AC ON F_ROPS2B (AC);
CREATE INDEX F_ROPS2B_ID ON F_ROPS2B (ID);
CREATE INDEX F_ROPS2B_SPID ON F_ROPS2B (SPID);
CREATE INDEX F_ROPS3A_ID ON F_ROPS3A (ID);
CREATE INDEX F_TREM_ID ON F_TREM (ID);
CREATE INDEX F_TREM_IDA ON F_TREM (AID);
CREATE INDEX F_TREPA1_ID ON F_TREPA1 (ID);
CREATE INDEX F_TREPA1_SPID ON F_TREPA1 (SPID);
CREATE INDEX F_TREPAPAN_ID ON F_TREPAPAN (ID);
CREATE INDEX F_TREPAPAN_SPID ON F_TREPAPAN (SPID);
CREATE INDEX F_TREPDARZ1_AC1 ON F_TREPDARZ1 (AC1);
CREATE INDEX F_TREPDARZ1_AC2 ON F_TREPDARZ1 (AC2);
CREATE INDEX F_TREPDARZ1_CLID ON F_TREPDARZ1 (CLID);
CREATE INDEX F_TREPDARZ1_DID ON F_TREPDARZ1 (DID);
CREATE INDEX F_TREPDARZ1_ID ON F_TREPDARZ1 (ID);
CREATE INDEX F_TREPDARZ1_RID ON F_TREPDARZ1 (RID);
CREATE INDEX F_TREPDARZ1_SPID ON F_TREPDARZ1 (SPID);
CREATE INDEX F_TREPDARZ2_ID ON F_TREPDARZ2 (ID);
CREATE INDEX F_TREPDARZ2_SPID ON F_TREPDARZ2 (SPID);
CREATE INDEX F_TREPDOCS1_ID ON F_TREPDOCS1 (ID);
CREATE INDEX F_TREPDOCS1_SPID ON F_TREPDOCS1 (SPID);
CREATE INDEX F_TREPDOCS2_ID ON F_TREPDOCS2 (ID);
CREATE INDEX F_TREPDOCS2_SPID ON F_TREPDOCS2 (SPID);
CREATE INDEX F_TREPDOCSS_DID ON F_TREPDOCSS (DID);
CREATE INDEX F_TREPDOCSS_ID ON F_TREPDOCSS (ID);
CREATE INDEX F_TREPDOCSS_SPID ON F_TREPDOCSS (SPID);
CREATE INDEX F_TREPMT_ID ON F_TREPMT (ID);
CREATE INDEX F_TREPMT_SPID ON F_TREPMT (SPID);
CREATE INDEX F_TREPPVNZ1_CLID ON F_TREPPVNZ1 (CLID);
CREATE INDEX F_TREPPVNZ1_DID ON F_TREPPVNZ1 (DID);
CREATE INDEX F_TREPPVNZ1_ID ON F_TREPPVNZ1 (ID);
CREATE INDEX F_TREPPVNZ1_SPID ON F_TREPPVNZ1 (SPID);
CREATE INDEX F_TREPUDOCS_ID ON F_TREPUDOCS (ID);
CREATE INDEX F_TREPUDOCS_SPID ON F_TREPUDOCS (SPID);
CREATE INDEX F_TTEMP_PVN1_IDX_DID ON F_TTEMP_PVN1 (DID);
CREATE INDEX F_TUDOCLISTS_ID ON F_TUDOCLISTS (ID);
CREATE INDEX F_TUDOCLISTSTUDOCS ON F_TUDOCS (LD);
CREATE INDEX F_TUDOCS_ID ON F_TUDOCS (ID);
CREATE INDEX F_TUPDFIELDS_ID ON F_TUPDFIELDS (ID);
CREATE INDEX F_TUPVN1_DID ON F_TUPVN1 (DID);
CREATE INDEX F_TUPVN1_ID ON F_TUPVN1 (ID);
CREATE INDEX M_DOCS_DT ON M_DOCS (DT);
CREATE INDEX M_DOCS_IDSEQ ON M_DOCS (IDSEQ);
CREATE INDEX M_DOCS_STATE ON M_DOCS (STATE);
CREATE INDEX IDX_M_DOCTYPES_OPTYPE ON M_DOCTYPES (OPTYPE);
CREATE INDEX M_ITEMS_ISSERVICE ON M_ITEMS (ISSERVICE);
CREATE INDEX M_LINKS_IDITEM ON M_LINKS (IDITEM);
CREATE INDEX IDX_M_ROWS_IDSEQ ON M_ROWS (IDSEQ);
CREATE INDEX M_ROWS_ISGONE ON M_ROWS (ISGONE);
CREATE UNIQUE INDEX M_STORES_CODE ON M_STORES (CODE);
CREATE INDEX PARAMS_ID ON PARAMS (ID);
CREATE INDEX PARAMS_PNAME ON PARAMS (PNAME);
CREATE INDEX USERSPARAMS ON PARAMS (USR);
CREATE UNIQUE INDEX P_CAT1_CODE ON P_CAT1 (CODE);
CREATE UNIQUE INDEX P_CATD_CODE ON P_CATD (CODE);
CREATE UNIQUE INDEX P_CATT_CODE ON P_CATT (CODE);
CREATE UNIQUE INDEX P_DEPARTMENTS_CODE ON P_DEPARTMENTS (CODE);
CREATE UNIQUE INDEX P_EVENTS_CODE ON P_EVENTS (CODE);
CREATE INDEX P_TAXDEPRECYEAR_CATT ON P_TAXDEPRECYEAR (CATT);
CREATE UNIQUE INDEX P_TAXDEPRECYEAR_CATT_YR ON P_TAXDEPRECYEAR (YR, CATT);
CREATE INDEX P_TAXDEPRECYEAR_YR ON P_TAXDEPRECYEAR (YR);


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/



SET TERM ^ ;



/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: A_BANKS_BI */
CREATE TRIGGER A_BANKS_BI FOR A_BANKS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_banks_id,1);
end
^

/* Trigger: A_EVENTS_BI */
CREATE TRIGGER A_EVENTS_BI FOR A_EVENTS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_events_id,1);
end
^

/* Trigger: A_EVENT_TYPES2_BI */
CREATE TRIGGER A_EVENT_TYPES2_BI FOR A_EVENT_TYPES2
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_event_types2_id,1);
end
^

/* Trigger: A_EVENT_TYPES_BI */
CREATE TRIGGER A_EVENT_TYPES_BI FOR A_EVENT_TYPES
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_event_types_id,1);
end
^

/* Trigger: A_FP_PAYLISTS_BI */
CREATE TRIGGER A_FP_PAYLISTS_BI FOR A_FP_PAYLISTS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_fp_paylists_id,1);
end
^

/* Trigger: A_FP_PAYLISTS_R_BI */
CREATE TRIGGER A_FP_PAYLISTS_R_BI FOR A_FP_PAYLISTS_R
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_fp_paylists_r_id,1);
end
^

/* Trigger: A_PASTDATA_2_BI */
CREATE TRIGGER A_PASTDATA_2_BI FOR A_PASTDATA_2
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_pastdata_2_id,1);
end
^

/* Trigger: A_PASTDATA_BI */
CREATE TRIGGER A_PASTDATA_BI FOR A_PASTDATA
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_pastdata_id,1);
end
^

/* Trigger: A_PAYLISTS_BI */
CREATE TRIGGER A_PAYLISTS_BI FOR A_PAYLISTS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0)) then
    new.id = gen_id(gen_a_paylists_id,1);
end
^

/* Trigger: A_PAYLISTS_R_BI */
CREATE TRIGGER A_PAYLISTS_R_BI FOR A_PAYLISTS_R
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_paylists_r_id,1);
end
^

/* Trigger: A_PAYLIST_TEMPL_BI */
CREATE TRIGGER A_PAYLIST_TEMPL_BI FOR A_PAYLIST_TEMPL
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_paylist_templ_id,1);
end
^

/* Trigger: A_PAYLIST_TEMPL_R_BI */
CREATE TRIGGER A_PAYLIST_TEMPL_R_BI FOR A_PAYLIST_TEMPL_R
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_paylist_templ_r_id,1);
end
^

/* Trigger: A_PERSONS_BI */
CREATE TRIGGER A_PERSONS_BI FOR A_PERSONS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_persons_id,1);
end
^

/* Trigger: A_PERSONS_FIZ_BI */
CREATE TRIGGER A_PERSONS_FIZ_BI FOR A_PERSONS_FIZ
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_PERSONS_FIZ_id,1);
end
^

/* Trigger: A_PERSONS_R_BI */
CREATE TRIGGER A_PERSONS_R_BI FOR A_PERSONS_R
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_persons_r_id,1);
end
^

/* Trigger: A_PIECEWORK_BI */
CREATE TRIGGER A_PIECEWORK_BI FOR A_PIECEWORK
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_piecework_id,1);
end
^

/* Trigger: A_PIECEWORK_CATALOG_BI */
CREATE TRIGGER A_PIECEWORK_CATALOG_BI FOR A_PIECEWORK_CATALOG
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_piecework_catalog_id,1);
end
^

/* Trigger: A_PIECEWORK_CATSTRUCT_BI */
CREATE TRIGGER A_PIECEWORK_CATSTRUCT_BI FOR A_PIECEWORK_CATSTRUCT
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_piecework_catstruct_id,1);
end
^

/* Trigger: A_PLUSMINUS_FROM_BI */
CREATE TRIGGER A_PLUSMINUS_FROM_BI FOR A_PLUSMINUS_FROM
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_plusminus_from_id,1);
end
^

/* Trigger: A_PLUSMINUS_TYPES_BI */
CREATE TRIGGER A_PLUSMINUS_TYPES_BI FOR A_PLUSMINUS_TYPES
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_plusminus_types_id,1);
end
^

/* Trigger: A_POSITIONS_BI */
CREATE TRIGGER A_POSITIONS_BI FOR A_POSITIONS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_positions_id,1);
end
^

/* Trigger: A_POSITIONS_PLUSMINUS_BI */
CREATE TRIGGER A_POSITIONS_PLUSMINUS_BI FOR A_POSITIONS_PLUSMINUS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_positions_plusminus_id,1);
end
^

/* Trigger: A_POSITIONS_R_BI */
CREATE TRIGGER A_POSITIONS_R_BI FOR A_POSITIONS_R
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_positions_r_id,1);
end
^

/* Trigger: A_RATES_BI */
CREATE TRIGGER A_RATES_BI FOR A_RATES
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null or (new.id < 0) ) then
    new.id = gen_id(gen_a_rates_id,1);
end
^

/* Trigger: A_REPORT_CODES_BI */
CREATE TRIGGER A_REPORT_CODES_BI FOR A_REPORT_CODES
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_report_codes_id,1);
end
^

/* Trigger: A_SALARY_PLUSMINUS_BI */
CREATE TRIGGER A_SALARY_PLUSMINUS_BI FOR A_SALARY_PLUSMINUS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_SALARY_PLUSMINUS_id,1);
end
^

/* Trigger: A_SALARY_SHEETS_BI */
CREATE TRIGGER A_SALARY_SHEETS_BI FOR A_SALARY_SHEETS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_salary_sheets_id,1);
end
^

/* Trigger: A_SALARY_SHEETS_R_BI */
CREATE TRIGGER A_SALARY_SHEETS_R_BI FOR A_SALARY_SHEETS_R
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_salary_sheets_r_id,1);
end
^

/* Trigger: A_SALARY_SHEETS_R_HIST_BI */
CREATE TRIGGER A_SALARY_SHEETS_R_HIST_BI FOR A_SALARY_SHEETS_R_HIST
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.idh is null) or (new.idh < 0))  then
    new.idh = gen_id(gen_a_salary_sheets_r_hist_id,1);
end
^

/* Trigger: A_SALARY_SHEET_TEMPL_BI0 */
CREATE TRIGGER A_SALARY_SHEET_TEMPL_BI0 FOR A_SALARY_SHEET_TEMPL
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_salary_sheet_templ_id, 1);
end
^

/* Trigger: A_SALARY_SHEET_TEMPL_R_BI0 */
CREATE TRIGGER A_SALARY_SHEET_TEMPL_R_BI0 FOR A_SALARY_SHEET_TEMPL_R
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_salary_sheet_templ_r_id,1);
end
^

/* Trigger: A_TIMEPLAN_LIST_BI0 */
CREATE TRIGGER A_TIMEPLAN_LIST_BI0 FOR A_TIMEPLAN_LIST
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (NEW.ID < 0)) then
    new.id = gen_id(gen_a_timeplan_list_id,1);
end
^

/* Trigger: A_TIMESHEET_BI */
CREATE TRIGGER A_TIMESHEET_BI FOR A_TIMESHEET
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_timesheet_id,1);
end
^

/* Trigger: A_TIMESHEET_LISTS_BI */
CREATE TRIGGER A_TIMESHEET_LISTS_BI FOR A_TIMESHEET_LISTS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_TIMESHEET_LISTS_id,1);
end
^

/* Trigger: A_TIMESHEET_LISTS_R_BI */
CREATE TRIGGER A_TIMESHEET_LISTS_R_BI FOR A_TIMESHEET_LISTS_R
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_TIMESHEET_LISTS_R_id,1);
end
^

/* Trigger: A_TIMESHEET_TEMPL_BI */
CREATE TRIGGER A_TIMESHEET_TEMPL_BI FOR A_TIMESHEET_TEMPL
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (NEW.ID < 0)) then
    new.id = gen_id(gen_a_TIMESHEET_TEMPL_ID,1);
end
^

/* Trigger: A_TIMESHEET_TEMPL_R_BI */
CREATE TRIGGER A_TIMESHEET_TEMPL_R_BI FOR A_TIMESHEET_TEMPL_R
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0)) then
    new.id = gen_id(gen_a_TIMESHEET_TEMPL_R_id,1);
end
^

/* Trigger: A_UNTAXED_MIN_BI */
CREATE TRIGGER A_UNTAXED_MIN_BI FOR A_UNTAXED_MIN
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_a_untaxed_min_id,1);
end
^

/* Trigger: M_ADDRESSSES_BI */
CREATE TRIGGER M_ADDRESSSES_BI FOR M_ADDRESSSES
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_addressses_id,1);
end
^

/* Trigger: M_BANKACCOUNTS_BI */
CREATE TRIGGER M_BANKACCOUNTS_BI FOR M_BANKACCOUNTS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_banks_id,1);
end
^

/* Trigger: M_BANKS_BI */
CREATE TRIGGER M_BANKS_BI FOR M_BANKS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_banks_id,1);
end
^

/* Trigger: M_CONTACTS_BI */
CREATE TRIGGER M_CONTACTS_BI FOR M_CONTACTS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_contacts_id,1);
end
^

/* Trigger: M_COUNTRIES_BI */
CREATE TRIGGER M_COUNTRIES_BI FOR M_COUNTRIES
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_countries_id,1);
end
^

/* Trigger: M_DISC_LISTS_BI */
CREATE TRIGGER M_DISC_LISTS_BI FOR M_DISC_LISTS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_disc_lists_id,1);
end
^

/* Trigger: M_DISC_LISTS_P_BI */
CREATE TRIGGER M_DISC_LISTS_P_BI FOR M_DISC_LISTS_P
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_disc_lists_p_id,1);
end
^

/* Trigger: M_DISC_LISTS_R_BI */
CREATE TRIGGER M_DISC_LISTS_R_BI FOR M_DISC_LISTS_R
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_disc_lists_r_id,1);
end
^

/* Trigger: M_DOCS_BI */
CREATE TRIGGER M_DOCS_BI FOR M_DOCS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_docs_id,1);
end
^

/* Trigger: M_DOCTYPES_BI */
CREATE TRIGGER M_DOCTYPES_BI FOR M_DOCTYPES
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_doctypes_id,1);
end
^

/* Trigger: M_INV_DOCS_BI */
CREATE TRIGGER M_INV_DOCS_BI FOR M_INV_DOCS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_inv_docs_id,1);
end
^

/* Trigger: M_INV_ROWS_BI */
CREATE TRIGGER M_INV_ROWS_BI FOR M_INV_ROWS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_inv_rows_id,1);
end
^

/* Trigger: M_ITEMS_BI */
CREATE TRIGGER M_ITEMS_BI FOR M_ITEMS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_items_id,1);
end
^

/* Trigger: M_ITEMS_CAT_BI */
CREATE TRIGGER M_ITEMS_CAT_BI FOR M_ITEMS_CAT
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_items_cat_id,1);
end
^

/* Trigger: M_PAYMENTTYPE_BI */
CREATE TRIGGER M_PAYMENTTYPE_BI FOR M_PAYMENTTYPE
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_paymenttype_id,1);
end
^

/* Trigger: M_PRICE_LISTS_BI */
CREATE TRIGGER M_PRICE_LISTS_BI FOR M_PRICE_LISTS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_price_lists_id,1);
end
^

/* Trigger: M_PRICE_LISTS_P_BI */
CREATE TRIGGER M_PRICE_LISTS_P_BI FOR M_PRICE_LISTS_P
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_price_lists_p_id,1);
end
^

/* Trigger: M_PRICE_LISTS_R_BI */
CREATE TRIGGER M_PRICE_LISTS_R_BI FOR M_PRICE_LISTS_R
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_price_lists_r_id,1);
end
^

/* Trigger: M_PVNRATES2_BI */
CREATE TRIGGER M_PVNRATES2_BI FOR M_PVNRATES2
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_pvnrates2_id,1);
end
^

/* Trigger: M_PVNRATES_BI */
CREATE TRIGGER M_PVNRATES_BI FOR M_PVNRATES
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_pvnrates_id,1);
end
^

/* Trigger: M_PVNTEXTS_BI */
CREATE TRIGGER M_PVNTEXTS_BI FOR M_PVNTEXTS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_pvntexts_id,1);
end
^

/* Trigger: M_ROWS_BI */
CREATE TRIGGER M_ROWS_BI FOR M_ROWS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_rows_id,1);
end
^

/* Trigger: M_STORES_BI */
CREATE TRIGGER M_STORES_BI FOR M_STORES
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_stores_id,1);
end
^

/* Trigger: M_STORES_CAT_BI */
CREATE TRIGGER M_STORES_CAT_BI FOR M_STORES_CAT
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_stores_cat_id,1);
end
^

/* Trigger: M_STORETYPE_BI */
CREATE TRIGGER M_STORETYPE_BI FOR M_STORETYPE
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_storetype_id,1);
end
^

/* Trigger: M_TRANSACTIONTYPE_BI */
CREATE TRIGGER M_TRANSACTIONTYPE_BI FOR M_TRANSACTIONTYPE
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_transactiontype_id,1);
end
^

/* Trigger: M_UNITS_BI */
CREATE TRIGGER M_UNITS_BI FOR M_UNITS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_units_id,1);
end
^

/* Trigger: M_VEHICLES_BI */
CREATE TRIGGER M_VEHICLES_BI FOR M_VEHICLES
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_vehicles_id,1);
end
^

/* Trigger: P_CAT1_BI */
CREATE TRIGGER P_CAT1_BI FOR P_CAT1
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_p_cat1_id,1);
end
^

/* Trigger: P_CATD_BI */
CREATE TRIGGER P_CATD_BI FOR P_CATD
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0)) then
    new.id = gen_id(gen_p_catd_id,1);
end
^

/* Trigger: P_CATT_BI */
CREATE TRIGGER P_CATT_BI FOR P_CATT
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_p_catt_id,1);
end
^

/* Trigger: P_DEPARTMENTS_BI */
CREATE TRIGGER P_DEPARTMENTS_BI FOR P_DEPARTMENTS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_p_DEPARTMENTS_id,1);
end
^

/* Trigger: P_EVENTS_BI */
CREATE TRIGGER P_EVENTS_BI FOR P_EVENTS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_p_events_id,1);
end
^

/* Trigger: P_ITEMS_BI */
CREATE TRIGGER P_ITEMS_BI FOR P_ITEMS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_p_items_id,1);
end
^

/* Trigger: P_ITEMS_EVENTS_BI */
CREATE TRIGGER P_ITEMS_EVENTS_BI FOR P_ITEMS_EVENTS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_p_items_events_id,1);
end
^

/* Trigger: P_PLACES_BI */
CREATE TRIGGER P_PLACES_BI FOR P_PLACES
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_p_places_id,1);
end
^

/* Trigger: P_TAXDEPRECYEAR_BI */
CREATE TRIGGER P_TAXDEPRECYEAR_BI FOR P_TAXDEPRECYEAR
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_p_taxdeprecyear_id,1);
end
^

/* Trigger: TRIG_F_BAL0_BI */
CREATE TRIGGER TRIG_F_BAL0_BI FOR F_BAL0
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_BAL0_ID",1);
    END
^

/* Trigger: TRIG_F_BALA21_BI */
CREATE TRIGGER TRIG_F_BALA21_BI FOR F_BALA21
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_BALA21_ID",1);
    END
^

/* Trigger: TRIG_F_BALA2_BI */
CREATE TRIGGER TRIG_F_BALA2_BI FOR F_BALA2
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_BALA2_ID",1);
    END
^

/* Trigger: TRIG_F_BALA3_BI */
CREATE TRIGGER TRIG_F_BALA3_BI FOR F_BALA3
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_BALA3_ID",1);
    END
^

/* Trigger: TRIG_F_DOCS0_BI */
CREATE TRIGGER TRIG_F_DOCS0_BI FOR F_DOCS0
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_DOCS0_ID",1);
    END
^

/* Trigger: TRIG_F_LOGX_BI */
CREATE TRIGGER TRIG_F_LOGX_BI FOR F_LOGX
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_LOGX_ID",1);
    END
^

/* Trigger: TRIG_F_LOPSD_BI */
CREATE TRIGGER TRIG_F_LOPSD_BI FOR F_LOPSD
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."IDL" IS NULL) THEN NEW."IDL" = GEN_ID("GEN_F_LOPSD_IDL",1);
    END
^

/* Trigger: TRIG_F_LOPS_BI */
CREATE TRIGGER TRIG_F_LOPS_BI FOR F_LOPS
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."IDL" IS NULL) THEN NEW."IDL" = GEN_ID("GEN_F_LOPS_IDL",1);
    END
^

/* Trigger: TRIG_F_LXOP_BI */
CREATE TRIGGER TRIG_F_LXOP_BI FOR F_LXOP
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_LXOP_ID",1);
    END
^

/* Trigger: TRIG_F_OPSD_BI */
CREATE TRIGGER TRIG_F_OPSD_BI FOR F_OPSD
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_OPSD_ID",1);
    END
^

/* Trigger: TRIG_F_OPS_BI */
CREATE TRIGGER TRIG_F_OPS_BI FOR F_OPS
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_OPS_ID",1);
    END
^

/* Trigger: TRIG_F_PERSONTYP_BI */
CREATE TRIGGER TRIG_F_PERSONTYP_BI FOR F_PERSONTYP
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_PERSONTYP_ID",1);
    END
^

/* Trigger: TRIG_F_ROPS1A_BI */
CREATE TRIGGER TRIG_F_ROPS1A_BI FOR F_ROPS1A
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_ROPS1A_ID",1);
    END
^

/* Trigger: TRIG_F_ROPS2A_BI */
CREATE TRIGGER TRIG_F_ROPS2A_BI FOR F_ROPS2A
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_ROPS2A_ID",1);
    END
^

/* Trigger: TRIG_F_ROPS2B_BI */
CREATE TRIGGER TRIG_F_ROPS2B_BI FOR F_ROPS2B
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_ROPS2B_ID",1);
    END
^

/* Trigger: TRIG_F_ROPS3A_BI */
CREATE TRIGGER TRIG_F_ROPS3A_BI FOR F_ROPS3A
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_ROPS3A_ID",1);
    END
^

/* Trigger: TRIG_F_TABLE1_BI */
CREATE TRIGGER TRIG_F_TABLE1_BI FOR F_TABLE1
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_TABLE1_ID",1);
    END
^

/* Trigger: TRIG_F_TREM_BI */
CREATE TRIGGER TRIG_F_TREM_BI FOR F_TREM
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_TREM_ID",1);
    END
^

/* Trigger: TRIG_F_TREPA1_BI */
CREATE TRIGGER TRIG_F_TREPA1_BI FOR F_TREPA1
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_TREPA1_ID",1);
    END
^

/* Trigger: TRIG_F_TREPAPAN_BI */
CREATE TRIGGER TRIG_F_TREPAPAN_BI FOR F_TREPAPAN
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_TREPAPAN_ID",1);
    END
^

/* Trigger: TRIG_F_TREPDARZ1_BI */
CREATE TRIGGER TRIG_F_TREPDARZ1_BI FOR F_TREPDARZ1
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_TREPDARZ1_ID",1);
    END
^

/* Trigger: TRIG_F_TREPDARZ2_BI */
CREATE TRIGGER TRIG_F_TREPDARZ2_BI FOR F_TREPDARZ2
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_TREPDARZ2_ID",1);
    END
^

/* Trigger: TRIG_F_TREPDOCS1_BI */
CREATE TRIGGER TRIG_F_TREPDOCS1_BI FOR F_TREPDOCS1
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_TREPDOCS1_ID",1);
    END
^

/* Trigger: TRIG_F_TREPDOCS2_BI */
CREATE TRIGGER TRIG_F_TREPDOCS2_BI FOR F_TREPDOCS2
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_TREPDOCS2_ID",1);
    END
^

/* Trigger: TRIG_F_TREPDOCSS_BI */
CREATE TRIGGER TRIG_F_TREPDOCSS_BI FOR F_TREPDOCSS
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_TREPDOCSS_ID",1);
    END
^

/* Trigger: TRIG_F_TREPMT_BI */
CREATE TRIGGER TRIG_F_TREPMT_BI FOR F_TREPMT
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_TREPMT_ID",1);
    END
^

/* Trigger: TRIG_F_TREPPVNZ1_BI */
CREATE TRIGGER TRIG_F_TREPPVNZ1_BI FOR F_TREPPVNZ1
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_TREPPVNZ1_ID",1);
    END
^

/* Trigger: TRIG_F_TREPUDOCS_BI */
CREATE TRIGGER TRIG_F_TREPUDOCS_BI FOR F_TREPUDOCS
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_TREPUDOCS_ID",1);
    END
^

/* Trigger: TRIG_F_TUDOCLISTS_BI */
CREATE TRIGGER TRIG_F_TUDOCLISTS_BI FOR F_TUDOCLISTS
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_TUDOCLISTS_ID",1);
    END
^

/* Trigger: TRIG_F_TUDOCS_BI */
CREATE TRIGGER TRIG_F_TUDOCS_BI FOR F_TUDOCS
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_TUDOCS_ID",1);
    END
^

/* Trigger: TRIG_F_TUPVN1_BI */
CREATE TRIGGER TRIG_F_TUPVN1_BI FOR F_TUPVN1
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_TUPVN1_ID",1);
    END
^

/* Trigger: TRIG_PARAMS_BI */
CREATE TRIGGER TRIG_PARAMS_BI FOR PARAMS
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_PARAMS_ID",1);
    END
^

/* Trigger: TTEMP_BALA21_BI0 */
CREATE TRIGGER TTEMP_BALA21_BI0 FOR F_TTEMP_BALA21
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_TTEMP_BALA21_ID",1);
END
^

/* Trigger: TTEMP_BALAC_BI0 */
CREATE TRIGGER TTEMP_BALAC_BI0 FOR F_TTEMP_BALAC
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_F_TTEMP_BALAC_ID",1);
END
^

/* Trigger: TTEMP_BALMT1_BI */
CREATE TRIGGER TTEMP_BALMT1_BI FOR F_TTEMP_BALMT1
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_f_ttemp_balmt1_id,1);
end
^

/* Trigger: TTEMP_BALMT2_BI */
CREATE TRIGGER TTEMP_BALMT2_BI FOR F_TTEMP_BALMT2
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_f_ttemp_balmt1_id,1);
end
^

/* Trigger: TTEMP_PVN1_BI */
CREATE TRIGGER TTEMP_PVN1_BI FOR F_TTEMP_PVN1
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_f_ttemp_pvn1_id,1);
end
^
SET TERM ; ^



/******************************************************************************/
/***                           Stored procedures                            ***/
/******************************************************************************/



SET TERM ^ ;

ALTER PROCEDURE SP_A_A (
    PDT1 DATE,
    PDT2 DATE)
RETURNS (
    IDA INTEGER,
    IDR INTEGER)
AS
begin

    insert into a_temp_rep_inkp
    select ida as idp, hdate, fdate
    from
    (
        select
            HT.ida as ida,
            HT.dt as hdate,
            iif(FT.dt is null or HT.dt is null or FT.dt < HT.dt, null, FT.dt) as fdate
        from
        (
            (
                select distinct a_events.ida as ida, max(a_events.date1) as dt
                from a_events
                where a_events.idn = 3 and a_events.date1 <= :pdt2
                group by ida
            ) as HT
            left join
            (
                select distinct a_events.ida as ida, max(a_events.date1) as dt
                from a_events
                where a_events.idn = 4 and a_events.date1 <= :pdt2
                group by ida
            ) as FT
            on HT.ida = FT.ida
        )
    )
    where hdate is not null and (fdate is null or fdate >= :pdt1);


    for select distinct a_temp_rep_inkp.idp as ida, a_timesheet_lists_r.id as idr
    from a_temp_rep_inkp
    left join
    (
        a_timesheet_lists_r
        join a_timesheet_lists
            on a_timesheet_lists.id = a_timesheet_lists_r.ids and
                a_timesheet_lists.yr = extract(year from :pdt1) and
                a_timesheet_lists.mt = extract(month from :pdt1)
    )
        on a_temp_rep_inkp.idp = a_timesheet_lists_r.idam
    --where a_timesheet_lists_r.id is null

    into :ida, :idr
    do
        suspend;
end^


ALTER PROCEDURE SP_A_AVPAYCALC_01 (
    PIDP INTEGER,
    PYR1 INTEGER,
    PMT1 INTEGER,
    PYR2 INTEGER,
    PMT2 INTEGER)
RETURNS (
    ID TYPE OF COLUMN A_SALARY_SHEETS_R.ID,
    TYPE_TAG TYPE OF COLUMN A_SALARY_SHEETS_R.TYPE_TAG,
    IDP TYPE OF COLUMN A_SALARY_SHEETS_R.IDP,
    IDAM TYPE OF COLUMN A_SALARY_SHEETS_R.IDAM,
    YR TYPE OF COLUMN A_SALARY_SHEETS.YR,
    MT TYPE OF COLUMN A_SALARY_SHEETS.MT,
    CALENDAR_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R.CALENDAR_DAYS_USE,
    MONTH_WORKDAYS TYPE OF COLUMN A_SALARY_SHEETS_R.MONTH_WORKDAYS,
    MONTH_WORKHOURS TYPE OF COLUMN A_SALARY_SHEETS_R.MONTH_WORKHOURS,
    PLAN_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_DAYS,
    PLAN_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_HOURS,
    PLAN_WORKDAYS TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_WORK_DAYS,
    PLAN_WORKHOURS TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_WORK_HOURS,
    TOTAL_BEFORE_TAXES TYPE OF COLUMN A_SALARY_SHEETS_R.TOTAL_BEFORE_TAXES,
    FORAVPAYCALC_BRUTO TYPE OF COLUMN A_SALARY_SHEETS_R.FORAVPAYCALC_BRUTO,
    FORAVPAYCALC_PAYOUT TYPE OF COLUMN A_SALARY_SHEETS_R.FORAVPAYCALC_PAYOUT,
    FORAVPAYCALC_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R.FORAVPAYCALC_DAYS,
    FORAVPAYCALC_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R.FORAVPAYCALC_HOURS,
    AVPAYCALC_DAY TYPE OF COLUMN A_SALARY_SHEETS_R.AVPAYCALC_DAY,
    AVPAYCALC_HOUR TYPE OF COLUMN A_SALARY_SHEETS_R.AVPAYCALC_HOUR)
AS
declare km1 integer;
    declare km2 integer;
begin
    km1 = (:pyr1 - 1900) * 13 + :pmt1;
    km2 = (:pyr2 - 1900) * 13 + :pmt2;

    for select
        a_salary_sheets_r.id,
        a_salary_sheets_r.type_tag,
        a_salary_sheets_r.idp as ridp,
        a_salary_sheets_r.idam,
        a_salary_sheets.yr as ryr,
        a_salary_sheets.mt as rmt,
        a_salary_sheets_r.calendar_days_use,
        a_salary_sheets_r.month_workdays,
        a_salary_sheets_r.month_workhours,
        a_salary_sheets_r.plan_days,
        a_salary_sheets_r.plan_hours,
        a_salary_sheets_r.plan_work_days,
        a_salary_sheets_r.plan_work_hours,
        a_salary_sheets_r.total_before_taxes,
        a_salary_sheets_r.foravpaycalc_bruto,
        a_salary_sheets_r.foravpaycalc_payout,
        a_salary_sheets_r.foravpaycalc_days,
        a_salary_sheets_r.foravpaycalc_hours,
        a_salary_sheets_r.avpaycalc_day,
        a_salary_sheets_r.avpaycalc_hour

    from a_salary_sheets
    join a_salary_sheets_r on a_salary_sheets.id = a_salary_sheets_r.idst

    where
        (a_salary_sheets_r.idp = :pidp) AND
        (((a_salary_sheets.yr - 1900)*13 + a_salary_sheets.mt) between :km1 and :km2) AND
        (a_salary_sheets.is_temp = 0) AND
        (a_salary_sheets.kind = 1)


    union all

    select
        a_pastdata.id,
        0,
        a_pastdata.idp as ridp,
        -1,
        a_pastdata.yr as ryr,
        a_pastdata.mt as rmt,
        a_pastdata.caldays,
        a_pastdata.daysmt, 
        a_pastdata.hoursmt,
        a_pastdata.plandays,
        a_pastdata.planhours,
        a_pastdata.plandays,
        a_pastdata.planhours,
        a_pastdata.bruto2,
        a_pastdata.bruto,
        a_pastdata.pay,
        a_pastdata.days,
        a_pastdata.hours,
        0,
        0

    from a_pastdata
    where ((a_pastdata.idp = :PIDP) and
        (((a_pastdata.yr - 1900)*13 + a_pastdata.mt) between :km1 and :km2))

    into
        :id,
        :type_tag,
        :idp,
        :idam,
        :yr, 
        :mt,
        :calendar_days,
        :month_workdays,
        :month_workhours,
        :plan_days,
        :plan_hours,
        :plan_workdays,
        :plan_workhours,
        :total_before_taxes,
        :foravpaycalc_bruto,
        :foravpaycalc_payout,
        :foravpaycalc_days,
        :foravpaycalc_hours,
        :avpaycalc_day,
        :avpaycalc_hour
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_A_CLEAR
AS
begin
    delete from a_paylists_r;
    delete from a_paylists;
    delete from a_paylist_templ_r;
    delete from a_paylist_templ;

    delete from a_salary_plusminus;
    delete from a_salary_sheets_r;
    delete from a_salary_sheets;
    delete from a_salary_sheet_templ_r;
    delete from a_salary_sheet_templ;

    delete from a_timesheet;
    delete from a_timesheet_lists_r;
    delete from a_timesheet_lists;
    delete from a_timesheet_templ_r;
    delete from a_timesheet_templ;
    delete from a_timeplan_list;

    delete from a_piecework;
    delete from a_piecework_catalog;
    delete from a_piecework_catstruct;

    delete from a_pastdata;
    delete from a_pastdata_2;

    delete from a_events;

    delete from a_positions_r;
    delete from a_positions;
    delete from a_positions_plusminus;

    delete from a_persons_r;
    delete from a_persons;

    delete from a_fp_paylists_r;
    delete from a_fp_paylists;

    delete from a_persons_fiz;

    execute statement 'ALTER SEQUENCE GEN_A_BANKS_ID RESTART WITH 1;';
    execute statement 'ALTER SEQUENCE GEN_A_EVENTS_ID RESTART WITH 0;';
    execute statement 'ALTER SEQUENCE GEN_A_fp_paylists_id RESTART WITH 0;';
    execute statement 'ALTER SEQUENCE GEN_A_fp_paylists_r_id RESTART WITH 0;';
    execute statement 'ALTER SEQUENCE GEN_A_pastdata_id RESTART WITH 0;';
    execute statement 'ALTER SEQUENCE GEN_A_pastdata_2_id RESTART WITH 0;';

    execute statement 'ALTER SEQUENCE GEN_A_paylists_id RESTART WITH 0;';
    execute statement 'ALTER SEQUENCE GEN_A_paylists_r_id RESTART WITH 0;';
    execute statement 'ALTER SEQUENCE GEN_A_paylist_templ_id RESTART WITH 0;';
    execute statement 'ALTER SEQUENCE GEN_A_paylist_templ_r_id RESTART WITH 0;';


    execute statement 'ALTER SEQUENCE GEN_A_piecework_catalog_id RESTART WITH 0;';
    execute statement 'ALTER SEQUENCE GEN_A_piecework_catstruct_id RESTART WITH 0;';
    execute statement 'ALTER SEQUENCE GEN_A_piecework_id RESTART WITH 0;';

    execute statement 'ALTER SEQUENCE GEN_A_positions_id RESTART WITH 0;';
    execute statement 'ALTER SEQUENCE GEN_A_positions_plusminus_id RESTART WITH 0;';
    execute statement 'ALTER SEQUENCE GEN_A_positions_r_id RESTART WITH 0;';

    execute statement 'ALTER SEQUENCE GEN_A_salary_plusminus_id RESTART WITH 0;';
    execute statement 'ALTER SEQUENCE GEN_A_salary_sheets_id RESTART WITH 0;';
    execute statement 'ALTER SEQUENCE GEN_A_salary_sheets_r_id RESTART WITH 0;';
    execute statement 'ALTER SEQUENCE GEN_A_salary_sheet_templ_id RESTART WITH 0;';
    execute statement 'ALTER SEQUENCE GEN_A_salary_sheet_templ_r_id RESTART WITH 0;';

    execute statement 'ALTER SEQUENCE GEN_A_timeplan_list_id RESTART WITH 0;';
    execute statement 'ALTER SEQUENCE GEN_A_timesheet_id RESTART WITH 0;';
    execute statement 'ALTER SEQUENCE GEN_A_timesheet_lists_id RESTART WITH 0;';
    execute statement 'ALTER SEQUENCE GEN_A_timesheet_lists_r_id RESTART WITH 0;';
    execute statement 'ALTER SEQUENCE GEN_A_timesheet_templ_id RESTART WITH 0;';
    execute statement 'ALTER SEQUENCE GEN_A_timesheet_templ_r_id RESTART WITH 0;';

end^


ALTER PROCEDURE SP_A_DL_LAPAS_INSERT_FROM_SH (
    PYR INTEGER,
    PMT INTEGER)
AS
begin
    delete
    from a_timesheet_lists
    where 
        a_timesheet_lists.yr = :pyr and a_timesheet_lists.mt = :pmt;

    insert into a_timesheet_lists
        (ID, YR, MT, SNR, DESCR, IDSH, DEP)
    select
        null, :PYR, :PMT, SNR, DESCR, ID, DEP
    from a_timesheet_templ
    where
        a_timesheet_templ.used = 1;

    insert into a_timesheet_lists_r
        (ID, IDS, IDP, IDAM, IDPL, SNR, PLAN_TYPE)
    select
        null,
        a_timesheet_templ_r.ids,
        a_timesheet_templ_r.idp,
        a_timesheet_templ_r.idam,
        a_timesheet_templ_r.idpl,
        a_timesheet_templ_r.snr,
        a_timesheet_templ_r.plan_type
    from a_timesheet_templ
    join  a_timesheet_lists on a_timesheet_templ.id = a_timesheet_lists.idsh
    join a_timesheet_templ_r on a_timesheet_templ.id = a_timesheet_templ_r.ids
    where
        a_timesheet_lists.yr = :pyr and a_timesheet_lists.mt = :pmt;

end^


ALTER PROCEDURE SP_A_FP_PAYLISTS_PER_01 (
    PYR1 INTEGER,
    PMT1 INTEGER,
    PYR2 INTEGER,
    PMT2 INTEGER)
RETURNS (
    ID TYPE OF COLUMN A_FP_PAYLISTS.ID,
    SNR TYPE OF COLUMN A_FP_PAYLISTS.SNR,
    YR TYPE OF COLUMN A_FP_PAYLISTS.YR,
    MT TYPE OF COLUMN A_FP_PAYLISTS.MT,
    PAYDATE TYPE OF COLUMN A_FP_PAYLISTS.PAYDATE,
    DESCR TYPE OF COLUMN A_FP_PAYLISTS.DESCR)
AS
declare km1 integer;
    declare km2 integer;
begin
    km1 = (:pyr1 - 1900) * 13 + :pmt1;
    km2 = (:pyr2 - 1900) * 13 + :pmt2;

    FOR SELECT
        ID, SNR, YR, MT, PAYDATE, DESCR
    FROM A_FP_PAYLISTS
    WHERE ((YR - 1900)*13 + MT) between :km1 and :km2
    ORDER BY YR, MT, SNR
    INTO
        :ID, :SNR, :YR, :MT, :PAYDATE, :DESCR
    DO
        Suspend;
end^


ALTER PROCEDURE SP_A_FP_PAYLISTS_PER_R_01 (
    PYR1 INTEGER,
    PMT1 INTEGER,
    PYR2 INTEGER,
    PMT2 INTEGER)
RETURNS (
    ID TYPE OF COLUMN A_FP_PAYLISTS_R.ID,
    IDS TYPE OF COLUMN A_FP_PAYLISTS_R.IDS,
    IDP TYPE OF COLUMN A_FP_PAYLISTS_R.IDP,
    SNR TYPE OF COLUMN A_FP_PAYLISTS_R.SNR,
    DATE1 TYPE OF COLUMN A_FP_PAYLISTS_R.DATE1,
    DATE2 TYPE OF COLUMN A_FP_PAYLISTS_R.DATE2,
    PAYDATE TYPE OF COLUMN A_FP_PAYLISTS_R.PAYDATE,
    TAX_TP TYPE OF COLUMN A_FP_PAYLISTS_R.TAX_TP,
    INCOME_ID TYPE OF COLUMN A_FP_PAYLISTS_R.INCOME_ID,
    DESCR TYPE OF COLUMN A_FP_PAYLISTS_R.DESCR,
    PAY0 TYPE OF COLUMN A_FP_PAYLISTS_R.PAY0,
    TAXED TYPE OF COLUMN A_FP_PAYLISTS_R.TAXED,
    NOSAI TYPE OF COLUMN A_FP_PAYLISTS_R.NOSAI,
    NOTTAXED TYPE OF COLUMN A_FP_PAYLISTS_R.NOTTAXED,
    AUTHORS_FEE TYPE OF COLUMN A_FP_PAYLISTS_R.AUTHORS_FEE,
    SIRATETP TYPE OF COLUMN A_FP_PAYLISTS_R.SIRATETP,
    SIRATEDD TYPE OF COLUMN A_FP_PAYLISTS_R.SIRATEDD,
    SIRATEDN TYPE OF COLUMN A_FP_PAYLISTS_R.SIRATEDN,
    SIDD TYPE OF COLUMN A_FP_PAYLISTS_R.SIDD,
    SIDN TYPE OF COLUMN A_FP_PAYLISTS_R.SIDN,
    IINEX_PERC TYPE OF COLUMN A_FP_PAYLISTS_R.IINEX_PERC,
    IINEX TYPE OF COLUMN A_FP_PAYLISTS_R.IINEX,
    IIN_FROM TYPE OF COLUMN A_FP_PAYLISTS_R.IIN_FROM,
    IIN_RATE TYPE OF COLUMN A_FP_PAYLISTS_R.IIN_RATE,
    IIN TYPE OF COLUMN A_FP_PAYLISTS_R.IIN,
    CASH TYPE OF COLUMN A_FP_PAYLISTS_R.CASH)
AS
declare km1 integer;
    declare km2 integer;
begin
    km1 = (:pyr1 - 1900) * 13 + :pmt1;
    km2 = (:pyr2 - 1900) * 13 + :pmt2;

    FOR SELECT
        A_FP_PAYLISTS_R.ID,
        A_FP_PAYLISTS_R.IDS,
        A_FP_PAYLISTS_R.IDP,
        A_FP_PAYLISTS_R.SNR,
        A_FP_PAYLISTS_R.DATE1,
        A_FP_PAYLISTS_R.DATE2,
        A_FP_PAYLISTS_R.PAYDATE,
        A_FP_PAYLISTS_R.TAX_TP,
        A_FP_PAYLISTS_R.INCOME_ID,
        A_FP_PAYLISTS_R.DESCR,
        A_FP_PAYLISTS_R.PAY0,
        A_FP_PAYLISTS_R.TAXED,
        A_FP_PAYLISTS_R.NOSAI,
        A_FP_PAYLISTS_R.NOTTAXED,
        A_FP_PAYLISTS_R.AUTHORS_FEE,
        A_FP_PAYLISTS_R.SIRATETP,
        A_FP_PAYLISTS_R.SIRATEDD,
        A_FP_PAYLISTS_R.SIRATEDN,
        A_FP_PAYLISTS_R.SIDD,
        A_FP_PAYLISTS_R.SIDN,
        A_FP_PAYLISTS_R.IINEX_PERC,
        A_FP_PAYLISTS_R.IINEX,
        A_FP_PAYLISTS_R.IIN_FROM,
        A_FP_PAYLISTS_R.IIN_RATE,
        A_FP_PAYLISTS_R.IIN,
        A_FP_PAYLISTS_R.CASH

    FROM A_FP_PAYLISTS
    INNER JOIN A_FP_PAYLISTS_R
    ON A_FP_PAYLISTS.ID = A_FP_PAYLISTS_R.IDS
    WHERE ((A_FP_PAYLISTS.YR - 1900)*13 + A_FP_PAYLISTS.MT) between :km1 and :km2
    ORDER BY A_FP_PAYLISTS.YR, A_FP_PAYLISTS.MT, A_FP_PAYLISTS.SNR
    INTO
        :ID,
        :IDS,
        :IDP,
        :SNR,
        :DATE1,
        :DATE2,
        :PAYDATE,
        :TAX_TP,
        :INCOME_ID,
        :DESCR,
        :PAY0,
        :TAXED,
        :NOSAI,
        :NOTTAXED,
        :AUTHORS_FEE,
        :SIRATETP,
        :SIRATEDD,
        :SIRATEDN,
        :SIDD,
        :SIDN,
        :IINEX_PERC,
        :IINEX,
        :IIN_FROM,
        :IIN_RATE,
        :IIN,
        :CASH
    DO
        Suspend;
end^


ALTER PROCEDURE SP_A_GEN_BANKS_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_banks_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_EVENT_TYPES_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_event_types_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_EVENT_TYPES2_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_event_types2_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_EVENTS_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_events_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_FP_PAYLISTS_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_fp_paylists_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_FP_PAYLISTS_R_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_fp_paylists_r_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_PASTDATA_2_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_pastdata_2_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_PASTDATA_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_pastdata_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_PAYLIST_TEMPL_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_paylist_templ_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_PAYLIST_TEMPL_R_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_paylist_templ_r_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_PAYLISTS_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_paylists_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_PAYLISTS_R_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_paylists_r_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_PERSONS_FIZ_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_persons_fiz_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_PERSONS_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_persons_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_PERSONS_R_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_persons_r_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_PIECEWORK_CATALOG_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_piecework_catalog_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_PIECEWORK_CATSTRUCT_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_piecework_catstruct_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_PIECEWORK_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_piecework_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_PLUSMINUS_FROM_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_plusminus_from_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_PLUSMINUS_TYPES_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_plusminus_types_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_POSITIONS_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_positions_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_POSITIONS_PLUSMINUS_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_positions_plusminus_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_POSITIONS_R_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_positions_r_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_REPORT_CODES_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_report_codes_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_SAL_SHEET_TEMPL_R_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_salary_sheet_templ_R_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_SAL_SHEETS_R_HIST_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_salary_sheets_r_hist_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_SALARY_PLUSMINUS_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_SALARY_PLUSMINUS_ID, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_SALARY_SHEET_TEMPL_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_salary_sheet_templ_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_SALARY_SHEETS_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_salary_sheets_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_SALARY_SHEETS_R_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_salary_sheets_r_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_TIMEPLAN_LIST_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_timeplan_list_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_TIMESHEET_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_timesheet_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_TIMESHEET_LISTS_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_TIMESHEET_LISTS_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_TIMESHEET_LISTS_R_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_timesheet_lists_r_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_TIMESHEET_TEMPL_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_timesheet_templ_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_TIMESHEET_TEMPL_R_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_timesheet_templ_r_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GEN_UNTAXED_MIN_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_a_untaxed_min_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_A_GET_MINMAX
RETURNS (
    RDLMINYR INTEGER,
    RDLMINMT INTEGER,
    RDLMAXYR INTEGER,
    RDLMAXMT INTEGER,
    RAMINYR INTEGER,
    RAMINMT INTEGER,
    RAMAXYR INTEGER,
    RAMAXMT INTEGER)
AS
declare k1 integer;
begin

    RDLMINYR = 0;
    RDLMINMT = 0;
    RDLMAXYR = 0;
    RDLMAXMT = 0;
    RAMINYR = 0;
    RAMINMT = 0;
    RAMAXYR = 0;
    RAMAXMT = 0;

    select min(YR * 13 + MT)
    from a_salary_sheets
    into :k1;

    if (k1 is null) then
        k1 = 0;
    else
        select min(yr), min(mt)
        from a_salary_sheets
        where (yr * 13 + mt) = :k1
        into :RDLMINYR, RDLMINMT;

    select max(YR * 13 + MT)
    from a_salary_sheets
    into :k1;

    if (k1 is null) then
        k1 = 0;
    else
        select max(yr), max(mt)
        from a_salary_sheets
        where (yr * 13 + mt) = :k1
        into :RDLMAXYR, RDLMAXMT;

    select min(YR * 13 + MT)
    from a_timesheet_lists
    into :k1;

    if (k1 is null) then
        k1 = 0;
    else
        select min(yr), min(mt)
        from a_timesheet_lists
        where (yr * 13 + mt) = :k1
        into :RAMINYR, RAMINMT;


    select max(YR * 13 + MT)
    from a_timesheet_lists
    into :k1;

    if (k1 is null) then
        k1 = 0;
    else
        select max(yr), max(mt)
        from a_timesheet_lists
        where (yr * 13 + mt) = :k1
        into :RAMAXYR, RAMAXMT;


  suspend;
end^


ALTER PROCEDURE SP_A_HOLIDAYS_01 (
    PSD DATE,
    PED DATE)
RETURNS (
    DT TYPE OF COLUMN A_HOLIDAYS.DT,
    TAG TYPE OF COLUMN A_HOLIDAYS.TAG)
AS
begin
    for select dt, tag
    from a_holidays
    where dt between :psd and :ped
    order by dt
    into dt, tag
    do
      suspend;
end^


ALTER PROCEDURE SP_A_MAKE_SALARY_SHEET_R_HIST (
    PID INTEGER,
    PDTCUR TIMESTAMP,
    PSKIP_INTERVAL FLOAT)
AS
declare variable V_LAST_DT TIMESTAMP;
    declare variable V_DIFF_DT FLOAT;
    declare variable V_ID INTEGER;
    declare variable V_IDH INTEGER;
    declare variable V_EQ INTEGER;
begin
    select a_salary_sheets_r.id
    from a_salary_sheets_r
    where a_salary_sheets_r.id = :PID
    into :V_ID;
    
    if(V_ID is null) then exit;

    select max(a_salary_sheets_r_hist.dt_edited)
    from a_salary_sheets_r_hist
    where a_salary_sheets_r_hist.id = :PID
    into :V_LAST_DT;

    if(V_LAST_DT is not null) then
    begin
        if(pdtcur < V_LAST_DT) then exit;
        V_DIFF_DT = pdtcur - V_LAST_DT;
        if(V_DIFF_DT < PSKIP_INTERVAL) then exit;
    end

    if(V_LAST_DT is not null) then
    begin
        select max(a_salary_sheets_r_hist.idh)
        from a_salary_sheets_r_hist
        where (a_salary_sheets_r_hist.id = :PID) and
            (a_salary_sheets_r_hist.dt_edited = :V_LAST_DT)
        into :V_IDH;
        
        select case when
            (a_salary_sheets_r.IDS is null and a_salary_sheets_r_hist.IDS is null or a_salary_sheets_r.IDS = a_salary_sheets_r_hist.IDS) and
            (a_salary_sheets_r.IDSX is null and a_salary_sheets_r_hist.IDSX is null or a_salary_sheets_r.IDSX = a_salary_sheets_r_hist.IDSX) and
            (a_salary_sheets_r.IDST is null and a_salary_sheets_r_hist.IDST is null or a_salary_sheets_r.IDST = a_salary_sheets_r_hist.IDST) and
            (a_salary_sheets_r.IS_TEMP is null and a_salary_sheets_r_hist.IS_TEMP is null or a_salary_sheets_r.IS_TEMP = a_salary_sheets_r_hist.IS_TEMP) and
            (a_salary_sheets_r.TYPE_TAG is null and a_salary_sheets_r_hist.TYPE_TAG is null or a_salary_sheets_r.TYPE_TAG = a_salary_sheets_r_hist.TYPE_TAG) and
            (a_salary_sheets_r.IDP is null and a_salary_sheets_r_hist.IDP is null or a_salary_sheets_r.IDP = a_salary_sheets_r_hist.IDP) and
            (a_salary_sheets_r.IDAM is null and a_salary_sheets_r_hist.IDAM is null or a_salary_sheets_r.IDAM = a_salary_sheets_r_hist.IDAM) and
            (a_salary_sheets_r.SNR = a_salary_sheets_r_hist.SNR) and
            (a_salary_sheets_r.FNAME is null and a_salary_sheets_r_hist.FNAME is null or a_salary_sheets_r.FNAME = a_salary_sheets_r_hist.FNAME) and
            (a_salary_sheets_r.LNAME is null and a_salary_sheets_r_hist.LNAME is null or a_salary_sheets_r.LNAME = a_salary_sheets_r_hist.LNAME) and
            (a_salary_sheets_r.POSITION_TITLE is null and a_salary_sheets_r_hist.POSITION_TITLE is null or a_salary_sheets_r.POSITION_TITLE = a_salary_sheets_r_hist.POSITION_TITLE) and
            (a_salary_sheets_r.TERRITORIAL_CODE is null and a_salary_sheets_r_hist.TERRITORIAL_CODE is null or a_salary_sheets_r.TERRITORIAL_CODE = a_salary_sheets_r_hist.TERRITORIAL_CODE) and
            (a_salary_sheets_r.CALENDAR_DAYS = a_salary_sheets_r_hist.CALENDAR_DAYS) and
            (a_salary_sheets_r.CALENDAR_DAYS_USE = a_salary_sheets_r_hist.CALENDAR_DAYS_USE) and
            (a_salary_sheets_r.MONTH_WORKDAYS = a_salary_sheets_r_hist.MONTH_WORKDAYS) and
            (a_salary_sheets_r.MONTH_WORKHOURS = a_salary_sheets_r_hist.MONTH_WORKHOURS) and
            (a_salary_sheets_r.PLAN_DAYS = a_salary_sheets_r_hist.PLAN_DAYS) and
            (a_salary_sheets_r.PLAN_HOURS = a_salary_sheets_r_hist.PLAN_HOURS) and
            (a_salary_sheets_r.PLAN_HOURS_NIGHT = a_salary_sheets_r_hist.PLAN_HOURS_NIGHT) and
            (a_salary_sheets_r.PLAN_HOURS_OVERTIME = a_salary_sheets_r_hist.PLAN_HOURS_OVERTIME) and
            (a_salary_sheets_r.FACT_DAYS = a_salary_sheets_r_hist.FACT_DAYS) and
            (a_salary_sheets_r.FACT_HOURS = a_salary_sheets_r_hist.FACT_HOURS) and
            (a_salary_sheets_r.FACT_HOURS_NIGHT = a_salary_sheets_r_hist.FACT_HOURS_NIGHT) and
            (a_salary_sheets_r.FACT_HOURS_OVERTIME = a_salary_sheets_r_hist.FACT_HOURS_OVERTIME) and
            (a_salary_sheets_r.PLAN_WORK_DAYS = a_salary_sheets_r_hist.PLAN_WORK_DAYS) and
            (a_salary_sheets_r.PLAN_WORK_HOURS = a_salary_sheets_r_hist.PLAN_WORK_HOURS) and
            (a_salary_sheets_r.PLAN_WORK_HOURS_NIGHT = a_salary_sheets_r_hist.PLAN_WORK_HOURS_NIGHT) and
            (a_salary_sheets_r.PLAN_WORK_HOURS_OVERTIME = a_salary_sheets_r_hist.PLAN_WORK_HOURS_OVERTIME) and
            (a_salary_sheets_r.FACT_WORK_DAYS = a_salary_sheets_r_hist.FACT_WORK_DAYS) and
            (a_salary_sheets_r.FACT_WORK_HOURS = a_salary_sheets_r_hist.FACT_WORK_HOURS) and
            (a_salary_sheets_r.FACT_WORK_HOURS_NIGHT = a_salary_sheets_r_hist.FACT_WORK_HOURS_NIGHT) and
            (a_salary_sheets_r.FACT_WORK_HOURS_OVERTIME = a_salary_sheets_r_hist.FACT_WORK_HOURS_OVERTIME) and
            (a_salary_sheets_r.PLAN_HOLIDAYS_DAYS = a_salary_sheets_r_hist.PLAN_HOLIDAYS_DAYS) and
            (a_salary_sheets_r.PLAN_HOLIDAYS_HOURS = a_salary_sheets_r_hist.PLAN_HOLIDAYS_HOURS) and
            (a_salary_sheets_r.PLAN_HOLIDAYS_HOURS_NIGHT = a_salary_sheets_r_hist.PLAN_HOLIDAYS_HOURS_NIGHT) and
            (a_salary_sheets_r.PLAN_HOLIDAYS_HOURS_OVERTIME = a_salary_sheets_r_hist.PLAN_HOLIDAYS_HOURS_OVERTIME) and
            (a_salary_sheets_r.FACT_HOLIDAYS_DAYS = a_salary_sheets_r_hist.FACT_HOLIDAYS_DAYS) and
            (a_salary_sheets_r.FACT_HOLIDAYS_HOURS = a_salary_sheets_r_hist.FACT_HOLIDAYS_HOURS) and
            (a_salary_sheets_r.FACT_HOLIDAYS_HOURS_NIGHT = a_salary_sheets_r_hist.FACT_HOLIDAYS_HOURS_NIGHT) and
            (a_salary_sheets_r.FACT_HOLIDAYS_HOURS_OVERTIME = a_salary_sheets_r_hist.FACT_HOLIDAYS_HOURS_OVERTIME) and
            (a_salary_sheets_r.SALARY = a_salary_sheets_r_hist.SALARY) and
            (a_salary_sheets_r.SALARY_DAY = a_salary_sheets_r_hist.SALARY_DAY) and
            (a_salary_sheets_r.SALARY_NIGHT = a_salary_sheets_r_hist.SALARY_NIGHT) and
            (a_salary_sheets_r.SALARY_OVERTIME = a_salary_sheets_r_hist.SALARY_OVERTIME) and
            (a_salary_sheets_r.SALARY_HOLIDAYS_DAY = a_salary_sheets_r_hist.SALARY_HOLIDAYS_DAY) and
            (a_salary_sheets_r.SALARY_HOLIDAYS_NIGHT = a_salary_sheets_r_hist.SALARY_HOLIDAYS_NIGHT) and
            (a_salary_sheets_r.SALARY_HOLIDAYS_OVERTIME = a_salary_sheets_r_hist.SALARY_HOLIDAYS_OVERTIME) and
            (a_salary_sheets_r.SALARY_PAID_HOLIDAYS_DAY = a_salary_sheets_r_hist.SALARY_PAID_HOLIDAYS_DAY) and
            (a_salary_sheets_r.SALARY_PAID_HOLIDAYS_NIGHT = a_salary_sheets_r_hist.SALARY_PAID_HOLIDAYS_NIGHT) and
            (a_salary_sheets_r.SALARY_PIECEWORK = a_salary_sheets_r_hist.SALARY_PIECEWORK) and
            (a_salary_sheets_r.SICKDAYS = a_salary_sheets_r_hist.SICKDAYS) and
            (a_salary_sheets_r.SICKDAYS_PAY = a_salary_sheets_r_hist.SICKDAYS_PAY) and
            (a_salary_sheets_r.ACCIDENT_DAYS = a_salary_sheets_r_hist.ACCIDENT_DAYS) and
            (a_salary_sheets_r.ACCIDENT_PAY = a_salary_sheets_r_hist.ACCIDENT_PAY) and
            (a_salary_sheets_r.AVERAGE_INCOME_DAYS = a_salary_sheets_r_hist.AVERAGE_INCOME_DAYS) and
            (a_salary_sheets_r.AVERAGE_INCOME_PAY = a_salary_sheets_r_hist.AVERAGE_INCOME_PAY) and
            (a_salary_sheets_r.FACT_AVPAY_FREE_DAYS = a_salary_sheets_r_hist.FACT_AVPAY_FREE_DAYS) and
            (a_salary_sheets_r.FACT_AVPAY_FREE_HOURS = a_salary_sheets_r_hist.FACT_AVPAY_FREE_HOURS) and
            (a_salary_sheets_r.FACT_AVPAY_WORK_DAYS = a_salary_sheets_r_hist.FACT_AVPAY_WORK_DAYS) and
            (a_salary_sheets_r.FACT_AVPAY_WORKINHOLIDAYS = a_salary_sheets_r_hist.FACT_AVPAY_WORKINHOLIDAYS) and
            (a_salary_sheets_r.FACT_AVPAY_HOURS = a_salary_sheets_r_hist.FACT_AVPAY_HOURS) and
            (a_salary_sheets_r.FACT_AVPAY_HOURS_OVERTIME = a_salary_sheets_r_hist.FACT_AVPAY_HOURS_OVERTIME) and
            (a_salary_sheets_r.FACT_AVPAY_HOLIDAYS_HOURS = a_salary_sheets_r_hist.FACT_AVPAY_HOLIDAYS_HOURS) and
            (a_salary_sheets_r.FACT_AVPAY_HOLIDAYS_HOURS_OVERT = a_salary_sheets_r_hist.FACT_AVPAY_HOLIDAYS_HOURS_OVERT) and
            (a_salary_sheets_r.SALARY_AVPAY_FREE_DAYS = a_salary_sheets_r_hist.SALARY_AVPAY_FREE_DAYS) and
            (a_salary_sheets_r.SALARY_AVPAY_WORK_DAYS = a_salary_sheets_r_hist.SALARY_AVPAY_WORK_DAYS) and
            (a_salary_sheets_r.SALARY_AVPAY_WORK_DAYS_OVERTIME = a_salary_sheets_r_hist.SALARY_AVPAY_WORK_DAYS_OVERTIME) and
            (a_salary_sheets_r.SALARY_AVPAY_HOLIDAYS = a_salary_sheets_r_hist.SALARY_AVPAY_HOLIDAYS) and
            (a_salary_sheets_r.SALARY_AVPAY_HOLIDAYS_OVERTIME = a_salary_sheets_r_hist.SALARY_AVPAY_HOLIDAYS_OVERTIME) and
            (a_salary_sheets_r.BUSINESS_TRIP_DAYS = a_salary_sheets_r_hist.BUSINESS_TRIP_DAYS) and
            (a_salary_sheets_r.BUSINESS_TRIP_PAY = a_salary_sheets_r_hist.BUSINESS_TRIP_PAY) and
            (a_salary_sheets_r.PAID_HOLIDAYS = a_salary_sheets_r_hist.PAID_HOLIDAYS) and
            (a_salary_sheets_r.PAID_HOLIDAYS_PAY = a_salary_sheets_r_hist.PAID_HOLIDAYS_PAY) and
            (a_salary_sheets_r.VACATION_DAYS_CURRENT = a_salary_sheets_r_hist.VACATION_DAYS_CURRENT) and
            (a_salary_sheets_r.VACATION_DAYS_NEXT = a_salary_sheets_r_hist.VACATION_DAYS_NEXT) and
            (a_salary_sheets_r.VACATION_HOURS_CURRENT = a_salary_sheets_r_hist.VACATION_HOURS_CURRENT) and
            (a_salary_sheets_r.VACATION_HOURS_NEXT = a_salary_sheets_r_hist.VACATION_HOURS_NEXT) and
            (a_salary_sheets_r.VACATION_PAY_CURRENT = a_salary_sheets_r_hist.VACATION_PAY_CURRENT) and
            (a_salary_sheets_r.VACATION_PAY_NEXT = a_salary_sheets_r_hist.VACATION_PAY_NEXT) and
            (a_salary_sheets_r.VACATION_DNS_NEXT = a_salary_sheets_r_hist.VACATION_DNS_NEXT) and
            (a_salary_sheets_r.VACATION_DDS_NEXT = a_salary_sheets_r_hist.VACATION_DDS_NEXT) and
            (a_salary_sheets_r.VACATION_IIN_NEXT = a_salary_sheets_r_hist.VACATION_IIN_NEXT) and
            (a_salary_sheets_r.VACATION_IIN_REDUCE_NEXT = a_salary_sheets_r_hist.VACATION_IIN_REDUCE_NEXT) and
            (a_salary_sheets_r.VACATION_CASH_NEXT = a_salary_sheets_r_hist.VACATION_CASH_NEXT) and
            (a_salary_sheets_r.VACATION_PAY_PREV = a_salary_sheets_r_hist.VACATION_PAY_PREV) and
            (a_salary_sheets_r.VACATION_DNS_PREV = a_salary_sheets_r_hist.VACATION_DNS_PREV) and
            (a_salary_sheets_r.VACATION_DDS_PREV = a_salary_sheets_r_hist.VACATION_DDS_PREV) and
            (a_salary_sheets_r.VACATION_IIN_PREV = a_salary_sheets_r_hist.VACATION_IIN_PREV) and
            (a_salary_sheets_r.VACATION_DAYS_COMP = a_salary_sheets_r_hist.VACATION_DAYS_COMP) and
            (a_salary_sheets_r.VACATION_PAY_COMP = a_salary_sheets_r_hist.VACATION_PAY_COMP) and
            (a_salary_sheets_r.PLUS_TAXED = a_salary_sheets_r_hist.PLUS_TAXED) and
            (a_salary_sheets_r.PLUS_NOTTAXED = a_salary_sheets_r_hist.PLUS_NOTTAXED) and
            (a_salary_sheets_r.PLUS_NOSAI = a_salary_sheets_r_hist.PLUS_NOSAI) and
            (a_salary_sheets_r.PLUS_AUTHORS_FEES = a_salary_sheets_r_hist.PLUS_AUTHORS_FEES) and
            (a_salary_sheets_r.MINUS_BEFORE_IIN = a_salary_sheets_r_hist.MINUS_BEFORE_IIN) and
            (a_salary_sheets_r.MINUS_AFTER_IIN = a_salary_sheets_r_hist.MINUS_AFTER_IIN) and
            (a_salary_sheets_r.PLUS_PF_NOTTAXED = a_salary_sheets_r_hist.PLUS_PF_NOTTAXED) and
            (a_salary_sheets_r.PLUS_PF_TAXED = a_salary_sheets_r_hist.PLUS_PF_TAXED) and
            (a_salary_sheets_r.PLUS_LI_NOTTAXED = a_salary_sheets_r_hist.PLUS_LI_NOTTAXED) and
            (a_salary_sheets_r.PLUS_LI_TAXED = a_salary_sheets_r_hist.PLUS_LI_TAXED) and
            (a_salary_sheets_r.PLUS_HI_NOTTAXED = a_salary_sheets_r_hist.PLUS_HI_NOTTAXED) and
            (a_salary_sheets_r.PLUS_HI_TAXED = a_salary_sheets_r_hist.PLUS_HI_TAXED) and
            (a_salary_sheets_r.PLUS_NP_TAXED = a_salary_sheets_r_hist.PLUS_NP_TAXED) and
            (a_salary_sheets_r.PLUS_NP_NOSAI = a_salary_sheets_r_hist.PLUS_NP_NOSAI) and
            (a_salary_sheets_r.PLUS_NP_NOTTAXED = a_salary_sheets_r_hist.PLUS_NP_NOTTAXED) and
            (a_salary_sheets_r.TOTAL_BEFORE_TAXES = a_salary_sheets_r_hist.TOTAL_BEFORE_TAXES) and
            (a_salary_sheets_r.ADJUSTED_AMOUNT = a_salary_sheets_r_hist.ADJUSTED_AMOUNT) and
            (a_salary_sheets_r.AMOUNT_BEFORE_SN = a_salary_sheets_r_hist.AMOUNT_BEFORE_SN) and
            (a_salary_sheets_r.AMOUNT_BEFORE_SN_REVERSE = a_salary_sheets_r_hist.AMOUNT_BEFORE_SN_REVERSE) and
            (a_salary_sheets_r.RATE_DNSN = a_salary_sheets_r_hist.RATE_DNSN) and
            (a_salary_sheets_r.RATE_DDSN = a_salary_sheets_r_hist.RATE_DDSN) and
            (a_salary_sheets_r.DNSN_AMOUNT = a_salary_sheets_r_hist.DNSN_AMOUNT) and
            (a_salary_sheets_r.DDSN_AMOUNT = a_salary_sheets_r_hist.DDSN_AMOUNT) and
            (a_salary_sheets_r.SN_AMOUNT = a_salary_sheets_r_hist.SN_AMOUNT) and
            (a_salary_sheets_r.DNSN_AMOUNT_REVERSE = a_salary_sheets_r_hist.DNSN_AMOUNT_REVERSE) and
            (a_salary_sheets_r.DDSN_AMOUNT_REVERSE = a_salary_sheets_r_hist.DDSN_AMOUNT_REVERSE) and
            (a_salary_sheets_r.SN_MAX_AMOUNT = a_salary_sheets_r_hist.SN_MAX_AMOUNT) and
            (a_salary_sheets_r.IIN_EXEMPT_UNTAXED_MINIMUM0 = a_salary_sheets_r_hist.IIN_EXEMPT_UNTAXED_MINIMUM0) and
            (a_salary_sheets_r.IIN_EXEMPT_DEPENDANTS0 = a_salary_sheets_r_hist.IIN_EXEMPT_DEPENDANTS0) and
            (a_salary_sheets_r.IIN_EXEMPT_RETALIATION0 = a_salary_sheets_r_hist.IIN_EXEMPT_RETALIATION0) and
            (a_salary_sheets_r.IIN_EXEMPT_INVALIDITY0 = a_salary_sheets_r_hist.IIN_EXEMPT_INVALIDITY0) and
            (a_salary_sheets_r.IIN_EXEMPT_NATIONAL_MOVEMENT0 = a_salary_sheets_r_hist.IIN_EXEMPT_NATIONAL_MOVEMENT0) and
            (a_salary_sheets_r.IIN_EXEMPT_UNTAXED_MINIMUM = a_salary_sheets_r_hist.IIN_EXEMPT_UNTAXED_MINIMUM) and
            (a_salary_sheets_r.IIN_EXEMPT_DEPENDANTS = a_salary_sheets_r_hist.IIN_EXEMPT_DEPENDANTS) and
            (a_salary_sheets_r.IIN_EXEMPT_RETALIATION = a_salary_sheets_r_hist.IIN_EXEMPT_RETALIATION) and
            (a_salary_sheets_r.IIN_EXEMPT_INVALIDITY = a_salary_sheets_r_hist.IIN_EXEMPT_INVALIDITY) and
            (a_salary_sheets_r.IIN_EXEMPT_NATIONAL_MOVEMENT = a_salary_sheets_r_hist.IIN_EXEMPT_NATIONAL_MOVEMENT) and
            (a_salary_sheets_r.IIN_EXEMPT_EXPENSES = a_salary_sheets_r_hist.IIN_EXEMPT_EXPENSES) and
            (a_salary_sheets_r.IIN_EXEMPT_2TP = a_salary_sheets_r_hist.IIN_EXEMPT_2TP) and
            (a_salary_sheets_r.IIN_EXEMPT_20 = a_salary_sheets_r_hist.IIN_EXEMPT_20) and
            (a_salary_sheets_r.IIN_EXEMPT_2 = a_salary_sheets_r_hist.IIN_EXEMPT_2) and
            (a_salary_sheets_r.AMOUNT_BEFORE_IIN = a_salary_sheets_r_hist.AMOUNT_BEFORE_IIN) and
            (a_salary_sheets_r.AMOUNT_BEFORE_IIN_REVERSE = a_salary_sheets_r_hist.AMOUNT_BEFORE_IIN_REVERSE) and
            (a_salary_sheets_r.RATE_IIN = a_salary_sheets_r_hist.RATE_IIN) and
            (a_salary_sheets_r.RATE_IIN2 = a_salary_sheets_r_hist.RATE_IIN2) and
            (a_salary_sheets_r.IIN_AMOUNT = a_salary_sheets_r_hist.IIN_AMOUNT) and
            (a_salary_sheets_r.IIN_AMOUNT_REVERSE = a_salary_sheets_r_hist.IIN_AMOUNT_REVERSE) and
            (a_salary_sheets_r.URVN_AMAOUNT = a_salary_sheets_r_hist.URVN_AMAOUNT) and
            (a_salary_sheets_r.PLUS_NOT_PAID = a_salary_sheets_r_hist.PLUS_NOT_PAID) and
            (a_salary_sheets_r.VACATION_ADVANCE_CURRENT = a_salary_sheets_r_hist.VACATION_ADVANCE_CURRENT) and
            (a_salary_sheets_r.VACATION_ADVANCE_NEXT = a_salary_sheets_r_hist.VACATION_ADVANCE_NEXT) and
            (a_salary_sheets_r.VACATION_ADVANCE_PREV = a_salary_sheets_r_hist.VACATION_ADVANCE_PREV) and
            (a_salary_sheets_r.ADVANCE = a_salary_sheets_r_hist.ADVANCE) and
            (a_salary_sheets_r.PAY0 = a_salary_sheets_r_hist.PAY0) and
            (a_salary_sheets_r.PAY = a_salary_sheets_r_hist.PAY) and
            (a_salary_sheets_r.PAYT = a_salary_sheets_r_hist.PAYT) and
            (a_salary_sheets_r.PAY_DATE is null and a_salary_sheets_r_hist.PAY_DATE is null or a_salary_sheets_r.PAY_DATE = a_salary_sheets_r_hist.PAY_DATE) and
            (a_salary_sheets_r.COMMENTS is null and a_salary_sheets_r_hist.COMMENTS is null or a_salary_sheets_r.COMMENTS = a_salary_sheets_r_hist.COMMENTS) and
            (a_salary_sheets_r.WITHHOLD_FROM_PAY = a_salary_sheets_r_hist.WITHHOLD_FROM_PAY) and
            (a_salary_sheets_r.FORAVPAYCALC_BRUTO = a_salary_sheets_r_hist.FORAVPAYCALC_BRUTO) and
            (a_salary_sheets_r.FORAVPAYCALC_PAYOUT = a_salary_sheets_r_hist.FORAVPAYCALC_PAYOUT) and
            (a_salary_sheets_r.FORAVPAYCALC_DAYS = a_salary_sheets_r_hist.FORAVPAYCALC_DAYS) and
            (a_salary_sheets_r.FORAVPAYCALC_HOURS = a_salary_sheets_r_hist.FORAVPAYCALC_HOURS) and
            (a_salary_sheets_r.AVPAYCALC_CALDAY = a_salary_sheets_r_hist.AVPAYCALC_CALDAY) and
            (a_salary_sheets_r.AVPAYCALC_DAY = a_salary_sheets_r_hist.AVPAYCALC_DAY) and
            (a_salary_sheets_r.AVPAYCALC_HOUR = a_salary_sheets_r_hist.AVPAYCALC_HOUR) and
            (a_salary_sheets_r.CALC_VER = a_salary_sheets_r_hist.CALC_VER)
        then  1
        else  0
        end as is_eq
        from a_salary_sheets_r, a_salary_sheets_r_hist
        where a_salary_sheets_r.id = :PID and
            a_salary_sheets_r_hist.idh = :V_IDH
        into :v_eq;

        if(v_eq = 1) then exit;

    end


    insert into a_salary_sheets_r_hist
    (
        IDH,
        ID,
        IDS,
        IDSX,
        IDST,
        IS_TEMP,
        TYPE_TAG,
        IDP,
        IDAM,
        SNR,
        FNAME,
        LNAME,
        POSITION_TITLE,
        TERRITORIAL_CODE,
        CALENDAR_DAYS,
        CALENDAR_DAYS_USE,
        MONTH_WORKDAYS,
        MONTH_WORKHOURS,
        PLAN_DAYS,
        PLAN_HOURS,
        PLAN_HOURS_NIGHT,
        PLAN_HOURS_OVERTIME,
        FACT_DAYS,
        FACT_HOURS,
        FACT_HOURS_NIGHT,
        FACT_HOURS_OVERTIME,
        PLAN_WORK_DAYS,
        PLAN_WORK_HOURS,
        PLAN_WORK_HOURS_NIGHT,
        PLAN_WORK_HOURS_OVERTIME,
        FACT_WORK_DAYS,
        FACT_WORK_HOURS,
        FACT_WORK_HOURS_NIGHT,
        FACT_WORK_HOURS_OVERTIME,
        PLAN_HOLIDAYS_DAYS,
        PLAN_HOLIDAYS_HOURS,
        PLAN_HOLIDAYS_HOURS_NIGHT,
        PLAN_HOLIDAYS_HOURS_OVERTIME,
        FACT_HOLIDAYS_DAYS,
        FACT_HOLIDAYS_HOURS,
        FACT_HOLIDAYS_HOURS_NIGHT,
        FACT_HOLIDAYS_HOURS_OVERTIME,
        SALARY,
        SALARY_DAY,
        SALARY_NIGHT,
        SALARY_OVERTIME,
        SALARY_HOLIDAYS_DAY,
        SALARY_HOLIDAYS_NIGHT,
        SALARY_HOLIDAYS_OVERTIME,
        SALARY_PAID_HOLIDAYS_DAY,
        SALARY_PAID_HOLIDAYS_NIGHT,
        SALARY_PIECEWORK,
        SICKDAYS,
        SICKDAYS_PAY,
        ACCIDENT_DAYS,
        ACCIDENT_PAY,
        AVERAGE_INCOME_DAYS,
        AVERAGE_INCOME_PAY,
        FACT_AVPAY_FREE_DAYS,
        FACT_AVPAY_FREE_HOURS,
        FACT_AVPAY_WORK_DAYS,
        FACT_AVPAY_WORKINHOLIDAYS,
        FACT_AVPAY_HOURS,
        FACT_AVPAY_HOURS_OVERTIME,
        FACT_AVPAY_HOLIDAYS_HOURS,
        FACT_AVPAY_HOLIDAYS_HOURS_OVERT,
        SALARY_AVPAY_FREE_DAYS,
        SALARY_AVPAY_WORK_DAYS,
        SALARY_AVPAY_WORK_DAYS_OVERTIME,
        SALARY_AVPAY_HOLIDAYS,
        SALARY_AVPAY_HOLIDAYS_OVERTIME,
        BUSINESS_TRIP_DAYS,
        BUSINESS_TRIP_PAY,
        PAID_HOLIDAYS,
        PAID_HOLIDAYS_PAY,
        VACATION_DAYS_CURRENT,
        VACATION_DAYS_NEXT,
        VACATION_HOURS_CURRENT,
        VACATION_HOURS_NEXT,
        VACATION_PAY_CURRENT,
        VACATION_PAY_NEXT,
        VACATION_DNS_NEXT,
        VACATION_DDS_NEXT,
        VACATION_IIN_NEXT,
        VACATION_IIN_REDUCE_NEXT,
        VACATION_CASH_NEXT,
        VACATION_PAY_PREV,
        VACATION_DNS_PREV,
        VACATION_DDS_PREV,
        VACATION_IIN_PREV,
        VACATION_DAYS_COMP,
        VACATION_PAY_COMP,
        PLUS_TAXED,
        PLUS_NOTTAXED,
        PLUS_NOSAI,
        PLUS_AUTHORS_FEES,
        MINUS_BEFORE_IIN,
        MINUS_AFTER_IIN,
        PLUS_PF_NOTTAXED,
        PLUS_PF_TAXED,
        PLUS_LI_NOTTAXED,
        PLUS_LI_TAXED,
        PLUS_HI_NOTTAXED,
        PLUS_HI_TAXED,
        PLUS_NP_TAXED,
        PLUS_NP_NOSAI,
        PLUS_NP_NOTTAXED,
        TOTAL_BEFORE_TAXES,
        ADJUSTED_AMOUNT,
        AMOUNT_BEFORE_SN,
        AMOUNT_BEFORE_SN_REVERSE,
        RATE_DNSN,
        RATE_DDSN,
        DNSN_AMOUNT,
        DDSN_AMOUNT,
        SN_AMOUNT,
        DNSN_AMOUNT_REVERSE,
        DDSN_AMOUNT_REVERSE,
        SN_MAX_AMOUNT,
        IIN_EXEMPT_UNTAXED_MINIMUM0,
        IIN_EXEMPT_DEPENDANTS0,
        IIN_EXEMPT_RETALIATION0,
        IIN_EXEMPT_INVALIDITY0,
        IIN_EXEMPT_NATIONAL_MOVEMENT0,
        IIN_EXEMPT_UNTAXED_MINIMUM,
        IIN_EXEMPT_DEPENDANTS,
        IIN_EXEMPT_RETALIATION,
        IIN_EXEMPT_INVALIDITY,
        IIN_EXEMPT_NATIONAL_MOVEMENT,
        IIN_EXEMPT_EXPENSES,
        IIN_EXEMPT_2TP,
        IIN_EXEMPT_20,
        IIN_EXEMPT_2,
        AMOUNT_BEFORE_IIN,
        AMOUNT_BEFORE_IIN_REVERSE,
        RATE_IIN,
        RATE_IIN2,
        IIN_AMOUNT,
        IIN_AMOUNT_REVERSE,
        URVN_AMAOUNT,
        PLUS_NOT_PAID,
        VACATION_ADVANCE_CURRENT,
        VACATION_ADVANCE_NEXT,
        VACATION_ADVANCE_PREV,
        ADVANCE,
        PAY0,
        PAY,
        PAYT,
        PAY_DATE,
        COMMENTS,
        WITHHOLD_FROM_PAY,
        FORAVPAYCALC_BRUTO,
        FORAVPAYCALC_PAYOUT,
        FORAVPAYCALC_DAYS,
        FORAVPAYCALC_HOURS,
        AVPAYCALC_CALDAY,
        AVPAYCALC_DAY,
        AVPAYCALC_HOUR,
        DT_EDITED,
        CALC_VER
    )
    select
        null, 
        ID,
        IDS,
        IDSX,
        IDST,
        IS_TEMP,
        TYPE_TAG,
        IDP,
        IDAM,
        SNR,
        FNAME,
        LNAME,
        POSITION_TITLE,
        TERRITORIAL_CODE,
        CALENDAR_DAYS,
        CALENDAR_DAYS_USE,
        MONTH_WORKDAYS,
        MONTH_WORKHOURS,
        PLAN_DAYS,
        PLAN_HOURS,
        PLAN_HOURS_NIGHT,
        PLAN_HOURS_OVERTIME,
        FACT_DAYS,
        FACT_HOURS,
        FACT_HOURS_NIGHT,
        FACT_HOURS_OVERTIME,
        PLAN_WORK_DAYS,
        PLAN_WORK_HOURS,
        PLAN_WORK_HOURS_NIGHT,
        PLAN_WORK_HOURS_OVERTIME,
        FACT_WORK_DAYS,
        FACT_WORK_HOURS,
        FACT_WORK_HOURS_NIGHT,
        FACT_WORK_HOURS_OVERTIME,
        PLAN_HOLIDAYS_DAYS,
        PLAN_HOLIDAYS_HOURS,
        PLAN_HOLIDAYS_HOURS_NIGHT,
        PLAN_HOLIDAYS_HOURS_OVERTIME,
        FACT_HOLIDAYS_DAYS,
        FACT_HOLIDAYS_HOURS,
        FACT_HOLIDAYS_HOURS_NIGHT,
        FACT_HOLIDAYS_HOURS_OVERTIME,
        SALARY,
        SALARY_DAY,
        SALARY_NIGHT,
        SALARY_OVERTIME,
        SALARY_HOLIDAYS_DAY,
        SALARY_HOLIDAYS_NIGHT,
        SALARY_HOLIDAYS_OVERTIME,
        SALARY_PAID_HOLIDAYS_DAY,
        SALARY_PAID_HOLIDAYS_NIGHT,
        SALARY_PIECEWORK,
        SICKDAYS,
        SICKDAYS_PAY,
        ACCIDENT_DAYS,
        ACCIDENT_PAY,
        AVERAGE_INCOME_DAYS,
        AVERAGE_INCOME_PAY,
        FACT_AVPAY_FREE_DAYS,
        FACT_AVPAY_FREE_HOURS,
        FACT_AVPAY_WORK_DAYS,
        FACT_AVPAY_WORKINHOLIDAYS,
        FACT_AVPAY_HOURS,
        FACT_AVPAY_HOURS_OVERTIME,
        FACT_AVPAY_HOLIDAYS_HOURS,
        FACT_AVPAY_HOLIDAYS_HOURS_OVERT,
        SALARY_AVPAY_FREE_DAYS,
        SALARY_AVPAY_WORK_DAYS,
        SALARY_AVPAY_WORK_DAYS_OVERTIME,
        SALARY_AVPAY_HOLIDAYS,
        SALARY_AVPAY_HOLIDAYS_OVERTIME,
        BUSINESS_TRIP_DAYS,
        BUSINESS_TRIP_PAY,
        PAID_HOLIDAYS,
        PAID_HOLIDAYS_PAY,
        VACATION_DAYS_CURRENT,
        VACATION_DAYS_NEXT,
        VACATION_HOURS_CURRENT,
        VACATION_HOURS_NEXT,
        VACATION_PAY_CURRENT,
        VACATION_PAY_NEXT,
        VACATION_DNS_NEXT,
        VACATION_DDS_NEXT,
        VACATION_IIN_NEXT,
        VACATION_IIN_REDUCE_NEXT,
        VACATION_CASH_NEXT,
        VACATION_PAY_PREV,
        VACATION_DNS_PREV,
        VACATION_DDS_PREV,
        VACATION_IIN_PREV,
        VACATION_DAYS_COMP,
        VACATION_PAY_COMP,
        PLUS_TAXED,
        PLUS_NOTTAXED,
        PLUS_NOSAI,
        PLUS_AUTHORS_FEES,
        MINUS_BEFORE_IIN,
        MINUS_AFTER_IIN,
        PLUS_PF_NOTTAXED,
        PLUS_PF_TAXED,
        PLUS_LI_NOTTAXED,
        PLUS_LI_TAXED,
        PLUS_HI_NOTTAXED,
        PLUS_HI_TAXED,
        PLUS_NP_TAXED,
        PLUS_NP_NOSAI,
        PLUS_NP_NOTTAXED,
        TOTAL_BEFORE_TAXES,
        ADJUSTED_AMOUNT,
        AMOUNT_BEFORE_SN,
        AMOUNT_BEFORE_SN_REVERSE,
        RATE_DNSN,
        RATE_DDSN,
        DNSN_AMOUNT,
        DDSN_AMOUNT,
        SN_AMOUNT,
        DNSN_AMOUNT_REVERSE,
        DDSN_AMOUNT_REVERSE,
        SN_MAX_AMOUNT,
        IIN_EXEMPT_UNTAXED_MINIMUM0,
        IIN_EXEMPT_DEPENDANTS0,
        IIN_EXEMPT_RETALIATION0,
        IIN_EXEMPT_INVALIDITY0,
        IIN_EXEMPT_NATIONAL_MOVEMENT0,
        IIN_EXEMPT_UNTAXED_MINIMUM,
        IIN_EXEMPT_DEPENDANTS,
        IIN_EXEMPT_RETALIATION,
        IIN_EXEMPT_INVALIDITY,
        IIN_EXEMPT_NATIONAL_MOVEMENT,
        IIN_EXEMPT_EXPENSES,
        IIN_EXEMPT_2TP,
        IIN_EXEMPT_20,
        IIN_EXEMPT_2,
        AMOUNT_BEFORE_IIN,
        AMOUNT_BEFORE_IIN_REVERSE,
        RATE_IIN,
        RATE_IIN2,
        IIN_AMOUNT,
        IIN_AMOUNT_REVERSE,
        URVN_AMAOUNT,
        PLUS_NOT_PAID,
        VACATION_ADVANCE_CURRENT,
        VACATION_ADVANCE_NEXT,
        VACATION_ADVANCE_PREV,
        ADVANCE,
        PAY0,
        PAY,
        PAYT,
        PAY_DATE,
        COMMENTS,
        WITHHOLD_FROM_PAY,
        FORAVPAYCALC_BRUTO,
        FORAVPAYCALC_PAYOUT,
        FORAVPAYCALC_DAYS,
        FORAVPAYCALC_HOURS,
        AVPAYCALC_CALDAY,
        AVPAYCALC_DAY,
        AVPAYCALC_HOUR,
        DT_EDITED,
        CALC_VER
    from a_salary_sheets_r
    where a_salary_sheets_r.id = :PID;

end^


ALTER PROCEDURE SP_A_MAKE_SALARY_SHEET_R_HIST_2 (
    PIDSX INTEGER,
    PDTCUR TIMESTAMP,
    PSKIP_INTERVAL FLOAT)
AS
declare variable V_LAST_DT TIMESTAMP;
    declare variable V_DIFF_DT FLOAT;
    declare variable V_ID INTEGER;
    declare variable V_IDH INTEGER;
    declare variable V_EQ INTEGER;
    declare variable V_CT INTEGER;
begin
    select count(a_salary_sheets_r.idsx)
    from a_salary_sheets_r
    where a_salary_sheets_r.idsx = :PIDSX
    into :V_CT;
    
    if(V_CT = 0) then exit;

    select max(a_salary_sheets_r_hist.dt_edited)
    from a_salary_sheets_r_hist
    where a_salary_sheets_r_hist.idsx = :PIDSX
    into :V_LAST_DT;

    if(V_LAST_DT is not null) then
    begin
        if(pdtcur < V_LAST_DT) then exit;
        V_DIFF_DT = pdtcur - V_LAST_DT;
        if(V_DIFF_DT < PSKIP_INTERVAL) then exit;
    end

    insert into a_salary_sheets_r_hist
    (
        IDH,
        ID,
        IDS,
        IDSX,
        IDST,
        IS_TEMP,
        TYPE_TAG,
        IDP,
        IDAM,
        SNR,
        FNAME,
        LNAME,
        POSITION_TITLE,
        TERRITORIAL_CODE,
        CALENDAR_DAYS,
        CALENDAR_DAYS_USE,
        MONTH_WORKDAYS,
        MONTH_WORKHOURS,
        PLAN_DAYS,
        PLAN_HOURS,
        PLAN_HOURS_NIGHT,
        PLAN_HOURS_OVERTIME,
        FACT_DAYS,
        FACT_HOURS,
        FACT_HOURS_NIGHT,
        FACT_HOURS_OVERTIME,
        PLAN_WORK_DAYS,
        PLAN_WORK_HOURS,
        PLAN_WORK_HOURS_NIGHT,
        PLAN_WORK_HOURS_OVERTIME,
        FACT_WORK_DAYS,
        FACT_WORK_HOURS,
        FACT_WORK_HOURS_NIGHT,
        FACT_WORK_HOURS_OVERTIME,
        PLAN_HOLIDAYS_DAYS,
        PLAN_HOLIDAYS_HOURS,
        PLAN_HOLIDAYS_HOURS_NIGHT,
        PLAN_HOLIDAYS_HOURS_OVERTIME,
        FACT_HOLIDAYS_DAYS,
        FACT_HOLIDAYS_HOURS,
        FACT_HOLIDAYS_HOURS_NIGHT,
        FACT_HOLIDAYS_HOURS_OVERTIME,
        SALARY,
        SALARY_DAY,
        SALARY_NIGHT,
        SALARY_OVERTIME,
        SALARY_HOLIDAYS_DAY,
        SALARY_HOLIDAYS_NIGHT,
        SALARY_HOLIDAYS_OVERTIME,
        SALARY_PAID_HOLIDAYS_DAY,
        SALARY_PAID_HOLIDAYS_NIGHT,
        SALARY_PIECEWORK,
        SICKDAYS,
        SICKDAYS_PAY,
        ACCIDENT_DAYS,
        ACCIDENT_PAY,
        AVERAGE_INCOME_DAYS,
        AVERAGE_INCOME_PAY,
        FACT_AVPAY_FREE_DAYS,
        FACT_AVPAY_FREE_HOURS,
        FACT_AVPAY_WORK_DAYS,
        FACT_AVPAY_WORKINHOLIDAYS,
        FACT_AVPAY_HOURS,
        FACT_AVPAY_HOURS_OVERTIME,
        FACT_AVPAY_HOLIDAYS_HOURS,
        FACT_AVPAY_HOLIDAYS_HOURS_OVERT,
        SALARY_AVPAY_FREE_DAYS,
        SALARY_AVPAY_WORK_DAYS,
        SALARY_AVPAY_WORK_DAYS_OVERTIME,
        SALARY_AVPAY_HOLIDAYS,
        SALARY_AVPAY_HOLIDAYS_OVERTIME,
        BUSINESS_TRIP_DAYS,
        BUSINESS_TRIP_PAY,
        PAID_HOLIDAYS,
        PAID_HOLIDAYS_PAY,
        VACATION_DAYS_CURRENT,
        VACATION_DAYS_NEXT,
        VACATION_HOURS_CURRENT,
        VACATION_HOURS_NEXT,
        VACATION_PAY_CURRENT,
        VACATION_PAY_NEXT,
        VACATION_DNS_NEXT,
        VACATION_DDS_NEXT,
        VACATION_IIN_NEXT,
        VACATION_IIN_REDUCE_NEXT,
        VACATION_CASH_NEXT,
        VACATION_PAY_PREV,
        VACATION_DNS_PREV,
        VACATION_DDS_PREV,
        VACATION_IIN_PREV,
        VACATION_DAYS_COMP,
        VACATION_PAY_COMP,
        PLUS_TAXED,
        PLUS_NOTTAXED,
        PLUS_NOSAI,
        PLUS_AUTHORS_FEES,
        MINUS_BEFORE_IIN,
        MINUS_AFTER_IIN,
        PLUS_PF_NOTTAXED,
        PLUS_PF_TAXED,
        PLUS_LI_NOTTAXED,
        PLUS_LI_TAXED,
        PLUS_HI_NOTTAXED,
        PLUS_HI_TAXED,
        PLUS_NP_TAXED,
        PLUS_NP_NOSAI,
        PLUS_NP_NOTTAXED,
        TOTAL_BEFORE_TAXES,
        ADJUSTED_AMOUNT,
        AMOUNT_BEFORE_SN,
        AMOUNT_BEFORE_SN_REVERSE,
        RATE_DNSN,
        RATE_DDSN,
        DNSN_AMOUNT,
        DDSN_AMOUNT,
        SN_AMOUNT,
        DNSN_AMOUNT_REVERSE,
        DDSN_AMOUNT_REVERSE,
        SN_MAX_AMOUNT,
        IIN_EXEMPT_UNTAXED_MINIMUM0,
        IIN_EXEMPT_DEPENDANTS0,
        IIN_EXEMPT_RETALIATION0,
        IIN_EXEMPT_INVALIDITY0,
        IIN_EXEMPT_NATIONAL_MOVEMENT0,
        IIN_EXEMPT_UNTAXED_MINIMUM,
        IIN_EXEMPT_DEPENDANTS,
        IIN_EXEMPT_RETALIATION,
        IIN_EXEMPT_INVALIDITY,
        IIN_EXEMPT_NATIONAL_MOVEMENT,
        IIN_EXEMPT_EXPENSES,
        IIN_EXEMPT_2TP,
        IIN_EXEMPT_20,
        IIN_EXEMPT_2,
        AMOUNT_BEFORE_IIN,
        AMOUNT_BEFORE_IIN_REVERSE,
        RATE_IIN,
        RATE_IIN2,
        IIN_AMOUNT,
        IIN_AMOUNT_REVERSE,
        URVN_AMAOUNT,
        PLUS_NOT_PAID,
        VACATION_ADVANCE_CURRENT,
        VACATION_ADVANCE_NEXT,
        VACATION_ADVANCE_PREV,
        ADVANCE,
        PAY0,
        PAY,
        PAYT,
        PAY_DATE,
        COMMENTS,
        WITHHOLD_FROM_PAY,
        FORAVPAYCALC_BRUTO,
        FORAVPAYCALC_PAYOUT,
        FORAVPAYCALC_DAYS,
        FORAVPAYCALC_HOURS,
        AVPAYCALC_CALDAY,
        AVPAYCALC_DAY,
        AVPAYCALC_HOUR,
        DT_EDITED,
        CALC_VER
    )
    select
        null, 
        ID,
        IDS,
        IDSX,
        IDST,
        IS_TEMP,
        TYPE_TAG,
        IDP,
        IDAM,
        SNR,
        FNAME,
        LNAME,
        POSITION_TITLE,
        TERRITORIAL_CODE,
        CALENDAR_DAYS,
        CALENDAR_DAYS_USE,
        MONTH_WORKDAYS,
        MONTH_WORKHOURS,
        PLAN_DAYS,
        PLAN_HOURS,
        PLAN_HOURS_NIGHT,
        PLAN_HOURS_OVERTIME,
        FACT_DAYS,
        FACT_HOURS,
        FACT_HOURS_NIGHT,
        FACT_HOURS_OVERTIME,
        PLAN_WORK_DAYS,
        PLAN_WORK_HOURS,
        PLAN_WORK_HOURS_NIGHT,
        PLAN_WORK_HOURS_OVERTIME,
        FACT_WORK_DAYS,
        FACT_WORK_HOURS,
        FACT_WORK_HOURS_NIGHT,
        FACT_WORK_HOURS_OVERTIME,
        PLAN_HOLIDAYS_DAYS,
        PLAN_HOLIDAYS_HOURS,
        PLAN_HOLIDAYS_HOURS_NIGHT,
        PLAN_HOLIDAYS_HOURS_OVERTIME,
        FACT_HOLIDAYS_DAYS,
        FACT_HOLIDAYS_HOURS,
        FACT_HOLIDAYS_HOURS_NIGHT,
        FACT_HOLIDAYS_HOURS_OVERTIME,
        SALARY,
        SALARY_DAY,
        SALARY_NIGHT,
        SALARY_OVERTIME,
        SALARY_HOLIDAYS_DAY,
        SALARY_HOLIDAYS_NIGHT,
        SALARY_HOLIDAYS_OVERTIME,
        SALARY_PAID_HOLIDAYS_DAY,
        SALARY_PAID_HOLIDAYS_NIGHT,
        SALARY_PIECEWORK,
        SICKDAYS,
        SICKDAYS_PAY,
        ACCIDENT_DAYS,
        ACCIDENT_PAY,
        AVERAGE_INCOME_DAYS,
        AVERAGE_INCOME_PAY,
        FACT_AVPAY_FREE_DAYS,
        FACT_AVPAY_FREE_HOURS,
        FACT_AVPAY_WORK_DAYS,
        FACT_AVPAY_WORKINHOLIDAYS,
        FACT_AVPAY_HOURS,
        FACT_AVPAY_HOURS_OVERTIME,
        FACT_AVPAY_HOLIDAYS_HOURS,
        FACT_AVPAY_HOLIDAYS_HOURS_OVERT,
        SALARY_AVPAY_FREE_DAYS,
        SALARY_AVPAY_WORK_DAYS,
        SALARY_AVPAY_WORK_DAYS_OVERTIME,
        SALARY_AVPAY_HOLIDAYS,
        SALARY_AVPAY_HOLIDAYS_OVERTIME,
        BUSINESS_TRIP_DAYS,
        BUSINESS_TRIP_PAY,
        PAID_HOLIDAYS,
        PAID_HOLIDAYS_PAY,
        VACATION_DAYS_CURRENT,
        VACATION_DAYS_NEXT,
        VACATION_HOURS_CURRENT,
        VACATION_HOURS_NEXT,
        VACATION_PAY_CURRENT,
        VACATION_PAY_NEXT,
        VACATION_DNS_NEXT,
        VACATION_DDS_NEXT,
        VACATION_IIN_NEXT,
        VACATION_IIN_REDUCE_NEXT,
        VACATION_CASH_NEXT,
        VACATION_PAY_PREV,
        VACATION_DNS_PREV,
        VACATION_DDS_PREV,
        VACATION_IIN_PREV,
        VACATION_DAYS_COMP,
        VACATION_PAY_COMP,
        PLUS_TAXED,
        PLUS_NOTTAXED,
        PLUS_NOSAI,
        PLUS_AUTHORS_FEES,
        MINUS_BEFORE_IIN,
        MINUS_AFTER_IIN,
        PLUS_PF_NOTTAXED,
        PLUS_PF_TAXED,
        PLUS_LI_NOTTAXED,
        PLUS_LI_TAXED,
        PLUS_HI_NOTTAXED,
        PLUS_HI_TAXED,
        PLUS_NP_TAXED,
        PLUS_NP_NOSAI,
        PLUS_NP_NOTTAXED,
        TOTAL_BEFORE_TAXES,
        ADJUSTED_AMOUNT,
        AMOUNT_BEFORE_SN,
        AMOUNT_BEFORE_SN_REVERSE,
        RATE_DNSN,
        RATE_DDSN,
        DNSN_AMOUNT,
        DDSN_AMOUNT,
        SN_AMOUNT,
        DNSN_AMOUNT_REVERSE,
        DDSN_AMOUNT_REVERSE,
        SN_MAX_AMOUNT,
        IIN_EXEMPT_UNTAXED_MINIMUM0,
        IIN_EXEMPT_DEPENDANTS0,
        IIN_EXEMPT_RETALIATION0,
        IIN_EXEMPT_INVALIDITY0,
        IIN_EXEMPT_NATIONAL_MOVEMENT0,
        IIN_EXEMPT_UNTAXED_MINIMUM,
        IIN_EXEMPT_DEPENDANTS,
        IIN_EXEMPT_RETALIATION,
        IIN_EXEMPT_INVALIDITY,
        IIN_EXEMPT_NATIONAL_MOVEMENT,
        IIN_EXEMPT_EXPENSES,
        IIN_EXEMPT_2TP,
        IIN_EXEMPT_20,
        IIN_EXEMPT_2,
        AMOUNT_BEFORE_IIN,
        AMOUNT_BEFORE_IIN_REVERSE,
        RATE_IIN,
        RATE_IIN2,
        IIN_AMOUNT,
        IIN_AMOUNT_REVERSE,
        URVN_AMAOUNT,
        PLUS_NOT_PAID,
        VACATION_ADVANCE_CURRENT,
        VACATION_ADVANCE_NEXT,
        VACATION_ADVANCE_PREV,
        ADVANCE,
        PAY0,
        PAY,
        PAYT,
        PAY_DATE,
        COMMENTS,
        WITHHOLD_FROM_PAY,
        FORAVPAYCALC_BRUTO,
        FORAVPAYCALC_PAYOUT,
        FORAVPAYCALC_DAYS,
        FORAVPAYCALC_HOURS,
        AVPAYCALC_CALDAY,
        AVPAYCALC_DAY,
        AVPAYCALC_HOUR,
        DT_EDITED,
        CALC_VER
    from a_salary_sheets_r
    where a_salary_sheets_r.idsx = :PIDSX;

end^


ALTER PROCEDURE SP_A_PAY_MATCHLISTS_01 (
    PIDAM INTEGER,
    PPAY DOM_MONEY,
    PDATE DATE,
    PDATET DATE,
    PIDPSH INTEGER)
RETURNS (
    IDP INTEGER,
    IDAM INTEGER,
    TP INTEGER,
    DT DATE,
    PAYT DOM_MONEY,
    PAY DOM_MONEY,
    IIN DOM_MONEY,
    ADVANCE DOM_MONEY)
AS
declare variable xpay DOM_MONEY;
    declare variable xadvance DOM_MONEY;
    declare variable xiin DOM_MONEY;

    declare variable tpay DOM_MONEY;
    declare variable tadvance DOM_MONEY;
    declare variable tiin DOM_MONEY;

    declare variable firstfound integer;
begin
    
    idp = 0;
    idam = pidam;

    select
         sum(a_paylists_r.pay) as spay,
         sum(a_paylists_r.iin) as siin,
         sum(a_paylists_r.advance) as sadvance

    from a_paylists join a_paylists_r on a_paylists.id = a_paylists_r.ids
    where ((a_paylists.dt < :pdate) or (a_paylists.dt = :pdate and a_paylists.id < :PIDPSH))
        and a_paylists_r.idam = :pidam
    into :xpay, :xadvance, :xiin;

    if(xpay is null) then xpay = 0.0;
    if(xadvance is null) then xadvance = 0.0;
    if(xiin is null) then xiin = 0.0;

    tpay = 0.0;
    tiin = 0.0;
    tadvance = 0.0;

    firstfound = 0;

    for select
        gtp,
        sdt,
        spay,
        siin,
        sadvance
    from
    (
        select
            1 as gtp,
            null as sdt,
            pay0 as spay,
            iin0 as siin,
            advance as sadvance
        from a_positions
        where id = :pidam
    
        union all
    
        select
            2 as gtp,
            a_salary_sheets.dt2 as sdt,
            a_salary_sheets_r.pay as spay,
            a_salary_sheets_r.iin_amount as siin,
            a_salary_sheets_r.advance as sadvance
    
        from a_salary_sheets join a_salary_sheets_r on a_salary_sheets.id = a_salary_sheets_r.ids
        where
            a_salary_sheets_r.idam = :pidam and
            a_salary_sheets.kind = 0 and
            a_salary_sheets.dt2 <= :pdate and
            a_salary_sheets.is_temp = 0
    
        union all

        select
            3 as gtp,
            a_salary_sheets.dt2 as sdt,
            0.0 as spay,
            0.0 as siin,
            a_salary_sheets_r.advance + a_salary_sheets_r.pay as sadvance
    
        from a_salary_sheets join a_salary_sheets_r on a_salary_sheets.id = a_salary_sheets_r.ids
        where
            a_salary_sheets_r.idam = :pidam and
            a_salary_sheets.kind = 0 and
            a_salary_sheets.dt2 between :pdatet and :pdate and
            a_salary_sheets.is_temp = 1
    )
    order by gtp, sdt

    into
        :tp, :dt, :pay, :iin, :advance
    do
    begin
        tpay = tpay + pay;
        tiin = tiin + iin;
        tadvance = tadvance + advance;
        payt = tpay - xpay;

        if(tpay > xpay)
        then begin
            if(tpay >= (xpay + ppay))
            then begin
                suspend;
                break;
            end
            suspend;
        end

    end
end^


ALTER PROCEDURE SP_A_PAY_MATCHLISTS_02 (
    PIDAM INTEGER,
    PPAY DOM_MONEY,
    PDATE DATE,
    PIDPSH INTEGER)
RETURNS (
    IDP INTEGER,
    IDAM INTEGER,
    DT1 DATE,
    DT2 DATE,
    IDSHR1 INTEGER,
    IDSHR2 INTEGER,
    PAY0 DOM_MONEY,
    PAY1 DOM_MONEY,
    PAY2 DOM_MONEY,
    R1 FLOAT,
    R2 FLOAT,
    IIN DOM_MONEY)
AS
declare variable stp integer;
    declare variable sidshr integer;
    declare variable sdt1 date;
    declare variable sdt2 date;
    declare variable spay DOM_MONEY;
    declare variable siin DOM_MONEY;

    declare variable xpay DOM_MONEY;
    declare variable xadvance DOM_MONEY;
    declare variable xiin DOM_MONEY;

    declare variable tpay DOM_MONEY;
    declare variable tadvance DOM_MONEY;
    declare variable tiin DOM_MONEY;

    declare variable payt DOM_MONEY;

    declare variable firstfound integer;
    declare variable infirst integer;
begin
    
    idp = 0;
    idam = pidam;

    select
         sum(a_paylists_r.pay) as spay
    from a_paylists join a_paylists_r on a_paylists.id = a_paylists_r.ids
    where ((a_paylists.dt < :pdate) or (a_paylists.dt = :pdate and a_paylists.id < :PIDPSH))
        and a_paylists_r.idam = :pidam
    into :xpay;

    if(xpay is null) then xpay = 0.0;
    if(xadvance is null) then xadvance = 0.0;
    if(xiin is null) then xiin = 0.0;

    pay1 = 0.0;
    pay2 = 0.0;
    pay0 = 0.0;
    r1 = 0.0;
    r2 = 0.0;

    tpay = 0.0;
    tiin = 0.0;
    tadvance = 0.0;

    firstfound = 0;
    infirst = 0;

    select
        pay0 as spay,
        iin0 as siin
    from a_positions
    where id = :pidam
    into :spay, :siin;

    tpay = tpay + spay;
    tiin = tiin + siin;

    if(tpay > xpay)
    then begin
        payt = tpay - xpay;
        pay0 = minvalue(payt, ppay);
        iin = siin * pay0 / spay;
        if(tpay >= (xpay + ppay))
        then begin
            suspend;
            exit;
        end
    end


    for select
        sidshr,
        sdt1,
        sdt2,
        spay,
        siin
    from
    (
        select
            a_salary_sheets_r.id as sidshr,
            a_salary_sheets.dt1 as sdt1,
            a_salary_sheets.dt2 as sdt2,
            a_salary_sheets_r.pay as spay,
            a_salary_sheets_r.iin_amount as siin

        from a_salary_sheets join a_salary_sheets_r on a_salary_sheets.id = a_salary_sheets_r.ids
        where
            a_salary_sheets_r.idam = :pidam and
            a_salary_sheets.kind = 0 and
            a_salary_sheets.dt2 <= :pdate and
            a_salary_sheets.is_temp = 0 and
            a_salary_sheets_r.pay > 0.0
    
    )
    order by sdt1

    into
        :sidshr, :sdt1, :sdt2, :spay, :siin
    do
    begin
        tpay = tpay + spay;
        tiin = tiin + siin;
        infirst = 0;

        if(tpay > xpay)
        then begin
            payt = tpay - xpay;
            if(firstfound = 0)
            then begin
                firstfound = 1;
                infirst = 1;
                dt1 = :sdt1;
                IDSHR1 = sidshr;
                pay1 = minvalue(payt, ppay);
                r1 = pay1 / spay;
                if(pay1 = spay) then
                    iin = iin + siin;
                if(tpay >= (xpay + ppay))
                then begin
                    dt2 = :sdt2;
                    break;
                end
            end
            
            if(tpay >= (xpay + ppay))
            then begin
                payt = spay - (tpay - xpay - ppay);
                dt2 = :sdt2;
                IDSHR2 = sidshr;
                pay2 = payt;
                r2 = pay2 / spay;
                if(pay2 = spay) then
                    iin = iin + siin;
                break;
            end

            if(infirst = 0) then iin = iin + siin;
    
        end
    end

    if(firstfound = 0)
    then begin

    end
    else begin
        if(tpay < xpay + ppay)
        then begin
            dt2 = :sdt2;
            IDSHR2 = sidshr;
            pay2 = spay;
            r2 = 1.0;
        end
    end

    suspend;
end^


ALTER PROCEDURE SP_A_PAY_MATCHLISTS_02A (
    PIDAM INTEGER,
    PPAY DOM_MONEY,
    PDATE DATE,
    PIDPSH INTEGER)
RETURNS (
    IDP INTEGER,
    IDAM INTEGER,
    DT1 DATE,
    DT2 DATE,
    PAY0 DOM_MONEY,
    PAY1 DOM_MONEY,
    PAY2 DOM_MONEY,
    R1 FLOAT,
    R2 FLOAT,
    IIN DOM_MONEY,
    PAY_TAXED_1 DOM_MONEY,
    PAY_NOSAI_1 DOM_MONEY,
    PAY_NOTTAXED_1 DOM_MONEY,
    UNTAXED_MINIMUM_1 DOM_MONEY,
    IINEX_DEPENDANTS_1 DOM_MONEY,
    IINEX2_1 DOM_MONEY,
    IINEX2_TP_1 SMALLINT,
    DNSI_1 DOM_MONEY,
    PFNT_1 DOM_MONEY,
    LINT_1 DOM_MONEY,
    HINT_1 DOM_MONEY,
    IINEX_EXP_1 DOM_MONEY,
    IIN_1 DOM_MONEY,
    PAY_TAXED_2 DOM_MONEY,
    PAY_NOSAI_2 DOM_MONEY,
    PAY_NOTTAXED_2 DOM_MONEY,
    UNTAXED_MINIMUM_2 DOM_MONEY,
    IINEX_DEPENDANTS_2 DOM_MONEY,
    IINEX2_2 DOM_MONEY,
    IINEX2_TP_2 SMALLINT,
    DNSI_2 DOM_MONEY,
    PFNT_2 DOM_MONEY,
    LINT_2 DOM_MONEY,
    HINT_2 DOM_MONEY,
    IINEX_EXP_2 DOM_MONEY,
    IIN_2 DOM_MONEY)
AS
declare variable stp integer;
    declare variable sidshr integer;
    declare variable sidshr1 integer;
    declare variable sidshr2 integer;
    declare variable sdt1 date;
    declare variable sdt2 date;
    declare variable spay DOM_MONEY;
    declare variable siin DOM_MONEY;

    declare variable xpay DOM_MONEY;
    declare variable xadvance DOM_MONEY;
    declare variable xiin DOM_MONEY;

    declare variable tpay DOM_MONEY;
    declare variable tadvance DOM_MONEY;
    declare variable tiin DOM_MONEY;

    declare variable payt DOM_MONEY;

    declare variable firstfound integer;
    declare variable infirst integer;
begin
    
    idp = 0;
    idam = pidam;
    sidshr1 = null;
    sidshr2 = null;

    PAY_TAXED_1 = 0.0;
    PAY_NOSAI_1 = 0.0;
    PAY_NOTTAXED_1 = 0.0;
    UNTAXED_MINIMUM_1 = 0.0;
    IINEX_DEPENDANTS_1 = 0.0;
    IINEX2_1 = 0.0;
    IINEX2_TP_1 = 0;
    DNSI_1 = 0.0;
    PFNT_1 = 0.0;
    LINT_1 = 0.0;
    HINT_1 = 0.0;
    IINEX_EXP_1 = 0.0;
    IIN_1 = 0.0;
    PAY_TAXED_2 = 0.0;
    PAY_NOSAI_2 = 0.0;
    PAY_NOTTAXED_2 = 0.0;
    UNTAXED_MINIMUM_2 = 0.0;
    IINEX_DEPENDANTS_2 = 0.0;
    IINEX2_2 = 0;
    IINEX2_TP_1 = 0;
    DNSI_2 = 0.0;
    PFNT_2 = 0.0;
    LINT_2 = 0.0;
    HINT_2 = 0.0;
    IINEX_EXP_2 = 0.0;
    IIN_2 = 0.0;


    select
         sum(a_paylists_r.pay) as spay
    from a_paylists join a_paylists_r on a_paylists.id = a_paylists_r.ids
    where ((a_paylists.dt < :pdate) or (a_paylists.dt = :pdate and a_paylists.id < :PIDPSH))
        and a_paylists_r.idam = :pidam
    into :xpay;

    if(xpay is null) then xpay = 0.0;
    if(xadvance is null) then xadvance = 0.0;
    if(xiin is null) then xiin = 0.0;

    pay1 = 0.0;
    pay2 = 0.0;
    pay0 = 0.0;
    r1 = 0.0;
    r2 = 0.0;

    tpay = 0.0;
    tiin = 0.0;
    tadvance = 0.0;

    firstfound = 0;
    infirst = 0;

    select
        pay0 as spay,
        iin0 as siin
    from a_positions
    where id = :pidam
    into :spay, :siin;

    tpay = tpay + spay;
    tiin = tiin + siin;

    if(tpay > xpay)
    then begin
        payt = tpay - xpay;
        pay0 = minvalue(payt, ppay);
        iin = siin * pay0 / spay;
        if(tpay >= (xpay + ppay))
        then begin
            suspend;
            exit;
        end
    end


    for select
        sidshr,
        sdt1,
        sdt2,
        spay,
        siin
    from
    (
        select
            a_salary_sheets_r.id as sidshr,
            a_salary_sheets.dt1 as sdt1,
            a_salary_sheets.dt2 as sdt2,
            a_salary_sheets_r.pay as spay,
            a_salary_sheets_r.iin_amount as siin

        from a_salary_sheets join a_salary_sheets_r on a_salary_sheets.id = a_salary_sheets_r.ids
        where
            a_salary_sheets_r.idam = :pidam and
            a_salary_sheets.kind = 0 and
            a_salary_sheets.dt2 <= :pdate and
            a_salary_sheets.is_temp = 0 and
            a_salary_sheets_r.pay > 0.0
    
    )
    order by sdt1

    into
        :sidshr, :sdt1, :sdt2, :spay, :siin
    do
    begin
        tpay = tpay + spay;
        tiin = tiin + siin;
        infirst = 0;

        if(tpay > xpay)
        then begin
            payt = tpay - xpay;
            if(firstfound = 0)
            then begin
                firstfound = 1;
                infirst = 1;
                dt1 = :sdt1;
                pay1 = minvalue(payt, ppay);
                r1 = pay1 / spay;
                iin = iin + siin * r1;

                sidshr1 = sidshr;

                if(tpay >= (xpay + ppay))
                then begin
                    dt2 = :sdt2;
                    break;
                end
            end
            
            if(tpay >= (xpay + ppay))
            then begin
                payt = spay - (tpay - xpay - ppay);
                dt2 = :sdt2;
                pay2 = payt;
                r2 = pay2 / spay;
                iin = iin + siin * r2;

                sidshr2 = sidshr;
                break;
            end

            if(infirst = 0) then iin = iin + siin;
    
        end
    end

    if (firstfound = 0) then
    begin

    end
    else begin
        if(tpay < xpay + ppay)
        then begin
            dt2 = :sdt2;
            pay2 = spay;
            r2 = 1.0;

            sidshr2 = sidshr;
        end
    end

    if (sidshr1 is not null) then
    begin
        execute procedure sp_a_pay_x_1
        (:pidam, :pidpsh, :sidshr1, :pdate, :pay1)
        returning_values
            PAY_TAXED_1,
            PAY_NOSAI_1,
            PAY_NOTTAXED_1,
            UNTAXED_MINIMUM_1,
            IINEX_DEPENDANTS_1,
            IINEX2_1,
            IINEX2_TP_1,
            DNSI_1,
            PFNT_1,
            LINT_1,
            HINT_1,
            IINEX_EXP_1,
            IIN_1;
    end

    if (sidshr2 is not null) then
    begin
        execute procedure sp_a_pay_x_1
        (:pidam, :pidpsh, :sidshr2, :pdate, :pay2)
        returning_values
            PAY_TAXED_2,
            PAY_NOSAI_2,
            PAY_NOTTAXED_2,
            UNTAXED_MINIMUM_2,
            IINEX_DEPENDANTS_2,
            IINEX2_2,
            IINEX2_TP_2,
            DNSI_2,
            PFNT_2,
            LINT_2,
            HINT_2,
            IINEX_EXP_2,
            IIN_2;
    end

    suspend;
end^


ALTER PROCEDURE SP_A_PAY_MATCHLISTS_03 (
    PIDS INTEGER,
    PDATE DATE,
    PDATET DATE)
RETURNS (
    IDP INTEGER,
    IDAM INTEGER,
    DT1 DATE,
    DT2 DATE,
    IDSHR1 INTEGER,
    IDSHR2 INTEGER,
    PAY0 DOM_MONEY,
    PAY1 DOM_MONEY,
    PAY2 DOM_MONEY,
    R1 FLOAT,
    R2 FLOAT,
    IIN DOM_MONEY)
AS
declare variable sidp integer;
    declare variable sidam integer;
    declare variable spay DOM_MONEY;
begin
    for select
        a_paylists_r.idp as sidp,
        a_paylists_r.idam as sidam,
        a_paylists_r.pay as spay
    from a_paylists_r
    where a_paylists_r.ids = :pids
    order by a_paylists_r.snr

    into :sidp, :sidam, :spay

    do begin
        execute procedure sp_a_pay_matchlists_02
            :sidam, :spay, :pdate, :pids
        returning_values
            :IDP, :IDAM, :DT1, :DT2, :IDSHR1, IDSHR2, :PAY0, :PAY1, :PAY2,
            :R1, :R2, :IIN;

        IDP = sidp;
        idam = sidam;

        suspend;

    end

end^


ALTER PROCEDURE SP_A_PAY_MATCHLISTS_04 (
    PDATE DATE,
    PDATET DATE,
    PIDPSH INTEGER)
RETURNS (
    IDP INTEGER,
    IDAM INTEGER,
    DT1 DATE,
    DT2 DATE,
    IDSHR1 INTEGER,
    IDSHR2 INTEGER,
    PAY0 DOM_MONEY,
    PAY1 DOM_MONEY,
    PAY2 DOM_MONEY,
    R1 FLOAT,
    R2 FLOAT,
    IIN DOM_MONEY)
AS
declare variable sidp integer;
    declare variable sidam integer;
    declare variable spay DOM_MONEY;
begin
    for select
        a_paylists_r.idp as sidp,
        a_paylists_r.idam as sidam,
        a_paylists_r.pay as spay
    from a_paylists_r join a_paylists on a_paylists_r.ids = a_paylists.id
    where a_paylists.dt = :pdate and a_paylists.id = :pidpsh
    order by a_paylists_r.snr

    into :sidp, :sidam, :spay

    do begin
        execute procedure sp_a_pay_matchlists_02
            :sidam, :spay, :pdate, :pidpsh
        returning_values
            :IDP, :IDAM, :DT1, :DT2, :IDSHR1, IDSHR2, :PAY0, :PAY1, :PAY2,
            :R1, :R2, :IIN;

        IDP = sidp;
        idam = sidam;

        suspend;

    end

end^


ALTER PROCEDURE SP_A_PAY_MATCHLISTS_11 (
    PIDAM INTEGER,
    PIDSHR INTEGER,
    PDT DATE,
    PIDPSH INTEGER)
RETURNS (
    V_SHEET_DT1 DATE,
    V_SHEET_DT2 DATE,
    V_IIN_RATE DOM_MONEY,
    V_IIN_RATE2 DOM_MONEY,
    V_SI_RATE DOM_MONEY,
    V1_PAY_TAXED DOM_MONEY,
    V1_PAY_NOSAI DOM_MONEY,
    V1_PAY_NOTTAXED DOM_MONEY,
    V1_NOTPAID_TAXED DOM_MONEY,
    V1_NOTPAID_NOSAI DOM_MONEY,
    V1_NOTPAID_NOTTAXED DOM_MONEY,
    V1_DNSI DOM_MONEY,
    V1_UNTAXED_MINIMUM DOM_MONEY,
    V1_IINEX_DEPENDANTS DOM_MONEY,
    V1_IINEX2 DOM_MONEY,
    V1_IINEX2_TP SMALLINT,
    V1_PF_T DOM_MONEY,
    V1_LI_T DOM_MONEY,
    V1_HI_T DOM_MONEY,
    V1_PF_NT DOM_MONEY,
    V1_LI_NT DOM_MONEY,
    V1_HI_NT DOM_MONEY,
    V1_IINEX_EXP DOM_MONEY,
    V1_IIN DOM_MONEY,
    V1_PAY DOM_MONEY,
    V2_PAY_TAXED DOM_MONEY,
    V2_PAY_NOSAI DOM_MONEY,
    V2_PAY_NOTTAXED DOM_MONEY,
    V2_DNSI DOM_MONEY,
    V2_UNTAXED_MINIMUM DOM_MONEY,
    V2_IINEX_DEPENDANTS DOM_MONEY,
    V2_IINEX2 DOM_MONEY,
    V2_PF_NT DOM_MONEY,
    V2_LI_NT DOM_MONEY,
    V2_HI_NT DOM_MONEY,
    V2_IINEX_EXP DOM_MONEY,
    V2_IIN DOM_MONEY,
    V2_PAY DOM_MONEY)
AS
begin
    -- searching for salary sheet row
    select
        a_salary_sheets.dt1 as dt1,
        a_salary_sheets.dt2 as dt2,
        a_salary_sheets_r.rate_iin as rate_iin,
        a_salary_sheets_r.rate_iin2 as rate_iin2,
        a_salary_sheets_r.rate_dnsn as rate_dnsn,
        a_salary_sheets_r.salary +
            a_salary_sheets_r.plus_taxed +
            a_salary_sheets_r.plus_pf_taxed +
            a_salary_sheets_r.plus_li_taxed +
            a_salary_sheets_r.plus_hi_taxed +
            a_salary_sheets_r.vacation_pay_current +
            a_salary_sheets_r.sickdays_pay AS PAY_TAXED,

        a_salary_sheets_r.plus_nosai AS PAY_NOSAI,

        a_salary_sheets_r.plus_nottaxed +
            a_salary_sheets_r.plus_pf_nottaxed +
            a_salary_sheets_r.plus_li_nottaxed +
            a_salary_sheets_r.plus_hi_nottaxed AS PAY_NOOTTAXED,
        
        a_salary_sheets_r.plus_np_taxed,
        a_salary_sheets_r.plus_np_nosai,
        a_salary_sheets_r.plus_np_nottaxed,

        a_salary_sheets_r.dnsn_amount, 

        a_salary_sheets_r.iin_exempt_untaxed_minimum AS UNTAXED_MINIMUM,
        a_salary_sheets_r.iin_exempt_dependants AS IINEX_DEPENDANTS,
        a_salary_sheets_r.iin_exempt_2 AS IINEX2,
        a_salary_sheets_r.iin_exempt_2tp AS iinex2_tp,
        a_salary_sheets_r.plus_pf_taxed AS PF_T,
        a_salary_sheets_r.plus_li_taxed AS LI_T,
        a_salary_sheets_r.plus_hi_taxed AS HI_T,
        a_salary_sheets_r.plus_pf_nottaxed AS PF_NT,
        a_salary_sheets_r.plus_li_nottaxed AS LI_NT,
        a_salary_sheets_r.plus_hi_nottaxed AS HI_NT,
        a_salary_sheets_r.iin_exempt_expenses AS IINEX_EXP,
        a_salary_sheets_r.iin_amount AS IIN,
        a_salary_sheets_r.pay AS PAY

    from a_salary_sheets_r join a_salary_sheets
        on (a_salary_sheets_r.id = :PIDSHR and
            a_salary_sheets_r.ids = a_salary_sheets.id)

    where a_salary_sheets_r.id = :PIDSHR
    into
        :V_SHEET_DT1,
        :V_SHEET_DT2,
        :V_IIN_RATE,
        :V_IIN_RATE2,
        :V_SI_RATE,
        :V1_PAY_TAXED,
        :V1_PAY_NOSAI,
        :V1_PAY_NOTTAXED,
        :V1_NOTPAID_TAXED,
        :V1_NOTPAID_NOSAI,
        :V1_NOTPAID_NOTTAXED,
        :V1_DNSI,
        :V1_UNTAXED_MINIMUM,
        :V1_IINEX_DEPENDANTS,
        :V1_IINEX2,
        :V1_IINEX2_TP,
        :V1_PF_T,
        :V1_LI_T,
        :V1_HI_T,
        :V1_PF_NT,
        :V1_LI_NT,
        :V1_HI_NT,
        :V1_IINEX_EXP,
        :V1_IIN,
        :V1_PAY;

    V2_PAY_TAXED = 0.0;
    V2_PAY_NOSAI = 0.0;
    V2_PAY_NOTTAXED = 0.0;
    V2_DNSI = 0.0;
    V2_UNTAXED_MINIMUM = 0.0;
    V2_IINEX_DEPENDANTS = 0.0;
    V2_IINEX2 = 0.0;
    V2_PF_NT = 0.0;
    V2_LI_NT = 0.0;
    V2_HI_NT = 0.0;
    V2_IINEX_EXP = 0.0;
    V2_IIN = 0.0;
    V2_PAY = 0.0;


    if (V1_PAY is null) then
    begin
        V_IIN_RATE = 0.0;
        V_IIN_RATE2 = 0.0;
        V_SI_RATE = 0.0;
        V1_PAY_TAXED = 0.0;
        V1_PAY_NOSAI = 0.0;
        V1_PAY_NOTTAXED = 0.0;
        V1_NOTPAID_TAXED = 0.0;
        V1_NOTPAID_NOSAI = 0.0;
        V1_NOTPAID_NOTTAXED = 0.0;
        V1_DNSI = 0.0;
        V1_UNTAXED_MINIMUM = 0.0;
        V1_IINEX_DEPENDANTS = 0.0;
        V1_IINEX2 = 0.0;
        V1_IINEX2_TP = 0;
        V1_PF_T = 0.0;
        V1_LI_T = 0.0;
        V1_HI_T = 0.0;
        V1_PF_NT = 0.0;
        V1_LI_NT = 0.0;
        V1_HI_NT = 0.0;
        V1_IINEX_EXP = 0.0;
        V1_IIN = 0.0;
        V1_PAY = 0.0;
        suspend;
        exit;
    end

    -- sum whats paid
    select
        sum(PAY_TAXED) as PAY_TAXED,
        sum(PAY_NOSAI) as PAY_NOSAI,
        sum(PAY_NOTTAXED) as PAY_NOTTAXED,
        sum(DNSI) as DNSI,
        sum(UNTAXED_MINIMUM) as UNTAXED_MINIMUM,
        sum(IINEX_DEPENDANTS) as IINEX_DEPENDANTS,
        sum(IINEX2) as IINEX2,
        sum(PF_NT) as PF_NT,
        sum(LI_NT) as LI_NT,
        sum(HI_NT) as HI_NT,
        sum(IINEX_EXP) as IINEX_EXP,
        sum(IIN) as IIN,
        sum(PAY) as PAY
    from
    (
        select
            coalesce(sum(PAY_TAXED_1), 0.0) as PAY_TAXED,
            coalesce(sum(PAY_NOSAI_1), 0.0) as PAY_NOSAI,
            coalesce(sum(PAY_NOTTAXED_1), 0.0) as PAY_NOTTAXED,
            coalesce(sum(DNSI_1), 0.0) as DNSI,
            coalesce(sum(UNTAXED_MINIMUM_1), 0.0) as UNTAXED_MINIMUM,
            coalesce(sum(IINEX_DEPENDANTS_1), 0.0) as IINEX_DEPENDANTS,
            coalesce(sum(IINEX2_1), 0.0) as IINEX2,
            coalesce(sum(PFNT_1), 0.0) as PF_NT,
            coalesce(sum(LINT_1), 0.0) as LI_NT,
            coalesce(sum(HINT_1), 0.0) as HI_NT,
            coalesce(sum(IINEX_EXP_1), 0.0) as IINEX_EXP,
            coalesce(sum(IIN_1), 0.0) as IIN,
            coalesce(sum(S1), 0.0) as PAY
    
        from
            a_paylists join a_paylists_r
            on (a_paylists.id = a_paylists_r.ids and a_paylists_r.idam = :PIDAM)
        where
            a_paylists_r.dt1 = :V_SHEET_DT1 and
            (a_paylists.dt < :PDT or (a_paylists.dt = :PDT and a_paylists.id < :PIDPSH))
    
        union all
    
        select
            coalesce(sum(PAY_TAXED_2), 0.0) as PAY_TAXED,
            coalesce(sum(PAY_NOSAI_2), 0.0) as PAY_NOSAI,
            coalesce(sum(PAY_NOTTAXED_2), 0.0) as PAY_NOTTAXED,
            coalesce(sum(DNSI_2), 0.0) as DNSI,
            coalesce(sum(UNTAXED_MINIMUM_2), 0.0) as UNTAXED_MINIMUM,
            coalesce(sum(IINEX_DEPENDANTS_2), 0.0) as IINEX_DEPENDANTS,
            coalesce(sum(IINEX2_2), 0.0) as IINEX2,
            coalesce(sum(PFNT_2), 0.0) as PF_NT,
            coalesce(sum(LINT_2), 0.0) as LI_NT,
            coalesce(sum(HINT_2), 0.0) as HI_NT,
            coalesce(sum(IINEX_EXP_2), 0.0) as IINEX_EXP,
            coalesce(sum(IIN_2), 0.0) as IIN,
            coalesce(sum(S2), 0.0) as PAY

        from
            a_paylists join a_paylists_r
            on (a_paylists.id = a_paylists_r.ids and a_paylists_r.idam = :PIDAM)
        where
            a_paylists_r.dt2 = :V_SHEET_DT2 and
            (a_paylists.dt < :PDT or (a_paylists.dt = :PDT and a_paylists.id < :PIDPSH))
    )
    into
        :V2_PAY_TAXED,
        :V2_PAY_NOSAI,
        :V2_PAY_NOTTAXED,
        :V2_DNSI,
        :V2_UNTAXED_MINIMUM,
        :V2_IINEX_DEPENDANTS,
        :V2_IINEX2,
        :V2_PF_NT,
        :V2_LI_NT,
        :V2_HI_NT,
        :V2_IINEX_EXP,
        :V2_IIN,
        :V2_PAY;

    suspend;
end^


ALTER PROCEDURE SP_A_PAY_MATCHLISTS_12 (
    PIDAM INTEGER,
    PPAY DOM_MONEY,
    PDATE DATE,
    PIDPSH INTEGER)
RETURNS (
    IDP INTEGER,
    IDAM INTEGER,
    DT1 DATE,
    DT2 DATE,
    IDSHR1 INTEGER,
    IDSHR2 INTEGER,
    PAY0 DOM_MONEY,
    PAY1 DOM_MONEY,
    PAY2 DOM_MONEY,
    R1 FLOAT,
    R2 FLOAT,
    IIN DOM_MONEY,
    VA_SHEET_DT1 DATE,
    VA_SHEET_DT2 DATE,
    VA_IIN_RATE DOM_MONEY,
    VA_IIN_RATE2 DOM_MONEY,
    VA_SI_RATE DOM_MONEY,
    VA1_PAY_TAXED DOM_MONEY,
    VA1_PAY_NOSAI DOM_MONEY,
    VA1_PAY_NOTTAXED DOM_MONEY,
    VA1_NOTPAID_TAXED DOM_MONEY,
    VA1_NOTPAID_NOSAI DOM_MONEY,
    VA1_NOTPAID_NOTTAXED DOM_MONEY,
    VA1_DNSI DOM_MONEY,
    VA1_UNTAXED_MINIMUM DOM_MONEY,
    VA1_IINEX_DEPENDANTS DOM_MONEY,
    VA1_IINEX2 DOM_MONEY,
    VA1_IINEX2_TP SMALLINT,
    VA1_PF_T DOM_MONEY,
    VA1_LI_T DOM_MONEY,
    VA1_HI_T DOM_MONEY,
    VA1_PF_NT DOM_MONEY,
    VA1_LI_NT DOM_MONEY,
    VA1_HI_NT DOM_MONEY,
    VA1_IINEX_EXP DOM_MONEY,
    VA1_IIN DOM_MONEY,
    VA1_PAY DOM_MONEY,
    VA2_PAY_TAXED DOM_MONEY,
    VA2_PAY_NOSAI DOM_MONEY,
    VA2_PAY_NOTTAXED DOM_MONEY,
    VA2_DNSI DOM_MONEY,
    VA2_UNTAXED_MINIMUM DOM_MONEY,
    VA2_IINEX_DEPENDANTS DOM_MONEY,
    VA2_IINEX2 DOM_MONEY,
    VA2_PF_NT DOM_MONEY,
    VA2_LI_NT DOM_MONEY,
    VA2_HI_NT DOM_MONEY,
    VA2_IINEX_EXP DOM_MONEY,
    VA2_IIN DOM_MONEY,
    VA2_PAY DOM_MONEY,
    VB_SHEET_DT1 DATE,
    VB_SHEET_DT2 DATE,
    VB_IIN_RATE DOM_MONEY,
    VB_IIN_RATE2 DOM_MONEY,
    VB_SI_RATE DOM_MONEY,
    VB1_PAY_TAXED DOM_MONEY,
    VB1_PAY_NOSAI DOM_MONEY,
    VB1_PAY_NOTTAXED DOM_MONEY,
    VB1_NOTPAID_TAXED DOM_MONEY,
    VB1_NOTPAID_NOSAI DOM_MONEY,
    VB1_NOTPAID_NOTTAXED DOM_MONEY,
    VB1_DNSI DOM_MONEY,
    VB1_UNTAXED_MINIMUM DOM_MONEY,
    VB1_IINEX_DEPENDANTS DOM_MONEY,
    VB1_IINEX2 DOM_MONEY,
    VB1_IINEX2_TP SMALLINT,
    VB1_PF_T DOM_MONEY,
    VB1_LI_T DOM_MONEY,
    VB1_HI_T DOM_MONEY,
    VB1_PF_NT DOM_MONEY,
    VB1_LI_NT DOM_MONEY,
    VB1_HI_NT DOM_MONEY,
    VB1_IINEX_EXP DOM_MONEY,
    VB1_IIN DOM_MONEY,
    VB1_PAY DOM_MONEY,
    VB2_PAY_TAXED DOM_MONEY,
    VB2_PAY_NOSAI DOM_MONEY,
    VB2_PAY_NOTTAXED DOM_MONEY,
    VB2_DNSI DOM_MONEY,
    VB2_UNTAXED_MINIMUM DOM_MONEY,
    VB2_IINEX_DEPENDANTS DOM_MONEY,
    VB2_IINEX2 DOM_MONEY,
    VB2_PF_NT DOM_MONEY,
    VB2_LI_NT DOM_MONEY,
    VB2_HI_NT DOM_MONEY,
    VB2_IINEX_EXP DOM_MONEY,
    VB2_IIN DOM_MONEY,
    VB2_PAY DOM_MONEY)
AS
declare variable sidp integer;
    declare variable sidam integer;
    declare variable spay DOM_MONEY;
begin

    select idp
    from a_positions
    where id = :PIDAM
    into :IDP;

    IDAM = PIDAM;

    execute procedure sp_a_pay_matchlists_02
        :PIDAM, :PPAY, :PDATE, :PIDPSH
    returning_values
        :sidp, :sidam, :DT1, :DT2, :IDSHR1, :IDSHR2, :PAY0, :PAY1, :PAY2,
        :R1, :R2, :IIN;

    if(IDSHR1 is null) then
    begin
        VA_SHEET_DT1 = null;
        VA_SHEET_DT2 = null;
        VA_IIN_RATE = 0.0;
        VA_IIN_RATE2 = 0.0;
        VA_SI_RATE = 0.0;
        VA1_PAY_TAXED = 0.0;
        VA1_PAY_NOSAI = 0.0;
        VA1_PAY_NOTTAXED = 0.0;
        VA1_NOTPAID_TAXED = 0.0;
        VA1_NOTPAID_NOSAI = 0.0;
        VA1_NOTPAID_NOTTAXED = 0.0;
        VA1_DNSI = 0.0;
        VA1_UNTAXED_MINIMUM = 0.0;
        VA1_IINEX_DEPENDANTS = 0.0;
        VA1_IINEX2 = 0.0;
        VA1_IINEX2_TP = 0.0;
        VA1_PF_T = 0.0;
        VA1_LI_T = 0.0;
        VA1_HI_T = 0.0;
        VA1_PF_NT = 0.0;
        VA1_LI_NT = 0.0;
        VA1_HI_NT = 0.0;
        VA1_IINEX_EXP = 0.0;
        VA1_IIN = 0.0;
        VA1_PAY = 0.0;

        VA2_PAY_TAXED = 0.0;
        VA2_PAY_NOSAI = 0.0;
        VA2_PAY_NOTTAXED = 0.0;
        VA2_DNSI = 0.0;
        VA2_UNTAXED_MINIMUM = 0.0;
        VA2_IINEX_DEPENDANTS = 0.0;
        VA2_IINEX2 = 0.0;
        VA2_PF_NT = 0.0;
        VA2_LI_NT = 0.0;
        VA2_HI_NT = 0.0;
        VA2_IINEX_EXP = 0.0;
        VA2_IIN = 0.0;
        VA2_PAY = 0.0;
    end else
    begin

        execute procedure SP_A_PAY_MATCHLISTS_11
            :sidam, :IDSHR1, :pdate, :PIDPSH
        returning_values
            :VA_SHEET_DT1,
            :VA_SHEET_DT2,
            :VA_IIN_RATE,
            :VA_IIN_RATE2,
            :VA_SI_RATE,
            :VA1_PAY_TAXED,
            :VA1_PAY_NOSAI,
            :VA1_PAY_NOTTAXED,
            :VA1_NOTPAID_TAXED,
            :VA1_NOTPAID_NOSAI,
            :VA1_NOTPAID_NOTTAXED,
            :VA1_DNSI,
            :VA1_UNTAXED_MINIMUM,
            :VA1_IINEX_DEPENDANTS,
            :VA1_IINEX2,
            :VA1_IINEX2_TP,
            :VA1_PF_T,
            :VA1_LI_T,
            :VA1_HI_T,
            :VA1_PF_NT,
            :VA1_LI_NT,
            :VA1_HI_NT,
            :VA1_IINEX_EXP,
            :VA1_IIN,
            :VA1_PAY,
    
            :VA2_PAY_TAXED,
            :VA2_PAY_NOSAI,
            :VA2_PAY_NOTTAXED,
            :VA2_DNSI,
            :VA2_UNTAXED_MINIMUM,
            :VA2_IINEX_DEPENDANTS,
            :VA2_IINEX2,
            :VA2_PF_NT,
            :VA2_LI_NT,
            :VA2_HI_NT,
            :VA2_IINEX_EXP,
            :VA2_IIN,
            :VA2_PAY;
    end

    if(IDSHR2 is null) then
    begin
        VB_SHEET_DT1 = null;
        VB_SHEET_DT2 = null;
        VB_IIN_RATE = 0.0;
        VB_IIN_RATE2 = 0.0;
        VB_SI_RATE = 0.0;
        VB1_PAY_TAXED = 0.0;
        VB1_PAY_NOSAI = 0.0;
        VB1_PAY_NOTTAXED = 0.0;
        VB1_NOTPAID_TAXED = 0.0;
        VB1_NOTPAID_NOSAI = 0.0;
        VB1_NOTPAID_NOTTAXED = 0.0;
        VB1_DNSI = 0.0;
        VB1_UNTAXED_MINIMUM = 0.0;
        VB1_IINEX_DEPENDANTS = 0.0;
        VB1_IINEX2 = 0.0;
        VB1_IINEX2_TP = 0.0;
        VB1_PF_T = 0.0;
        VB1_LI_T = 0.0;
        VB1_HI_T = 0.0;
        VB1_PF_NT = 0.0;
        VB1_LI_NT = 0.0;
        VB1_HI_NT = 0.0;
        VB1_IINEX_EXP = 0.0;
        VB1_IIN = 0.0;
        VB1_PAY = 0.0;

        VB2_PAY_TAXED = 0.0;
        VB2_PAY_NOSAI = 0.0;
        VB2_PAY_NOTTAXED = 0.0;
        VB2_DNSI = 0.0;
        VB2_UNTAXED_MINIMUM = 0.0;
        VB2_IINEX_DEPENDANTS = 0.0;
        VB2_IINEX2 = 0.0;
        VB2_PF_NT = 0.0;
        VB2_LI_NT = 0.0;
        VB2_HI_NT = 0.0;
        VB2_IINEX_EXP = 0.0;
        VB2_IIN = 0.0;
        VB2_PAY = 0.0;
    end else
    begin
        execute procedure SP_A_PAY_MATCHLISTS_11
            :sidam, :IDSHR2, :pdate, :PIDPSH
        returning_values
            :VB_SHEET_DT1,
            :VB_SHEET_DT2,
            :VB_IIN_RATE,
            :VB_IIN_RATE2,
            :VB_SI_RATE,
            :VB1_PAY_TAXED,
            :VB1_PAY_NOSAI,
            :VB1_PAY_NOTTAXED,
            :VB1_NOTPAID_TAXED,
            :VB1_NOTPAID_NOSAI,
            :VB1_NOTPAID_NOTTAXED,
            :VB1_DNSI,
            :VB1_UNTAXED_MINIMUM,
            :VB1_IINEX_DEPENDANTS,
            :VB1_IINEX2,
            :VB1_IINEX2_TP,
            :VB1_PF_T,
            :VB1_LI_T,
            :VB1_HI_T,
            :VB1_PF_NT,
            :VB1_LI_NT,
            :VB1_HI_NT,
            :VB1_IINEX_EXP,
            :VB1_IIN,
            :VB1_PAY,
    
            :VB2_PAY_TAXED,
            :VB2_PAY_NOSAI,
            :VB2_PAY_NOTTAXED,
            :VB2_DNSI,
            :VB2_UNTAXED_MINIMUM,
            :VB2_IINEX_DEPENDANTS,
            :VB2_IINEX2,
            :VB2_PF_NT,
            :VB2_LI_NT,
            :VB2_HI_NT,
            :VB2_IINEX_EXP,
            :VB2_IIN,
            :VB2_PAY;
    end

    suspend;


end^


ALTER PROCEDURE SP_A_PAY_MATCHLISTS_13 (
    PIDS INTEGER,
    PDATE DATE)
RETURNS (
    IDP INTEGER,
    IDAM INTEGER,
    DT1 DATE,
    DT2 DATE,
    IDSHR1 INTEGER,
    IDSHR2 INTEGER,
    PAY0 DOM_MONEY,
    PAY1 DOM_MONEY,
    PAY2 DOM_MONEY,
    R1 FLOAT,
    R2 FLOAT,
    IIN DOM_MONEY,
    VA_SHEET_DT1 DATE,
    VA_SHEET_DT2 DATE,
    VA_IIN_RATE DOM_MONEY,
    VA_IIN_RATE2 DOM_MONEY,
    VA_SI_RATE DOM_MONEY,
    VA1_PAY_TAXED DOM_MONEY,
    VA1_PAY_NOSAI DOM_MONEY,
    VA1_PAY_NOTTAXED DOM_MONEY,
    VA1_NOTPAID_TAXED DOM_MONEY,
    VA1_NOTPAID_NOSAI DOM_MONEY,
    VA1_NOTPAID_NOTTAXED DOM_MONEY,
    VA1_DNSI DOM_MONEY,
    VA1_UNTAXED_MINIMUM DOM_MONEY,
    VA1_IINEX_DEPENDANTS DOM_MONEY,
    VA1_IINEX2 DOM_MONEY,
    VA1_IINEX2_TP SMALLINT,
    VA1_PF_T DOM_MONEY,
    VA1_LI_T DOM_MONEY,
    VA1_HI_T DOM_MONEY,
    VA1_PF_NT DOM_MONEY,
    VA1_LI_NT DOM_MONEY,
    VA1_HI_NT DOM_MONEY,
    VA1_IINEX_EXP DOM_MONEY,
    VA1_IIN DOM_MONEY,
    VA1_PAY DOM_MONEY,
    VA2_PAY_TAXED DOM_MONEY,
    VA2_PAY_NOSAI DOM_MONEY,
    VA2_PAY_NOTTAXED DOM_MONEY,
    VA2_DNSI DOM_MONEY,
    VA2_UNTAXED_MINIMUM DOM_MONEY,
    VA2_IINEX_DEPENDANTS DOM_MONEY,
    VA2_IINEX2 DOM_MONEY,
    VA2_PF_NT DOM_MONEY,
    VA2_LI_NT DOM_MONEY,
    VA2_HI_NT DOM_MONEY,
    VA2_IINEX_EXP DOM_MONEY,
    VA2_IIN DOM_MONEY,
    VA2_PAY DOM_MONEY,
    VB_SHEET_DT1 DATE,
    VB_SHEET_DT2 DATE,
    VB_IIN_RATE DOM_MONEY,
    VB_IIN_RATE2 DOM_MONEY,
    VB_SI_RATE DOM_MONEY,
    VB1_PAY_TAXED DOM_MONEY,
    VB1_PAY_NOSAI DOM_MONEY,
    VB1_PAY_NOTTAXED DOM_MONEY,
    VB1_NOTPAID_TAXED DOM_MONEY,
    VB1_NOTPAID_NOSAI DOM_MONEY,
    VB1_NOTPAID_NOTTAXED DOM_MONEY,
    VB1_DNSI DOM_MONEY,
    VB1_UNTAXED_MINIMUM DOM_MONEY,
    VB1_IINEX_DEPENDANTS DOM_MONEY,
    VB1_IINEX2 DOM_MONEY,
    VB1_IINEX2_TP SMALLINT,
    VB1_PF_T DOM_MONEY,
    VB1_LI_T DOM_MONEY,
    VB1_HI_T DOM_MONEY,
    VB1_PF_NT DOM_MONEY,
    VB1_LI_NT DOM_MONEY,
    VB1_HI_NT DOM_MONEY,
    VB1_IINEX_EXP DOM_MONEY,
    VB1_IIN DOM_MONEY,
    VB1_PAY DOM_MONEY,
    VB2_PAY_TAXED DOM_MONEY,
    VB2_PAY_NOSAI DOM_MONEY,
    VB2_PAY_NOTTAXED DOM_MONEY,
    VB2_DNSI DOM_MONEY,
    VB2_UNTAXED_MINIMUM DOM_MONEY,
    VB2_IINEX_DEPENDANTS DOM_MONEY,
    VB2_IINEX2 DOM_MONEY,
    VB2_PF_NT DOM_MONEY,
    VB2_LI_NT DOM_MONEY,
    VB2_HI_NT DOM_MONEY,
    VB2_IINEX_EXP DOM_MONEY,
    VB2_IIN DOM_MONEY,
    VB2_PAY DOM_MONEY)
AS
declare variable sidp integer;
    declare variable sidam integer;
    declare variable spay DOM_MONEY;
begin
    for select
        a_paylists_r.idp as sidp,
        a_paylists_r.idam as sidam,
        a_paylists_r.pay as spay
    from a_paylists_r
    where a_paylists_r.ids = :pids
    order by a_paylists_r.snr

    into :sidp, :sidam, :spay

    do begin
        execute procedure sp_a_pay_matchlists_02
            :sidam, :spay, :pdate, :pids
        returning_values
            :IDP, :IDAM, :DT1, :DT2, :IDSHR1, IDSHR2, :PAY0, :PAY1, :PAY2,
            :R1, :R2, :IIN;

        IDP = sidp;
        idam = sidam;

        if(IDSHR1 is null) then
        begin
            VA_SHEET_DT1 = null;
            VA_SHEET_DT2 = null;
            VA_IIN_RATE = 0.0;
            VA_IIN_RATE2 = 0.0;
            VA_SI_RATE = 0.0;
            VA1_PAY_TAXED = 0.0;
            VA1_PAY_NOSAI = 0.0;
            VA1_PAY_NOTTAXED = 0.0;
            VA1_NOTPAID_TAXED = 0.0;
            VA1_NOTPAID_NOSAI = 0.0;
            VA1_NOTPAID_NOTTAXED = 0.0;
            VA1_DNSI = 0.0;
            VA1_UNTAXED_MINIMUM = 0.0;
            VA1_IINEX_DEPENDANTS = 0.0;
            VA1_IINEX2 = 0.0;
            VA1_IINEX2_TP = 0.0;
            VA1_PF_T = 0.0;
            VA1_LI_T = 0.0;
            VA1_HI_T = 0.0;
            VA1_PF_NT = 0.0;
            VA1_LI_NT = 0.0;
            VA1_HI_NT = 0.0;
            VA1_IINEX_EXP = 0.0;
            VA1_IIN = 0.0;
            VA1_PAY = 0.0;
    
            VA2_PAY_TAXED = 0.0;
            VA2_PAY_NOSAI = 0.0;
            VA2_PAY_NOTTAXED = 0.0;
            VA2_DNSI = 0.0;
            VA2_UNTAXED_MINIMUM = 0.0;
            VA2_IINEX_DEPENDANTS = 0.0;
            VA2_IINEX2 = 0.0;
            VA2_PF_NT = 0.0;
            VA2_LI_NT = 0.0;
            VA2_HI_NT = 0.0;
            VA2_IINEX_EXP = 0.0;
            VA2_IIN = 0.0;
            VA2_PAY = 0.0;
        end else
        begin
    
            execute procedure SP_A_PAY_MATCHLISTS_11
                :sidam, :IDSHR1, :pdate, :pids
            returning_values
                :VA_SHEET_DT1,
                :VA_SHEET_DT2,
                :VA_IIN_RATE,
                :VA_IIN_RATE2,
                :VA_SI_RATE,
                :VA1_PAY_TAXED,
                :VA1_PAY_NOSAI,
                :VA1_PAY_NOTTAXED,
                :VA1_NOTPAID_TAXED,
                :VA1_NOTPAID_NOSAI,
                :VA1_NOTPAID_NOTTAXED,
                :VA1_DNSI,
                :VA1_UNTAXED_MINIMUM,
                :VA1_IINEX_DEPENDANTS,
                :VA1_IINEX2,
                :VA1_IINEX2_TP,
                :VA1_PF_T,
                :VA1_LI_T,
                :VA1_HI_T,
                :VA1_PF_NT,
                :VA1_LI_NT,
                :VA1_HI_NT,
                :VA1_IINEX_EXP,
                :VA1_IIN,
                :VA1_PAY,
    
                :VA2_PAY_TAXED,
                :VA2_PAY_NOSAI,
                :VA2_PAY_NOTTAXED,
                :VA2_DNSI,
                :VA2_UNTAXED_MINIMUM,
                :VA2_IINEX_DEPENDANTS,
                :VA2_IINEX2,
                :VA2_PF_NT,
                :VA2_LI_NT,
                :VA2_HI_NT,
                :VA2_IINEX_EXP,
                :VA2_IIN,
                :VA2_PAY;
        end

        if(IDSHR2 is null) then
        begin
            VB_SHEET_DT1 = null;
            VB_SHEET_DT2 = null;
            VB_IIN_RATE = 0.0;
            VB_IIN_RATE2 = 0.0;
            VB_SI_RATE = 0.0;
            VB1_PAY_TAXED = 0.0;
            VB1_PAY_NOSAI = 0.0;
            VB1_PAY_NOTTAXED = 0.0;
            VB1_NOTPAID_TAXED = 0.0;
            VB1_NOTPAID_NOSAI = 0.0;
            VB1_NOTPAID_NOTTAXED = 0.0;
            VB1_DNSI = 0.0;
            VB1_UNTAXED_MINIMUM = 0.0;
            VB1_IINEX_DEPENDANTS = 0.0;
            VB1_IINEX2 = 0.0;
            VB1_IINEX2_TP = 0.0;
            VB1_PF_T = 0.0;
            VB1_LI_T = 0.0;
            VB1_HI_T = 0.0;
            VB1_PF_NT = 0.0;
            VB1_LI_NT = 0.0;
            VB1_HI_NT = 0.0;
            VB1_IINEX_EXP = 0.0;
            VB1_IIN = 0.0;
            VB1_PAY = 0.0;
    
            VB2_PAY_TAXED = 0.0;
            VB2_PAY_NOSAI = 0.0;
            VB2_PAY_NOTTAXED = 0.0;
            VB2_DNSI = 0.0;
            VB2_UNTAXED_MINIMUM = 0.0;
            VB2_IINEX_DEPENDANTS = 0.0;
            VB2_IINEX2 = 0.0;
            VB2_PF_NT = 0.0;
            VB2_LI_NT = 0.0;
            VB2_HI_NT = 0.0;
            VB2_IINEX_EXP = 0.0;
            VB2_IIN = 0.0;
            VB2_PAY = 0.0;
        end else
        begin

            execute procedure SP_A_PAY_MATCHLISTS_11
                :sidam, :IDSHR2, :pdate, :pids
            returning_values
                :VB_SHEET_DT1,
                :VB_SHEET_DT2,
                :VB_IIN_RATE,
                :VB_IIN_RATE2,
                :VB_SI_RATE,
                :VB1_PAY_TAXED,
                :VB1_PAY_NOSAI,
                :VB1_PAY_NOTTAXED,
                :VB1_NOTPAID_TAXED,
                :VB1_NOTPAID_NOSAI,
                :VB1_NOTPAID_NOTTAXED,
                :VB1_DNSI,
                :VB1_UNTAXED_MINIMUM,
                :VB1_IINEX_DEPENDANTS,
                :VB1_IINEX2,
                :VB1_IINEX2_TP,
                :VB1_PF_T,
                :VB1_LI_T,
                :VB1_HI_T,
                :VB1_PF_NT,
                :VB1_LI_NT,
                :VB1_HI_NT,
                :VB1_IINEX_EXP,
                :VB1_IIN,
                :VB1_PAY,
    
                :VB2_PAY_TAXED,
                :VB2_PAY_NOSAI,
                :VB2_PAY_NOTTAXED,
                :VB2_DNSI,
                :VB2_UNTAXED_MINIMUM,
                :VB2_IINEX_DEPENDANTS,
                :VB2_IINEX2,
                :VB2_PF_NT,
                :VB2_LI_NT,
                :VB2_HI_NT,
                :VB2_IINEX_EXP,
                :VB2_IIN,
                :VB2_PAY;

            end
    
            suspend;

    end

end^


ALTER PROCEDURE SP_A_PAY_MATCHLISTS_14 (
    PDATE DATE,
    PIDPSH INTEGER)
RETURNS (
    IDP INTEGER,
    IDAM INTEGER,
    DT1 DATE,
    DT2 DATE,
    IDSHR1 INTEGER,
    IDSHR2 INTEGER,
    PAY0 DOM_MONEY,
    PAY1 DOM_MONEY,
    PAY2 DOM_MONEY,
    R1 FLOAT,
    R2 FLOAT,
    IIN DOM_MONEY,
    VA_SHEET_DT1 DATE,
    VA_SHEET_DT2 DATE,
    VA_IIN_RATE DOM_MONEY,
    VA_IIN_RATE2 DOM_MONEY,
    VA_SI_RATE DOM_MONEY,
    VA1_PAY_TAXED DOM_MONEY,
    VA1_PAY_NOSAI DOM_MONEY,
    VA1_PAY_NOTTAXED DOM_MONEY,
    VA1_NOTPAID_TAXED DOM_MONEY,
    VA1_NOTPAID_NOSAI DOM_MONEY,
    VA1_NOTPAID_NOTTAXED DOM_MONEY,
    VA1_DNSI DOM_MONEY,
    VA1_UNTAXED_MINIMUM DOM_MONEY,
    VA1_IINEX_DEPENDANTS DOM_MONEY,
    VA1_IINEX2 DOM_MONEY,
    VA1_IINEX2_TP SMALLINT,
    VA1_PF_T DOM_MONEY,
    VA1_LI_T DOM_MONEY,
    VA1_HI_T DOM_MONEY,
    VA1_PF_NT DOM_MONEY,
    VA1_LI_NT DOM_MONEY,
    VA1_HI_NT DOM_MONEY,
    VA1_IINEX_EXP DOM_MONEY,
    VA1_IIN DOM_MONEY,
    VA1_PAY DOM_MONEY,
    VA2_PAY_TAXED DOM_MONEY,
    VA2_PAY_NOSAI DOM_MONEY,
    VA2_PAY_NOTTAXED DOM_MONEY,
    VA2_DNSI DOM_MONEY,
    VA2_UNTAXED_MINIMUM DOM_MONEY,
    VA2_IINEX_DEPENDANTS DOM_MONEY,
    VA2_IINEX2 DOM_MONEY,
    VA2_PF_NT DOM_MONEY,
    VA2_LI_NT DOM_MONEY,
    VA2_HI_NT DOM_MONEY,
    VA2_IINEX_EXP DOM_MONEY,
    VA2_IIN DOM_MONEY,
    VA2_PAY DOM_MONEY,
    VB_SHEET_DT1 DATE,
    VB_SHEET_DT2 DATE,
    VB_IIN_RATE DOM_MONEY,
    VB_IIN_RATE2 DOM_MONEY,
    VB_SI_RATE DOM_MONEY,
    VB1_PAY_TAXED DOM_MONEY,
    VB1_PAY_NOSAI DOM_MONEY,
    VB1_PAY_NOTTAXED DOM_MONEY,
    VB1_NOTPAID_TAXED DOM_MONEY,
    VB1_NOTPAID_NOSAI DOM_MONEY,
    VB1_NOTPAID_NOTTAXED DOM_MONEY,
    VB1_DNSI DOM_MONEY,
    VB1_UNTAXED_MINIMUM DOM_MONEY,
    VB1_IINEX_DEPENDANTS DOM_MONEY,
    VB1_IINEX2 DOM_MONEY,
    VB1_IINEX2_TP SMALLINT,
    VB1_PF_T DOM_MONEY,
    VB1_LI_T DOM_MONEY,
    VB1_HI_T DOM_MONEY,
    VB1_PF_NT DOM_MONEY,
    VB1_LI_NT DOM_MONEY,
    VB1_HI_NT DOM_MONEY,
    VB1_IINEX_EXP DOM_MONEY,
    VB1_IIN DOM_MONEY,
    VB1_PAY DOM_MONEY,
    VB2_PAY_TAXED DOM_MONEY,
    VB2_PAY_NOSAI DOM_MONEY,
    VB2_PAY_NOTTAXED DOM_MONEY,
    VB2_DNSI DOM_MONEY,
    VB2_UNTAXED_MINIMUM DOM_MONEY,
    VB2_IINEX_DEPENDANTS DOM_MONEY,
    VB2_IINEX2 DOM_MONEY,
    VB2_PF_NT DOM_MONEY,
    VB2_LI_NT DOM_MONEY,
    VB2_HI_NT DOM_MONEY,
    VB2_IINEX_EXP DOM_MONEY,
    VB2_IIN DOM_MONEY,
    VB2_PAY DOM_MONEY)
AS
declare variable sidp integer;
    declare variable sidam integer;
    declare variable spay DOM_MONEY;
begin
    for select
        a_paylists_r.idp as sidp,
        a_paylists_r.idam as sidam,
        a_paylists_r.pay as spay
    from a_paylists_r join a_paylists on a_paylists_r.ids = a_paylists.id
    where a_paylists.dt = :pdate and a_paylists.id = :pidpsh
    order by a_paylists_r.snr

    into :sidp, :sidam, :spay

    do begin
        execute procedure sp_a_pay_matchlists_02
            :sidam, :spay, :pdate, :pidpsh
        returning_values
            :IDP, :IDAM, :DT1, :DT2, :IDSHR1, IDSHR2, :PAY0, :PAY1, :PAY2,
            :R1, :R2, :IIN;

        IDP = sidp;
        idam = sidam;

    
        if(IDSHR1 is null) then
        begin
            VA_SHEET_DT1 = null;
            VA_SHEET_DT2 = null;
            VA_IIN_RATE = 0.0;
            VA_IIN_RATE2 = 0.0;
            VA_SI_RATE = 0.0;
            VA1_PAY_TAXED = 0.0;
            VA1_PAY_NOSAI = 0.0;
            VA1_PAY_NOTTAXED = 0.0;
            VA1_NOTPAID_TAXED = 0.0;
            VA1_NOTPAID_NOSAI = 0.0;
            VA1_NOTPAID_NOTTAXED = 0.0;
            VA1_DNSI = 0.0;
            VA1_UNTAXED_MINIMUM = 0.0;
            VA1_IINEX_DEPENDANTS = 0.0;
            VA1_IINEX2 = 0.0;
            VA1_IINEX2_TP = 0.0;
            VA1_PF_T = 0.0;
            VA1_LI_T = 0.0;
            VA1_HI_T = 0.0;
            VA1_PF_NT = 0.0;
            VA1_LI_NT = 0.0;
            VA1_HI_NT = 0.0;
            VA1_IINEX_EXP = 0.0;
            VA1_IIN = 0.0;
            VA1_PAY = 0.0;
    
            VA2_PAY_TAXED = 0.0;
            VA2_PAY_NOSAI = 0.0;
            VA2_PAY_NOTTAXED = 0.0;
            VA2_DNSI = 0.0;
            VA2_UNTAXED_MINIMUM = 0.0;
            VA2_IINEX_DEPENDANTS = 0.0;
            VA2_IINEX2 = 0.0;
            VA2_PF_NT = 0.0;
            VA2_LI_NT = 0.0;
            VA2_HI_NT = 0.0;
            VA2_IINEX_EXP = 0.0;
            VA2_IIN = 0.0;
            VA2_PAY = 0.0;
        end else
        begin
    
    
    
            execute procedure SP_A_PAY_MATCHLISTS_11
                :sidam, :IDSHR1, :pdate, :pidpsh
            returning_values
                :VA_SHEET_DT1,
                :VA_SHEET_DT2,
                :VA_IIN_RATE,
                :VA_IIN_RATE2,
                :VA_SI_RATE,
                :VA1_PAY_TAXED,
                :VA1_PAY_NOSAI,
                :VA1_PAY_NOTTAXED,
                :VA1_NOTPAID_TAXED,
                :VA1_NOTPAID_NOSAI,
                :VA1_NOTPAID_NOTTAXED,
                :VA1_DNSI,
                :VA1_UNTAXED_MINIMUM,
                :VA1_IINEX_DEPENDANTS,
                :VA1_IINEX2,
                :VA1_IINEX2_TP,
                :VA1_PF_T,
                :VA1_LI_T,
                :VA1_HI_T,
                :VA1_PF_NT,
                :VA1_LI_NT,
                :VA1_HI_NT,
                :VA1_IINEX_EXP,
                :VA1_IIN,
                :VA1_PAY,
    
                :VA2_PAY_TAXED,
                :VA2_PAY_NOSAI,
                :VA2_PAY_NOTTAXED,
                :VA2_DNSI,
                :VA2_UNTAXED_MINIMUM,
                :VA2_IINEX_DEPENDANTS,
                :VA2_IINEX2,
                :VA2_PF_NT,
                :VA2_LI_NT,
                :VA2_HI_NT,
                :VA2_IINEX_EXP,
                :VA2_IIN,
                :VA2_PAY;
            end

        if(IDSHR2 is null) then
        begin
            VB_SHEET_DT1 = null;
            VB_SHEET_DT2 = null;
            VB_IIN_RATE = 0.0;
            VB_IIN_RATE2 = 0.0;
            VB_SI_RATE = 0.0;
            VB1_PAY_TAXED = 0.0;
            VB1_PAY_NOSAI = 0.0;
            VB1_PAY_NOTTAXED = 0.0;
            VB1_NOTPAID_TAXED = 0.0;
            VB1_NOTPAID_NOSAI = 0.0;
            VB1_NOTPAID_NOTTAXED = 0.0;
            VB1_DNSI = 0.0;
            VB1_UNTAXED_MINIMUM = 0.0;
            VB1_IINEX_DEPENDANTS = 0.0;
            VB1_IINEX2 = 0.0;
            VB1_IINEX2_TP = 0.0;
            VB1_PF_T = 0.0;
            VB1_LI_T = 0.0;
            VB1_HI_T = 0.0;
            VB1_PF_NT = 0.0;
            VB1_LI_NT = 0.0;
            VB1_HI_NT = 0.0;
            VB1_IINEX_EXP = 0.0;
            VB1_IIN = 0.0;
            VB1_PAY = 0.0;
    
            VB2_PAY_TAXED = 0.0;
            VB2_PAY_NOSAI = 0.0;
            VB2_PAY_NOTTAXED = 0.0;
            VB2_DNSI = 0.0;
            VB2_UNTAXED_MINIMUM = 0.0;
            VB2_IINEX_DEPENDANTS = 0.0;
            VB2_IINEX2 = 0.0;
            VB2_PF_NT = 0.0;
            VB2_LI_NT = 0.0;
            VB2_HI_NT = 0.0;
            VB2_IINEX_EXP = 0.0;
            VB2_IIN = 0.0;
            VB2_PAY = 0.0;
        end else
        begin

            execute procedure SP_A_PAY_MATCHLISTS_11
                :sidam, :IDSHR2, :pdate, :pidpsh
            returning_values
                :VB_SHEET_DT1,
                :VB_SHEET_DT2,
                :VB_IIN_RATE,
                :VB_IIN_RATE2,
                :VB_SI_RATE,
                :VB1_PAY_TAXED,
                :VB1_PAY_NOSAI,
                :VB1_PAY_NOTTAXED,
                :VB1_NOTPAID_TAXED,
                :VB1_NOTPAID_NOSAI,
                :VB1_NOTPAID_NOTTAXED,
                :VB1_DNSI,
                :VB1_UNTAXED_MINIMUM,
                :VB1_IINEX_DEPENDANTS,
                :VB1_IINEX2,
                :VB1_IINEX2_TP,
                :VB1_PF_T,
                :VB1_LI_T,
                :VB1_HI_T,
                :VB1_PF_NT,
                :VB1_LI_NT,
                :VB1_HI_NT,
                :VB1_IINEX_EXP,
                :VB1_IIN,
                :VB1_PAY,
    
                :VB2_PAY_TAXED,
                :VB2_PAY_NOSAI,
                :VB2_PAY_NOTTAXED,
                :VB2_DNSI,
                :VB2_UNTAXED_MINIMUM,
                :VB2_IINEX_DEPENDANTS,
                :VB2_IINEX2,
                :VB2_PF_NT,
                :VB2_LI_NT,
                :VB2_HI_NT,
                :VB2_IINEX_EXP,
                :VB2_IIN,
                :VB2_PAY;
        end

        suspend;

    end

end^


ALTER PROCEDURE SP_A_PAY_MATCHLISTS_21 (
    PID INTEGER)
RETURNS (
    ID_SHR INTEGER,
    DT1 DATE,
    DT2 DATE,
    IIN_RATE DOM_MONEY,
    IIN_RATE2 DOM_MONEY,
    SI_RATE DOM_MONEY,
    PAY_TAXED DOM_MONEY,
    PAY_NOSAI DOM_MONEY,
    PAY_NOTTAXED DOM_MONEY,
    NOTPAID_TAXED DOM_MONEY,
    NOTPAID_NOSAI DOM_MONEY,
    NOTPAID_NOTTAXED DOM_MONEY,
    DNSI DOM_MONEY,
    UNTAXED_MINIMUM DOM_MONEY,
    IINEX_DEPENDANTS DOM_MONEY,
    IINEX2 DOM_MONEY,
    IINEX2_TP SMALLINT,
    PF_T DOM_MONEY,
    LI_T DOM_MONEY,
    HI_T DOM_MONEY,
    PF_NT DOM_MONEY,
    LI_NT DOM_MONEY,
    HI_NT DOM_MONEY,
    IINEX_EXP DOM_MONEY,
    IIN DOM_MONEY,
    PAY DOM_MONEY)
AS
begin
    for select
        ID_SHR,
        DT1,
        DT2,
        RATE_IIN,
        RATE_IIN2,
        RATE_DNSN,
        PAY_TAXED,
        PAY_NOSAI,
        PAY_NOTTAXED,
        NOTPAID_TAXED,
        NOTPAID_NOSAI,
        NOTPAID_NOTTAXED,
        DNSI,
        UNTAXED_MINIMUM,
        IINEX_DEPENDANTS,
        IINEX2,
        IINEX2_TP,
        PF_T,
        LI_T,
        HI_T,
        PF_NT,
        LI_NT,
        HI_NT,
        IINEX_EXP,
        IIN,
        PAY
    from
    (
         select
            a_salary_sheets_r.id as ID_SHR,
            a_salary_sheets.dt1 as dt1,
            a_salary_sheets.dt2 as dt2,
            a_salary_sheets_r.rate_iin as rate_iin,
            a_salary_sheets_r.rate_iin2 as rate_iin2,
            a_salary_sheets_r.rate_dnsn as rate_dnsn,
            a_salary_sheets_r.salary +
                a_salary_sheets_r.plus_taxed +
                a_salary_sheets_r.vacation_pay_current +
                a_salary_sheets_r.sickdays_pay AS PAY_TAXED,
    
            a_salary_sheets_r.plus_nosai AS PAY_NOSAI,
    
            a_salary_sheets_r.plus_nottaxed +
                a_salary_sheets_r.plus_pf_nottaxed +
                a_salary_sheets_r.plus_li_nottaxed +
                a_salary_sheets_r.plus_hi_nottaxed AS PAY_NOTTAXED,

            a_salary_sheets_r.plus_np_taxed as NOTPAID_TAXED,
            a_salary_sheets_r.plus_np_nosai as NOTPAID_NOSAI,
            a_salary_sheets_r.plus_np_nottaxed as NOTPAID_NOTTAXED,

            a_salary_sheets_r.dnsn_amount as DNSI,
    
            a_salary_sheets_r.iin_exempt_untaxed_minimum AS UNTAXED_MINIMUM,
            a_salary_sheets_r.iin_exempt_dependants AS IINEX_DEPENDANTS,
            a_salary_sheets_r.iin_exempt_2 AS IINEX2,
            a_salary_sheets_r.iin_exempt_2tp AS iinex2_tp,
            a_salary_sheets_r.plus_pf_taxed AS PF_T,
            a_salary_sheets_r.plus_li_taxed AS LI_T,
            a_salary_sheets_r.plus_hi_taxed AS HI_T,
            a_salary_sheets_r.plus_pf_nottaxed AS PF_NT,
            a_salary_sheets_r.plus_li_nottaxed AS LI_NT,
            a_salary_sheets_r.plus_hi_nottaxed AS HI_NT,
            a_salary_sheets_r.iin_exempt_expenses AS IINEX_EXP,
            a_salary_sheets_r.iin_amount AS IIN,
            a_salary_sheets_r.pay AS PAY
    
        from a_paylists_r
        join a_paylists on(a_paylists_r.ids = a_paylists.id and a_paylists_r.id = :PID)
        join a_salary_sheets_r on a_salary_sheets_r.idam = a_paylists_r.idam
        join a_salary_sheets
            on (a_salary_sheets_r.ids = a_salary_sheets.id and
                a_salary_sheets.is_temp = 0 and
                a_salary_sheets.kind = 0 and
                (
                    (a_salary_sheets.dt1 > a_paylists_r.dt1 and
                    a_salary_sheets.dt2 < a_paylists_r.dt2) or

                    (a_salary_sheets.dt1 = a_paylists_r.dt1 and
                    a_salary_sheets_r.pay = a_paylists_r.s1) or

                    (a_salary_sheets.dt2 = a_paylists_r.dt2 and
                    a_salary_sheets_r.pay = a_paylists_r.s2)
                ))

    
        union all
    
        select
            id_shr_1 as ID_SHR,
            a_salary_sheets.dt1 as dt1,
            a_salary_sheets.dt2 as dt2,
            a_salary_sheets_r.rate_iin as rate_iin,
            a_salary_sheets_r.rate_iin2 as rate_iin2,
            a_salary_sheets_r.rate_dnsn as rate_dnsn,
            PAY_TAXED_1 as PAY_TAXED,
            PAY_NOSAI_1 as PAY_NOSAI,
            PAY_NOTTAXED_1 as PAY_NOTTAXED,
            0.0 as NOTPAID_TAXED,
            0.0 as NOTPAID_NOSAI,
            0.0 as NOTPAID_NOTTAXED,
            DNSI_1 as DNSI,
            UNTAXED_MINIMUM_1 as UNTAXED_MINIMUM,
            IINEX_DEPENDANTS_1 as IINEX_DEPENDANTS,
            IINEX2_1 as IINEX2,
            IINEX2_TP_1 as iinex2_tp,
            0.0 as PF_T,
            0.0 as LI_T,
            0.0 as HI_T,
            PFNT_1 as PF_NT,
            LINT_1 as LI_NT,
            HINT_1 as HI_NT,
            IINEX_EXP_1 as IINEX_EXP,
            IIN_1 as IIN,
            S1 as PAY
    
        from a_paylists_r
        join a_salary_sheets_r
            on (a_paylists_r.id = :PID and
                a_paylists_r.id_shr_1 is not null and
                a_paylists_r.id_shr_1 = a_salary_sheets_r.id)
        join a_salary_sheets on a_salary_sheets.id = a_salary_sheets_r.ids
    
        union all
    
        select
            id_shr_2 as ID_SHR,
            a_salary_sheets.dt1 as dt1,
            a_salary_sheets.dt2 as dt2,
            a_salary_sheets_r.rate_iin as rate_iin,
            a_salary_sheets_r.rate_iin2 as rate_iin2,
            a_salary_sheets_r.rate_dnsn as rate_dnsn,
            PAY_TAXED_2 as PAY_TAXED,
            PAY_NOSAI_2 as PAY_NOSAI,
            PAY_NOTTAXED_2 as PAY_NOTTAXED,
            0.0 as NOTPAID_TAXED,
            0.0 as NOTPAID_NOSAI,
            0.0 as NOTPAID_NOTTAXED,
            DNSI_2 as DNSI,
            UNTAXED_MINIMUM_2 as UNTAXED_MINIMUM,
            IINEX_DEPENDANTS_2 as IINEX_DEPENDANTS,
            IINEX2_2 as IINEX2,
            IINEX2_TP_2 as iinex2_tp,
            0.0 as PF_T,
            0.0 as LI_T,
            0.0 as HI_T,
            PFNT_2 as PF_NT,
            LINT_2 as LI_NT,
            HINT_2 as HI_NT,
            IINEX_EXP_2 as IINEX_EXP,
            IIN_2 as IIN,
            S2 as PAY
    
        from a_paylists_r
        join a_salary_sheets_r
            on (a_paylists_r.id = :PID and
                a_paylists_r.id_shr_2 is not null and
                a_paylists_r.id_shr_2 = a_salary_sheets_r.id)
        join a_salary_sheets on a_salary_sheets.id = a_salary_sheets_r.ids

    )
    order by dt1

    into
        :ID_SHR,
        :DT1,
        :DT2,
        :IIN_RATE,
        :IIN_RATE2,
        :SI_RATE,
        :PAY_TAXED,
        :PAY_NOSAI,
        :PAY_NOTTAXED,
        :NOTPAID_TAXED,
        :NOTPAID_NOSAI,
        :NOTPAID_NOTTAXED,
        :DNSI,
        :UNTAXED_MINIMUM,
        :IINEX_DEPENDANTS,
        :IINEX2,
        :IINEX2_TP,
        :PF_T,
        :LI_T,
        :HI_T,
        :PF_NT,
        :LI_NT,
        :HI_NT,
        :IINEX_EXP,
        :IIN,
        :PAY
    do
    suspend;
end^


ALTER PROCEDURE SP_A_PAY_SALDO_01 (
    PIDAM INTEGER,
    PDATE DATE,
    PDATET DATE,
    PIDPSH INTEGER)
RETURNS (
    IDP INTEGER,
    IDAM INTEGER,
    PAY0 DOM_MONEY,
    IIN0 DOM_MONEY,
    ADVANCE DOM_MONEY,
    WITHHOLDINGS DOM_MONEY)
AS
begin
    for select
        0 as tidp,
        :PIDAM as tidam,
        sum(spay) as tpay,
        sum(siin) as tiin,
        sum(sadvance) as tadvance,
        sum(swithholdings) as twithholdings

    from
    (
        select
            a_salary_sheets_r.pay as spay,
            a_salary_sheets_r.iin_amount as siin,
            a_salary_sheets_r.advance as sadvance,
            a_salary_sheets_r.minus_after_iin as swithholdings
    
        from a_salary_sheets join a_salary_sheets_r on a_salary_sheets.id = a_salary_sheets_r.ids
        where
            a_salary_sheets_r.idam = :pidam and
            a_salary_sheets.kind = 0 and
            a_salary_sheets.dt2 <= :pdate and
            a_salary_sheets.is_temp = 0

        union all

        select
            spay,
            siin,
            sadvance,
            swithholdings
        from
        (
            select first 1
                a_salary_sheets.is_temp as stemp,
                0.0 as spay,
                0.0 as siin,
                a_salary_sheets_r.pay + a_salary_sheets_r.advance
                    - a_salary_sheets_r.minus_after_iin as sadvance,
                0.0 as swithholdings

            from a_salary_sheets join a_salary_sheets_r on a_salary_sheets.id = a_salary_sheets_r.ids
            where
                a_salary_sheets_r.idam = :pidam and
                a_salary_sheets.kind = 0 and
                a_salary_sheets.dt2 between :pdatet and :pdate
            order by a_salary_sheets.dt2 desc
        )
        where stemp = 1

        union all

        select
            pay0 as spay,
            iin0 as siin,
            advance as sadvance,
            0 as swithholdings
        from a_positions
        where id = :pidam


        union all
    
        select 
             -a_paylists_r.pay as spay,
             -a_paylists_r.iin as siin,
             -a_paylists_r.advance as sadvance,
             -a_paylists_r.withholdings as swithholdings

        from a_paylists join a_paylists_r on a_paylists.id = a_paylists_r.ids
        where (a_paylists.dt < :pdate or (a_paylists.dt = :pdate and a_paylists.id < :pidpsh))
            and a_paylists_r.idam = :pidam
    )

    into
        :idp, :idam, :pay0, :iin0, :advance, :withholdings
    do suspend;
end^


ALTER PROCEDURE SP_A_PAY_SALDO_02 (
    PIDS INTEGER,
    PDATE DATE,
    PDATET DATE)
RETURNS (
    IDP INTEGER,
    IDAM INTEGER,
    PAY0 DOM_MONEY,
    IIN0 DOM_MONEY,
    ADVANCE DOM_MONEY,
    WITHHOLDINGS DOM_MONEY)
AS
begin
    for select
        sidp as tidp,
        sidam as tidam,
        sum(spay) as tpay,
        sum(siin) as tiin,
        sum(sadvance) as tadvance,
        sum(swithholdings) as twithholdings

    from
    (
        select
            a_salary_sheets_r.idp as sidp,
            a_salary_sheets_r.idam as sidam,
            a_salary_sheets_r.pay as spay,
            a_salary_sheets_r.iin_amount as siin,
            a_salary_sheets_r.advance as sadvance,
            a_salary_sheets_r.minus_after_iin as swithholdings
    
        from
            a_salary_sheets
            join a_salary_sheets_r on a_salary_sheets.id = a_salary_sheets_r.ids
            join a_paylists_r
            on  (
                    a_paylists_r.ids = :pids and
                    a_paylists_r.idam = a_salary_sheets_r.idam
                )
        where
            a_salary_sheets.kind = 0 and
            a_salary_sheets.dt2 <= :pdate and
            a_salary_sheets.is_temp = 0


        union all

        -- last temp sheet-r
        select
            a_salary_sheets_r.idp as sidp,
            a_salary_sheets_r.idam as sidam,
            0.0 as spay,
            0.0 as siin,
            a_salary_sheets_r.pay + a_salary_sheets_r.advance
                - a_salary_sheets_r.minus_after_iin as sadvance,
            0.0 as swithholdings

        from
            a_salary_sheets
            join a_salary_sheets_r
            on  (
                    a_salary_sheets.id = a_salary_sheets_r.ids and
                    a_salary_sheets.kind = 0 and
                    a_salary_sheets.dt2 between :pdatet and :pdate and
                    a_salary_sheets.is_temp = 1
                )
            join a_paylists_r
            on  (
                    a_paylists_r.ids = :pids and
                    a_paylists_r.idam = a_salary_sheets_r.idam
                )
            join
            (
                select
                    ssr2.idam as xidam,
                    max(ss2.dt2) as xdt
                from
                    a_salary_sheets as ss2
                    join a_salary_sheets_r as ssr2
                    on  (
                            ss2.id = ssr2.ids
                        )
                    join a_paylists_r
                    on  (
                            a_paylists_r.ids = :pids and
                            a_paylists_r.idam = ssr2.idam
                        )
                    where
                        ss2.kind = 0 and
                        ss2.dt2 between :pdatet and :pdate
                    group by ssr2.idam
            ) as XT
            on  (
                    XT.xidam = a_salary_sheets_r.idam and
                    XT.xdt = a_salary_sheets.dt2
                )


        union all


        select
            a_positions.idp as sidp,
            a_positions.id as sidam,
            a_positions.pay0 as spay,
            a_positions.iin0 as siin,
            a_positions.advance as sadvance,
            0 as swithholdings

        from
            a_paylists_r join a_positions
            on (
                    a_paylists_r.ids = :pids and
                    a_paylists_r.idam = a_positions.id
                )

        union all
    
        select 
            a_paylists_r.idp as sidp,
            a_paylists_r.idam as sidam,
             -a_paylists_r.pay as spay,
             -a_paylists_r.iin as siin,
             -a_paylists_r.advance as sadvance,
             -a_paylists_r.withholdings as swithholdings
    
        from
            a_paylists
            join a_paylists_r on a_paylists.id = a_paylists_r.ids
            join a_paylists_r as paylists_r_2
            on  (
                    paylists_r_2.ids = :pids and
                    a_paylists_r.idam = paylists_r_2.idam
                )
        where
            a_paylists.dt < :pdate or (a_paylists.dt = :pdate and a_paylists.id < :pids)


    )
    group by sidp, sidam

    into
        :idp, :idam, :pay0, :iin0, :advance, :withholdings
    do suspend;
end^


ALTER PROCEDURE SP_A_PAY_SALDO_03 (
    PDATE DATE,
    PDATET DATE,
    PIDPSH INTEGER)
RETURNS (
    IDP INTEGER,
    IDAM INTEGER,
    PAY0 DOM_MONEY,
    IIN0 DOM_MONEY,
    ADVANCE DOM_MONEY,
    WITHHOLDINGS DOM_MONEY)
AS
begin
    for select
        sidp as tidp,
        sidam as tidam,
        sum(spay) as tpay,
        sum(siin) as tiin,
        sum(sadvance) as tadvance,
        sum(swithholdings) as twithholdings

    from
    (
        select
            a_salary_sheets_r.idp as sidp,
            a_salary_sheets_r.idam as sidam,
            a_salary_sheets_r.pay as spay,
            a_salary_sheets_r.iin_amount as siin,
            a_salary_sheets_r.advance as sadvance,
            a_salary_sheets_r.minus_after_iin as swithholdings
    
        from
            a_salary_sheets
            join a_salary_sheets_r on a_salary_sheets.id = a_salary_sheets_r.ids
        where
            a_salary_sheets.kind = 0 and
            a_salary_sheets.dt2 <= :pdate and
            a_salary_sheets.is_temp = 0

        union all


        -- last temp sheet-r
        select
            a_salary_sheets_r.idp as sidp,
            a_salary_sheets_r.idam as sidam,
            0.00 as spay,
            0.00 as siin,
            a_salary_sheets_r.pay + a_salary_sheets_r.advance
                - a_salary_sheets_r.minus_after_iin as sadvance,
            0.0 as swithholdings
    
        from
            a_salary_sheets
            join a_salary_sheets_r
            on  (
                    a_salary_sheets.id = a_salary_sheets_r.ids and
                    a_salary_sheets.kind = 0 and
                    a_salary_sheets.dt2 between :pdatet and :pdate and
                    a_salary_sheets.is_temp = 1
                )
            join
            (
                select
                    ssr2.idam as xidam,
                    max(ss2.dt2) as xdt
                from
                    a_salary_sheets as ss2
                    join a_salary_sheets_r as ssr2
                    on ss2.id = ssr2.ids
                    where
                        ss2.kind = 0 and
                        ss2.dt2 between :pdatet and :pdate
                    group by ssr2.idam
            ) as XT
            on  XT.xidam = a_salary_sheets_r.idam and XT.xdt = a_salary_sheets.dt2


        union all


        select
            a_positions.idp as sidp,
            a_positions.id as sidam,
            a_positions.pay0 as spay,
            a_positions.iin0 as siin,
            a_positions.advance as sadvance,
            0 as swithholdings

        from a_positions

        union all
    
        select 
            a_paylists_r.idp as sidp,
            a_paylists_r.idam as sidam,
             -a_paylists_r.pay as spay,
             -a_paylists_r.iin as siin,
             -a_paylists_r.advance as sadvance,
             -a_paylists_r.withholdings as swithholdings

        from
            a_paylists
            join a_paylists_r on a_paylists.id = a_paylists_r.ids
        where
            a_paylists.dt < :pdate or (a_paylists.dt = :pdate and a_paylists.id < :PIDPSH)

    )
    group by sidp, sidam

    into
        :idp, :idam, :pay0, :iin0, :advance, :withholdings
    do suspend;
end^


ALTER PROCEDURE SP_A_PAY_X_1 (
    PIDAM INTEGER,
    PIDPSH INTEGER,
    PIDSHR INTEGER,
    PDT DATE,
    PPAY DOM_MONEY)
RETURNS (
    PAY_TAXED DOM_MONEY,
    PAY_NOSAI DOM_MONEY,
    PAY_NOTTAXED DOM_MONEY,
    DNSI DOM_MONEY,
    UNTAXED_MINIMUM DOM_MONEY,
    IINEX_DEPENDANTS DOM_MONEY,
    IINEX2 DOM_MONEY,
    IINEX2_TP SMALLINT,
    PF_NT DOM_MONEY,
    LI_NT DOM_MONEY,
    HI_NT DOM_MONEY,
    IINEX_EXP DOM_MONEY,
    IIN DOM_MONEY)
AS
declare variable X1 DOM_MONEY;
    declare variable X2 DOM_MONEY;

    declare variable VT DOM_MONEY;
    declare variable VNS DOM_MONEY;
    declare variable VBE DOM_MONEY;

    declare variable V_SHEET_DT1 DATE;
    declare variable V_SHEET_DT2 DATE;
    declare variable V_IIN_RATE DOM_MONEY;
    declare variable V_SI_RATE DOM_MONEY;

    declare variable V1_PAY_TAXED DOM_MONEY;
    declare variable V1_PAY_NOSAI DOM_MONEY;
    declare variable V1_PAY_NOTTAXED DOM_MONEY;
    declare variable V1_UNTAXED_MINIMUM DOM_MONEY;
    declare variable V1_IINEX_DEPENDANTS DOM_MONEY;
    declare variable V1_IINEX2 DOM_MONEY;
    declare variable V1_PF_NT DOM_MONEY;
    declare variable V1_LI_NT DOM_MONEY;
    declare variable V1_HI_NT DOM_MONEY;
    declare variable V1_IINEX_EXP DOM_MONEY;
    declare variable V1_IIN DOM_MONEY;
    declare variable V1_PAY DOM_MONEY;

    declare variable V2_PAY_TAXED DOM_MONEY;
    declare variable V2_PAY_NOSAI DOM_MONEY;
    declare variable V2_PAY_NOTTAXED DOM_MONEY;
    declare variable V2_UNTAXED_MINIMUM DOM_MONEY;
    declare variable V2_IINEX_DEPENDANTS DOM_MONEY;
    declare variable V2_IINEX2 DOM_MONEY;
    declare variable V2_PF_NT DOM_MONEY;
    declare variable V2_LI_NT DOM_MONEY;
    declare variable V2_HI_NT DOM_MONEY;
    declare variable V2_IINEX_EXP DOM_MONEY;
    declare variable V2_IIN DOM_MONEY;
    declare variable V2_PAY DOM_MONEY;

    declare variable V1_IINEX DOM_MONEY;
    declare variable V2_IINEX DOM_MONEY;

begin
    PAY_TAXED = 0.0;
    PAY_NOSAI = 0.0;
    PAY_NOTTAXED = 0.0;
    DNSI = 0.0;
    UNTAXED_MINIMUM = 0.0;
    IINEX_DEPENDANTS = 0.0;
    IINEX2 = 0.0;
    IINEX2_TP = 0;
    PF_NT = 0.0;
    LI_NT = 0.0;
    HI_NT = 0.0;
    IINEX_EXP = 0.0;
    IIN = 0.0;

    -- searching for salary sheet row
    select
        a_salary_sheets.dt1 as dt1,
        a_salary_sheets.dt2 as dt2,
        a_salary_sheets_r.rate_iin as rate_iin,
        a_salary_sheets_r.rate_dnsn as rate_dnsn,
        a_salary_sheets_r.salary +
            a_salary_sheets_r.plus_taxed +
            a_salary_sheets_r.plus_pf_taxed +
            a_salary_sheets_r.plus_li_taxed +
            a_salary_sheets_r.plus_hi_taxed +
            a_salary_sheets_r.vacation_pay_current +
            a_salary_sheets_r.sickdays_pay AS PAY_TAXED,

        a_salary_sheets_r.plus_nosai AS PAY_NOSAI,

        a_salary_sheets_r.plus_nottaxed +
            a_salary_sheets_r.plus_pf_nottaxed +
            a_salary_sheets_r.plus_li_nottaxed +
            a_salary_sheets_r.plus_hi_nottaxed AS PAY_NOOTTAXED,
        
        a_salary_sheets_r.iin_exempt_untaxed_minimum AS UNTAXED_MINIMUM,
        a_salary_sheets_r.iin_exempt_dependants AS IINEX_DEPENDANTS,
        a_salary_sheets_r.iin_exempt_2 AS IINEX2,
        a_salary_sheets_r.iin_exempt_2tp AS iinex2_tp,
        a_salary_sheets_r.plus_pf_nottaxed AS PF_NT,
        a_salary_sheets_r.plus_li_nottaxed AS LI_NT,
        a_salary_sheets_r.plus_hi_nottaxed AS HI_NT,
        a_salary_sheets_r.iin_exempt_expenses AS IINEX_EXP,
        a_salary_sheets_r.iin_amount AS IIN,
        a_salary_sheets_r.pay AS PAY

    from a_salary_sheets_r join a_salary_sheets
        on (a_salary_sheets_r.id = :PIDSHR and
            a_salary_sheets_r.ids = a_salary_sheets.id)

    where a_salary_sheets_r.id = :PIDSHR
    into
        :V_SHEET_DT1,
        :V_SHEET_DT2,
        :V_IIN_RATE,
        :V_SI_RATE,
        :V1_PAY_TAXED,
        :V1_PAY_NOSAI,
        :V1_PAY_NOTTAXED,
        :V1_UNTAXED_MINIMUM,
        :V1_IINEX_DEPENDANTS,
        :V1_IINEX2,
        :IINEX2_TP,
        :V1_PF_NT,
        :V1_LI_NT,
        :V1_HI_NT,
        :V1_IINEX_EXP,
        :V1_IIN,
        :V1_PAY;


    if (V1_PAY is null) then
    begin
        IINEX2_TP = 0;
        suspend;
        exit;
    end

    -- sum whats paid
    select
        sum(PAY_TAXED) as PAY_TAXED,
        sum(PAY_NOSAI) as PAY_NOSAI,
        sum(PAY_NOTTAXED) as PAY_NOTTAXED,
        sum(UNTAXED_MINIMUM) as UNTAXED_MINIMUM,
        sum(IINEX_DEPENDANTS) as IINEX_DEPENDANTS,
        sum(IINEX2) as IINEX2,
        sum(PF_NT) as PF_NT,
        sum(LI_NT) as LI_NT,
        sum(HI_NT) as HI_NT,
        sum(IINEX_EXP) as IINEX_EXP,
        sum(IIN) as IIN,
        sum(PAY) as PAY
    from
    (
        select
            coalesce(sum(PAY_TAXED_1), 0.0) as PAY_TAXED,
            coalesce(sum(PAY_NOSAI_1), 0.0) as PAY_NOSAI,
            coalesce(sum(PAY_NOTTAXED_1), 0.0) as PAY_NOTTAXED,
            coalesce(sum(UNTAXED_MINIMUM_1), 0.0) as UNTAXED_MINIMUM,
            coalesce(sum(IINEX_DEPENDANTS_1), 0.0) as IINEX_DEPENDANTS,
            coalesce(sum(IINEX2_1), 0.0) as IINEX2,
            coalesce(sum(PFNT_1), 0.0) as PF_NT,
            coalesce(sum(LINT_1), 0.0) as LI_NT,
            coalesce(sum(HINT_1), 0.0) as HI_NT,
            coalesce(sum(IINEX_EXP_1), 0.0) as IINEX_EXP,
            coalesce(sum(IIN_1), 0.0) as IIN,
            coalesce(sum(S1), 0.0) as PAY
    
        from
            a_paylists join a_paylists_r
            on (a_paylists.id = a_paylists_r.ids and a_paylists_r.idam = :PIDAM)
        where
            a_paylists_r.dt1 = :V_SHEET_DT1 and
            a_paylists.dt < :PDT or (a_paylists.dt = :PDT and a_paylists.id < :PIDPSH)

        union all
    
        select
            coalesce(sum(PAY_TAXED_2), 0.0) as PAY_TAXED,
            coalesce(sum(PAY_NOSAI_2), 0.0) as PAY_NOSAI,
            coalesce(sum(PAY_NOTTAXED_2), 0.0) as PAY_NOTTAXED,
            coalesce(sum(UNTAXED_MINIMUM_2), 0.0) as UNTAXED_MINIMUM,
            coalesce(sum(IINEX_DEPENDANTS_2), 0.0) as IINEX_DEPENDANTS,
            coalesce(sum(IINEX2_2), 0.0) as IINEX2,
            coalesce(sum(PFNT_2), 0.0) as PF_NT,
            coalesce(sum(LINT_2), 0.0) as LI_NT,
            coalesce(sum(HINT_2), 0.0) as HI_NT,
            coalesce(sum(IINEX_EXP_2), 0.0) as IINEX_EXP,
            coalesce(sum(IIN_2), 0.0) as IIN,
            coalesce(sum(S2), 0.0) as PAY

        from
            a_paylists join a_paylists_r
            on (a_paylists.id = a_paylists_r.ids and a_paylists_r.idam = :PIDAM)
        where
            a_paylists_r.dt2 = :V_SHEET_DT2 and
            a_paylists.dt < :PDT or (a_paylists.dt = :PDT and a_paylists.id < :PIDPSH)
    )
    into
        :V2_PAY_TAXED,
        :V2_PAY_NOSAI,
        :V2_PAY_NOTTAXED,
        :V2_UNTAXED_MINIMUM,
        :V2_IINEX_DEPENDANTS,
        :V2_IINEX2,
        :V2_PF_NT,
        :V2_LI_NT,
        :V2_HI_NT,
        :V2_IINEX_EXP,
        :V2_IIN,
        :V2_PAY;

    PAY_TAXED = V1_PAY_TAXED - V2_PAY_TAXED;
    PAY_NOSAI = V1_PAY_NOSAI - V2_PAY_NOSAI;
    PAY_NOTTAXED = V1_PAY_NOTTAXED - V2_PAY_NOTTAXED;
    UNTAXED_MINIMUM = V1_UNTAXED_MINIMUM - V2_UNTAXED_MINIMUM;
    IINEX_DEPENDANTS = V1_IINEX_DEPENDANTS - V2_IINEX_DEPENDANTS;
    IINEX2 = V1_IINEX2 - V2_IINEX2;
    PF_NT = V1_PF_NT - V2_PF_NT;
    LI_NT = V1_LI_NT - V2_LI_NT;
    HI_NT = V1_HI_NT - V2_HI_NT;
    IINEX_EXP = V1_IINEX_EXP - V2_IINEX_EXP;
    IIN = V1_IIN - V2_IIN;

    PPAY = PPAY + V2_PAY;

    if (PPAY = V1_PAY) then
    begin
        suspend;
        exit;
    end

    V1_IINEX = V1_UNTAXED_MINIMUM + V1_IINEX_DEPENDANTS + V1_IINEX2 + V1_IINEX_EXP;
    V1_IINEX = V1_IINEX + V1_PF_NT + V1_LI_NT + V1_HI_NT;

    X1 = PPAY - V2_PAY_NOTTAXED - (V2_PAY_NOSAI + (1 - V_SI_RATE) * V2_PAY_TAXED);
    X1 = X1 / (PAY_NOTTAXED + PAY_NOSAI + (1 - V_SI_RATE) * PAY_TAXED);
    
    X2 = PPAY - V1_IINEX * V_IIN_RATE - V2_PAY_NOTTAXED - (1 - V_IIN_RATE) * (V2_PAY_NOSAI + (1 - V_SI_RATE) * V2_PAY_TAXED);
    X2 = X2 / (PAY_NOTTAXED + (1 - V_IIN_RATE) * (PAY_NOSAI + (1 - V_SI_RATE) * PAY_TAXED));
    
    VT = PAY_TAXED * X1;
    VNS = PAY_NOSAI * X1;
    VBE = V2_PAY_NOSAI + VNS + (V2_PAY_TAXED + VT) * (1 - V_SI_RATE);
    If (VBE < V1_IINEX) Then
        x1 = X1;
    Else
        X1 = X2;
    
    PAY_TAXED = PAY_TAXED * X1;
    PAY_NOSAI = PAY_NOSAI * X1;
    PAY_NOTTAXED = PAY_NOTTAXED * X1;

    DNSI = (PAY_TAXED + V2_PAY_TAXED) * V_SI_RATE;
    VBE = PAY_TAXED + V2_PAY_TAXED + PAY_NOSAI + V2_PAY_NOSAI - DNSI;

    if(VBE < V1_IINEX) then
    begin
        V2_IINEX = VBE;
        IIN = 0;
    end
    else begin
        V2_IINEX = V1_IINEX;
        IIN = (VBE - V2_IINEX) * V_IIN_RATE;
    end

    X2 = V2_IINEX / V1_IINEX;

    UNTAXED_MINIMUM = UNTAXED_MINIMUM * X2;
    IINEX_DEPENDANTS = IINEX_DEPENDANTS * X2;
    IINEX2 = IINEX2 * X2;
    PF_NT = PF_NT * X2;
    LI_NT = LI_NT * X2;
    HI_NT = HI_NT * X2;
    IINEX_EXP = IINEX_EXP * X2;

    suspend;
end^


ALTER PROCEDURE SP_A_PAYLISTS_PER_01 (
    PDATE1 DATE,
    PDATE2 DATE)
RETURNS (
    ID TYPE OF COLUMN A_PAYLISTS.ID,
    SNR TYPE OF COLUMN A_PAYLISTS.SNR,
    YR TYPE OF COLUMN A_PAYLISTS.YR,
    MT TYPE OF COLUMN A_PAYLISTS.MT,
    DT TYPE OF COLUMN A_PAYLISTS.DT,
    DEP TYPE OF COLUMN A_PAYLISTS.DEP,
    DESCR TYPE OF COLUMN A_PAYLISTS.DESCR,
    DOPAY TYPE OF COLUMN A_PAYLISTS.DOPAY,
    TOTAL_PAY TYPE OF COLUMN A_PAYLISTS.TOTAL_PAY)
AS
begin
    for select id, snr, yr, mt, dt, dep, descr, dopay, total_pay
    from a_paylists
    where DT between :pdate1 and :pdate2
    order by DT, SNR
    into :id, :snr, :yr, :mt, :dt, :dep, :descr, :dopay, :total_pay

    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_A_PAYLISTS_R_PER_01 (
    PDATE1 DATE,
    PDATE2 DATE)
RETURNS (
    ID TYPE OF COLUMN A_PAYLISTS_R.ID,
    IDS TYPE OF COLUMN A_PAYLISTS_R.IDS,
    IDP TYPE OF COLUMN A_PAYLISTS_R.IDP,
    IDAM TYPE OF COLUMN A_PAYLISTS_R.IDAM,
    SNR TYPE OF COLUMN A_PAYLISTS_R.SNR,
    PAY0 TYPE OF COLUMN A_PAYLISTS_R.PAY0,
    IIN0 TYPE OF COLUMN A_PAYLISTS_R.IIN0,
    ADVANCE0 TYPE OF COLUMN A_PAYLISTS_R.ADVANCE0,
    WITHHOLDINGS0 TYPE OF COLUMN A_PAYLISTS_R.WITHHOLDINGS0,
    TPAY0 TYPE OF COLUMN A_PAYLISTS_R.TPAY0,
    PAY TYPE OF COLUMN A_PAYLISTS_R.PAY,
    IIN TYPE OF COLUMN A_PAYLISTS_R.IIN,
    ADVANCE TYPE OF COLUMN A_PAYLISTS_R.ADVANCE,
    WITHHOLDINGS TYPE OF COLUMN A_PAYLISTS_R.WITHHOLDINGS,
    TPAY TYPE OF COLUMN A_PAYLISTS_R.TPAY,
    PAY_REVERSE TYPE OF COLUMN A_PAYLISTS_R.PAY_REVERSE,
    IIN_REVERSE TYPE OF COLUMN A_PAYLISTS_R.IIN_REVERSE,
    DT1 TYPE OF COLUMN A_PAYLISTS_R.DT1,
    DT2 TYPE OF COLUMN A_PAYLISTS_R.DT2,
    R1 TYPE OF COLUMN A_PAYLISTS_R.R1,
    R2 TYPE OF COLUMN A_PAYLISTS_R.R2,
    S0 TYPE OF COLUMN A_PAYLISTS_R.S0,
    S1 TYPE OF COLUMN A_PAYLISTS_R.S1,
    S2 TYPE OF COLUMN A_PAYLISTS_R.S2,
    ID_SHR_1 TYPE OF COLUMN A_PAYLISTS_R.ID_SHR_1,
    ID_SHR_2 TYPE OF COLUMN A_PAYLISTS_R.ID_SHR_2,
    PAY_TAXED_1 TYPE OF COLUMN A_PAYLISTS_R.PAY_TAXED_1,
    PAY_NOSAI_1 TYPE OF COLUMN A_PAYLISTS_R.PAY_NOSAI_1,
    PAY_NOTTAXED_1 TYPE OF COLUMN A_PAYLISTS_R.PAY_NOTTAXED_1,
    UNTAXED_MINIMUM_1 TYPE OF COLUMN A_PAYLISTS_R.UNTAXED_MINIMUM_1,
    IINEX_DEPENDANTS_1 TYPE OF COLUMN A_PAYLISTS_R.IINEX_DEPENDANTS_1,
    IINEX2_1 TYPE OF COLUMN A_PAYLISTS_R.IINEX2_1,
    IINEX2_TP_1 TYPE OF COLUMN A_PAYLISTS_R.IINEX2_TP_1,
    DNSI_1 TYPE OF COLUMN A_PAYLISTS_R.DNSI_1,
    PFNT_1 TYPE OF COLUMN A_PAYLISTS_R.PFNT_1,
    LINT_1 TYPE OF COLUMN A_PAYLISTS_R.LINT_1,
    HINT_1 TYPE OF COLUMN A_PAYLISTS_R.HINT_1,
    IINEX_EXP_1 TYPE OF COLUMN A_PAYLISTS_R.IINEX_EXP_1,
    IIN_1 TYPE OF COLUMN A_PAYLISTS_R.IIN_1,
    PAY_TAXED_2 TYPE OF COLUMN A_PAYLISTS_R.PAY_TAXED_2,
    PAY_NOSAI_2 TYPE OF COLUMN A_PAYLISTS_R.PAY_NOSAI_2,
    PAY_NOTTAXED_2 TYPE OF COLUMN A_PAYLISTS_R.PAY_NOTTAXED_2,
    UNTAXED_MINIMUM_2 TYPE OF COLUMN A_PAYLISTS_R.UNTAXED_MINIMUM_2,
    IINEX_DEPENDANTS_2 TYPE OF COLUMN A_PAYLISTS_R.IINEX_DEPENDANTS_2,
    IINEX2_2 TYPE OF COLUMN A_PAYLISTS_R.IINEX2_2,
    IINEX2_TP_2 TYPE OF COLUMN A_PAYLISTS_R.IINEX2_TP_2,
    DNSI_2 TYPE OF COLUMN A_PAYLISTS_R.DNSI_2,
    PFNT_2 TYPE OF COLUMN A_PAYLISTS_R.PFNT_2,
    LINT_2 TYPE OF COLUMN A_PAYLISTS_R.LINT_2,
    HINT_2 TYPE OF COLUMN A_PAYLISTS_R.HINT_2,
    IINEX_EXP_2 TYPE OF COLUMN A_PAYLISTS_R.IINEX_EXP_2,
    IIN_2 TYPE OF COLUMN A_PAYLISTS_R.IIN_2)
AS
begin
    for select
        a_paylists_r.id,
        a_paylists_r.ids,
        a_paylists_r.idp,
        a_paylists_r.idam,
        a_paylists_r.snr,
        a_paylists_r.pay0,
        a_paylists_r.iin0,
        a_paylists_r.advance0,
        a_paylists_r.withholdings0,
        a_paylists_r.tpay0,
        a_paylists_r.pay,
        a_paylists_r.iin,
        a_paylists_r.advance,
        a_paylists_r.withholdings,
        a_paylists_r.tpay,
        a_paylists_r.pay_reverse,
        a_paylists_r.iin_reverse,
        a_paylists_r.dt1,
        a_paylists_r.dt2,
        a_paylists_r.r1,
        a_paylists_r.r2,
        a_paylists_r.s0,
        a_paylists_r.s1,
        a_paylists_r.s2,
        a_paylists_r.ID_SHR_1,
        a_paylists_r.ID_SHR_2,
        a_paylists_r.PAY_TAXED_1,
        a_paylists_r.PAY_NOSAI_1,
        a_paylists_r.PAY_NOTTAXED_1,
        a_paylists_r.UNTAXED_MINIMUM_1,
        a_paylists_r.IINEX_DEPENDANTS_1,
        a_paylists_r.IINEX2_1,
        a_paylists_r.IINEX2_TP_1,
        a_paylists_r.DNSI_1,
        a_paylists_r.PFNT_1,
        a_paylists_r.LINT_1,
        a_paylists_r.HINT_1,
        a_paylists_r.IINEX_EXP_1,
        a_paylists_r.IIN_1,
        a_paylists_r.PAY_TAXED_2,
        a_paylists_r.PAY_NOSAI_2,
        a_paylists_r.PAY_NOTTAXED_2,
        a_paylists_r.UNTAXED_MINIMUM_2,
        a_paylists_r.IINEX_DEPENDANTS_2,
        a_paylists_r.IINEX2_2,
        a_paylists_r.IINEX2_TP_2,
        a_paylists_r.DNSI_2,
        a_paylists_r.PFNT_2,
        a_paylists_r.LINT_2,
        a_paylists_r.HINT_2,
        a_paylists_r.IINEX_EXP_2,
        a_paylists_r.IIN_2


    from a_paylists_r join a_paylists on a_paylists_r.ids = a_paylists.id
    where a_paylists.DT between :pdate1 and :pdate2
    order by a_paylists.DT, a_paylists.SNR, a_paylists_r.SNR
    into
        :id,
        :ids,
        :idp,
        :idam,
        :snr,
        :pay0,
        :iin0,
        :advance0,
        :withholdings0,
        :tpay0,
        :pay,
        :iin,
        :advance,
        :withholdings,
        :tpay,
        :pay_reverse,
        :iin_reverse,
        :dt1,
        :dt2,
        :r1,
        :r2,
        :s0,
        :s1,
        :s2,
        :ID_SHR_1,
        :ID_SHR_2,
        :PAY_TAXED_1,
        :PAY_NOSAI_1,
        :PAY_NOTTAXED_1,
        :UNTAXED_MINIMUM_1,
        :IINEX_DEPENDANTS_1,
        :IINEX2_1,
        :IINEX2_TP_1,
        :DNSI_1,
        :PFNT_1,
        :LINT_1,
        :HINT_1,
        :IINEX_EXP_1,
        :IIN_1,
        :PAY_TAXED_2,
        :PAY_NOSAI_2,
        :PAY_NOTTAXED_2,
        :UNTAXED_MINIMUM_2,
        :IINEX_DEPENDANTS_2,
        :IINEX2_2,
        :IINEX2_TP_2,
        :DNSI_2,
        :PFNT_2,
        :LINT_2,
        :HINT_2,
        :IINEX_EXP_2,
        :IIN_2

    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_A_PAYLISTS_SUM_TOTALS
AS
begin
    UPDATE a_paylists
    SET TOTAL_PAY = (select SUM(TPAY) FROM a_paylists_r WHERE a_paylists_r.ids = a_paylists.ID);
end^


ALTER PROCEDURE SP_A_PIECEWORK_PER_01 (
    PDT1 DATE,
    PDT2 DATE)
RETURNS (
    ID TYPE OF COLUMN A_PIECEWORK.ID,
    IDK TYPE OF COLUMN A_PIECEWORK.IDK,
    IDP TYPE OF COLUMN A_PIECEWORK.IDP,
    IDA TYPE OF COLUMN A_PIECEWORK.IDA,
    DT TYPE OF COLUMN A_PIECEWORK.DT,
    UNIT TYPE OF COLUMN A_PIECEWORK.UNIT,
    QUANTITY TYPE OF COLUMN A_PIECEWORK.QUANTITY,
    RATE TYPE OF COLUMN A_PIECEWORK.RATE,
    BONUS TYPE OF COLUMN A_PIECEWORK.BONUS,
    PAY TYPE OF COLUMN A_PIECEWORK.PAY,
    TIMEUNIT TYPE OF COLUMN A_PIECEWORK.TIMEUNIT,
    TIMEUSE TYPE OF COLUMN A_PIECEWORK.TIMEUSE,
    TIMEUSEINHOURS TYPE OF COLUMN A_PIECEWORK.TIMEUSEINHOURS)
AS
begin
    for select
        id,
        idk,
        idp,
        ida,
        dt,
        unit,
        quantity,
        rate,
        bonus,
        pay,
        timeunit,
        timeuse,
        timeuseinhours
    from a_piecework
    where a_piecework.dt between :pdt1 and :pdt2
    order by a_piecework.dt

    into
        :id,
        :idk,
        :idp,
        :ida,
        :dt,
        :unit,
        :quantity,
        :rate,
        :bonus,
        :pay,
        :timeunit,
        :timeuse,
        :timeuseinhours
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_A_PLANS_BY_YRMT (
    PYR INTEGER,
    PMT INTEGER)
RETURNS (
    ID TYPE OF COLUMN A_TIMESHEET.ID,
    IDP TYPE OF COLUMN A_TIMESHEET.IDP,
    IDL TYPE OF COLUMN A_TIMESHEET.IDL,
    SNR TYPE OF COLUMN A_TIMESHEET.SNR,
    PERID TYPE OF COLUMN A_TIMESHEET.PERID,
    AMID TYPE OF COLUMN A_TIMESHEET.AMID,
    YR TYPE OF COLUMN A_TIMESHEET.YR,
    MT TYPE OF COLUMN A_TIMESHEET.MT,
    KIND1 TYPE OF COLUMN A_TIMESHEET.KIND1,
    KIND2 TYPE OF COLUMN A_TIMESHEET.KIND2,
    V1 TYPE OF COLUMN A_TIMESHEET.V1,
    V2 TYPE OF COLUMN A_TIMESHEET.V2,
    V3 TYPE OF COLUMN A_TIMESHEET.V3,
    V4 TYPE OF COLUMN A_TIMESHEET.V4,
    V5 TYPE OF COLUMN A_TIMESHEET.V5,
    V6 TYPE OF COLUMN A_TIMESHEET.V6,
    V7 TYPE OF COLUMN A_TIMESHEET.V7,
    V8 TYPE OF COLUMN A_TIMESHEET.V8,
    V9 TYPE OF COLUMN A_TIMESHEET.V9,
    V10 TYPE OF COLUMN A_TIMESHEET.V10,
    V11 TYPE OF COLUMN A_TIMESHEET.V11,
    V12 TYPE OF COLUMN A_TIMESHEET.V12,
    V13 TYPE OF COLUMN A_TIMESHEET.V13,
    V14 TYPE OF COLUMN A_TIMESHEET.V14,
    V15 TYPE OF COLUMN A_TIMESHEET.V15,
    V16 TYPE OF COLUMN A_TIMESHEET.V16,
    V17 TYPE OF COLUMN A_TIMESHEET.V17,
    V18 TYPE OF COLUMN A_TIMESHEET.V18,
    V19 TYPE OF COLUMN A_TIMESHEET.V19,
    V20 TYPE OF COLUMN A_TIMESHEET.V20,
    V21 TYPE OF COLUMN A_TIMESHEET.V21,
    V22 TYPE OF COLUMN A_TIMESHEET.V22,
    V23 TYPE OF COLUMN A_TIMESHEET.V23,
    V24 TYPE OF COLUMN A_TIMESHEET.V24,
    V25 TYPE OF COLUMN A_TIMESHEET.V25,
    V26 TYPE OF COLUMN A_TIMESHEET.V26,
    V27 TYPE OF COLUMN A_TIMESHEET.V27,
    V28 TYPE OF COLUMN A_TIMESHEET.V28,
    V29 TYPE OF COLUMN A_TIMESHEET.V29,
    V30 TYPE OF COLUMN A_TIMESHEET.V30,
    V31 TYPE OF COLUMN A_TIMESHEET.V31,
    K1 TYPE OF COLUMN A_TIMESHEET.K1,
    D1 TYPE OF COLUMN A_TIMESHEET.D1,
    D2 TYPE OF COLUMN A_TIMESHEET.D2,
    D3 TYPE OF COLUMN A_TIMESHEET.D3,
    D4 TYPE OF COLUMN A_TIMESHEET.D4,
    D5 TYPE OF COLUMN A_TIMESHEET.D5,
    D6 TYPE OF COLUMN A_TIMESHEET.D6,
    D7 TYPE OF COLUMN A_TIMESHEET.D7,
    D8 TYPE OF COLUMN A_TIMESHEET.D8,
    D9 TYPE OF COLUMN A_TIMESHEET.D9,
    D10 TYPE OF COLUMN A_TIMESHEET.D10,
    D11 TYPE OF COLUMN A_TIMESHEET.D11,
    D12 TYPE OF COLUMN A_TIMESHEET.D12,
    D13 TYPE OF COLUMN A_TIMESHEET.D13,
    D14 TYPE OF COLUMN A_TIMESHEET.D14,
    D15 TYPE OF COLUMN A_TIMESHEET.D15,
    D16 TYPE OF COLUMN A_TIMESHEET.D16,
    D17 TYPE OF COLUMN A_TIMESHEET.D17,
    D18 TYPE OF COLUMN A_TIMESHEET.D18,
    D19 TYPE OF COLUMN A_TIMESHEET.D19,
    D20 TYPE OF COLUMN A_TIMESHEET.D20,
    D21 TYPE OF COLUMN A_TIMESHEET.D21,
    D22 TYPE OF COLUMN A_TIMESHEET.D22,
    D23 TYPE OF COLUMN A_TIMESHEET.D23,
    D24 TYPE OF COLUMN A_TIMESHEET.D24,
    D25 TYPE OF COLUMN A_TIMESHEET.D25,
    D26 TYPE OF COLUMN A_TIMESHEET.D26,
    D27 TYPE OF COLUMN A_TIMESHEET.D27,
    D28 TYPE OF COLUMN A_TIMESHEET.D28,
    D29 TYPE OF COLUMN A_TIMESHEET.D29,
    D30 TYPE OF COLUMN A_TIMESHEET.D30,
    D31 TYPE OF COLUMN A_TIMESHEET.D31)
AS
begin

    for select
        ID, IDP, IDL, SNR, PERID, AMID,
        YR, MT, KIND1, KIND2,
        V1, V2, V3, V4, V5, V6, V7, V8, V9, V10,
        V11, V12, V13, V14, V15, V16, V17, V18, V19, V20,
        V21, V22, V23, V24, V25, V26, V27, V28, V29, V30,
        V31, K1,
        D1, D2, D3, D4, D5, D6, D7, D8, D9, D10,
        D11, D12, D13, D14, D15, D16, D17, D18, D19, D20,
        D21, D22, D23, D24, D25, D26, D27, D28, D29, D30,
        D31

    from a_timesheet
    where YR = :PYR AND MT = :PMT AND KIND1 < 4
    order by SNR
    into
        :ID, :IDP, :IDL, :SNR, :PERID, :AMID,
        :YR, :MT, :KIND1, :KIND2,
        :V1, :V2, :V3, :V4, :V5, :V6, :V7, :V8, :V9, :V10,
        :V11, :V12, :V13, :V14, :V15, :V16, :V17, :V18, :V19, :V20,
        :V21, :V22, :V23, :V24, :V25, :V26, :V27, :V28, :V29, :V30,
        :V31, :K1,
        :D1, :D2, :D3, :D4, :D5, :D6, :D7, :D8, :D9, :D10,
        :D11, :D12, :D13, :D14, :D15, :D16, :D17, :D18, :D19, :D20,
        :D21, :D22, :D23, :D24, :D25, :D26, :D27, :D28, :D29, :D30,
        :D31
    do
    begin
      suspend;
    end
end^


ALTER PROCEDURE SP_A_POSITIONS_PLUSMINUS_PER_01 (
    PDATE1 DATE,
    PDATE2 DATE)
RETURNS (
    ID TYPE OF COLUMN A_POSITIONS_PLUSMINUS.ID,
    IDP TYPE OF COLUMN A_POSITIONS_PLUSMINUS.IDP,
    IDA TYPE OF COLUMN A_POSITIONS_PLUSMINUS.IDA,
    DATE1 TYPE OF COLUMN A_POSITIONS_PLUSMINUS.DATE1,
    DATE2 TYPE OF COLUMN A_POSITIONS_PLUSMINUS.DATE2,
    IDSV TYPE OF COLUMN A_POSITIONS_PLUSMINUS.IDSV,
    IDNO TYPE OF COLUMN A_POSITIONS_PLUSMINUS.IDNO,
    IDIE TYPE OF COLUMN A_POSITIONS_PLUSMINUS.IDIE,
    DESCR TYPE OF COLUMN A_POSITIONS_PLUSMINUS.DESCR,
    RATE TYPE OF COLUMN A_POSITIONS_PLUSMINUS.RATE,
    RATE_TYPE TYPE OF COLUMN A_POSITIONS_PLUSMINUS.RATE_TYPE,
    IS_INAVPAY TYPE OF COLUMN A_SALARY_PLUSMINUS.IS_INAVPAY,
    IS_PAID TYPE OF COLUMN A_SALARY_PLUSMINUS.IS_PAID)
AS
begin

    for select
        id,
        idp,
        ida,
        date1,
        date2,
        idsv,
        idno,
        idie,
        descr,
        rate,
        rate_type,
        is_inavpay,
        is_paid

    from a_positions_plusminus
    where
        (date2 is null and date1 <= :pdate2) or
        (date2 is not null and date1 <= :pdate2 and date2 >= :pdate1)

    order by date1

    into
        :id,
        :idp,
        :ida,
        :date1,
        :date2,
        :idsv,
        :idno,
        :idie,
        :descr,
        :rate,
        :rate_type,
        :is_inavpay,
        :is_paid

    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_A_RATES_ID
RETURNS (
    NEXTID INTEGER)
AS
begin
    nextid = GEN_ID("GEN_A_RATES_ID",1);
end^


ALTER PROCEDURE SP_A_REP_AGGREGATE_01 (
    PDT1 DATE,
    PDT2 DATE,
    PIDP INTEGER,
    PIDAM INTEGER,
    PRETYRMT INTEGER,
    PRETIDP INTEGER,
    PRETIDAM INTEGER)
RETURNS (
    IDP TYPE OF COLUMN A_SALARY_SHEETS_R.IDP,
    IDAM TYPE OF COLUMN A_SALARY_SHEETS_R.IDAM,
    IDDEP TYPE OF COLUMN A_DEPARTMENTS.ID,
    YR TYPE OF COLUMN A_SALARY_SHEETS.YR,
    MT TYPE OF COLUMN A_SALARY_SHEETS.MT,
    WORKHOURS TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_HOURS,
    WORKDAYS TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_DAYS,
    FREEAVPAYDAYS TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_DAYS,
    VACATIONDAYS TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_DAYS_CURRENT,
    VACATIONDAYSCOMP TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_DAYS_COMP,
    SICKDAYS TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_DAYS,
    WORKPAY TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY,
    SICKPAY TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY,
    VACATIONPAY TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY,
    VACATIONPAYCOMP TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_PAY_COMP,
    FREEAVPAY TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY,
    WORKAVPAY TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY,
    PLUS_TAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_TAXED,
    PLUS_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOTTAXED,
    PLUS_AUTHORS_FEES TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_AUTHORS_FEES,
    PLUS_NOSAI TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOSAI,
    TOTALPAY TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY,
    FORSAI TYPE OF COLUMN A_SALARY_SHEETS_R.AMOUNT_BEFORE_SN,
    DNSN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.DNSN_AMOUNT,
    DDSN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.DDSN_AMOUNT,
    UNTAXED_MINIMUM TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM,
    IIN_EXEMPT_DEPENDANTS TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS,
    IIN_EXEMPT_INVALIDITY TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_INVALIDITY,
    IIN_EXEMPT_NATIONAL_MOVEMENT TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_NATIONAL_MOVEMENT,
    IIN_EXEMPT_RETALIATION TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_RETALIATION,
    IIN_EXEMPT_EXPENSES TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_EXPENSES,
    PLUS_PF_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_PF_NOTTAXED,
    PLUS_LI_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_LI_NOTTAXED,
    PLUS_HI_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_HI_NOTTAXED,
    IIN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT,
    MINUS_BEFORE_IIN TYPE OF COLUMN A_SALARY_SHEETS_R.MINUS_BEFORE_IIN,
    MINUS_AFTER_IIN TYPE OF COLUMN A_SALARY_SHEETS_R.MINUS_AFTER_IIN,
    PAY TYPE OF COLUMN A_SALARY_SHEETS_R.PAY,
    ADVANCE TYPE OF COLUMN A_SALARY_SHEETS_R.ADVANCE,
    PAYT TYPE OF COLUMN A_SALARY_SHEETS_R.PAYT,
    PAID TYPE OF COLUMN A_PAYLISTS_R.TPAY)
AS
begin
    for select
        ridp,
        ridam,
        null as iddep,

        ryr,
        rmt,

        sum(rworkhours) as tworkhours,
        sum(rworkdays) as tworkdays,

        sum(rfreeavpaydays) as tfreeavpaydays,
        sum(rvacationdays) as tvacationdays,
        sum(rvacationdayscomp) as tvacationdayscomp,
        sum(rsickdays) as tsickdays,

        sum(rworkpay) as tworkpay,
        sum(rsickpay) as tsickpay,
        sum(rvacationpay) as tvacationpay,
        sum(rvacationpaycomp) as tvacationpaycomp,
        sum(rfreeavpay) as tfreeavpay,
        sum(rworkavpay) as tworkavpay,

        sum(rplus_taxed) as tplus_taxed,
        sum(rplus_nottaxed) as tplus_nottaxed,
        sum(rplus_authors_fees) as tplus_authors_fees,
        sum(rplus_nosai) as tplus_nosai,

        sum(rtotalpay) as ttotalpay,

        sum(rforsai) as tforsai,

        sum(rdnsn_amount) as tdnsn_amount,
        sum(rddsn_amount) as tddsn_amount,

        sum(runtaxed_minimum) as tuntaxed_minimum,
        sum(riin_exempt_dependants) as tiin_exempt_dependants,
        sum(riin_exempt_invalidity) as tiin_exempt_invalidity,
        sum(riin_exempt_national_movement) as tiin_exempt_national_movement,
        sum(riin_exempt_retaliation) as tiin_exempt_retaliation,
        sum(riin_exempt_expenses) as tiin_exempt_expenses,

        sum(rplus_pf_nottaxed) as tplus_pf_nottaxed,
        sum(rplus_li_nottaxed) as tplus_li_nottaxed,
        sum(rplus_hi_nottaxed) as tplus_hi_nottaxed,

        sum(riin_amount) as tiin_amount,

        sum(rminus_before_iin) as tminus_before_iin,
        sum(rminus_after_iin) as tminus_after_iin,

        sum(rpay) as tpay,
        sum(radvance) as tadvance,
        sum(rpayt) as tpayt,
        sum(rpaid) as tpaid
    from
    (

        select
            iif(:pretidp = 0, null, a_salary_sheets_r.idp) as ridp,
            iif(:pretidam = 0, null, a_salary_sheets_r.idam) as ridam,

            iif(:pretyrmt = 0, null, a_salary_sheets.yr) as ryr,
            iif(:pretyrmt = 0, null, a_salary_sheets.mt) as rmt,

            a_salary_sheets_r.fact_hours as rworkhours,
            a_salary_sheets_r.fact_days as rworkdays,

            a_salary_sheets_r.fact_avpay_free_days as rfreeavpaydays,
            a_salary_sheets_r.vacation_days_current as rvacationdays,
            a_salary_sheets_r.vacation_days_comp as rvacationdayscomp,
            a_salary_sheets_r.sickdays as rsickdays,

            a_salary_sheets_r.salary as rworkpay,
            a_salary_sheets_r.sickdays_pay as rsickpay,
            a_salary_sheets_r.vacation_pay_current as rvacationpay,
            a_salary_sheets_r.vacation_pay_comp as rvacationpaycomp,
            a_salary_sheets_r.salary_avpay_free_days as rfreeavpay,

            a_salary_sheets_r.salary_avpay_work_days +
                a_salary_sheets_r.salary_avpay_work_days_overtime +
                a_salary_sheets_r.salary_avpay_holidays +
                a_salary_sheets_r.salary_avpay_holidays_overtime as rworkavpay,

            a_salary_sheets_r.plus_taxed +
                a_salary_sheets_r.plus_pf_taxed +
                a_salary_sheets_r.plus_li_taxed +
                a_salary_sheets_r.plus_hi_taxed as rplus_taxed,

            a_salary_sheets_r.plus_nottaxed +
                a_salary_sheets_r.plus_pf_nottaxed +
                a_salary_sheets_r.plus_li_nottaxed +
                a_salary_sheets_r.plus_hi_nottaxed as rplus_nottaxed,

            a_salary_sheets_r.plus_authors_fees as rplus_authors_fees,
            a_salary_sheets_r.plus_nosai as rplus_nosai,

            a_salary_sheets_r.total_before_taxes as rtotalpay,

            a_salary_sheets_r.amount_before_sn as rforsai,

            a_salary_sheets_r.dnsn_amount as rdnsn_amount,
            a_salary_sheets_r.ddsn_amount as rddsn_amount,

            a_salary_sheets_r.iin_exempt_untaxed_minimum as runtaxed_minimum,
            a_salary_sheets_r.iin_exempt_dependants as riin_exempt_dependants,
            a_salary_sheets_r.iin_exempt_invalidity as riin_exempt_invalidity,
            a_salary_sheets_r.iin_exempt_national_movement as riin_exempt_national_movement,
            a_salary_sheets_r.iin_exempt_retaliation as riin_exempt_retaliation,
            a_salary_sheets_r.iin_exempt_expenses as riin_exempt_expenses,

            a_salary_sheets_r.plus_pf_nottaxed as rplus_pf_nottaxed,
            a_salary_sheets_r.plus_li_nottaxed as rplus_li_nottaxed,
            a_salary_sheets_r.plus_hi_nottaxed as rplus_hi_nottaxed,

            a_salary_sheets_r.iin_amount as riin_amount,

            a_salary_sheets_r.minus_before_iin as rminus_before_iin,
            a_salary_sheets_r.minus_after_iin as rminus_after_iin,

            a_salary_sheets_r.pay as rpay,
            a_salary_sheets_r.advance as radvance,
            a_salary_sheets_r.payt as rpayt,
            0.0 as rpaid
    
        from a_salary_sheets
        join a_salary_sheets_r on a_salary_sheets.id = a_salary_sheets_r.ids

        where
            (a_salary_sheets.dt2 between :pdt1 and :pdt2) AND
            ((:pidp is null) OR (a_salary_sheets_r.idp = :pidp)) AND
            ((:pidam is null) OR (a_salary_sheets_r.idam = :pidam)) AND
            (a_salary_sheets.is_temp = 0) AND
            (a_salary_sheets.kind = 0)

        union all

        select
            iif(:pretidp = 0, null, a_paylists_r.idp) as ridp,
            iif(:pretidam = 0, null, a_paylists_r.idam) as ridam,

            iif(:pretyrmt = 0, null, a_paylists.yr) as ryr,
            iif(:pretyrmt = 0, null, a_paylists.mt) as rmt,

            0 as rworkhours,
            0 as rworkdays,

            0 as rfreeavpaydays,
            0 as rvacationdays,
            0 as rvacationdayscomp,
            0 as sickdays,

            0.0 as rworkpay,
            0.0 as rsickpay,
            0.0 as rvacationpay,
            0.0 as rvacationpaycomp,
            0.0 as rfreeavpay,
            0.0 as rworkavpay,

            0.0 as rplus_taxed,

            0.0 as rplus_nottaxed,

            0.0 as rplus_authors_fees,
            0.0 as rplus_nosai,

            0.0 as rtotalpay,

            0.0 as rforsai,

            0.0 as rdnsn_amount,
            0.0 as rddsn_amount,

            0.0 as runtaxed_minimum,
            0.0 as riin_exempt_dependants,
            0.0 as riin_exempt_invalidity,
            0.0 as riin_exempt_national_movement,
            0.0 as riin_exempt_retaliation,
            0.0 as riin_exempt_expenses,

            0.0 as rplus_pf_nottaxed,
            0.0 as rplus_li_nottaxed,
            0.0 as rplus_hi_nottaxed,

            0.0 as riin_amount,

            0.0 as rminus_before_iin,
            0.0 as rminus_after_iin,

            0.0 as rpay,
            0.0 as radvance,
            0.0 as rpayt,
            a_paylists_r.tpay as rpaid
    
        from a_paylists
        join a_paylists_r on a_paylists.id = a_paylists_r.ids

        where
            (a_paylists.dt between :pdt1 and :pdt2) AND
            ((:pidp is null) OR (a_paylists_r.idp = :pidp)) AND
            ((:pidam is null) OR (a_paylists_r.idam = :pidam))

    )
    group by ridp, ridam, ryr, rmt
    order by ryr, rmt

    into
        :idp,
        :idam,
        :iddep,

        :yr,
        :mt, 

        :workhours,
        :workdays,

        :freeavpaydays,
        :vacationdays,
        :vacationdayscomp,
        :sickdays,

        :workpay,
        :sickpay, 
        :vacationpay, 
        :vacationpaycomp,
        :freeavpay,
        :workavpay,

        :plus_taxed,
        :plus_nottaxed,
        :plus_authors_fees,
        :plus_nosai,

        :totalpay,

        :forsai,

        :dnsn_amount,
        :ddsn_amount,

        :untaxed_minimum,
        :iin_exempt_dependants,
        :iin_exempt_invalidity,
        :iin_exempt_national_movement,
        :iin_exempt_retaliation,
        :iin_exempt_expenses,

        :plus_pf_nottaxed,
        :plus_li_nottaxed,
        :plus_hi_nottaxed,

        :iin_amount,

        :minus_before_iin,
        :minus_after_iin,

        :pay,
        :advance,
        :payt,

        :paid
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_A_REP_AGGREGATE_02 (
    PDT1 DATE,
    PDT2 DATE,
    PIDDEP TYPE OF COLUMN A_DEPARTMENTS.ID,
    PRETYRMT INTEGER,
    PRETIDP INTEGER,
    PRETIDAM INTEGER,
    PRETIDDEP INTEGER)
RETURNS (
    IDP TYPE OF COLUMN A_SALARY_SHEETS_R.IDP,
    IDAM TYPE OF COLUMN A_SALARY_SHEETS_R.IDAM,
    IDDEP TYPE OF COLUMN A_DEPARTMENTS.ID,
    YR TYPE OF COLUMN A_SALARY_SHEETS.YR,
    MT TYPE OF COLUMN A_SALARY_SHEETS.MT,
    WORKHOURS TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_HOURS,
    WORKDAYS TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_DAYS,
    FREEAVPAYDAYS TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_DAYS,
    VACATIONDAYS TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_DAYS_CURRENT,
    VACATIONDAYSCOMP TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_DAYS_COMP,
    SICKDAYS TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_DAYS,
    WORKPAY TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY,
    SICKPAY TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY,
    VACATIONPAY TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY,
    VACATIONPAYCOMP TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_PAY_COMP,
    FREEAVPAY TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY,
    WORKAVPAY TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY,
    PLUS_TAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_TAXED,
    PLUS_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOTTAXED,
    PLUS_AUTHORS_FEES TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_AUTHORS_FEES,
    PLUS_NOSAI TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOSAI,
    TOTALPAY TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY,
    FORSAI TYPE OF COLUMN A_SALARY_SHEETS_R.AMOUNT_BEFORE_SN,
    DNSN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.DNSN_AMOUNT,
    DDSN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.DDSN_AMOUNT,
    UNTAXED_MINIMUM TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM,
    IIN_EXEMPT_DEPENDANTS TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS,
    IIN_EXEMPT_INVALIDITY TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_INVALIDITY,
    IIN_EXEMPT_NATIONAL_MOVEMENT TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_NATIONAL_MOVEMENT,
    IIN_EXEMPT_RETALIATION TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_RETALIATION,
    IIN_EXEMPT_EXPENSES TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_EXPENSES,
    PLUS_PF_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_PF_NOTTAXED,
    PLUS_LI_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_LI_NOTTAXED,
    PLUS_HI_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_HI_NOTTAXED,
    IIN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT,
    MINUS_BEFORE_IIN TYPE OF COLUMN A_SALARY_SHEETS_R.MINUS_BEFORE_IIN,
    MINUS_AFTER_IIN TYPE OF COLUMN A_SALARY_SHEETS_R.MINUS_AFTER_IIN,
    PAY TYPE OF COLUMN A_SALARY_SHEETS_R.PAY,
    ADVANCE TYPE OF COLUMN A_SALARY_SHEETS_R.ADVANCE,
    PAYT TYPE OF COLUMN A_SALARY_SHEETS_R.PAYT,
    PAID TYPE OF COLUMN A_PAYLISTS_R.TPAY)
AS
begin
    for select
        ridp,
        ridam,
        riddep,

        ryr,
        rmt,

        sum(rworkhours) as tworkhours,
        sum(rworkdays) as tworkdays,

        sum(rfreeavpaydays) as tfreeavpaydays,
        sum(rvacationdays) as tvacationdays,
        sum(rvacationdayscomp) as tvacationdayscomp,
        sum(rsickdays) as tsickdays,

        sum(rworkpay) as tworkpay,
        sum(rsickpay) as tsickpay,
        sum(rvacationpay) as tvacationpay,
        sum(rvacationpaycomp) as tvacationpaycomp,
        sum(rfreeavpay) as tfreeavpay,
        sum(rworkavpay) as tworkavpay,

        sum(rplus_taxed) as tplus_taxed,
        sum(rplus_nottaxed) as tplus_nottaxed,
        sum(rplus_authors_fees) as tplus_authors_fees,
        sum(rplus_nosai) as tplus_nosai,

        sum(rtotalpay) as ttotalpay,

        sum(rforsai) as tforsai,

        sum(rdnsn_amount) as tdnsn_amount,
        sum(rddsn_amount) as tddsn_amount,

        sum(runtaxed_minimum) as tuntaxed_minimum,
        sum(riin_exempt_dependants) as tiin_exempt_dependants,
        sum(riin_exempt_invalidity) as tiin_exempt_invalidity,
        sum(riin_exempt_national_movement) as tiin_exempt_national_movement,
        sum(riin_exempt_retaliation) as tiin_exempt_retaliation,
        sum(riin_exempt_expenses) as tiin_exempt_expenses,

        sum(rplus_pf_nottaxed) as tplus_pf_nottaxed,
        sum(rplus_li_nottaxed) as tplus_li_nottaxed,
        sum(rplus_hi_nottaxed) as tplus_hi_nottaxed,

        sum(riin_amount) as tiin_amount,

        sum(rminus_before_iin) as tminus_before_iin,
        sum(rminus_after_iin) as tminus_after_iin,

        sum(rpay) as tpay,
        sum(radvance) as tadvance,
        sum(rpayt) as tpayt,

        sum(rpaid) as tpaid
    from
    (

        select
            iif(:pretidp = 0, null, a_salary_sheets_r.idp) as ridp,
            iif(:pretidam = 0, null, a_salary_sheets_r.idam) as ridam,
            iif(:pretiddep = 0, null, TPOS2.iddep) as riddep,

            iif(:pretyrmt = 0, null, a_salary_sheets.yr) as ryr,
            iif(:pretyrmt = 0, null, a_salary_sheets.mt) as rmt,

            a_salary_sheets_r.fact_hours as rworkhours,
            a_salary_sheets_r.fact_days as rworkdays,

            a_salary_sheets_r.fact_avpay_free_days as rfreeavpaydays,
            a_salary_sheets_r.vacation_days_current as rvacationdays,
            a_salary_sheets_r.vacation_days_comp as rvacationdayscomp,
            a_salary_sheets_r.sickdays as rsickdays,

            a_salary_sheets_r.salary as rworkpay,
            a_salary_sheets_r.sickdays_pay as rsickpay,
            a_salary_sheets_r.vacation_pay_current as rvacationpay,
            a_salary_sheets_r.vacation_pay_comp as rvacationpaycomp,
            a_salary_sheets_r.salary_avpay_free_days as rfreeavpay,

            a_salary_sheets_r.salary_avpay_work_days +
                a_salary_sheets_r.salary_avpay_work_days_overtime +
                a_salary_sheets_r.salary_avpay_holidays +
                a_salary_sheets_r.salary_avpay_holidays_overtime as rworkavpay,

            a_salary_sheets_r.plus_taxed +
                a_salary_sheets_r.plus_pf_taxed +
                a_salary_sheets_r.plus_li_taxed +
                a_salary_sheets_r.plus_hi_taxed as rplus_taxed,

            a_salary_sheets_r.plus_nottaxed +
                a_salary_sheets_r.plus_pf_nottaxed +
                a_salary_sheets_r.plus_li_nottaxed +
                a_salary_sheets_r.plus_hi_nottaxed as rplus_nottaxed,

            a_salary_sheets_r.plus_authors_fees as rplus_authors_fees,
            a_salary_sheets_r.plus_nosai as rplus_nosai,

            a_salary_sheets_r.total_before_taxes as rtotalpay,

            a_salary_sheets_r.amount_before_sn as rforsai,

            a_salary_sheets_r.dnsn_amount as rdnsn_amount,
            a_salary_sheets_r.ddsn_amount as rddsn_amount,

            a_salary_sheets_r.iin_exempt_untaxed_minimum as runtaxed_minimum,
            a_salary_sheets_r.iin_exempt_dependants as riin_exempt_dependants,
            a_salary_sheets_r.iin_exempt_invalidity as riin_exempt_invalidity,
            a_salary_sheets_r.iin_exempt_national_movement as riin_exempt_national_movement,
            a_salary_sheets_r.iin_exempt_retaliation as riin_exempt_retaliation,
            a_salary_sheets_r.iin_exempt_expenses as riin_exempt_expenses,

            a_salary_sheets_r.plus_pf_nottaxed as rplus_pf_nottaxed,
            a_salary_sheets_r.plus_li_nottaxed as rplus_li_nottaxed,
            a_salary_sheets_r.plus_hi_nottaxed as rplus_hi_nottaxed,

            a_salary_sheets_r.iin_amount as riin_amount,

            a_salary_sheets_r.minus_before_iin as rminus_before_iin,
            a_salary_sheets_r.minus_after_iin as rminus_after_iin,

            a_salary_sheets_r.pay as rpay,
            a_salary_sheets_r.advance as radvance,
            a_salary_sheets_r.payt as rpayt,
            0.0 as rpaid
    
        from a_salary_sheets
        join a_salary_sheets_r on a_salary_sheets.id = a_salary_sheets_r.ids

        join
        (
            select TPOS1.id, TPOS1.idam, a_positions_r.iddep
            from a_positions_r
            join 
            (
                select a_salary_sheets_r.id, a_salary_sheets_r.idam, max(a_positions_r.edit_date) as posdt
                from a_salary_sheets
                join a_salary_sheets_r
                    on a_salary_sheets.id = a_salary_sheets_r.ids AND
                        (a_salary_sheets.dt2 between :pdt1 and :pdt2)
                join a_positions_r
                    on a_salary_sheets_r.idam = a_positions_r.ida AND
                        a_positions_r.edit_date <= a_salary_sheets.dt2
                group by a_salary_sheets_r.id, a_salary_sheets_r.idam
            ) as TPOS1
            on a_positions_r.ida = TPOS1.idam
        ) as TPOS2
        on a_salary_sheets_r.id = TPOS2.id

        where
            (a_salary_sheets.dt2 between :pdt1 and :pdt2) AND
            ((:piddep is null) or (TPOS2.iddep = :piddep)) AND
            (a_salary_sheets.is_temp = 0) AND
            (a_salary_sheets.kind = 0)


        union all


        select
            iif(:pretidp = 0, null, a_paylists_r.idp) as ridp,
            iif(:pretidam = 0, null, a_paylists_r.idam) as ridam,
            iif(:pretiddep = 0, null, TPOS2.iddep) as riddep,

            iif(:pretyrmt = 0, null, a_paylists.yr) as ryr,
            iif(:pretyrmt = 0, null, a_paylists.mt) as rmt,

            0 as rworkhours,
            0 as rworkdays,

            0 as rfreeavpaydays,
            0 as rvacationdays,
            0 as rvacationdayscomp,
            0 as sickdays,

            0.0 as rworkpay,
            0.0 as rsickpay,
            0.0 as rvacationpay,
            0.0 as rvacationpaycomp,
            0.0 as rfreeavpay,
            0.0 as rworkavpay,

            0.0 as rplus_taxed,

            0.0 as rplus_nottaxed,

            0.0 as rplus_authors_fees,
            0.0 as rplus_nosai,

            0.0 as rtotalpay,

            0.0 as rforsai,

            0.0 as rdnsn_amount,
            0.0 as rddsn_amount,

            0.0 as runtaxed_minimum,
            0.0 as riin_exempt_dependants,
            0.0 as riin_exempt_invalidity,
            0.0 as riin_exempt_national_movement,
            0.0 as riin_exempt_retaliation,
            0.0 as riin_exempt_expenses,

            0.0 as rplus_pf_nottaxed,
            0.0 as rplus_li_nottaxed,
            0.0 as rplus_hi_nottaxed,

            0.0 as riin_amount,

            0.0 as rminus_before_iin,
            0.0 as rminus_after_iin,

            0.0 as rpay,
            0.0 as radvance,
            0.0 as rpayt,
            a_paylists_r.tpay as rpaid
    
        from a_paylists
        join a_paylists_r on a_paylists.id = a_paylists_r.ids

        join
        (
            select TPOS1.id, TPOS1.idam, a_positions_r.iddep
            from a_positions_r
            join 
            (
                select a_paylists_r.id, a_paylists_r.idam, max(a_positions_r.edit_date) as posdt
                from a_paylists
                join a_paylists_r
                    on a_paylists.id = a_paylists_r.ids AND
                        (a_paylists.dt between :pdt1 and :pdt2)
                join a_positions_r
                    on a_paylists_r.idam = a_positions_r.ida AND
                        a_positions_r.edit_date <= a_paylists.dt
                group by a_paylists_r.id, a_paylists_r.idam
            ) as TPOS1
            on a_positions_r.ida = TPOS1.idam
        ) as TPOS2
        on a_paylists_r.id = TPOS2.id

        where
            (a_paylists.dt between :pdt1 and :pdt2) AND
            ((:piddep is null) or (TPOS2.iddep = :piddep))


    )
    group by ridp, ridam, riddep, ryr, rmt
    order by ryr, rmt

    into
        :idp,
        :idam,
        :iddep,
        :yr,
        :mt, 

        :workhours,
        :workdays,

        :freeavpaydays,
        :vacationdays,
        :vacationdayscomp,
        :sickdays,

        :workpay,
        :sickpay, 
        :vacationpay, 
        :vacationpaycomp,
        :freeavpay,
        :workavpay,

        :plus_taxed,
        :plus_nottaxed,
        :plus_authors_fees,
        :plus_nosai,

        :totalpay,

        :forsai,

        :dnsn_amount,
        :ddsn_amount,

        :untaxed_minimum,
        :iin_exempt_dependants,
        :iin_exempt_invalidity,
        :iin_exempt_national_movement,
        :iin_exempt_retaliation,
        :iin_exempt_expenses,

        :plus_pf_nottaxed,
        :plus_li_nottaxed,
        :plus_hi_nottaxed,

        :iin_amount,

        :minus_before_iin,
        :minus_after_iin,

        :pay,
        :advance,
        :payt,

        :paid
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_A_REP_IINK_01 (
    PDT1 DATE,
    PDT2 DATE)
RETURNS (
    IDP TYPE OF COLUMN A_SALARY_SHEETS_R.IDP,
    DT1 DATE,
    DT2 DATE,
    INCOME TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY,
    PLUS_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOTTAXED,
    DNSN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.DNSN_AMOUNT,
    UNTAXED_MINIMUM0 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM0,
    IIN_EXEMPT_DEPENDANTS0 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS0,
    IIN_EXEMPT_20 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_20,
    UNTAXED_MINIMUM TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM,
    IIN_EXEMPT_DEPENDANTS TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS,
    IIN_EXEMPT_2 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2,
    IIN_EXEMPT_2TP TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2TP,
    IIN_EXEMPT_EXPENSES TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_EXPENSES,
    PLUS_PF_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_PF_NOTTAXED,
    PLUS_LI_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_LI_NOTTAXED,
    PLUS_HI_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_HI_NOTTAXED,
    IIN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT,
    IIN_AMOUNT2 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT,
    PAY TYPE OF COLUMN A_SALARY_SHEETS_R.PAY,
    PAY2 TYPE OF COLUMN A_SALARY_SHEETS_R.PAY,
    ADVANCE TYPE OF COLUMN A_SALARY_SHEETS_R.ADVANCE)
AS
begin
    for select
        ridp,
        :pdt1 as dt1,
        :pdt2 as dt2,
        sum(rincome) as tincome,
        sum(rplus_nottaxed) as tplus_nottaxed,
        sum(rdnsn_amount) as tdnsn_amount,

        sum(runtaxed_minimum0) as tuntaxed_minimum0,
        sum(riin_exempt_dependants0) as tiin_exempt_dependants0,
        sum(riin_exempt_20) as tiin_exempt_20,

        sum(runtaxed_minimum) as tuntaxed_minimum,
        sum(riin_exempt_dependants) as tiin_exempt_dependants,
        sum(riin_exempt_2) as tiin_exempt_2,
        riin_exempt_2tp as tiin_exempt_2tp,
        sum(riin_exempt_expenses) as tiin_exempt_expenses,

        sum(rplus_pf_nottaxed) as tplus_pf_nottaxed,
        sum(rplus_li_nottaxed) as tplus_li_nottaxed,
        sum(rplus_hi_nottaxed) as tplus_hi_nottaxed,
        sum(riin_amount) as tiin_amount,
        sum(riin_amount2) as tiin_amount2,
        sum(rpay) as tpay,
        sum(rpay2) as tpay2,
        sum(radvance) as tadvance
    from
    (

        select
            a_salary_sheets_r.idp as  ridp,
            a_salary_sheets_r.total_before_taxes as rincome,
            a_salary_sheets_r.plus_nottaxed as rplus_nottaxed,
            a_salary_sheets_r.dnsn_amount as rdnsn_amount,

            a_salary_sheets_r.iin_exempt_untaxed_minimum0 as runtaxed_minimum0,
            a_salary_sheets_r.iin_exempt_dependants0 as riin_exempt_dependants0,
            a_salary_sheets_r.iin_exempt_20 as riin_exempt_20,

            a_salary_sheets_r.iin_exempt_untaxed_minimum as runtaxed_minimum,
            a_salary_sheets_r.iin_exempt_dependants as riin_exempt_dependants,
            a_salary_sheets_r.iin_exempt_2 as riin_exempt_2,
            a_salary_sheets_r.iin_exempt_2tp as riin_exempt_2tp,
            a_salary_sheets_r.iin_exempt_expenses as riin_exempt_expenses,

            a_salary_sheets_r.plus_pf_nottaxed as rplus_pf_nottaxed,
            a_salary_sheets_r.plus_li_nottaxed as rplus_li_nottaxed,
            a_salary_sheets_r.plus_hi_nottaxed as rplus_hi_nottaxed,
            a_salary_sheets_r.iin_amount as riin_amount,
            0.00 as riin_amount2,
            a_salary_sheets_r.pay as rpay,
            0.00 as rpay2,
            0.00 as radvance
    
        from a_salary_sheets
        join a_salary_sheets_r on a_salary_sheets.id = a_salary_sheets_r.ids
    
        where
            (a_salary_sheets.dt2 between :pdt1 and :pdt2) AND
            (a_salary_sheets.is_temp = 0) AND
            (a_salary_sheets.kind = 0)

        union all

        select 
            a_paylists_r.idp as ridp,
            0.00 as rincome,
            0.00 as rplus_nottaxed,
            0.00 as rdnsn_amount,

            0.00 as runtaxed_minimum0,
            0.00 as riin_exempt_dependants0,
            0.00 as riin_exempt_20,

            0.00 as runtaxed_minimum,
            0.00 as riin_exempt_dependants,
            0.00 as riin_exempt_2,
            0    as riin_exempt_2tp,
            0.00 as riin_exempt_expenses,
            0.00 as rplus_pf_nottaxed,
            0.00 as rplus_li_nottaxed,
            0.00 as rplus_hi_nottaxed,
            0.00  as riin_amount,
            a_paylists_r.iin as riin_amount2,
            0.00 as rpay,
            a_paylists_r.pay as rpay2,
            a_paylists_r.advance as radvance
    
        from a_paylists join a_paylists_r on a_paylists.id = a_paylists_r.ids
        where a_paylists.dt between :pdt1 and :pdt2

    )
    group by ridp, riin_exempt_2tp
    order by ridp

    into
        :idp,
        :dt1,
        :dt2,
        :income,
        :plus_nottaxed,
        :dnsn_amount,

        :untaxed_minimum0,
        :iin_exempt_dependants0,
        :iin_exempt_20,

        :untaxed_minimum,
        :iin_exempt_dependants,
        :iin_exempt_2,

        :iin_exempt_2tp,
        :iin_exempt_expenses,
        :plus_pf_nottaxed,
        :plus_li_nottaxed,
        :plus_hi_nottaxed,
        :iin_amount,
        :iin_amount2,
        :pay,
        :pay2,
        :advance
  do
  begin
    if ((:income > 0.00) or (:plus_nottaxed > 0.00) or
        (:iin_amount > 0.00) or (:iin_amount2 > 0.00)) then
        begin
            suspend;
        end
  end
end^


ALTER PROCEDURE SP_A_REP_IINK_02 (
    PDT1 DATE,
    PDT2 DATE,
    PDTY DATE)
RETURNS (
    IDP TYPE OF COLUMN A_SALARY_SHEETS_R.IDP,
    DT1 DATE,
    DT2 DATE,
    INCOME TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY,
    PLUS_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOTTAXED,
    DNSN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.DNSN_AMOUNT,
    UNTAXED_MINIMUM0 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM0,
    IIN_EXEMPT_DEPENDANTS0 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS0,
    IIN_EXEMPT_20 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_20,
    UNTAXED_MINIMUM TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM,
    IIN_EXEMPT_DEPENDANTS TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS,
    IIN_EXEMPT_2 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2,
    IIN_EXEMPT_2TP TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2TP,
    IIN_EXEMPT_EXPENSES TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_EXPENSES,
    PLUS_PF_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_PF_NOTTAXED,
    PLUS_LI_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_LI_NOTTAXED,
    PLUS_HI_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_HI_NOTTAXED,
    IIN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT,
    IIN_AMOUNT2 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT,
    PAY TYPE OF COLUMN A_SALARY_SHEETS_R.PAY,
    PAY2 TYPE OF COLUMN A_SALARY_SHEETS_R.PAY,
    ADVANCE TYPE OF COLUMN A_SALARY_SHEETS_R.ADVANCE)
AS
begin
/* darbinieki, kas atlaisti norādītajā periodā */
    insert into a_temp_rep_inkp
    select sp_a_rep_iink_p1.idp, sp_a_rep_iink_p1.hdate, sp_a_rep_iink_p1.fdate
    from sp_a_rep_iink_p1(:pdt1, :pdt2, :pdty);

    for select
        ridp,
        rdt1,
        rdt2,
        sum(rincome) as tincome,
        sum(rplus_nottaxed) as tplus_nottaxed,
        sum(rdnsn_amount) as tdnsn_amount,

        sum(runtaxed_minimum0) as tuntaxed_minimum0,
        sum(riin_exempt_dependants0) as tiin_exempt_dependants0,
        sum(riin_exempt_20) as tiin_exempt_20,

        sum(runtaxed_minimum) as tuntaxed_minimum,
        sum(riin_exempt_dependants) as tiin_exempt_dependants,
        sum(riin_exempt_2) as tiin_exempt_2,
        riin_exempt_2tp as tiin_exempt_2tp,
        sum(riin_exempt_expenses) as tiin_exempt_expenses,

        sum(rplus_pf_nottaxed) as tplus_pf_nottaxed,
        sum(rplus_li_nottaxed) as tplus_li_nottaxed,
        sum(rplus_hi_nottaxed) as tplus_hi_nottaxed,
        sum(riin_amount) as tiin_amount,
        sum(riin_amount2) as tiin_amount2,
        sum(rpay) as tpay,
        sum(rpay2) as tpay2,
        sum(radvance) as tadvance
    from
    (

        select
            a_salary_sheets_r.idp as  ridp,
            PT.hdate as rdt1,
            PT.fdate as rdt2,
            a_salary_sheets_r.total_before_taxes as rincome,
            a_salary_sheets_r.plus_nottaxed as rplus_nottaxed,
            a_salary_sheets_r.dnsn_amount as rdnsn_amount,

            a_salary_sheets_r.iin_exempt_untaxed_minimum0 as runtaxed_minimum0,
            a_salary_sheets_r.iin_exempt_dependants0 as riin_exempt_dependants0,
            a_salary_sheets_r.iin_exempt_20 as riin_exempt_20,

            a_salary_sheets_r.iin_exempt_untaxed_minimum as runtaxed_minimum,
            a_salary_sheets_r.iin_exempt_dependants as riin_exempt_dependants,
            a_salary_sheets_r.iin_exempt_2 as riin_exempt_2,
            a_salary_sheets_r.iin_exempt_2tp as riin_exempt_2tp,
            a_salary_sheets_r.iin_exempt_expenses as riin_exempt_expenses,

            a_salary_sheets_r.plus_pf_nottaxed as rplus_pf_nottaxed,
            a_salary_sheets_r.plus_li_nottaxed as rplus_li_nottaxed,
            a_salary_sheets_r.plus_hi_nottaxed as rplus_hi_nottaxed,
            a_salary_sheets_r.iin_amount as riin_amount,
            0.00 as riin_amount2,
            a_salary_sheets_r.pay as rpay,
            0.00 as rpay2,
            0.00 as radvance
    
        from a_salary_sheets
        join a_salary_sheets_r on a_salary_sheets.id = a_salary_sheets_r.ids
        join a_temp_rep_inkp as PT on PT.idp = a_salary_sheets_r.idp
    
        where
            (a_salary_sheets.dt2 between PT.hdate and :pdt2) AND
            (a_salary_sheets.is_temp = 0) AND
            (a_salary_sheets.kind = 0)


    )
    group by ridp, riin_exempt_2tp, rdt1, rdt2
    order by ridp

    into
        :idp,
        :dt1, 
        :dt2,
        :income,
        :plus_nottaxed,
        :dnsn_amount,

        :untaxed_minimum0,
        :iin_exempt_dependants0,
        :iin_exempt_20,

        :untaxed_minimum,
        :iin_exempt_dependants,
        :iin_exempt_2,
        :iin_exempt_2tp,
        :iin_exempt_expenses,

        :plus_pf_nottaxed,
        :plus_li_nottaxed,
        :plus_hi_nottaxed,
        :iin_amount,
        :iin_amount2,
        :pay,
        :pay2,
        :advance
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_A_REP_IINK_03 (
    PDT1 DATE,
    PDT2 DATE)
RETURNS (
    IDP TYPE OF COLUMN A_SALARY_SHEETS_R.IDP,
    DT1 DATE,
    DT2 DATE,
    INCOME TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY,
    PLUS_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOTTAXED,
    DNSN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.DNSN_AMOUNT,
    UNTAXED_MINIMUM0 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM0,
    IIN_EXEMPT_DEPENDANTS0 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS0,
    IIN_EXEMPT_20 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_20,
    UNTAXED_MINIMUM TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM,
    IIN_EXEMPT_DEPENDANTS TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS,
    IIN_EXEMPT_2 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2,
    IIN_EXEMPT_2TP TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2TP,
    IIN_EXEMPT_EXPENSES TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_EXPENSES,
    PLUS_PF_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_PF_NOTTAXED,
    PLUS_LI_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_LI_NOTTAXED,
    PLUS_HI_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_HI_NOTTAXED,
    IIN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT,
    IIN_AMOUNT2 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT,
    PAY TYPE OF COLUMN A_SALARY_SHEETS_R.PAY,
    PAY2 TYPE OF COLUMN A_SALARY_SHEETS_R.PAY,
    ADVANCE TYPE OF COLUMN A_SALARY_SHEETS_R.ADVANCE)
AS
begin
    insert into a_temp_rep_inkp
    select sp_a_rep_iink_p2.idp, sp_a_rep_iink_p2.hdate, sp_a_rep_iink_p2.fdate
    from sp_a_rep_iink_p2(:pdt1, :pdt2);

    for select
        ridp,
        rdt1,
        rdt2,
        sum(rincome) as tincome,
        sum(rplus_nottaxed) as tplus_nottaxed,
        sum(rdnsn_amount) as tdnsn_amount,

        sum(runtaxed_minimum0) as tuntaxed_minimum0,
        sum(riin_exempt_dependants0) as tiin_exempt_dependants0,
        sum(riin_exempt_20) as tiin_exempt_20,

        sum(runtaxed_minimum) as tuntaxed_minimum,
        sum(riin_exempt_dependants) as tiin_exempt_dependants,
        sum(riin_exempt_2) as tiin_exempt_2,
        riin_exempt_2tp as tiin_exempt_2tp,
        sum(riin_exempt_expenses) as tiin_exempt_expenses,

        sum(rplus_pf_nottaxed) as tplus_pf_nottaxed,
        sum(rplus_li_nottaxed) as tplus_li_nottaxed,
        sum(rplus_hi_nottaxed) as tplus_hi_nottaxed,
        sum(riin_amount) as tiin_amount,
        sum(riin_amount2) as tiin_amount2,
        sum(rpay) as tpay,
        sum(rpay2) as tpay2,
        sum(radvance) as tadvance
    from
    (

        select
            a_salary_sheets_r.idp as  ridp,
            PT.hdate as rdt1,
            PT.fdate as rdt2,
            a_salary_sheets_r.total_before_taxes as rincome,
            a_salary_sheets_r.plus_nottaxed as rplus_nottaxed,
            a_salary_sheets_r.dnsn_amount as rdnsn_amount,

            a_salary_sheets_r.iin_exempt_untaxed_minimum0 as runtaxed_minimum0,
            a_salary_sheets_r.iin_exempt_dependants0 as riin_exempt_dependants0,
            a_salary_sheets_r.iin_exempt_20 as riin_exempt_20,

            a_salary_sheets_r.iin_exempt_untaxed_minimum as runtaxed_minimum,
            a_salary_sheets_r.iin_exempt_dependants as riin_exempt_dependants,
            a_salary_sheets_r.iin_exempt_2 as riin_exempt_2,
            a_salary_sheets_r.iin_exempt_2tp as riin_exempt_2tp,
            a_salary_sheets_r.iin_exempt_expenses as riin_exempt_expenses,

            a_salary_sheets_r.plus_pf_nottaxed as rplus_pf_nottaxed,
            a_salary_sheets_r.plus_li_nottaxed as rplus_li_nottaxed,
            a_salary_sheets_r.plus_hi_nottaxed as rplus_hi_nottaxed,
            a_salary_sheets_r.iin_amount as riin_amount,
            0.00 as riin_amount2,
            a_salary_sheets_r.pay as rpay,
            0.00 as rpay2,
            0.00 as radvance
    
        from a_salary_sheets
        join a_salary_sheets_r on a_salary_sheets.id = a_salary_sheets_r.ids
        join a_temp_rep_inkp as PT on PT.idp = a_salary_sheets_r.idp
    
        where
            (a_salary_sheets.dt2 between PT.hdate and PT.fdate) AND
            (a_salary_sheets.is_temp = 0) AND
            (a_salary_sheets.kind = 0)

        union all

        select 
            a_paylists_r.idp as ridp,
            PT.hdate as rdt1,
            PT.fdate as rdt2,
            0.00 as rincome,
            0.00 as rplus_nottaxed,
            0.00 as rdnsn_amount,

            0.00 as runtaxed_minimum0,
            0.00 as riin_exempt_dependants0,
            0.00 as riin_exempt_20,

            0.00 as runtaxed_minimum,
            0.00 as riin_exempt_dependants,
            0.00 as riin_exempt_2,
            0    as riin_exempt_2tp,
            0.00 as riin_exempt_expenses,

            0.00 as rplus_pf_nottaxed,
            0.00 as rplus_li_nottaxed,
            0.00 as rplus_hi_nottaxed,
            0.00  as riin_amount,
            a_paylists_r.iin as riin_amount2,
            0.00 as rpay,
            a_paylists_r.pay as rpay2,
            a_paylists_r.advance as radvance
    
        from a_paylists
        join a_paylists_r on a_paylists.id = a_paylists_r.ids
        join a_temp_rep_inkp as PT on PT.idp = a_paylists_r.idp

        where a_paylists.dt between PT.hdate and PT.fdate

    )
    group by ridp, riin_exempt_2tp, rdt1, rdt2
    order by ridp

    into
        :idp,
        :dt1,
        :dt2,
        :income,
        :plus_nottaxed,
        :dnsn_amount,

        :untaxed_minimum0,
        :iin_exempt_dependants0,
        :iin_exempt_20,

        :untaxed_minimum,
        :iin_exempt_dependants,
        :iin_exempt_2,
        :iin_exempt_2tp,
        :iin_exempt_expenses,

        :plus_pf_nottaxed,
        :plus_li_nottaxed,
        :plus_hi_nottaxed,
        :iin_amount,
        :iin_amount2,
        :pay,
        :pay2,
        :advance
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_A_REP_IINK_11 (
    PDT1 DATE,
    PDT2 DATE,
    PDTX DATE)
RETURNS (
    IDP TYPE OF COLUMN A_SALARY_SHEETS_R.IDP,
    DT1 DATE,
    DT2 DATE,
    INCOME TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY,
    PLUS_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOTTAXED,
    DNSN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.DNSN_AMOUNT,
    UNTAXED_MINIMUM0 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM0,
    IIN_EXEMPT_DEPENDANTS0 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS0,
    IIN_EXEMPT_20 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_20,
    UNTAXED_MINIMUM TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM,
    IIN_EXEMPT_DEPENDANTS TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS,
    IIN_EXEMPT_2 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2,
    IIN_EXEMPT_2TP TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2TP,
    IIN_EXEMPT_EXPENSES TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_EXPENSES,
    PLUS_PF_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_PF_NOTTAXED,
    PLUS_LI_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_LI_NOTTAXED,
    PLUS_HI_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_HI_NOTTAXED,
    IIN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT,
    IIN_AMOUNT2 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT,
    PAY TYPE OF COLUMN A_SALARY_SHEETS_R.PAY,
    PAY2 TYPE OF COLUMN A_SALARY_SHEETS_R.PAY,
    ADVANCE TYPE OF COLUMN A_SALARY_SHEETS_R.ADVANCE)
AS
begin
    for select
        ridp,
        :pdt1 as dt1,
        :pdt2 as dt2,
        sum(rincome) as tincome,
        sum(rplus_nottaxed) as tplus_nottaxed,
        sum(rdnsn_amount) as tdnsn_amount,

        sum(runtaxed_minimum0) as tuntaxed_minimum0,
        sum(riin_exempt_dependants0) as tiin_exempt_dependants0,
        sum(riin_exempt_20) as tiin_exempt_20,

        sum(runtaxed_minimum) as tuntaxed_minimum,
        sum(riin_exempt_dependants) as tiin_exempt_dependants,
        sum(riin_exempt_2) as tiin_exempt_2,
        riin_exempt_2tp as tiin_exempt_2tp,
        sum(riin_exempt_expenses) as tiin_exempt_expenses,

        sum(rplus_pf_nottaxed) as tplus_pf_nottaxed,
        sum(rplus_li_nottaxed) as tplus_li_nottaxed,
        sum(rplus_hi_nottaxed) as tplus_hi_nottaxed,
        sum(riin_amount) as tiin_amount,
        sum(riin_amount2) as tiin_amount2,
        sum(rpay) as tpay,
        sum(rpay2) as tpay2,
        sum(radvance) as tadvance
    from
    (
        select
            a_salary_sheets_r.idp as  ridp,
            a_salary_sheets_r.idam as  ridam,
            a_salary_sheets_r.total_before_taxes * XT.r as rincome,
            a_salary_sheets_r.plus_nottaxed * XT.r as rplus_nottaxed,
            a_salary_sheets_r.dnsn_amount * XT.r as rdnsn_amount,

            a_salary_sheets_r.iin_exempt_untaxed_minimum0 as runtaxed_minimum0,
            a_salary_sheets_r.iin_exempt_dependants0 as riin_exempt_dependants0,
            a_salary_sheets_r.iin_exempt_20 as riin_exempt_20,

            a_salary_sheets_r.iin_exempt_untaxed_minimum as runtaxed_minimum,
            a_salary_sheets_r.iin_exempt_dependants as riin_exempt_dependants,
            a_salary_sheets_r.iin_exempt_2 as riin_exempt_2,
            a_salary_sheets_r.iin_exempt_2tp as riin_exempt_2tp,
            a_salary_sheets_r.iin_exempt_expenses as riin_exempt_expenses,

            a_salary_sheets_r.plus_pf_nottaxed * XT.r as rplus_pf_nottaxed,
            a_salary_sheets_r.plus_li_nottaxed * XT.r as rplus_li_nottaxed,
            a_salary_sheets_r.plus_hi_nottaxed * XT.r as rplus_hi_nottaxed,
            a_salary_sheets_r.iin_amount * XT.r as riin_amount,
            0.00 as riin_amount2,
            a_salary_sheets_r.pay as rpay,
            XT.pay as rpay2,
            0.00 as radvance

        from
            a_salary_sheets
            join a_salary_sheets_r on a_salary_sheets.id = a_salary_sheets_r.ids
            join sp_a_rep_iink_l1(:pdt1,  :pdt2, :pdtx) as XT
                on a_salary_sheets_r.id = XT.id
    )
    group by ridp, riin_exempt_2tp
    order by ridp

    into
        :idp,
        :dt1,
        :dt2,
        :income,
        :plus_nottaxed,
        :dnsn_amount,

        :untaxed_minimum0,
        :iin_exempt_dependants0,
        :iin_exempt_20,

        :untaxed_minimum,
        :iin_exempt_dependants,
        :iin_exempt_2,

        :iin_exempt_2tp,
        :iin_exempt_expenses,
        :plus_pf_nottaxed,
        :plus_li_nottaxed,
        :plus_hi_nottaxed,
        :iin_amount,
        :iin_amount2,
        :pay,
        :pay2,
        :advance
  do
  begin
    if ((:income > 0.00) or (:plus_nottaxed > 0.00) or
        (:iin_amount > 0.00) or (:iin_amount2 > 0.00)) then
        begin
            suspend;
        end
  end
end^


ALTER PROCEDURE SP_A_REP_IINK_12 (
    PDT1 DATE,
    PDT2 DATE,
    PDTX DATE)
RETURNS (
    IDP TYPE OF COLUMN A_SALARY_SHEETS_R.IDP,
    DT1 DATE,
    DT2 DATE,
    INCOME TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY,
    PLUS_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOTTAXED,
    DNSN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.DNSN_AMOUNT,
    UNTAXED_MINIMUM0 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM0,
    IIN_EXEMPT_DEPENDANTS0 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS0,
    IIN_EXEMPT_20 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_20,
    UNTAXED_MINIMUM TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM,
    IIN_EXEMPT_DEPENDANTS TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS,
    IIN_EXEMPT_2 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2,
    IIN_EXEMPT_2TP TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2TP,
    IIN_EXEMPT_EXPENSES TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_EXPENSES,
    PLUS_PF_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_PF_NOTTAXED,
    PLUS_LI_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_LI_NOTTAXED,
    PLUS_HI_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_HI_NOTTAXED,
    IIN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT,
    IIN_AMOUNT2 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT,
    PAY TYPE OF COLUMN A_SALARY_SHEETS_R.PAY,
    PAY2 TYPE OF COLUMN A_SALARY_SHEETS_R.PAY,
    ADVANCE TYPE OF COLUMN A_SALARY_SHEETS_R.ADVANCE)
AS
begin
/* darbiniekiem, kas atlaisti norādītajā periodā */

    for select
        ridp,
        :pdt1 as dt1,
        :pdt2 as dt2,
        sum(rincome) as tincome,
        sum(rplus_nottaxed) as tplus_nottaxed,
        sum(rdnsn_amount) as tdnsn_amount,

        sum(runtaxed_minimum0) as tuntaxed_minimum0,
        sum(riin_exempt_dependants0) as tiin_exempt_dependants0,
        sum(riin_exempt_20) as tiin_exempt_20,

        sum(runtaxed_minimum) as tuntaxed_minimum,
        sum(riin_exempt_dependants) as tiin_exempt_dependants,
        sum(riin_exempt_2) as tiin_exempt_2,
        riin_exempt_2tp as tiin_exempt_2tp,
        sum(riin_exempt_expenses) as tiin_exempt_expenses,

        sum(rplus_pf_nottaxed) as tplus_pf_nottaxed,
        sum(rplus_li_nottaxed) as tplus_li_nottaxed,
        sum(rplus_hi_nottaxed) as tplus_hi_nottaxed,
        sum(riin_amount) as tiin_amount,
        sum(riin_amount2) as tiin_amount2,
        sum(rpay) as tpay,
        sum(rpay2) as tpay2,
        sum(radvance) as tadvance
    from
    (
        select
            a_salary_sheets_r.idp as  ridp,
            a_salary_sheets_r.idam as  ridam,
            a_salary_sheets_r.total_before_taxes * XT.r as rincome,
            a_salary_sheets_r.plus_nottaxed * XT.r as rplus_nottaxed,
            a_salary_sheets_r.dnsn_amount * XT.r as rdnsn_amount,

            a_salary_sheets_r.iin_exempt_untaxed_minimum0 as runtaxed_minimum0,
            a_salary_sheets_r.iin_exempt_dependants0 as riin_exempt_dependants0,
            a_salary_sheets_r.iin_exempt_20 as riin_exempt_20,

            a_salary_sheets_r.iin_exempt_untaxed_minimum as runtaxed_minimum,
            a_salary_sheets_r.iin_exempt_dependants as riin_exempt_dependants,
            a_salary_sheets_r.iin_exempt_2 as riin_exempt_2,
            a_salary_sheets_r.iin_exempt_2tp as riin_exempt_2tp,
            a_salary_sheets_r.iin_exempt_expenses as riin_exempt_expenses,

            a_salary_sheets_r.plus_pf_nottaxed * XT.r as rplus_pf_nottaxed,
            a_salary_sheets_r.plus_li_nottaxed * XT.r as rplus_li_nottaxed,
            a_salary_sheets_r.plus_hi_nottaxed * XT.r as rplus_hi_nottaxed,
            a_salary_sheets_r.iin_amount * XT.r as riin_amount,
            0.00 as riin_amount2,
            a_salary_sheets_r.pay as rpay,
            XT.pay as rpay2,
            0.00 as radvance

        from
            a_salary_sheets
            join a_salary_sheets_r on a_salary_sheets.id = a_salary_sheets_r.ids
            join sp_a_rep_iink_l2(:pdt1,  :pdt2, :pdtx, :pdt1) as XT
                on a_salary_sheets_r.id = XT.id
    )
    group by ridp, riin_exempt_2tp
    order by ridp

    into
        :idp,
        :dt1,
        :dt2,
        :income,
        :plus_nottaxed,
        :dnsn_amount,

        :untaxed_minimum0,
        :iin_exempt_dependants0,
        :iin_exempt_20,

        :untaxed_minimum,
        :iin_exempt_dependants,
        :iin_exempt_2,

        :iin_exempt_2tp,
        :iin_exempt_expenses,
        :plus_pf_nottaxed,
        :plus_li_nottaxed,
        :plus_hi_nottaxed,
        :iin_amount,
        :iin_amount2,
        :pay,
        :pay2,
        :advance
  do
  begin
    if ((:income > 0.00) or (:plus_nottaxed > 0.00) or
        (:iin_amount > 0.00) or (:iin_amount2 > 0.00)) then
        begin
            suspend;
        end
  end
end^


ALTER PROCEDURE SP_A_REP_IINK_13 (
    PDT1 DATE,
    PDT2 DATE,
    PDTX DATE)
RETURNS (
    IDP TYPE OF COLUMN A_SALARY_SHEETS_R.IDP,
    DT1 DATE,
    DT2 DATE,
    INCOME TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY,
    PLUS_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOTTAXED,
    DNSN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.DNSN_AMOUNT,
    UNTAXED_MINIMUM0 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM0,
    IIN_EXEMPT_DEPENDANTS0 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS0,
    IIN_EXEMPT_20 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_20,
    UNTAXED_MINIMUM TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM,
    IIN_EXEMPT_DEPENDANTS TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS,
    IIN_EXEMPT_2 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2,
    IIN_EXEMPT_2TP TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2TP,
    IIN_EXEMPT_EXPENSES TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_EXPENSES,
    PLUS_PF_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_PF_NOTTAXED,
    PLUS_LI_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_LI_NOTTAXED,
    PLUS_HI_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_HI_NOTTAXED,
    IIN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT,
    IIN_AMOUNT2 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT,
    PAY TYPE OF COLUMN A_SALARY_SHEETS_R.PAY,
    PAY2 TYPE OF COLUMN A_SALARY_SHEETS_R.PAY,
    ADVANCE TYPE OF COLUMN A_SALARY_SHEETS_R.ADVANCE)
AS
begin
/* darbiniekiem, kas līdz gada beigām nav atlaisti */

    for select
        ridp,
        :pdt1 as dt1,
        :pdt2 as dt2,
        sum(rincome) as tincome,
        sum(rplus_nottaxed) as tplus_nottaxed,
        sum(rdnsn_amount) as tdnsn_amount,

        sum(runtaxed_minimum0) as tuntaxed_minimum0,
        sum(riin_exempt_dependants0) as tiin_exempt_dependants0,
        sum(riin_exempt_20) as tiin_exempt_20,

        sum(runtaxed_minimum) as tuntaxed_minimum,
        sum(riin_exempt_dependants) as tiin_exempt_dependants,
        sum(riin_exempt_2) as tiin_exempt_2,
        riin_exempt_2tp as tiin_exempt_2tp,
        sum(riin_exempt_expenses) as tiin_exempt_expenses,

        sum(rplus_pf_nottaxed) as tplus_pf_nottaxed,
        sum(rplus_li_nottaxed) as tplus_li_nottaxed,
        sum(rplus_hi_nottaxed) as tplus_hi_nottaxed,
        sum(riin_amount) as tiin_amount,
        sum(riin_amount2) as tiin_amount2,
        sum(rpay) as tpay,
        sum(rpay2) as tpay2,
        sum(radvance) as tadvance
    from
    (
        select
            a_salary_sheets_r.idp as  ridp,
            a_salary_sheets_r.idam as  ridam,
            a_salary_sheets_r.total_before_taxes * XT.r as rincome,
            a_salary_sheets_r.plus_nottaxed * XT.r as rplus_nottaxed,
            a_salary_sheets_r.dnsn_amount * XT.r as rdnsn_amount,

            a_salary_sheets_r.iin_exempt_untaxed_minimum0 as runtaxed_minimum0,
            a_salary_sheets_r.iin_exempt_dependants0 as riin_exempt_dependants0,
            a_salary_sheets_r.iin_exempt_20 as riin_exempt_20,

            a_salary_sheets_r.iin_exempt_untaxed_minimum as runtaxed_minimum,
            a_salary_sheets_r.iin_exempt_dependants as riin_exempt_dependants,
            a_salary_sheets_r.iin_exempt_2 as riin_exempt_2,
            a_salary_sheets_r.iin_exempt_2tp as riin_exempt_2tp,
            a_salary_sheets_r.iin_exempt_expenses as riin_exempt_expenses,

            a_salary_sheets_r.plus_pf_nottaxed * XT.r as rplus_pf_nottaxed,
            a_salary_sheets_r.plus_li_nottaxed * XT.r as rplus_li_nottaxed,
            a_salary_sheets_r.plus_hi_nottaxed * XT.r as rplus_hi_nottaxed,
            a_salary_sheets_r.iin_amount * XT.r as riin_amount,
            0.00 as riin_amount2,
            a_salary_sheets_r.pay as rpay,
            XT.pay as rpay2,
            0.00 as radvance

        from
            a_salary_sheets
            join a_salary_sheets_r on a_salary_sheets.id = a_salary_sheets_r.ids
            join sp_a_rep_iink_l3(:pdt1,  :pdt2, :pdtx, :pdt1) as XT
                on a_salary_sheets_r.id = XT.id
    )
    group by ridp, riin_exempt_2tp
    order by ridp

    into
        :idp,
        :dt1,
        :dt2,
        :income,
        :plus_nottaxed,
        :dnsn_amount,

        :untaxed_minimum0,
        :iin_exempt_dependants0,
        :iin_exempt_20,

        :untaxed_minimum,
        :iin_exempt_dependants,
        :iin_exempt_2,

        :iin_exempt_2tp,
        :iin_exempt_expenses,
        :plus_pf_nottaxed,
        :plus_li_nottaxed,
        :plus_hi_nottaxed,
        :iin_amount,
        :iin_amount2,
        :pay,
        :pay2,
        :advance
  do
  begin
    if ((:income > 0.00) or (:plus_nottaxed > 0.00) or
        (:iin_amount > 0.00) or (:iin_amount2 > 0.00)) then
        begin
            suspend;
        end
  end
end^


ALTER PROCEDURE SP_A_REP_IINK_21 (
    PYR INTEGER,
    PMT INTEGER,
    PDT1 DATE,
    PDT2 DATE)
RETURNS (
    IDP TYPE OF COLUMN A_FP_PAYLISTS_R.IDP,
    DATE1 TYPE OF COLUMN A_FP_PAYLISTS_R.DATE1,
    DATE2 TYPE OF COLUMN A_FP_PAYLISTS_R.DATE2,
    PAYMONTH INTEGER,
    INCOME_ID TYPE OF COLUMN A_FP_PAYLISTS_R.INCOME_ID,
    PAY TYPE OF COLUMN A_FP_PAYLISTS_R.PAY0,
    TAXED TYPE OF COLUMN A_FP_PAYLISTS_R.TAXED,
    NOSAI TYPE OF COLUMN A_FP_PAYLISTS_R.NOSAI,
    NOTTAXED TYPE OF COLUMN A_FP_PAYLISTS_R.NOTTAXED,
    AUTHORS_FEE TYPE OF COLUMN A_FP_PAYLISTS_R.AUTHORS_FEE,
    SIDD TYPE OF COLUMN A_FP_PAYLISTS_R.SIDD,
    SIDN TYPE OF COLUMN A_FP_PAYLISTS_R.SIDN,
    IINEX TYPE OF COLUMN A_FP_PAYLISTS_R.IINEX,
    IIN_FROM TYPE OF COLUMN A_FP_PAYLISTS_R.IIN_FROM,
    IIN TYPE OF COLUMN A_FP_PAYLISTS_R.IIN,
    CASH TYPE OF COLUMN A_FP_PAYLISTS_R.CASH)
AS
begin
    for select
             idp,
             :PDT1 as date1,
             :PDT2 as date2,
             max(paymonth),
             income_id,
             sum(pay0) as pay0,
             sum(taxed) as taxed,
             sum(nosai) as nosai,
             sum(nottaxed) as nottaxed,
             sum(authors_fee) as authors_fee,
             sum(sidd) as sidd,
             sum(sidn) as sidn,
             sum(iinex) as iinex,
             sum(iin_from) as iin_from,
             sum(iin) as iin,
             sum(cash) as cash
    from
    (
        select
            idp,
            extract(month from a_fp_paylists_r.paydate) as paymonth,
            tax_tp,
            income_id,
            pay0,
            iif(tax_tp = 0, pay0, 0) as taxed,
            iif(tax_tp = 1, pay0, 0) as nosai,
            iif(tax_tp = 2, pay0, 0) as nottaxed,
            iif(tax_tp = 3, pay0, 0) as authors_fee,
            sidd,
            sidn,
            iinex,
            iin_from,
            iin,
            cash
        from a_fp_paylists_r
        join a_fp_paylists on a_fp_paylists.id = a_fp_paylists_r.ids
        where
            a_fp_paylists.yr = :pyr and
            a_fp_paylists.mt = :pmt and
            income_id starting '1'
    )
    group by idp, income_id
    into
           :idp,
           :date1,
           :date2,
           :paymonth,
           :income_id,
           :pay,
           :taxed,
           :nosai,
           :nottaxed,
           :authors_fee,
           :sidd,
           :sidn,
           :iinex,
           :iin_from,
           :iin,
           :cash
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_A_REP_IINK_22 (
    PYR INTEGER,
    PDT1 DATE,
    PDT2 DATE)
RETURNS (
    IDP TYPE OF COLUMN A_FP_PAYLISTS_R.IDP,
    DATE1 TYPE OF COLUMN A_FP_PAYLISTS_R.DATE1,
    DATE2 TYPE OF COLUMN A_FP_PAYLISTS_R.DATE2,
    PAYMONTH INTEGER,
    INCOME_ID TYPE OF COLUMN A_FP_PAYLISTS_R.INCOME_ID,
    PAY TYPE OF COLUMN A_FP_PAYLISTS_R.PAY0,
    TAXED TYPE OF COLUMN A_FP_PAYLISTS_R.TAXED,
    NOSAI TYPE OF COLUMN A_FP_PAYLISTS_R.NOSAI,
    NOTTAXED TYPE OF COLUMN A_FP_PAYLISTS_R.NOTTAXED,
    AUTHORS_FEE TYPE OF COLUMN A_FP_PAYLISTS_R.AUTHORS_FEE,
    SIDD TYPE OF COLUMN A_FP_PAYLISTS_R.SIDD,
    SIDN TYPE OF COLUMN A_FP_PAYLISTS_R.SIDN,
    IINEX TYPE OF COLUMN A_FP_PAYLISTS_R.IINEX,
    IIN_FROM TYPE OF COLUMN A_FP_PAYLISTS_R.IIN_FROM,
    IIN TYPE OF COLUMN A_FP_PAYLISTS_R.IIN,
    CASH TYPE OF COLUMN A_FP_PAYLISTS_R.CASH)
AS
declare variable ydt1 date;
    declare variable ydt2 date;
begin
    for select
             idp,
             :PDT1 as date1,
             :PDT2 as date2,
             max(paymonth),
             income_id,
             sum(pay0) as pay0,
             sum(taxed) as taxed,
             sum(nosai) as nosai,
             sum(nottaxed) as nottaxed,
             sum(authors_fee) as authors_fee,
             sum(sidd) as sidd,
             sum(sidn) as sidn,
             sum(iinex) as iinex,
             sum(iin_from) as iin_from,
             sum(iin) as iin,
             sum(cash) as cash
    from
    (
        select
            idp,
            extract(month from a_fp_paylists_r.paydate) as paymonth,
            tax_tp,
            income_id,
            pay0,
            iif(tax_tp = 0, pay0, 0) as taxed,
            iif(tax_tp = 1, pay0, 0) as nosai,
            iif(tax_tp = 2, pay0, 0) as nottaxed,
            iif(tax_tp = 3, pay0, 0) as authors_fee,
            sidd,
            sidn,
            iinex,
            iin_from,
            iin,
            cash
        from a_fp_paylists_r
        join a_fp_paylists on a_fp_paylists.id = a_fp_paylists_r.ids
        where
            a_fp_paylists.yr = :pyr and
            not (income_id starting '1')
    )
    group by idp, income_id
    into
           :idp,
           :date1,
           :date2,
           :paymonth,
           :income_id,
           :pay,
           :taxed,
           :nosai,
           :nottaxed,
           :authors_fee,
           :sidd,
           :sidn,
           :iinex,
           :iin_from,
           :iin,
           :cash
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_A_REP_IINK_31 (
    PDT1 DATE,
    PDT2 DATE,
    PDTX DATE)
RETURNS (
    IDP INTEGER,
    DT1 DATE,
    DT2 DATE,
    INCOME TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY,
    PLUS_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOTTAXED,
    DNSN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.DNSN_AMOUNT,
    UNTAXED_MINIMUM0 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM0,
    IIN_EXEMPT_DEPENDANTS0 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS0,
    IIN_EXEMPT_20 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_20,
    UNTAXED_MINIMUM TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM,
    IIN_EXEMPT_DEPENDANTS TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS,
    IIN_EXEMPT_2 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2,
    IIN_EXEMPT_2TP TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2TP,
    IIN_EXEMPT_EXPENSES TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_EXPENSES,
    PLUS_PF_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_PF_NOTTAXED,
    PLUS_LI_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_LI_NOTTAXED,
    PLUS_HI_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_HI_NOTTAXED,
    IIN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT,
    IIN_AMOUNT2 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT,
    PAY TYPE OF COLUMN A_SALARY_SHEETS_R.PAY,
    PAY2 TYPE OF COLUMN A_SALARY_SHEETS_R.PAY,
    ADVANCE TYPE OF COLUMN A_SALARY_SHEETS_R.ADVANCE)
AS
begin
    for select
        ridp,
        :pdt1 as dt1,
        :pdt2 as dt2,
        sum(rincome) as tincome,
        sum(rplus_nottaxed) as tplus_nottaxed,
        sum(rdnsn_amount) as tdnsn_amount,

        sum(runtaxed_minimum0) as tuntaxed_minimum0,
        sum(riin_exempt_dependants0) as tiin_exempt_dependants0,
        sum(riin_exempt_20) as tiin_exempt_20,

        sum(runtaxed_minimum) as tuntaxed_minimum,
        sum(riin_exempt_dependants) as tiin_exempt_dependants,
        sum(riin_exempt_2) as tiin_exempt_2,
        riin_exempt_2tp as tiin_exempt_2tp,
        sum(riin_exempt_expenses) as tiin_exempt_expenses,

        sum(rplus_pf_nottaxed) as tplus_pf_nottaxed,
        sum(rplus_li_nottaxed) as tplus_li_nottaxed,
        sum(rplus_hi_nottaxed) as tplus_hi_nottaxed,
        sum(riin_amount) as tiin_amount,
        sum(riin_amount2) as tiin_amount2,
        sum(rpay) as tpay,
        0.0 as tpay2,
        0.0 as tadvance
    from
    (
         select
            a_salary_sheets_r.idp as ridp,
            a_salary_sheets.dt1 as rdt1,
            a_salary_sheets.dt2 as rdt2,
            a_salary_sheets_r.total_before_taxes as rincome,
            a_salary_sheets_r.plus_nottaxed as rplus_nottaxed,

            a_salary_sheets_r.dnsn_amount as rdnsn_amount,
    
            0.0 as runtaxed_minimum0,
            0.0 as riin_exempt_dependants0,
            0.0 as riin_exempt_20,

            a_salary_sheets_r.iin_exempt_untaxed_minimum as runtaxed_minimum,
            a_salary_sheets_r.iin_exempt_dependants as riin_exempt_dependants,
            a_salary_sheets_r.iin_exempt_2 as riin_exempt_2,
            a_salary_sheets_r.iin_exempt_2tp as riin_exempt_2tp,
            a_salary_sheets_r.iin_exempt_expenses as riin_exempt_expenses,

            a_salary_sheets_r.plus_pf_nottaxed as rplus_pf_nottaxed,
            a_salary_sheets_r.plus_li_nottaxed as rplus_li_nottaxed,
            a_salary_sheets_r.plus_hi_nottaxed  as rplus_hi_nottaxed,
            a_salary_sheets_r.iin_amount as riin_amount,
            0.00 as riin_amount2,
            a_salary_sheets_r.pay as rpay

        from a_paylists_r
        join a_paylists on(a_paylists_r.ids = a_paylists.id and a_paylists.dt <= :PDTX)
        join a_salary_sheets_r on a_salary_sheets_r.idam = a_paylists_r.idam
        join a_salary_sheets
            on (a_salary_sheets_r.ids = a_salary_sheets.id and
                a_salary_sheets.is_temp = 0 and
                a_salary_sheets.kind = 0 and
                a_salary_sheets.dt1 >= :pdt1 and
                a_salary_sheets.dt2 <= :pdt2 and
                (
                    (a_salary_sheets.dt1 > a_paylists_r.dt1 and
                    a_salary_sheets.dt2 < a_paylists_r.dt2)
                    or
                    (a_salary_sheets.dt1 = a_paylists_r.dt1 and
                    a_salary_sheets_r.pay = a_paylists_r.s1)
                    or
                    (a_salary_sheets.dt2 = a_paylists_r.dt2 and
                    a_salary_sheets_r.pay = a_paylists_r.s2)
                ))
        union all
    
        select
            a_salary_sheets_r.idp as ridp,
            a_salary_sheets.dt1 as rdt1,
            a_salary_sheets.dt2 as rdt2,
            PAY_TAXED_1 + PAY_NOTTAXED_1 as rincome,
            PAY_NOTTAXED_1 as rplus_nottaxed,
            DNSI_1 as rdnsn_amount,
            0.0 as runtaxed_minimum0,
            0.0 as riin_exempt_dependants,
            0.0 as riin_exempt_20,
            UNTAXED_MINIMUM_1 as runtaxed_minimum,
            IINEX_DEPENDANTS_1 as riin_exempt_dependants,
            IINEX2_1 as riin_exempt_2,
            IINEX2_TP_1 as riin_exempt_2tp,
            IINEX_EXP_1 as riin_exempt_expenses,
            PFNT_1 as rplus_pf_nottaxed,
            LINT_1 as rplus_li_nottaxed,
            HINT_1 as rplus_hi_nottaxed,
            IIN_1 as riin_amount,
            0.00 as riin_amount2,
            S1 as rpay
    
        from a_paylists_r
        join a_paylists on(a_paylists_r.ids = a_paylists.id and a_paylists.dt <= :PDTX)
        join a_salary_sheets_r on a_salary_sheets_r.idam = a_paylists_r.idam
        join a_salary_sheets
            on (a_salary_sheets_r.ids = a_salary_sheets.id and
                a_salary_sheets.is_temp = 0 and
                a_salary_sheets.kind = 0 and
                a_salary_sheets.dt1 >= :pdt1 and
                a_salary_sheets.dt2 <= :pdt2 and
                a_salary_sheets.dt1 = a_paylists_r.dt1
                )

        union all
    
        select
            a_salary_sheets_r.idp as ridp,
            a_salary_sheets.dt1 as rdt1,
            a_salary_sheets.dt2 as rdt2,
            PAY_TAXED_2 + PAY_NOTTAXED_2 as rincome,
            PAY_NOTTAXED_2 as rplus_nottaxed,
            DNSI_2 as rdnsn_amount,
            0.0 as runtaxed_minimum0,
            0.0 as riin_exempt_dependants,
            0.0 as riin_exempt_20,
            UNTAXED_MINIMUM_2 as runtaxed_minimum,
            IINEX_DEPENDANTS_2 as riin_exempt_dependants,
            IINEX2_2 as riin_exempt_2,
            IINEX2_TP_2 as riin_exempt_2tp,
            IINEX_EXP_2 as riin_exempt_expenses,
            PFNT_2 as rplus_pf_nottaxed,
            LINT_2 as rplus_li_nottaxed,
            HINT_2 as rplus_hi_nottaxed,
            IIN_2 as riin_amount,
            0.00 as riin_amount2,
            S2 as rpay
    
        from a_paylists_r
        join a_paylists on(a_paylists_r.ids = a_paylists.id and a_paylists.dt <= :PDTX)
        join a_salary_sheets_r on a_salary_sheets_r.idam = a_paylists_r.idam
        join a_salary_sheets
            on (a_salary_sheets_r.ids = a_salary_sheets.id and
                a_salary_sheets.is_temp = 0 and
                a_salary_sheets.kind = 0 and
                a_salary_sheets.dt1 >= :pdt1 and
                a_salary_sheets.dt2 <= :pdt2 and
                a_salary_sheets.dt2 = a_paylists_r.dt2
                )

        union all

         select
            a_salary_sheets_r.idp as ridp,
            a_salary_sheets.dt1 as rdt1,
            a_salary_sheets.dt2 as rdt2,
            0.0 as rincome,
            0.0 as rplus_nottaxed,

            0.0 as rdnsn_amount,
    
            a_salary_sheets_r.iin_exempt_untaxed_minimum0 as runtaxed_minimum0,
            a_salary_sheets_r.iin_exempt_dependants0 as riin_exempt_dependants0,
            a_salary_sheets_r.iin_exempt_20 as riin_exempt_20,

            0.0 as runtaxed_minimum,
            0.0 as riin_exempt_dependants,
            0.0 as riin_exempt_2,
            a_salary_sheets_r.iin_exempt_2tp as riin_exempt_2tp,
            0.0 as riin_exempt_expenses,

            0.0 as rplus_pf_nottaxed,
            0.0 as rplus_li_nottaxed,
            0.0 as rplus_hi_nottaxed,
            0.0 as riin_amount,
            0.0 as riin_amount2,
            0.0 as rpay

        from a_paylists_r
        join a_paylists on(a_paylists_r.ids = a_paylists.id and a_paylists.dt <= :PDTX)
        join a_salary_sheets_r on a_salary_sheets_r.idam = a_paylists_r.idam
        join a_salary_sheets
            on (a_salary_sheets_r.ids = a_salary_sheets.id and
                a_salary_sheets.is_temp = 0 and
                a_salary_sheets.kind = 0 and
                a_salary_sheets.dt1 >= :pdt1 and
                a_salary_sheets.dt2 <= :pdt2 and
                a_salary_sheets.dt1 >= a_paylists_r.dt1 and
                a_salary_sheets.dt2 <= a_paylists_r.dt2
                )


    )
    group by ridp, riin_exempt_2tp
    order by ridp

    into
        :idp,
        :dt1,
        :dt2,
        :income,
        :plus_nottaxed,
        :dnsn_amount,

        :untaxed_minimum0,
        :iin_exempt_dependants0,
        :iin_exempt_20,

        :untaxed_minimum,
        :iin_exempt_dependants,
        :iin_exempt_2,

        :iin_exempt_2tp,
        :iin_exempt_expenses,
        :plus_pf_nottaxed,
        :plus_li_nottaxed,
        :plus_hi_nottaxed,
        :iin_amount,
        :iin_amount2,
        :pay,
        :pay2,
        :advance

  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_A_REP_IINK_32 (
    PDT1 DATE,
    PDT2 DATE,
    PDTX DATE)
RETURNS (
    IDP INTEGER,
    DT1 DATE,
    DT2 DATE,
    INCOME TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY,
    PLUS_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOTTAXED,
    DNSN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.DNSN_AMOUNT,
    UNTAXED_MINIMUM0 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM0,
    IIN_EXEMPT_DEPENDANTS0 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS0,
    IIN_EXEMPT_20 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_20,
    UNTAXED_MINIMUM TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM,
    IIN_EXEMPT_DEPENDANTS TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS,
    IIN_EXEMPT_2 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2,
    IIN_EXEMPT_2TP TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2TP,
    IIN_EXEMPT_EXPENSES TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_EXPENSES,
    PLUS_PF_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_PF_NOTTAXED,
    PLUS_LI_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_LI_NOTTAXED,
    PLUS_HI_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_HI_NOTTAXED,
    IIN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT,
    IIN_AMOUNT2 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT,
    PAY TYPE OF COLUMN A_SALARY_SHEETS_R.PAY,
    PAY2 TYPE OF COLUMN A_SALARY_SHEETS_R.PAY,
    ADVANCE TYPE OF COLUMN A_SALARY_SHEETS_R.ADVANCE)
AS
begin
/* darbiniekiem, kas atlaisti norādītajā periodā */
    for select
        xt.idp,
        dt1,
        dt2,
        income,
        plus_nottaxed,
        dnsn_amount,

        untaxed_minimum0,
        iin_exempt_dependants0,
        iin_exempt_20,

        untaxed_minimum,
        iin_exempt_dependants,
        iin_exempt_2,

        iin_exempt_2tp,
        iin_exempt_expenses,
        plus_pf_nottaxed,
        plus_li_nottaxed,
        plus_hi_nottaxed,
        iin_amount,
        iin_amount2,
        pay,
        pay2,
        advance
    from
        sp_a_rep_iink_31(:pdt1,  :pdt2, :pdtx) as XT
        join sp_a_rep_iink_p1(:pdt1, :pdt2, :pdt1) as TP
            on TP.idp = XT.idp

    into
        :idp,
        :dt1,
        :dt2,
        :income,
        :plus_nottaxed,
        :dnsn_amount,

        :untaxed_minimum0,
        :iin_exempt_dependants0,
        :iin_exempt_20,

        :untaxed_minimum,
        :iin_exempt_dependants,
        :iin_exempt_2,

        :iin_exempt_2tp,
        :iin_exempt_expenses,
        :plus_pf_nottaxed,
        :plus_li_nottaxed,
        :plus_hi_nottaxed,
        :iin_amount,
        :iin_amount2,
        :pay,
        :pay2,
        :advance

    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_A_REP_IINK_33 (
    PDT1 DATE,
    PDT2 DATE,
    PDTX DATE)
RETURNS (
    IDP INTEGER,
    DT1 DATE,
    DT2 DATE,
    INCOME TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY,
    PLUS_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOTTAXED,
    DNSN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.DNSN_AMOUNT,
    UNTAXED_MINIMUM0 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM0,
    IIN_EXEMPT_DEPENDANTS0 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS0,
    IIN_EXEMPT_20 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_20,
    UNTAXED_MINIMUM TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM,
    IIN_EXEMPT_DEPENDANTS TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS,
    IIN_EXEMPT_2 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2,
    IIN_EXEMPT_2TP TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2TP,
    IIN_EXEMPT_EXPENSES TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_EXPENSES,
    PLUS_PF_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_PF_NOTTAXED,
    PLUS_LI_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_LI_NOTTAXED,
    PLUS_HI_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_HI_NOTTAXED,
    IIN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT,
    IIN_AMOUNT2 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT,
    PAY TYPE OF COLUMN A_SALARY_SHEETS_R.PAY,
    PAY2 TYPE OF COLUMN A_SALARY_SHEETS_R.PAY,
    ADVANCE TYPE OF COLUMN A_SALARY_SHEETS_R.ADVANCE)
AS
begin
/* darbinieki, kas līdz gada beigām nav atlaisti */
    for select
        xt.idp,
        dt1,
        dt2,
        income,
        plus_nottaxed,
        dnsn_amount,

        untaxed_minimum0,
        iin_exempt_dependants0,
        iin_exempt_20,

        untaxed_minimum,
        iin_exempt_dependants,
        iin_exempt_2,

        iin_exempt_2tp,
        iin_exempt_expenses,
        plus_pf_nottaxed,
        plus_li_nottaxed,
        plus_hi_nottaxed,
        iin_amount,
        iin_amount2,
        pay,
        pay2,
        advance
    from
        sp_a_rep_iink_31(:pdt1,  :pdt2, :pdtx) as XT
        join sp_a_rep_iink_p2(:pdt1, :pdt2) as TP
            on TP.idp = XT.idp

    into
        :idp,
        :dt1,
        :dt2,
        :income,
        :plus_nottaxed,
        :dnsn_amount,

        :untaxed_minimum0,
        :iin_exempt_dependants0,
        :iin_exempt_20,

        :untaxed_minimum,
        :iin_exempt_dependants,
        :iin_exempt_2,

        :iin_exempt_2tp,
        :iin_exempt_expenses,
        :plus_pf_nottaxed,
        :plus_li_nottaxed,
        :plus_hi_nottaxed,
        :iin_amount,
        :iin_amount2,
        :pay,
        :pay2,
        :advance

    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_A_REP_IINK_L1 (
    PDT1 DATE,
    PDT2 DATE,
    PDTX DATE)
RETURNS (
    ID TYPE OF COLUMN A_SALARY_SHEETS_R.ID,
    IDP TYPE OF COLUMN A_SALARY_SHEETS_R.IDP,
    IDAM TYPE OF COLUMN A_SALARY_SHEETS_R.IDAM,
    PAY TYPE OF COLUMN A_SALARY_SHEETS_R.PAY,
    R DOUBLE PRECISION)
AS
declare variable payf type of column A_SALARY_SHEETS_R.PAY;
begin
-- visiem darbiniekiem, neatkarīgi no tā vai atlaists
    for select
        rid as tid,
        max(ridp) as tidp,
        max(ridam) as tidam,
        max(rpayf) as tpayf,
        sum(rpay) as tpay
    from
    (
        select
            a_salary_sheets_r.id as rid,
            a_salary_sheets_r.idp as ridp,
            a_salary_sheets_r.idam as ridam,
            a_salary_sheets_r.pay as rpayf,
            iif(a_salary_sheets.dt1 > a_paylists_r.dt1 and
                a_salary_sheets.dt2 < a_paylists_r.dt2,
                a_salary_sheets_r.pay,
                iif(a_salary_sheets.dt1 = a_paylists_r.dt1,
                    minvalue(a_salary_sheets_r.pay, a_paylists_r.s1),
                    iif(a_salary_sheets.dt2 = a_paylists_r.dt2 and a_paylists_r.s2 > 0.0,
                        minvalue(a_salary_sheets_r.pay, a_paylists_r.s2), 0.0
                    )
                )
            ) as rpay

        from a_salary_sheets
        join a_salary_sheets_r
            on a_salary_sheets.id = a_salary_sheets_r.ids and
                a_salary_sheets.dt2 between :pdt1 and :pdt2 AND
                a_salary_sheets.is_temp = 0 AND
                a_salary_sheets_r.pay <> 0.0 AND
                a_salary_sheets.kind = 0

        join a_paylists_r
            on a_paylists_r.idam = a_salary_sheets_r.idam and
                a_salary_sheets.dt2 between a_paylists_r.dt1 and a_paylists_r.dt2

        join a_paylists
            on a_paylists.id = a_paylists_r.ids and
                a_paylists.dt <= :pdtx

    )
    group by rid
    into :id, :idp, :idam, :pay, :payf
    do
    begin
        if(payf = 0.0)
        then r = 0.0;
        else r = pay / payf;

        suspend;
    end
end^


ALTER PROCEDURE SP_A_REP_IINK_L2 (
    PDT1 DATE,
    PDT2 DATE,
    PDTX DATE,
    PDTY DATE)
RETURNS (
    ID TYPE OF COLUMN A_SALARY_SHEETS_R.ID,
    IDP TYPE OF COLUMN A_SALARY_SHEETS_R.IDP,
    IDAM TYPE OF COLUMN A_SALARY_SHEETS_R.IDAM,
    PAY TYPE OF COLUMN A_SALARY_SHEETS_R.PAY,
    R DOUBLE PRECISION)
AS
declare variable payf type of column A_SALARY_SHEETS_R.PAY;
begin
/* darbinieki, kas atlaisti norādītajā periodā */

    for select
        rid as tid,
        max(ridp) as tidp,
        max(ridam) as tidam,
        max(rpayf) as tpayf,
        sum(rpay) as tpay
    from
    (
        select
            a_salary_sheets_r.id as rid,
            a_salary_sheets_r.idp as ridp,
            a_salary_sheets_r.idam as ridam,
            a_salary_sheets_r.pay as rpayf,
            iif(a_salary_sheets.dt1 > a_paylists_r.dt1 and
                a_salary_sheets.dt2 < a_paylists_r.dt2,
                a_salary_sheets_r.pay,
                iif(a_salary_sheets.dt1 = a_paylists_r.dt1,
                    minvalue(a_salary_sheets_r.pay, a_paylists_r.s1),
                    iif(a_salary_sheets.dt2 = a_paylists_r.dt2 and a_paylists_r.s2 > 0.0,
                        minvalue(a_salary_sheets_r.pay, a_paylists_r.s2), 0.0
                    )
                )
            ) as rpay

        from a_salary_sheets
        join a_salary_sheets_r
            on a_salary_sheets.id = a_salary_sheets_r.ids and
                a_salary_sheets.dt2 between :pdt1 and :pdt2 AND
                a_salary_sheets.is_temp = 0 AND
                a_salary_sheets_r.pay <> 0.0 AND
                a_salary_sheets.kind = 0

        join sp_a_rep_iink_p1(:pdt1, :pdt2, :pdt1) as TP
            on TP.idp = a_salary_sheets_r.idp and
                a_salary_sheets.dt2 between TP.hdate and TP.fdate

        join a_paylists_r
            on a_paylists_r.idam = a_salary_sheets_r.idam and
                a_salary_sheets.dt2 between a_paylists_r.dt1 and a_paylists_r.dt2

        join a_paylists
            on a_paylists.id = a_paylists_r.ids and
                a_paylists.dt <= :pdtx

    )
    group by rid
    into :id, :idp, :idam, :pay, :payf
    do
    begin
        if(payf = 0.0)
        then r = 0.0;
        else r = pay / payf;

        suspend;
    end
end^


ALTER PROCEDURE SP_A_REP_IINK_L3 (
    PDT1 DATE,
    PDT2 DATE,
    PDTX DATE,
    PDTY DATE)
RETURNS (
    ID TYPE OF COLUMN A_SALARY_SHEETS_R.ID,
    IDP TYPE OF COLUMN A_SALARY_SHEETS_R.IDP,
    IDAM TYPE OF COLUMN A_SALARY_SHEETS_R.IDAM,
    PAY TYPE OF COLUMN A_SALARY_SHEETS_R.PAY,
    R DOUBLE PRECISION)
AS
declare variable payf type of column A_SALARY_SHEETS_R.PAY;
begin
/* darbiniekiem, kas līdz gada beigām nav atlaisti */

    for select
        rid as tid,
        max(ridp) as tidp,
        max(ridam) as tidam,
        max(rpayf) as tpayf,
        sum(rpay) as tpay
    from
    (
        select
            a_salary_sheets_r.id as rid,
            a_salary_sheets_r.idp as ridp,
            a_salary_sheets_r.idam as ridam,
            a_salary_sheets_r.pay as rpayf,
            iif(a_salary_sheets.dt1 > a_paylists_r.dt1 and
                a_salary_sheets.dt2 < a_paylists_r.dt2,
                a_salary_sheets_r.pay,
                iif(a_salary_sheets.dt1 = a_paylists_r.dt1,
                    minvalue(a_salary_sheets_r.pay, a_paylists_r.s1),
                    iif(a_salary_sheets.dt2 = a_paylists_r.dt2 and a_paylists_r.s2 > 0.0,
                        minvalue(a_salary_sheets_r.pay, a_paylists_r.s2), 0.0
                    )
                )
            ) as rpay

        from a_salary_sheets
        join a_salary_sheets_r
            on a_salary_sheets.id = a_salary_sheets_r.ids and
                a_salary_sheets.dt2 between :pdt1 and :pdt2 AND
                a_salary_sheets.is_temp = 0 AND
                a_salary_sheets_r.pay <> 0.0 AND
                a_salary_sheets.kind = 0

        join sp_a_rep_iink_p2(:pdt1, :pdt2) as TP
            on TP.idp = a_salary_sheets_r.idp and
                a_salary_sheets.dt2 between TP.hdate and TP.fdate

        join a_paylists_r
            on a_paylists_r.idam = a_salary_sheets_r.idam and
                a_salary_sheets.dt2 between a_paylists_r.dt1 and a_paylists_r.dt2

        join a_paylists
            on a_paylists.id = a_paylists_r.ids and
                a_paylists.dt <= :pdtx

    )
    group by rid
    into :id, :idp, :idam, :pay, :payf
    do
    begin
        if(payf = 0.0)
        then r = 0.0;
        else r = pay / payf;

        suspend;
    end
end^


ALTER PROCEDURE SP_A_REP_IINK_P1 (
    PDT1 DATE,
    PDT2 DATE,
    PDTY DATE)
RETURNS (
    IDP INTEGER,
    HDATE DATE,
    FDATE DATE)
AS
begin
/* darbinieki, kas atlaisti norādītajā periodā */

    for select
        FT.idp,
        maxvalue(max(EV.date1), :pdty) as hdate,
        FT.fdate
    from
        a_events as EV
        join 
        (
            select distinct EV3.idp, FT2.xdate as fdate
            from a_events as EV3
            join
            (
                select
                    EV2.idp,
                    max(EV2.date1) as xdate
                from a_events as EV2
                where
                    EV2.idn in (1, 2) and
                    EV2.date1 between :pdt1 and :pdt2
                group by EV2.idp
            ) as FT2
            on EV3.idp = FT2.idp and EV3.date1 = FT2.xdate
            where EV3.idn = 2
        ) as FT
        on (FT.idp = EV.idp)

    where
        EV.idn = 1 and
        EV.date1 < FT.fdate
    group by FT.idp, FT.fdate

    into IDP, HDATE, FDATE

    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_A_REP_IINK_P2 (
    PDTY1 DATE,
    PDTY2 DATE)
RETURNS (
    IDP INTEGER,
    HDATE DATE,
    FDATE DATE)
AS
begin
/* darbinieki, kas līdz gada beigām nav atlaisti */

    for select distinct
        EV.idp,
        maxvalue(EV.date1, :pdty1) as HDATE,
        :pdty2 as FDATE
    from a_events as EV
    join
    (
        select
            EV2.idp,
            max(EV2.date1) as xdate
        from a_events as EV2
        where
            EV2.idn in (1, 2) and
            EV2.date1 <= :pdty2
        group by EV2.idp
    ) as HT
    on EV.idp = HT.idp and EV.date1 = HT.xdate
    where EV.idn = 1

    into IDP, HDATE, FDATE

    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_A_REP_PDT (
    PDT DATE)
RETURNS (
    IDP INTEGER,
    DATE1 DATE,
    DATE2 DATE)
AS
begin
/* darbinieku pēdējie [pieņemts - *] datumi */

    for select
        idp, 
        date1,
        date2
    from
    (
        select
            EV.idp,
            EV.date1 as DATE1,
            :pdt as DATE2
        from a_events as EV
        join
        (
            select
                EV2.idp,
                max(EV2.date1) as xdate
            from a_events as EV2
            where
                EV2.idn in (1, 2) and
                EV2.date1 <= :pdt
            group by EV2.idp
        ) as HT
        on EV.idp = HT.idp and EV.date1 = HT.xdate
        where EV.idn = 1
    
        union all
    
        select
            FT.idp,
            max(EV.date1) as DATE1,
            FT.fdate as DATE2
        from
            a_events as EV
            join 
            (
                select EV3.idp, FT2.xdate as fdate
                from a_events as EV3
                join
                (
                    select
                        EV2.idp,
                        max(EV2.date1) as xdate
                    from a_events as EV2
                    where
                        EV2.idn in (1, 2) and
                        EV2.date1 <= :pdt
                    group by EV2.idp
                ) as FT2
                on EV3.idp = FT2.idp and EV3.date1 = FT2.xdate
                where EV3.idn = 2
            ) as FT
            on (FT.idp = EV.idp)
    
        where
            EV.idn = 1 and
            EV.date1 < FT.fdate
        group by FT.idp, FT.fdate
    )

    into IDP, DATE1, DATE2

    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_A_SALARY_PLUSMINUS_PER_01 (
    PYR1 INTEGER,
    PMT1 INTEGER,
    PYR2 INTEGER,
    PMT2 INTEGER)
RETURNS (
    ID TYPE OF COLUMN A_SALARY_PLUSMINUS.ID,
    IDP TYPE OF COLUMN A_SALARY_PLUSMINUS.IDP,
    IDA TYPE OF COLUMN A_SALARY_PLUSMINUS.IDA,
    IDAP TYPE OF COLUMN A_SALARY_PLUSMINUS.IDAP,
    IDSX TYPE OF COLUMN A_SALARY_PLUSMINUS.IDSX,
    IDSV TYPE OF COLUMN A_SALARY_PLUSMINUS.IDSV,
    IDNO TYPE OF COLUMN A_SALARY_PLUSMINUS.IDNO,
    IDIE TYPE OF COLUMN A_SALARY_PLUSMINUS.IDIE,
    DESCR TYPE OF COLUMN A_SALARY_PLUSMINUS.DESCR,
    RATE TYPE OF COLUMN A_SALARY_PLUSMINUS.RATE,
    RATE_TYPE TYPE OF COLUMN A_SALARY_PLUSMINUS.RATE_TYPE,
    AMOUNT TYPE OF COLUMN A_SALARY_PLUSMINUS.AMOUNT,
    IS_INAVPAY TYPE OF COLUMN A_SALARY_PLUSMINUS.IS_INAVPAY,
    IS_PAID TYPE OF COLUMN A_SALARY_PLUSMINUS.IS_PAID)
AS
declare km1 integer;
    declare km2 integer;
begin
    km1 = (:pyr1 - 1900) * 13 + :pmt1;
    km2 = (:pyr2 - 1900) * 13 + :pmt2;

    for select
        a_salary_plusminus.id,
        a_salary_plusminus.idp,
        a_salary_plusminus.ida,
        a_salary_plusminus.idap,
        a_salary_plusminus.idsx,
        a_salary_plusminus.idsv,
        a_salary_plusminus.idno,
        a_salary_plusminus.idie,
        a_salary_plusminus.descr,
        a_salary_plusminus.rate,
        a_salary_plusminus.rate_type,
        a_salary_plusminus.amount,
        a_salary_plusminus.is_inavpay,
        a_salary_plusminus.is_paid

    from a_salary_plusminus
    join a_salary_sheets_r on a_salary_plusminus.idsx = a_salary_sheets_r.id
    join a_salary_sheets on a_salary_sheets_r.ids = a_salary_sheets.id

    where ((a_salary_sheets.yr - 1900)*13 + a_salary_sheets.mt) between :km1 and :km2
    order by yr, mt

    into
        :id, :idp, :ida, :idap, :idsx, :idsv,
        :idno, :idie, :descr, :rate, :rate_type, :amount,
        :is_inavpay, :is_paid
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_A_SALARY_SHEETS_PER_01 (
    PYR1 INTEGER,
    PMT1 INTEGER,
    PYR2 INTEGER,
    PMT2 INTEGER)
RETURNS (
    ID TYPE OF COLUMN A_SALARY_SHEETS.ID,
    YR TYPE OF COLUMN A_SALARY_SHEETS.YR,
    MT TYPE OF COLUMN A_SALARY_SHEETS.MT,
    SNR TYPE OF COLUMN A_SALARY_SHEETS.SNR,
    DT1 TYPE OF COLUMN A_SALARY_SHEETS.DT1,
    DT2 TYPE OF COLUMN A_SALARY_SHEETS.DT2,
    DESCR TYPE OF COLUMN A_SALARY_SHEETS.DESCR,
    DEP TYPE OF COLUMN A_SALARY_SHEETS.DEP,
    KIND TYPE OF COLUMN A_SALARY_SHEETS.KIND,
    IS_TEMP TYPE OF COLUMN A_SALARY_SHEETS.IS_TEMP)
AS
declare km1 integer;
    declare km2 integer;
begin
    km1 = (:pyr1 - 1900) * 13 + :pmt1;
    km2 = (:pyr2 - 1900) * 13 + :pmt2;

    for select id, yr, mt, snr, dt1, dt2, descr, dep, kind, is_temp
    from a_salary_sheets
    where ((yr - 1900)*13 + mt) between :km1 and :km2
    order by yr, mt, snr
    into :id, :yr, :mt, :snr, :dt1, :dt2, :descr, :dep, :kind, :is_temp
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_A_SALARY_SHEETS_R_HIST_01 (
    PID INTEGER)
RETURNS (
    IDH TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.ID,
    ID TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.ID,
    IDS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IDS,
    IDSX TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IDSX,
    IDST TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IDST,
    IS_TEMP TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IS_TEMP,
    TYPE_TAG TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.TYPE_TAG,
    IDP TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IDP,
    IDAM TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IDAM,
    SNR TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SNR,
    FNAME TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FNAME,
    LNAME TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.LNAME,
    POSITION_TITLE TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.POSITION_TITLE,
    TERRITORIAL_CODE TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.TERRITORIAL_CODE,
    CALENDAR_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.CALENDAR_DAYS,
    CALENDAR_DAYS_USE TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.CALENDAR_DAYS_USE,
    MONTH_WORKDAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.MONTH_WORKDAYS,
    MONTH_WORKHOURS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.MONTH_WORKHOURS,
    PLAN_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_DAYS,
    PLAN_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_HOURS,
    PLAN_HOURS_NIGHT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_HOURS_NIGHT,
    PLAN_HOURS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_HOURS_OVERTIME,
    FACT_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_DAYS,
    FACT_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_HOURS,
    FACT_HOURS_NIGHT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_HOURS_NIGHT,
    FACT_HOURS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_HOURS_OVERTIME,
    PLAN_WORK_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_WORK_DAYS,
    PLAN_WORK_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_WORK_HOURS,
    PLAN_WORK_HOURS_NIGHT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_WORK_HOURS_NIGHT,
    PLAN_WORK_HOURS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_WORK_HOURS_OVERTIME,
    FACT_WORK_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_WORK_DAYS,
    FACT_WORK_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_WORK_HOURS,
    FACT_WORK_HOURS_NIGHT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_WORK_HOURS_NIGHT,
    FACT_WORK_HOURS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_WORK_HOURS_OVERTIME,
    PLAN_HOLIDAYS_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_HOLIDAYS_DAYS,
    PLAN_HOLIDAYS_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_HOLIDAYS_HOURS,
    PLAN_HOLIDAYS_HOURS_NIGHT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_HOLIDAYS_HOURS_NIGHT,
    PLAN_HOLIDAYS_HOURS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_HOLIDAYS_HOURS_OVERTIME,
    FACT_HOLIDAYS_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_HOLIDAYS_DAYS,
    FACT_HOLIDAYS_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_HOLIDAYS_HOURS,
    FACT_HOLIDAYS_HOURS_NIGHT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_HOLIDAYS_HOURS_NIGHT,
    FACT_HOLIDAYS_HOURS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_HOLIDAYS_HOURS_OVERTIME,
    SALARY TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY,
    SALARY_DAY TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_DAY,
    SALARY_NIGHT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_NIGHT,
    SALARY_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_OVERTIME,
    SALARY_HOLIDAYS_DAY TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_HOLIDAYS_DAY,
    SALARY_HOLIDAYS_NIGHT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_HOLIDAYS_NIGHT,
    SALARY_HOLIDAYS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_HOLIDAYS_OVERTIME,
    SALARY_PAID_HOLIDAYS_DAY TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_PAID_HOLIDAYS_DAY,
    SALARY_PAID_HOLIDAYS_NIGHT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_PAID_HOLIDAYS_NIGHT,
    SALARY_PIECEWORK TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_PIECEWORK,
    SICKDAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SICKDAYS,
    SICKDAYS_PAY TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SICKDAYS_PAY,
    ACCIDENT_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.ACCIDENT_DAYS,
    ACCIDENT_PAY TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.ACCIDENT_PAY,
    AVERAGE_INCOME_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AVERAGE_INCOME_DAYS,
    AVERAGE_INCOME_PAY TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AVERAGE_INCOME_PAY,
    FACT_AVPAY_FREE_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_FREE_DAYS,
    FACT_AVPAY_FREE_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_FREE_HOURS,
    FACT_AVPAY_WORK_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_WORK_DAYS,
    FACT_AVPAY_WORKINHOLIDAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_WORKINHOLIDAYS,
    FACT_AVPAY_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_HOURS,
    FACT_AVPAY_HOURS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_HOURS_OVERTIME,
    FACT_AVPAY_HOLIDAYS_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_HOLIDAYS_HOURS,
    FACT_AVPAY_HOLIDAYS_HOURS_OVERT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_HOLIDAYS_HOURS_OVERT,
    SALARY_AVPAY_FREE_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_AVPAY_FREE_DAYS,
    SALARY_AVPAY_WORK_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_AVPAY_WORK_DAYS,
    SALARY_AVPAY_WORK_DAYS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_AVPAY_WORK_DAYS_OVERTIME,
    SALARY_AVPAY_HOLIDAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_AVPAY_HOLIDAYS,
    SALARY_AVPAY_HOLIDAYS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_AVPAY_HOLIDAYS_OVERTIME,
    BUSINESS_TRIP_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.BUSINESS_TRIP_DAYS,
    BUSINESS_TRIP_PAY TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.BUSINESS_TRIP_PAY,
    PAID_HOLIDAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PAID_HOLIDAYS,
    PAID_HOLIDAYS_PAY TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PAID_HOLIDAYS_PAY,
    VACATION_DAYS_CURRENT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_DAYS_CURRENT,
    VACATION_DAYS_NEXT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_DAYS_NEXT,
    VACATION_HOURS_CURRENT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_HOURS_CURRENT,
    VACATION_HOURS_NEXT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_HOURS_NEXT,
    VACATION_PAY_CURRENT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_PAY_CURRENT,
    VACATION_PAY_NEXT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_PAY_NEXT,
    VACATION_DNS_NEXT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_DNS_NEXT,
    VACATION_DDS_NEXT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_DDS_NEXT,
    VACATION_IIN_NEXT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_IIN_NEXT,
    VACATION_IIN_REDUCE_NEXT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_IIN_REDUCE_NEXT,
    VACATION_CASH_NEXT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_CASH_NEXT,
    VACATION_PAY_PREV TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_PAY_PREV,
    VACATION_DNS_PREV TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_DNS_PREV,
    VACATION_DDS_PREV TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_DDS_PREV,
    VACATION_IIN_PREV TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_IIN_PREV,
    VACATION_DAYS_COMP TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_DAYS_COMP,
    VACATION_PAY_COMP TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_PAY_COMP,
    PLUS_TAXED TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_TAXED,
    PLUS_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_NOTTAXED,
    PLUS_NOSAI TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_NOSAI,
    PLUS_AUTHORS_FEES TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_AUTHORS_FEES,
    MINUS_BEFORE_IIN TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.MINUS_BEFORE_IIN,
    MINUS_AFTER_IIN TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.MINUS_AFTER_IIN,
    PLUS_PF_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_PF_NOTTAXED,
    PLUS_PF_TAXED TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_PF_TAXED,
    PLUS_LI_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_LI_NOTTAXED,
    PLUS_LI_TAXED TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_LI_TAXED,
    PLUS_HI_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_HI_NOTTAXED,
    PLUS_HI_TAXED TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_HI_TAXED,
    PLUS_NP_TAXED TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_NP_TAXED,
    PLUS_NP_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_NP_NOTTAXED,
    PLUS_NP_NOSAI TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_NP_NOSAI,
    TOTAL_BEFORE_TAXES TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.TOTAL_BEFORE_TAXES,
    ADJUSTED_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.ADJUSTED_AMOUNT,
    AMOUNT_BEFORE_SN TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AMOUNT_BEFORE_SN,
    AMOUNT_BEFORE_SN_REVERSE TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AMOUNT_BEFORE_SN_REVERSE,
    RATE_DNSN TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.RATE_DNSN,
    RATE_DDSN TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.RATE_DDSN,
    DNSN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.DNSN_AMOUNT,
    DDSN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.DDSN_AMOUNT,
    SN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SN_AMOUNT,
    DNSN_AMOUNT_REVERSE TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.DNSN_AMOUNT_REVERSE,
    DDSN_AMOUNT_REVERSE TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.DDSN_AMOUNT_REVERSE,
    SN_MAX_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SN_MAX_AMOUNT,
    IIN_EXEMPT_UNTAXED_MINIMUM0 TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_UNTAXED_MINIMUM0,
    IIN_EXEMPT_DEPENDANTS0 TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_DEPENDANTS0,
    IIN_EXEMPT_RETALIATION0 TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_RETALIATION0,
    IIN_EXEMPT_INVALIDITY0 TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_INVALIDITY0,
    IIN_EXEMPT_NATIONAL_MOVEMENT0 TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_NATIONAL_MOVEMENT0,
    IIN_EXEMPT_UNTAXED_MINIMUM TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_UNTAXED_MINIMUM,
    IIN_EXEMPT_DEPENDANTS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_DEPENDANTS,
    IIN_EXEMPT_RETALIATION TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_RETALIATION,
    IIN_EXEMPT_INVALIDITY TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_INVALIDITY,
    IIN_EXEMPT_NATIONAL_MOVEMENT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_NATIONAL_MOVEMENT,
    IIN_EXEMPT_EXPENSES TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_EXPENSES,
    IIN_EXEMPT_2TP TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_2TP,
    IIN_EXEMPT_20 TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_20,
    IIN_EXEMPT_2 TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_2,
    AMOUNT_BEFORE_IIN TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AMOUNT_BEFORE_IIN,
    AMOUNT_BEFORE_IIN_REVERSE TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AMOUNT_BEFORE_IIN_REVERSE,
    RATE_IIN TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.RATE_IIN,
    RATE_IIN2 TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.RATE_IIN2,
    IIN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_AMOUNT,
    IIN_AMOUNT_REVERSE TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_AMOUNT_REVERSE,
    URVN_AMAOUNT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.URVN_AMAOUNT,
    PLUS_NOT_PAID TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_NOT_PAID,
    VACATION_ADVANCE_CURRENT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_ADVANCE_CURRENT,
    VACATION_ADVANCE_NEXT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_ADVANCE_NEXT,
    VACATION_ADVANCE_PREV TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_ADVANCE_PREV,
    ADVANCE TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.ADVANCE,
    PAY0 TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PAY0,
    PAY TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PAY,
    PAYT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PAYT,
    PAY_DATE TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PAY_DATE,
    COMMENTS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.COMMENTS,
    WITHHOLD_FROM_PAY TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.WITHHOLD_FROM_PAY,
    FORAVPAYCALC_BRUTO TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FORAVPAYCALC_BRUTO,
    FORAVPAYCALC_PAYOUT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FORAVPAYCALC_PAYOUT,
    FORAVPAYCALC_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FORAVPAYCALC_DAYS,
    FORAVPAYCALC_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FORAVPAYCALC_HOURS,
    AVPAYCALC_CALDAY TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AVPAYCALC_CALDAY,
    AVPAYCALC_DAY TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AVPAYCALC_DAY,
    AVPAYCALC_HOUR TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AVPAYCALC_HOUR,
    DT_EDITED TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.DT_EDITED,
    CALC_VER TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.CALC_VER)
AS
begin

    for select
             a_salary_sheets_r_hist.idH,
             a_salary_sheets_r_hist.id,
             a_salary_sheets_r_hist.ids,
             a_salary_sheets_r_hist.idsx,
             a_salary_sheets_r_hist.idst,
             a_salary_sheets_r_hist.is_temp,
             a_salary_sheets_r_hist.type_tag,
             a_salary_sheets_r_hist.idp,
             a_salary_sheets_r_hist.idam,
             a_salary_sheets_r_hist.snr,
             a_salary_sheets_r_hist.fname,
             a_salary_sheets_r_hist.lname,
             a_salary_sheets_r_hist.position_title,
             a_salary_sheets_r_hist.territorial_code,
             a_salary_sheets_r_hist.calendar_days,
             a_salary_sheets_r_hist.calendar_days_use,
             a_salary_sheets_r_hist.month_workdays,
             a_salary_sheets_r_hist.month_workhours,
             a_salary_sheets_r_hist.plan_days,
             a_salary_sheets_r_hist.plan_hours,
             a_salary_sheets_r_hist.plan_hours_night,
             a_salary_sheets_r_hist.plan_hours_overtime,
             a_salary_sheets_r_hist.fact_days,
             a_salary_sheets_r_hist.fact_hours,
             a_salary_sheets_r_hist.fact_hours_night,
             a_salary_sheets_r_hist.fact_hours_overtime,
             a_salary_sheets_r_hist.plan_work_days,
             a_salary_sheets_r_hist.plan_work_hours,
             a_salary_sheets_r_hist.plan_work_hours_night,
             a_salary_sheets_r_hist.plan_work_hours_overtime,
             a_salary_sheets_r_hist.fact_work_days,
             a_salary_sheets_r_hist.fact_work_hours,
             a_salary_sheets_r_hist.fact_work_hours_night,
             a_salary_sheets_r_hist.fact_work_hours_overtime,
             a_salary_sheets_r_hist.plan_holidays_days,
             a_salary_sheets_r_hist.plan_holidays_hours,
             a_salary_sheets_r_hist.plan_holidays_hours_night,
             a_salary_sheets_r_hist.plan_holidays_hours_overtime,
             a_salary_sheets_r_hist.fact_holidays_days,
             a_salary_sheets_r_hist.fact_holidays_hours,
             a_salary_sheets_r_hist.fact_holidays_hours_night,
             a_salary_sheets_r_hist.fact_holidays_hours_overtime,
             a_salary_sheets_r_hist.salary,
             a_salary_sheets_r_hist.salary_day,
             a_salary_sheets_r_hist.salary_night,
             a_salary_sheets_r_hist.salary_overtime,
             a_salary_sheets_r_hist.salary_holidays_day,
             a_salary_sheets_r_hist.salary_holidays_night,
             a_salary_sheets_r_hist.salary_holidays_overtime,
             a_salary_sheets_r_hist.salary_paid_holidays_day,
             a_salary_sheets_r_hist.salary_paid_holidays_night,
             a_salary_sheets_r_hist.salary_piecework,
             a_salary_sheets_r_hist.sickdays,
             a_salary_sheets_r_hist.sickdays_pay,
             a_salary_sheets_r_hist.accident_days,
             a_salary_sheets_r_hist.accident_pay,
             a_salary_sheets_r_hist.average_income_days,
             a_salary_sheets_r_hist.average_income_pay,

             a_salary_sheets_r_hist.fact_avpay_free_days,
             a_salary_sheets_r_hist.fact_avpay_free_hours,
             a_salary_sheets_r_hist.fact_avpay_work_days,
             a_salary_sheets_r_hist.fact_avpay_workinholidays,
             a_salary_sheets_r_hist.fact_avpay_hours,
             a_salary_sheets_r_hist.fact_avpay_hours_overtime,
             a_salary_sheets_r_hist.fact_avpay_holidays_hours,
             a_salary_sheets_r_hist.fact_avpay_holidays_hours_overt,
             a_salary_sheets_r_hist.salary_avpay_free_days,
             a_salary_sheets_r_hist.salary_avpay_work_days,
             a_salary_sheets_r_hist.salary_avpay_work_days_overtime,
             a_salary_sheets_r_hist.salary_avpay_holidays,
             a_salary_sheets_r_hist.salary_avpay_holidays_overtime,

             a_salary_sheets_r_hist.business_trip_days,
             a_salary_sheets_r_hist.business_trip_pay,
             a_salary_sheets_r_hist.paid_holidays,
             a_salary_sheets_r_hist.paid_holidays_pay,
             a_salary_sheets_r_hist.vacation_days_current,
             a_salary_sheets_r_hist.vacation_days_next,
             a_salary_sheets_r_hist.vacation_hours_current,
             a_salary_sheets_r_hist.vacation_hours_next,
             a_salary_sheets_r_hist.vacation_pay_current,
             a_salary_sheets_r_hist.vacation_pay_next,
             a_salary_sheets_r_hist.vacation_dns_next,
             a_salary_sheets_r_hist.vacation_dds_next,
             a_salary_sheets_r_hist.vacation_iin_next,
             a_salary_sheets_r_hist.vacation_iin_reduce_next,
             a_salary_sheets_r_hist.vacation_cash_next,
             a_salary_sheets_r_hist.vacation_pay_prev,
             a_salary_sheets_r_hist.vacation_dns_prev,
             a_salary_sheets_r_hist.vacation_dds_prev,
             a_salary_sheets_r_hist.vacation_iin_prev,
             a_salary_sheets_r_hist.vacation_days_comp,
             a_salary_sheets_r_hist.vacation_pay_comp,

             a_salary_sheets_r_hist.plus_taxed,
             a_salary_sheets_r_hist.plus_nottaxed,
             a_salary_sheets_r_hist.plus_nosai,
             a_salary_sheets_r_hist.plus_authors_fees,
             a_salary_sheets_r_hist.minus_before_iin,
             a_salary_sheets_r_hist.minus_after_iin,
             a_salary_sheets_r_hist.plus_pf_nottaxed,
             a_salary_sheets_r_hist.plus_pf_taxed,
             a_salary_sheets_r_hist.plus_li_nottaxed,
             a_salary_sheets_r_hist.plus_li_taxed,
             a_salary_sheets_r_hist.plus_hi_nottaxed,
             a_salary_sheets_r_hist.plus_hi_taxed,
             a_salary_sheets_r_hist.plus_np_taxed,
             a_salary_sheets_r_hist.plus_np_nottaxed,
             a_salary_sheets_r_hist.plus_np_nosai,

             a_salary_sheets_r_hist.total_before_taxes,
             a_salary_sheets_r_hist.adjusted_amount,
             a_salary_sheets_r_hist.amount_before_sn,
             a_salary_sheets_r_hist.amount_before_sn_reverse,
             a_salary_sheets_r_hist.rate_dnsn,
             a_salary_sheets_r_hist.rate_ddsn,
             a_salary_sheets_r_hist.dnsn_amount,
             a_salary_sheets_r_hist.ddsn_amount,
             a_salary_sheets_r_hist.sn_amount,
             a_salary_sheets_r_hist.dnsn_amount_reverse,
             a_salary_sheets_r_hist.ddsn_amount_reverse,
             a_salary_sheets_r_hist.sn_max_amount,

             a_salary_sheets_r_hist.iin_exempt_untaxed_minimum0,
             a_salary_sheets_r_hist.iin_exempt_dependants0,
             a_salary_sheets_r_hist.iin_exempt_retaliation0,
             a_salary_sheets_r_hist.iin_exempt_invalidity0,
             a_salary_sheets_r_hist.iin_exempt_national_movement0,
             a_salary_sheets_r_hist.iin_exempt_untaxed_minimum,
             a_salary_sheets_r_hist.iin_exempt_dependants,
             a_salary_sheets_r_hist.iin_exempt_retaliation,
             a_salary_sheets_r_hist.iin_exempt_invalidity,
             a_salary_sheets_r_hist.iin_exempt_national_movement,
             a_salary_sheets_r_hist.iin_exempt_expenses,
             a_salary_sheets_r_hist.iin_exempt_2tp,
             a_salary_sheets_r_hist.iin_exempt_20,
             a_salary_sheets_r_hist.iin_exempt_2,
             a_salary_sheets_r_hist.amount_before_iin,
             a_salary_sheets_r_hist.amount_before_iin_reverse,
             a_salary_sheets_r_hist.rate_iin,
             a_salary_sheets_r_hist.rate_iin2,
             a_salary_sheets_r_hist.iin_amount,
             a_salary_sheets_r_hist.iin_amount_reverse,
             a_salary_sheets_r_hist.urvn_amaount,

             a_salary_sheets_r_hist.plus_not_paid,
             a_salary_sheets_r_hist.vacation_advance_current,
             a_salary_sheets_r_hist.vacation_advance_next,
             a_salary_sheets_r_hist.vacation_advance_prev,
             a_salary_sheets_r_hist.advance,
             a_salary_sheets_r_hist.pay0,
             a_salary_sheets_r_hist.pay,
             a_salary_sheets_r_hist.payt,
             a_salary_sheets_r_hist.pay_date,
             a_salary_sheets_r_hist.comments,
             a_salary_sheets_r_hist.withhold_from_pay,

             a_salary_sheets_r_hist.foravpaycalc_bruto,
             a_salary_sheets_r_hist.foravpaycalc_payout,
             a_salary_sheets_r_hist.foravpaycalc_days,
             a_salary_sheets_r_hist.foravpaycalc_hours,
             a_salary_sheets_r_hist.avpaycalc_calday,
             a_salary_sheets_r_hist.avpaycalc_day,
             a_salary_sheets_r_hist.avpaycalc_hour,

             a_salary_sheets_r_hist.dt_edited,
             a_salary_sheets_r_hist.calc_ver

    from a_salary_sheets_r_hist
    where a_salary_sheets_r_hist.id = :PID
    order by a_salary_sheets_r_hist.dt_edited

    into
        :idH,
        :id,
        :ids,
        :idsx,
        :idst,
        :is_temp,
        :type_tag,
        :idp,
        :idam,
        :snr,
        :fname,
        :lname,
        :position_title,
        :territorial_code,
        :calendar_days,
        :calendar_days_use,
        :month_workdays,
        :month_workhours,
        :plan_days,
        :plan_hours,
        :plan_hours_night,
        :plan_hours_overtime,
        :fact_days,
        :fact_hours,
        :fact_hours_night,
        :fact_hours_overtime,
        :plan_work_days,
        :plan_work_hours,
        :plan_work_hours_night,
        :plan_work_hours_overtime,
        :fact_work_days,
        :fact_work_hours,
        :fact_work_hours_night,
        :fact_work_hours_overtime,
        :plan_holidays_days,
        :plan_holidays_hours,
        :plan_holidays_hours_night,
        :plan_holidays_hours_overtime,
        :fact_holidays_days,
        :fact_holidays_hours,
        :fact_holidays_hours_night,
        :fact_holidays_hours_overtime,
        :salary,
        :salary_day,
        :salary_night,
        :salary_overtime,
        :salary_holidays_day,
        :salary_holidays_night,
        :salary_holidays_overtime,
        :salary_paid_holidays_day,
        :salary_paid_holidays_night,
        :salary_piecework,
        :sickdays,
        :sickdays_pay,
        :accident_days,
        :accident_pay,
        :average_income_days,
        :average_income_pay,
        
        :fact_avpay_free_days,
        :fact_avpay_free_hours,
        :fact_avpay_work_days,
        :fact_avpay_workinholidays,
        :fact_avpay_hours,
        :fact_avpay_hours_overtime,
        :fact_avpay_holidays_hours,
        :fact_avpay_holidays_hours_overt,
        :salary_avpay_free_days,
        :salary_avpay_work_days,
        :salary_avpay_work_days_overtime,
        :salary_avpay_holidays,
        :salary_avpay_holidays_overtime,
        
        :business_trip_days,
        :business_trip_pay,
        :paid_holidays,
        :paid_holidays_pay,
        :vacation_days_current,
        :vacation_days_next,
        :vacation_hours_current,
        :vacation_hours_next,
        :vacation_pay_current,
        :vacation_pay_next,
        :vacation_dns_next,
        :vacation_dds_next,
        :vacation_iin_next,
        :vacation_iin_reduce_next,
        :vacation_cash_next,
        :vacation_pay_prev,
        :vacation_dns_prev,
        :vacation_dds_prev,
        :vacation_iin_prev,
        :vacation_days_comp,
        :vacation_pay_comp,

        :plus_taxed,
        :plus_nottaxed,
        :plus_nosai,
        :plus_authors_fees,
        :minus_before_iin,
        :minus_after_iin,
        :plus_pf_nottaxed,
        :plus_pf_taxed,
        :plus_li_nottaxed,
        :plus_li_taxed,
        :plus_hi_nottaxed,
        :plus_hi_taxed,
        :plus_np_taxed,
        :plus_np_nottaxed,
        :plus_np_nosai,

        :total_before_taxes,
        :adjusted_amount,
        :amount_before_sn,
        :amount_before_sn_reverse,
        :rate_dnsn,
        :rate_ddsn,
        :dnsn_amount,
        :ddsn_amount,
        :sn_amount,
        :dnsn_amount_reverse,
        :ddsn_amount_reverse,
        :sn_max_amount,

        :iin_exempt_untaxed_minimum0,
        :iin_exempt_dependants0,
        :iin_exempt_retaliation0,
        :iin_exempt_invalidity0,
        :iin_exempt_national_movement0,
        :iin_exempt_untaxed_minimum,
        :iin_exempt_dependants,
        :iin_exempt_retaliation,
        :iin_exempt_invalidity,
        :iin_exempt_national_movement,
        :iin_exempt_expenses,
        :iin_exempt_2tp,
        :iin_exempt_20,
        :iin_exempt_2,
        :amount_before_iin,
        :amount_before_iin_reverse,
        :rate_iin,
        :rate_iin2,
        :iin_amount,
        :iin_amount_reverse,
        :urvn_amaount,

        :plus_not_paid,
        :vacation_advance_current,
        :vacation_advance_next,
        :vacation_advance_prev,
        :advance,
        :pay0,
        :pay,
        :payt,
        :pay_date,
        :comments,
        :withhold_from_pay,

        :foravpaycalc_bruto,
        :foravpaycalc_payout,
        :foravpaycalc_days,
        :foravpaycalc_hours,
        :avpaycalc_calday,
        :avpaycalc_day,
        :avpaycalc_hour,

        :dt_edited,
        :calc_ver
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_A_SALARY_SHEETS_R_HIST_02 (
    PIDSX INTEGER,
    PTIME1 TIMESTAMP,
    PTIME2 TIMESTAMP)
RETURNS (
    IDH TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.ID,
    ID TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.ID,
    IDS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IDS,
    IDSX TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IDSX,
    IDST TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IDST,
    IS_TEMP TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IS_TEMP,
    TYPE_TAG TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.TYPE_TAG,
    IDP TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IDP,
    IDAM TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IDAM,
    SNR TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SNR,
    FNAME TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FNAME,
    LNAME TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.LNAME,
    POSITION_TITLE TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.POSITION_TITLE,
    TERRITORIAL_CODE TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.TERRITORIAL_CODE,
    CALENDAR_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.CALENDAR_DAYS,
    CALENDAR_DAYS_USE TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.CALENDAR_DAYS_USE,
    MONTH_WORKDAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.MONTH_WORKDAYS,
    MONTH_WORKHOURS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.MONTH_WORKHOURS,
    PLAN_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_DAYS,
    PLAN_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_HOURS,
    PLAN_HOURS_NIGHT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_HOURS_NIGHT,
    PLAN_HOURS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_HOURS_OVERTIME,
    FACT_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_DAYS,
    FACT_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_HOURS,
    FACT_HOURS_NIGHT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_HOURS_NIGHT,
    FACT_HOURS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_HOURS_OVERTIME,
    PLAN_WORK_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_WORK_DAYS,
    PLAN_WORK_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_WORK_HOURS,
    PLAN_WORK_HOURS_NIGHT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_WORK_HOURS_NIGHT,
    PLAN_WORK_HOURS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_WORK_HOURS_OVERTIME,
    FACT_WORK_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_WORK_DAYS,
    FACT_WORK_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_WORK_HOURS,
    FACT_WORK_HOURS_NIGHT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_WORK_HOURS_NIGHT,
    FACT_WORK_HOURS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_WORK_HOURS_OVERTIME,
    PLAN_HOLIDAYS_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_HOLIDAYS_DAYS,
    PLAN_HOLIDAYS_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_HOLIDAYS_HOURS,
    PLAN_HOLIDAYS_HOURS_NIGHT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_HOLIDAYS_HOURS_NIGHT,
    PLAN_HOLIDAYS_HOURS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLAN_HOLIDAYS_HOURS_OVERTIME,
    FACT_HOLIDAYS_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_HOLIDAYS_DAYS,
    FACT_HOLIDAYS_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_HOLIDAYS_HOURS,
    FACT_HOLIDAYS_HOURS_NIGHT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_HOLIDAYS_HOURS_NIGHT,
    FACT_HOLIDAYS_HOURS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_HOLIDAYS_HOURS_OVERTIME,
    SALARY TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY,
    SALARY_DAY TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_DAY,
    SALARY_NIGHT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_NIGHT,
    SALARY_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_OVERTIME,
    SALARY_HOLIDAYS_DAY TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_HOLIDAYS_DAY,
    SALARY_HOLIDAYS_NIGHT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_HOLIDAYS_NIGHT,
    SALARY_HOLIDAYS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_HOLIDAYS_OVERTIME,
    SALARY_PAID_HOLIDAYS_DAY TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_PAID_HOLIDAYS_DAY,
    SALARY_PAID_HOLIDAYS_NIGHT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_PAID_HOLIDAYS_NIGHT,
    SALARY_PIECEWORK TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_PIECEWORK,
    SICKDAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SICKDAYS,
    SICKDAYS_PAY TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SICKDAYS_PAY,
    ACCIDENT_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.ACCIDENT_DAYS,
    ACCIDENT_PAY TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.ACCIDENT_PAY,
    AVERAGE_INCOME_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AVERAGE_INCOME_DAYS,
    AVERAGE_INCOME_PAY TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AVERAGE_INCOME_PAY,
    FACT_AVPAY_FREE_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_FREE_DAYS,
    FACT_AVPAY_FREE_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_FREE_HOURS,
    FACT_AVPAY_WORK_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_WORK_DAYS,
    FACT_AVPAY_WORKINHOLIDAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_WORKINHOLIDAYS,
    FACT_AVPAY_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_HOURS,
    FACT_AVPAY_HOURS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_HOURS_OVERTIME,
    FACT_AVPAY_HOLIDAYS_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_HOLIDAYS_HOURS,
    FACT_AVPAY_HOLIDAYS_HOURS_OVERT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FACT_AVPAY_HOLIDAYS_HOURS_OVERT,
    SALARY_AVPAY_FREE_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_AVPAY_FREE_DAYS,
    SALARY_AVPAY_WORK_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_AVPAY_WORK_DAYS,
    SALARY_AVPAY_WORK_DAYS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_AVPAY_WORK_DAYS_OVERTIME,
    SALARY_AVPAY_HOLIDAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_AVPAY_HOLIDAYS,
    SALARY_AVPAY_HOLIDAYS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SALARY_AVPAY_HOLIDAYS_OVERTIME,
    BUSINESS_TRIP_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.BUSINESS_TRIP_DAYS,
    BUSINESS_TRIP_PAY TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.BUSINESS_TRIP_PAY,
    PAID_HOLIDAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PAID_HOLIDAYS,
    PAID_HOLIDAYS_PAY TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PAID_HOLIDAYS_PAY,
    VACATION_DAYS_CURRENT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_DAYS_CURRENT,
    VACATION_DAYS_NEXT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_DAYS_NEXT,
    VACATION_HOURS_CURRENT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_HOURS_CURRENT,
    VACATION_HOURS_NEXT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_HOURS_NEXT,
    VACATION_PAY_CURRENT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_PAY_CURRENT,
    VACATION_PAY_NEXT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_PAY_NEXT,
    VACATION_DNS_NEXT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_DNS_NEXT,
    VACATION_DDS_NEXT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_DDS_NEXT,
    VACATION_IIN_NEXT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_IIN_NEXT,
    VACATION_IIN_REDUCE_NEXT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_IIN_REDUCE_NEXT,
    VACATION_CASH_NEXT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_CASH_NEXT,
    VACATION_PAY_PREV TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_PAY_PREV,
    VACATION_DNS_PREV TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_DNS_PREV,
    VACATION_DDS_PREV TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_DDS_PREV,
    VACATION_IIN_PREV TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_IIN_PREV,
    VACATION_DAYS_COMP TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_DAYS_COMP,
    VACATION_PAY_COMP TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_PAY_COMP,
    PLUS_TAXED TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_TAXED,
    PLUS_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_NOTTAXED,
    PLUS_NOSAI TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_NOSAI,
    PLUS_AUTHORS_FEES TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_AUTHORS_FEES,
    MINUS_BEFORE_IIN TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.MINUS_BEFORE_IIN,
    MINUS_AFTER_IIN TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.MINUS_AFTER_IIN,
    PLUS_PF_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_PF_NOTTAXED,
    PLUS_PF_TAXED TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_PF_TAXED,
    PLUS_LI_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_LI_NOTTAXED,
    PLUS_LI_TAXED TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_LI_TAXED,
    PLUS_HI_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_HI_NOTTAXED,
    PLUS_HI_TAXED TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_HI_TAXED,
    PLUS_NP_TAXED TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_NP_TAXED,
    PLUS_NP_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_NP_NOTTAXED,
    PLUS_NP_NOSAI TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_NP_NOSAI,
    TOTAL_BEFORE_TAXES TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.TOTAL_BEFORE_TAXES,
    ADJUSTED_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.ADJUSTED_AMOUNT,
    AMOUNT_BEFORE_SN TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AMOUNT_BEFORE_SN,
    AMOUNT_BEFORE_SN_REVERSE TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AMOUNT_BEFORE_SN_REVERSE,
    RATE_DNSN TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.RATE_DNSN,
    RATE_DDSN TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.RATE_DDSN,
    DNSN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.DNSN_AMOUNT,
    DDSN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.DDSN_AMOUNT,
    SN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SN_AMOUNT,
    DNSN_AMOUNT_REVERSE TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.DNSN_AMOUNT_REVERSE,
    DDSN_AMOUNT_REVERSE TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.DDSN_AMOUNT_REVERSE,
    SN_MAX_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.SN_MAX_AMOUNT,
    IIN_EXEMPT_UNTAXED_MINIMUM0 TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_UNTAXED_MINIMUM0,
    IIN_EXEMPT_DEPENDANTS0 TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_DEPENDANTS0,
    IIN_EXEMPT_RETALIATION0 TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_RETALIATION0,
    IIN_EXEMPT_INVALIDITY0 TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_INVALIDITY0,
    IIN_EXEMPT_NATIONAL_MOVEMENT0 TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_NATIONAL_MOVEMENT0,
    IIN_EXEMPT_UNTAXED_MINIMUM TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_UNTAXED_MINIMUM,
    IIN_EXEMPT_DEPENDANTS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_DEPENDANTS,
    IIN_EXEMPT_RETALIATION TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_RETALIATION,
    IIN_EXEMPT_INVALIDITY TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_INVALIDITY,
    IIN_EXEMPT_NATIONAL_MOVEMENT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_NATIONAL_MOVEMENT,
    IIN_EXEMPT_EXPENSES TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_EXPENSES,
    IIN_EXEMPT_2TP TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_2TP,
    IIN_EXEMPT_20 TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_20,
    IIN_EXEMPT_2 TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_EXEMPT_2,
    AMOUNT_BEFORE_IIN TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AMOUNT_BEFORE_IIN,
    AMOUNT_BEFORE_IIN_REVERSE TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AMOUNT_BEFORE_IIN_REVERSE,
    RATE_IIN TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.RATE_IIN,
    RATE_IIN2 TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.RATE_IIN2,
    IIN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_AMOUNT,
    IIN_AMOUNT_REVERSE TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.IIN_AMOUNT_REVERSE,
    URVN_AMAOUNT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.URVN_AMAOUNT,
    PLUS_NOT_PAID TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PLUS_NOT_PAID,
    VACATION_ADVANCE_CURRENT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_ADVANCE_CURRENT,
    VACATION_ADVANCE_NEXT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_ADVANCE_NEXT,
    VACATION_ADVANCE_PREV TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.VACATION_ADVANCE_PREV,
    ADVANCE TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.ADVANCE,
    PAY0 TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PAY0,
    PAY TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PAY,
    PAYT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PAYT,
    PAY_DATE TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.PAY_DATE,
    COMMENTS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.COMMENTS,
    WITHHOLD_FROM_PAY TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.WITHHOLD_FROM_PAY,
    FORAVPAYCALC_BRUTO TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FORAVPAYCALC_BRUTO,
    FORAVPAYCALC_PAYOUT TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FORAVPAYCALC_PAYOUT,
    FORAVPAYCALC_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FORAVPAYCALC_DAYS,
    FORAVPAYCALC_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.FORAVPAYCALC_HOURS,
    AVPAYCALC_CALDAY TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AVPAYCALC_CALDAY,
    AVPAYCALC_DAY TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AVPAYCALC_DAY,
    AVPAYCALC_HOUR TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.AVPAYCALC_HOUR,
    DT_EDITED TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.DT_EDITED,
    CALC_VER TYPE OF COLUMN A_SALARY_SHEETS_R_HIST.CALC_VER)
AS
begin

    for select
             a_salary_sheets_r_hist.idH,
             a_salary_sheets_r_hist.id,
             a_salary_sheets_r_hist.ids,
             a_salary_sheets_r_hist.idsx,
             a_salary_sheets_r_hist.idst,
             a_salary_sheets_r_hist.is_temp,
             a_salary_sheets_r_hist.type_tag,
             a_salary_sheets_r_hist.idp,
             a_salary_sheets_r_hist.idam,
             a_salary_sheets_r_hist.snr,
             a_salary_sheets_r_hist.fname,
             a_salary_sheets_r_hist.lname,
             a_salary_sheets_r_hist.position_title,
             a_salary_sheets_r_hist.territorial_code,
             a_salary_sheets_r_hist.calendar_days,
             a_salary_sheets_r_hist.calendar_days_use,
             a_salary_sheets_r_hist.month_workdays,
             a_salary_sheets_r_hist.month_workhours,
             a_salary_sheets_r_hist.plan_days,
             a_salary_sheets_r_hist.plan_hours,
             a_salary_sheets_r_hist.plan_hours_night,
             a_salary_sheets_r_hist.plan_hours_overtime,
             a_salary_sheets_r_hist.fact_days,
             a_salary_sheets_r_hist.fact_hours,
             a_salary_sheets_r_hist.fact_hours_night,
             a_salary_sheets_r_hist.fact_hours_overtime,
             a_salary_sheets_r_hist.plan_work_days,
             a_salary_sheets_r_hist.plan_work_hours,
             a_salary_sheets_r_hist.plan_work_hours_night,
             a_salary_sheets_r_hist.plan_work_hours_overtime,
             a_salary_sheets_r_hist.fact_work_days,
             a_salary_sheets_r_hist.fact_work_hours,
             a_salary_sheets_r_hist.fact_work_hours_night,
             a_salary_sheets_r_hist.fact_work_hours_overtime,
             a_salary_sheets_r_hist.plan_holidays_days,
             a_salary_sheets_r_hist.plan_holidays_hours,
             a_salary_sheets_r_hist.plan_holidays_hours_night,
             a_salary_sheets_r_hist.plan_holidays_hours_overtime,
             a_salary_sheets_r_hist.fact_holidays_days,
             a_salary_sheets_r_hist.fact_holidays_hours,
             a_salary_sheets_r_hist.fact_holidays_hours_night,
             a_salary_sheets_r_hist.fact_holidays_hours_overtime,
             a_salary_sheets_r_hist.salary,
             a_salary_sheets_r_hist.salary_day,
             a_salary_sheets_r_hist.salary_night,
             a_salary_sheets_r_hist.salary_overtime,
             a_salary_sheets_r_hist.salary_holidays_day,
             a_salary_sheets_r_hist.salary_holidays_night,
             a_salary_sheets_r_hist.salary_holidays_overtime,
             a_salary_sheets_r_hist.salary_paid_holidays_day,
             a_salary_sheets_r_hist.salary_paid_holidays_night,
             a_salary_sheets_r_hist.salary_piecework,
             a_salary_sheets_r_hist.sickdays,
             a_salary_sheets_r_hist.sickdays_pay,
             a_salary_sheets_r_hist.accident_days,
             a_salary_sheets_r_hist.accident_pay,
             a_salary_sheets_r_hist.average_income_days,
             a_salary_sheets_r_hist.average_income_pay,

             a_salary_sheets_r_hist.fact_avpay_free_days,
             a_salary_sheets_r_hist.fact_avpay_free_hours,
             a_salary_sheets_r_hist.fact_avpay_work_days,
             a_salary_sheets_r_hist.fact_avpay_workinholidays,
             a_salary_sheets_r_hist.fact_avpay_hours,
             a_salary_sheets_r_hist.fact_avpay_hours_overtime,
             a_salary_sheets_r_hist.fact_avpay_holidays_hours,
             a_salary_sheets_r_hist.fact_avpay_holidays_hours_overt,
             a_salary_sheets_r_hist.salary_avpay_free_days,
             a_salary_sheets_r_hist.salary_avpay_work_days,
             a_salary_sheets_r_hist.salary_avpay_work_days_overtime,
             a_salary_sheets_r_hist.salary_avpay_holidays,
             a_salary_sheets_r_hist.salary_avpay_holidays_overtime,

             a_salary_sheets_r_hist.business_trip_days,
             a_salary_sheets_r_hist.business_trip_pay,
             a_salary_sheets_r_hist.paid_holidays,
             a_salary_sheets_r_hist.paid_holidays_pay,
             a_salary_sheets_r_hist.vacation_days_current,
             a_salary_sheets_r_hist.vacation_days_next,
             a_salary_sheets_r_hist.vacation_hours_current,
             a_salary_sheets_r_hist.vacation_hours_next,
             a_salary_sheets_r_hist.vacation_pay_current,
             a_salary_sheets_r_hist.vacation_pay_next,
             a_salary_sheets_r_hist.vacation_dns_next,
             a_salary_sheets_r_hist.vacation_dds_next,
             a_salary_sheets_r_hist.vacation_iin_next,
             a_salary_sheets_r_hist.vacation_iin_reduce_next,
             a_salary_sheets_r_hist.vacation_cash_next,
             a_salary_sheets_r_hist.vacation_pay_prev,
             a_salary_sheets_r_hist.vacation_dns_prev,
             a_salary_sheets_r_hist.vacation_dds_prev,
             a_salary_sheets_r_hist.vacation_iin_prev,
             a_salary_sheets_r_hist.vacation_days_comp,
             a_salary_sheets_r_hist.vacation_pay_comp,

             a_salary_sheets_r_hist.plus_taxed,
             a_salary_sheets_r_hist.plus_nottaxed,
             a_salary_sheets_r_hist.plus_nosai,
             a_salary_sheets_r_hist.plus_authors_fees,
             a_salary_sheets_r_hist.minus_before_iin,
             a_salary_sheets_r_hist.minus_after_iin,
             a_salary_sheets_r_hist.plus_pf_nottaxed,
             a_salary_sheets_r_hist.plus_pf_taxed,
             a_salary_sheets_r_hist.plus_li_nottaxed,
             a_salary_sheets_r_hist.plus_li_taxed,
             a_salary_sheets_r_hist.plus_hi_nottaxed,
             a_salary_sheets_r_hist.plus_hi_taxed,
             a_salary_sheets_r_hist.plus_np_taxed,
             a_salary_sheets_r_hist.plus_np_nottaxed,
             a_salary_sheets_r_hist.plus_np_nosai,

             a_salary_sheets_r_hist.total_before_taxes,
             a_salary_sheets_r_hist.adjusted_amount,
             a_salary_sheets_r_hist.amount_before_sn,
             a_salary_sheets_r_hist.amount_before_sn_reverse,
             a_salary_sheets_r_hist.rate_dnsn,
             a_salary_sheets_r_hist.rate_ddsn,
             a_salary_sheets_r_hist.dnsn_amount,
             a_salary_sheets_r_hist.ddsn_amount,
             a_salary_sheets_r_hist.sn_amount,
             a_salary_sheets_r_hist.dnsn_amount_reverse,
             a_salary_sheets_r_hist.ddsn_amount_reverse,
             a_salary_sheets_r_hist.sn_max_amount,

             a_salary_sheets_r_hist.iin_exempt_untaxed_minimum0,
             a_salary_sheets_r_hist.iin_exempt_dependants0,
             a_salary_sheets_r_hist.iin_exempt_retaliation0,
             a_salary_sheets_r_hist.iin_exempt_invalidity0,
             a_salary_sheets_r_hist.iin_exempt_national_movement0,
             a_salary_sheets_r_hist.iin_exempt_untaxed_minimum,
             a_salary_sheets_r_hist.iin_exempt_dependants,
             a_salary_sheets_r_hist.iin_exempt_retaliation,
             a_salary_sheets_r_hist.iin_exempt_invalidity,
             a_salary_sheets_r_hist.iin_exempt_national_movement,
             a_salary_sheets_r_hist.iin_exempt_expenses,
             a_salary_sheets_r_hist.iin_exempt_2tp,
             a_salary_sheets_r_hist.iin_exempt_20,
             a_salary_sheets_r_hist.iin_exempt_2,
             a_salary_sheets_r_hist.amount_before_iin,
             a_salary_sheets_r_hist.amount_before_iin_reverse,
             a_salary_sheets_r_hist.rate_iin,
             a_salary_sheets_r_hist.rate_iin2,
             a_salary_sheets_r_hist.iin_amount,
             a_salary_sheets_r_hist.iin_amount_reverse,
             a_salary_sheets_r_hist.urvn_amaount,

             a_salary_sheets_r_hist.plus_not_paid,
             a_salary_sheets_r_hist.vacation_advance_current,
             a_salary_sheets_r_hist.vacation_advance_next,
             a_salary_sheets_r_hist.vacation_advance_prev,
             a_salary_sheets_r_hist.advance,
             a_salary_sheets_r_hist.pay0,
             a_salary_sheets_r_hist.pay,
             a_salary_sheets_r_hist.payt,
             a_salary_sheets_r_hist.pay_date,
             a_salary_sheets_r_hist.comments,
             a_salary_sheets_r_hist.withhold_from_pay,

             a_salary_sheets_r_hist.foravpaycalc_bruto,
             a_salary_sheets_r_hist.foravpaycalc_payout,
             a_salary_sheets_r_hist.foravpaycalc_days,
             a_salary_sheets_r_hist.foravpaycalc_hours,
             a_salary_sheets_r_hist.avpaycalc_calday,
             a_salary_sheets_r_hist.avpaycalc_day,
             a_salary_sheets_r_hist.avpaycalc_hour,

             a_salary_sheets_r_hist.dt_edited,
             a_salary_sheets_r_hist.calc_ver

    from a_salary_sheets_r_hist
    where a_salary_sheets_r_hist.idsx = :pidsx and
        a_salary_sheets_r_hist.dt_edited between :ptime1 and :ptime2
    order by a_salary_sheets_r_hist.dt_edited

    into
        :idH,
        :id,
        :ids,
        :idsx,
        :idst,
        :is_temp,
        :type_tag,
        :idp,
        :idam,
        :snr,
        :fname,
        :lname,
        :position_title,
        :territorial_code,
        :calendar_days,
        :calendar_days_use,
        :month_workdays,
        :month_workhours,
        :plan_days,
        :plan_hours,
        :plan_hours_night,
        :plan_hours_overtime,
        :fact_days,
        :fact_hours,
        :fact_hours_night,
        :fact_hours_overtime,
        :plan_work_days,
        :plan_work_hours,
        :plan_work_hours_night,
        :plan_work_hours_overtime,
        :fact_work_days,
        :fact_work_hours,
        :fact_work_hours_night,
        :fact_work_hours_overtime,
        :plan_holidays_days,
        :plan_holidays_hours,
        :plan_holidays_hours_night,
        :plan_holidays_hours_overtime,
        :fact_holidays_days,
        :fact_holidays_hours,
        :fact_holidays_hours_night,
        :fact_holidays_hours_overtime,
        :salary,
        :salary_day,
        :salary_night,
        :salary_overtime,
        :salary_holidays_day,
        :salary_holidays_night,
        :salary_holidays_overtime,
        :salary_paid_holidays_day,
        :salary_paid_holidays_night,
        :salary_piecework,
        :sickdays,
        :sickdays_pay,
        :accident_days,
        :accident_pay,
        :average_income_days,
        :average_income_pay,
        
        :fact_avpay_free_days,
        :fact_avpay_free_hours,
        :fact_avpay_work_days,
        :fact_avpay_workinholidays,
        :fact_avpay_hours,
        :fact_avpay_hours_overtime,
        :fact_avpay_holidays_hours,
        :fact_avpay_holidays_hours_overt,
        :salary_avpay_free_days,
        :salary_avpay_work_days,
        :salary_avpay_work_days_overtime,
        :salary_avpay_holidays,
        :salary_avpay_holidays_overtime,
        
        :business_trip_days,
        :business_trip_pay,
        :paid_holidays,
        :paid_holidays_pay,
        :vacation_days_current,
        :vacation_days_next,
        :vacation_hours_current,
        :vacation_hours_next,
        :vacation_pay_current,
        :vacation_pay_next,
        :vacation_dns_next,
        :vacation_dds_next,
        :vacation_iin_next,
        :vacation_iin_reduce_next,
        :vacation_cash_next,
        :vacation_pay_prev,
        :vacation_dns_prev,
        :vacation_dds_prev,
        :vacation_iin_prev,
        :vacation_days_comp,
        :vacation_pay_comp,

        :plus_taxed,
        :plus_nottaxed,
        :plus_nosai,
        :plus_authors_fees,
        :minus_before_iin,
        :minus_after_iin,
        :plus_pf_nottaxed,
        :plus_pf_taxed,
        :plus_li_nottaxed,
        :plus_li_taxed,
        :plus_hi_nottaxed,
        :plus_hi_taxed,
        :plus_np_taxed,
        :plus_np_nottaxed,
        :plus_np_nosai,

        :total_before_taxes,
        :adjusted_amount,
        :amount_before_sn,
        :amount_before_sn_reverse,
        :rate_dnsn,
        :rate_ddsn,
        :dnsn_amount,
        :ddsn_amount,
        :sn_amount,
        :dnsn_amount_reverse,
        :ddsn_amount_reverse,
        :sn_max_amount,

        :iin_exempt_untaxed_minimum0,
        :iin_exempt_dependants0,
        :iin_exempt_retaliation0,
        :iin_exempt_invalidity0,
        :iin_exempt_national_movement0,
        :iin_exempt_untaxed_minimum,
        :iin_exempt_dependants,
        :iin_exempt_retaliation,
        :iin_exempt_invalidity,
        :iin_exempt_national_movement,
        :iin_exempt_expenses,
        :iin_exempt_2tp,
        :iin_exempt_20,
        :iin_exempt_2,
        :amount_before_iin,
        :amount_before_iin_reverse,
        :rate_iin,
        :rate_iin2,
        :iin_amount,
        :iin_amount_reverse,
        :urvn_amaount,

        :plus_not_paid,
        :vacation_advance_current,
        :vacation_advance_next,
        :vacation_advance_prev,
        :advance,
        :pay0,
        :pay,
        :payt,
        :pay_date,
        :comments,
        :withhold_from_pay,

        :foravpaycalc_bruto,
        :foravpaycalc_payout,
        :foravpaycalc_days,
        :foravpaycalc_hours,
        :avpaycalc_calday,
        :avpaycalc_day,
        :avpaycalc_hour,

        :dt_edited,
        :calc_ver
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_A_SALARY_SHEETS_R_PER_01 (
    PYR1 INTEGER,
    PMT1 INTEGER,
    PYR2 INTEGER,
    PMT2 INTEGER)
RETURNS (
    ID TYPE OF COLUMN A_SALARY_SHEETS_R.ID,
    IDS TYPE OF COLUMN A_SALARY_SHEETS_R.IDS,
    IDSX TYPE OF COLUMN A_SALARY_SHEETS_R.IDSX,
    IDST TYPE OF COLUMN A_SALARY_SHEETS_R.IDST,
    IS_TEMP TYPE OF COLUMN A_SALARY_SHEETS_R.IS_TEMP,
    TYPE_TAG TYPE OF COLUMN A_SALARY_SHEETS_R.TYPE_TAG,
    IDP TYPE OF COLUMN A_SALARY_SHEETS_R.IDP,
    IDAM TYPE OF COLUMN A_SALARY_SHEETS_R.IDAM,
    SNR TYPE OF COLUMN A_SALARY_SHEETS_R.SNR,
    FNAME TYPE OF COLUMN A_SALARY_SHEETS_R.FNAME,
    LNAME TYPE OF COLUMN A_SALARY_SHEETS_R.LNAME,
    POSITION_TITLE TYPE OF COLUMN A_SALARY_SHEETS_R.POSITION_TITLE,
    TERRITORIAL_CODE TYPE OF COLUMN A_SALARY_SHEETS_R.TERRITORIAL_CODE,
    CALENDAR_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R.CALENDAR_DAYS,
    CALENDAR_DAYS_USE TYPE OF COLUMN A_SALARY_SHEETS_R.CALENDAR_DAYS_USE,
    MONTH_WORKDAYS TYPE OF COLUMN A_SALARY_SHEETS_R.MONTH_WORKDAYS,
    MONTH_WORKHOURS TYPE OF COLUMN A_SALARY_SHEETS_R.MONTH_WORKHOURS,
    PLAN_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_DAYS,
    PLAN_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_HOURS,
    PLAN_HOURS_NIGHT TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_HOURS_NIGHT,
    PLAN_HOURS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_HOURS_OVERTIME,
    FACT_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_DAYS,
    FACT_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_HOURS,
    FACT_HOURS_NIGHT TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_HOURS_NIGHT,
    FACT_HOURS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_HOURS_OVERTIME,
    PLAN_WORK_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_WORK_DAYS,
    PLAN_WORK_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_WORK_HOURS,
    PLAN_WORK_HOURS_NIGHT TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_WORK_HOURS_NIGHT,
    PLAN_WORK_HOURS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_WORK_HOURS_OVERTIME,
    FACT_WORK_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_WORK_DAYS,
    FACT_WORK_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_WORK_HOURS,
    FACT_WORK_HOURS_NIGHT TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_WORK_HOURS_NIGHT,
    FACT_WORK_HOURS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_WORK_HOURS_OVERTIME,
    PLAN_HOLIDAYS_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_HOLIDAYS_DAYS,
    PLAN_HOLIDAYS_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_HOLIDAYS_HOURS,
    PLAN_HOLIDAYS_HOURS_NIGHT TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_HOLIDAYS_HOURS_NIGHT,
    PLAN_HOLIDAYS_HOURS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R.PLAN_HOLIDAYS_HOURS_OVERTIME,
    FACT_HOLIDAYS_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_HOLIDAYS_DAYS,
    FACT_HOLIDAYS_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_HOLIDAYS_HOURS,
    FACT_HOLIDAYS_HOURS_NIGHT TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_HOLIDAYS_HOURS_NIGHT,
    FACT_HOLIDAYS_HOURS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_HOLIDAYS_HOURS_OVERTIME,
    SALARY TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY,
    SALARY_DAY TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY_DAY,
    SALARY_NIGHT TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY_NIGHT,
    SALARY_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY_OVERTIME,
    SALARY_HOLIDAYS_DAY TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY_HOLIDAYS_DAY,
    SALARY_HOLIDAYS_NIGHT TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY_HOLIDAYS_NIGHT,
    SALARY_HOLIDAYS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY_HOLIDAYS_OVERTIME,
    SALARY_PAID_HOLIDAYS_DAY TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY_PAID_HOLIDAYS_DAY,
    SALARY_PAID_HOLIDAYS_NIGHT TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY_PAID_HOLIDAYS_NIGHT,
    SALARY_PIECEWORK TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY_PIECEWORK,
    SICKDAYS TYPE OF COLUMN A_SALARY_SHEETS_R.SICKDAYS,
    SICKDAYS_PAY TYPE OF COLUMN A_SALARY_SHEETS_R.SICKDAYS_PAY,
    ACCIDENT_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R.ACCIDENT_DAYS,
    ACCIDENT_PAY TYPE OF COLUMN A_SALARY_SHEETS_R.ACCIDENT_PAY,
    AVERAGE_INCOME_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R.AVERAGE_INCOME_DAYS,
    AVERAGE_INCOME_PAY TYPE OF COLUMN A_SALARY_SHEETS_R.AVERAGE_INCOME_PAY,
    FACT_AVPAY_FREE_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_AVPAY_FREE_DAYS,
    FACT_AVPAY_FREE_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_AVPAY_FREE_HOURS,
    FACT_AVPAY_WORK_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_AVPAY_WORK_DAYS,
    FACT_AVPAY_WORKINHOLIDAYS TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_AVPAY_WORKINHOLIDAYS,
    FACT_AVPAY_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_AVPAY_HOURS,
    FACT_AVPAY_HOURS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_AVPAY_HOURS_OVERTIME,
    FACT_AVPAY_HOLIDAYS_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_AVPAY_HOLIDAYS_HOURS,
    FACT_AVPAY_HOLIDAYS_HOURS_OVERT TYPE OF COLUMN A_SALARY_SHEETS_R.FACT_AVPAY_HOLIDAYS_HOURS_OVERT,
    SALARY_AVPAY_FREE_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY_AVPAY_FREE_DAYS,
    SALARY_AVPAY_WORK_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY_AVPAY_WORK_DAYS,
    SALARY_AVPAY_WORK_DAYS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY_AVPAY_WORK_DAYS_OVERTIME,
    SALARY_AVPAY_HOLIDAYS TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY_AVPAY_HOLIDAYS,
    SALARY_AVPAY_HOLIDAYS_OVERTIME TYPE OF COLUMN A_SALARY_SHEETS_R.SALARY_AVPAY_HOLIDAYS_OVERTIME,
    BUSINESS_TRIP_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R.BUSINESS_TRIP_DAYS,
    BUSINESS_TRIP_PAY TYPE OF COLUMN A_SALARY_SHEETS_R.BUSINESS_TRIP_PAY,
    PAID_HOLIDAYS TYPE OF COLUMN A_SALARY_SHEETS_R.PAID_HOLIDAYS,
    PAID_HOLIDAYS_PAY TYPE OF COLUMN A_SALARY_SHEETS_R.PAID_HOLIDAYS_PAY,
    VACATION_DAYS_CURRENT TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_DAYS_CURRENT,
    VACATION_DAYS_NEXT TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_DAYS_NEXT,
    VACATION_HOURS_CURRENT TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_HOURS_CURRENT,
    VACATION_HOURS_NEXT TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_HOURS_NEXT,
    VACATION_PAY_CURRENT TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_PAY_CURRENT,
    VACATION_PAY_NEXT TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_PAY_NEXT,
    VACATION_DNS_NEXT TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_DNS_NEXT,
    VACATION_DDS_NEXT TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_DDS_NEXT,
    VACATION_IIN_NEXT TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_IIN_NEXT,
    VACATION_IIN_REDUCE_NEXT TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_IIN_REDUCE_NEXT,
    VACATION_CASH_NEXT TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_CASH_NEXT,
    VACATION_PAY_PREV TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_PAY_PREV,
    VACATION_DNS_PREV TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_DNS_PREV,
    VACATION_DDS_PREV TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_DDS_PREV,
    VACATION_IIN_PREV TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_IIN_PREV,
    VACATION_DAYS_COMP TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_DAYS_COMP,
    VACATION_PAY_COMP TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_PAY_COMP,
    PLUS_TAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_TAXED,
    PLUS_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOTTAXED,
    PLUS_NOSAI TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOSAI,
    PLUS_AUTHORS_FEES TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_AUTHORS_FEES,
    MINUS_BEFORE_IIN TYPE OF COLUMN A_SALARY_SHEETS_R.MINUS_BEFORE_IIN,
    MINUS_AFTER_IIN TYPE OF COLUMN A_SALARY_SHEETS_R.MINUS_AFTER_IIN,
    PLUS_PF_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_PF_NOTTAXED,
    PLUS_PF_TAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_PF_TAXED,
    PLUS_LI_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_LI_NOTTAXED,
    PLUS_LI_TAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_LI_TAXED,
    PLUS_HI_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_HI_NOTTAXED,
    PLUS_HI_TAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_HI_TAXED,
    PLUS_NP_TAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NP_TAXED,
    PLUS_NP_NOTTAXED TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NP_NOTTAXED,
    PLUS_NP_NOSAI TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NP_NOSAI,
    TOTAL_BEFORE_TAXES TYPE OF COLUMN A_SALARY_SHEETS_R.TOTAL_BEFORE_TAXES,
    ADJUSTED_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.ADJUSTED_AMOUNT,
    AMOUNT_BEFORE_SN TYPE OF COLUMN A_SALARY_SHEETS_R.AMOUNT_BEFORE_SN,
    AMOUNT_BEFORE_SN_REVERSE TYPE OF COLUMN A_SALARY_SHEETS_R.AMOUNT_BEFORE_SN_REVERSE,
    RATE_DNSN TYPE OF COLUMN A_SALARY_SHEETS_R.RATE_DNSN,
    RATE_DDSN TYPE OF COLUMN A_SALARY_SHEETS_R.RATE_DDSN,
    DNSN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.DNSN_AMOUNT,
    DDSN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.DDSN_AMOUNT,
    SN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.SN_AMOUNT,
    DNSN_AMOUNT_REVERSE TYPE OF COLUMN A_SALARY_SHEETS_R.DNSN_AMOUNT_REVERSE,
    DDSN_AMOUNT_REVERSE TYPE OF COLUMN A_SALARY_SHEETS_R.DDSN_AMOUNT_REVERSE,
    SN_MAX_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.SN_MAX_AMOUNT,
    IIN_EXEMPT_UNTAXED_MINIMUM0 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM0,
    IIN_EXEMPT_DEPENDANTS0 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS0,
    IIN_EXEMPT_RETALIATION0 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_RETALIATION0,
    IIN_EXEMPT_INVALIDITY0 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_INVALIDITY0,
    IIN_EXEMPT_NATIONAL_MOVEMENT0 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_NATIONAL_MOVEMENT0,
    IIN_EXEMPT_UNTAXED_MINIMUM TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM,
    IIN_EXEMPT_DEPENDANTS TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS,
    IIN_EXEMPT_RETALIATION TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_RETALIATION,
    IIN_EXEMPT_INVALIDITY TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_INVALIDITY,
    IIN_EXEMPT_NATIONAL_MOVEMENT TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_NATIONAL_MOVEMENT,
    IIN_EXEMPT_EXPENSES TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_EXPENSES,
    IIN_EXEMPT_2TP TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2TP,
    IIN_EXEMPT_20 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_20,
    IIN_EXEMPT_2 TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_EXEMPT_2,
    AMOUNT_BEFORE_IIN TYPE OF COLUMN A_SALARY_SHEETS_R.AMOUNT_BEFORE_IIN,
    AMOUNT_BEFORE_IIN_REVERSE TYPE OF COLUMN A_SALARY_SHEETS_R.AMOUNT_BEFORE_IIN_REVERSE,
    RATE_IIN TYPE OF COLUMN A_SALARY_SHEETS_R.RATE_IIN,
    RATE_IIN2 TYPE OF COLUMN A_SALARY_SHEETS_R.RATE_IIN2,
    IIN_AMOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT,
    IIN_AMOUNT_REVERSE TYPE OF COLUMN A_SALARY_SHEETS_R.IIN_AMOUNT_REVERSE,
    URVN_AMAOUNT TYPE OF COLUMN A_SALARY_SHEETS_R.URVN_AMAOUNT,
    PLUS_NOT_PAID TYPE OF COLUMN A_SALARY_SHEETS_R.PLUS_NOT_PAID,
    VACATION_ADVANCE_CURRENT TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_ADVANCE_CURRENT,
    VACATION_ADVANCE_NEXT TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_ADVANCE_NEXT,
    VACATION_ADVANCE_PREV TYPE OF COLUMN A_SALARY_SHEETS_R.VACATION_ADVANCE_PREV,
    ADVANCE TYPE OF COLUMN A_SALARY_SHEETS_R.ADVANCE,
    PAY0 TYPE OF COLUMN A_SALARY_SHEETS_R.PAY0,
    PAY TYPE OF COLUMN A_SALARY_SHEETS_R.PAY,
    PAYT TYPE OF COLUMN A_SALARY_SHEETS_R.PAYT,
    PAY_DATE TYPE OF COLUMN A_SALARY_SHEETS_R.PAY_DATE,
    COMMENTS TYPE OF COLUMN A_SALARY_SHEETS_R.COMMENTS,
    WITHHOLD_FROM_PAY TYPE OF COLUMN A_SALARY_SHEETS_R.WITHHOLD_FROM_PAY,
    FORAVPAYCALC_BRUTO TYPE OF COLUMN A_SALARY_SHEETS_R.FORAVPAYCALC_BRUTO,
    FORAVPAYCALC_PAYOUT TYPE OF COLUMN A_SALARY_SHEETS_R.FORAVPAYCALC_PAYOUT,
    FORAVPAYCALC_DAYS TYPE OF COLUMN A_SALARY_SHEETS_R.FORAVPAYCALC_DAYS,
    FORAVPAYCALC_HOURS TYPE OF COLUMN A_SALARY_SHEETS_R.FORAVPAYCALC_HOURS,
    AVPAYCALC_CALDAY TYPE OF COLUMN A_SALARY_SHEETS_R.AVPAYCALC_CALDAY,
    AVPAYCALC_DAY TYPE OF COLUMN A_SALARY_SHEETS_R.AVPAYCALC_DAY,
    AVPAYCALC_HOUR TYPE OF COLUMN A_SALARY_SHEETS_R.AVPAYCALC_HOUR,
    DT_EDITED TYPE OF COLUMN A_SALARY_SHEETS_R.DT_EDITED,
    CALC_VER TYPE OF COLUMN A_SALARY_SHEETS_R.CALC_VER)
AS
declare km1 integer;
    declare km2 integer;
begin
    km1 = (:pyr1 - 1900) * 13 + :pmt1;
    km2 = (:pyr2 - 1900) * 13 + :pmt2;

    for select a_salary_sheets_r.id,
             a_salary_sheets_r.ids,
             a_salary_sheets_r.idsx,
             a_salary_sheets_r.idst,
             a_salary_sheets_r.is_temp,
             a_salary_sheets_r.type_tag,
             a_salary_sheets_r.idp,
             a_salary_sheets_r.idam,
             a_salary_sheets_r.snr,
             a_salary_sheets_r.fname,
             a_salary_sheets_r.lname,
             a_salary_sheets_r.position_title,
             a_salary_sheets_r.territorial_code,
             a_salary_sheets_r.calendar_days,
             a_salary_sheets_r.calendar_days_use,
             a_salary_sheets_r.month_workdays,
             a_salary_sheets_r.month_workhours,
             a_salary_sheets_r.plan_days,
             a_salary_sheets_r.plan_hours,
             a_salary_sheets_r.plan_hours_night,
             a_salary_sheets_r.plan_hours_overtime,
             a_salary_sheets_r.fact_days,
             a_salary_sheets_r.fact_hours,
             a_salary_sheets_r.fact_hours_night,
             a_salary_sheets_r.fact_hours_overtime,
             a_salary_sheets_r.plan_work_days,
             a_salary_sheets_r.plan_work_hours,
             a_salary_sheets_r.plan_work_hours_night,
             a_salary_sheets_r.plan_work_hours_overtime,
             a_salary_sheets_r.fact_work_days,
             a_salary_sheets_r.fact_work_hours,
             a_salary_sheets_r.fact_work_hours_night,
             a_salary_sheets_r.fact_work_hours_overtime,
             a_salary_sheets_r.plan_holidays_days,
             a_salary_sheets_r.plan_holidays_hours,
             a_salary_sheets_r.plan_holidays_hours_night,
             a_salary_sheets_r.plan_holidays_hours_overtime,
             a_salary_sheets_r.fact_holidays_days,
             a_salary_sheets_r.fact_holidays_hours,
             a_salary_sheets_r.fact_holidays_hours_night,
             a_salary_sheets_r.fact_holidays_hours_overtime,
             a_salary_sheets_r.salary,
             a_salary_sheets_r.salary_day,
             a_salary_sheets_r.salary_night,
             a_salary_sheets_r.salary_overtime,
             a_salary_sheets_r.salary_holidays_day,
             a_salary_sheets_r.salary_holidays_night,
             a_salary_sheets_r.salary_holidays_overtime,
             a_salary_sheets_r.salary_paid_holidays_day,
             a_salary_sheets_r.salary_paid_holidays_night,
             a_salary_sheets_r.salary_piecework,
             a_salary_sheets_r.sickdays,
             a_salary_sheets_r.sickdays_pay,
             a_salary_sheets_r.accident_days,
             a_salary_sheets_r.accident_pay,
             a_salary_sheets_r.average_income_days,
             a_salary_sheets_r.average_income_pay,

             a_salary_sheets_r.fact_avpay_free_days,
             a_salary_sheets_r.fact_avpay_free_hours,
             a_salary_sheets_r.fact_avpay_work_days,
             a_salary_sheets_r.fact_avpay_workinholidays,
             a_salary_sheets_r.fact_avpay_hours,
             a_salary_sheets_r.fact_avpay_hours_overtime,
             a_salary_sheets_r.fact_avpay_holidays_hours,
             a_salary_sheets_r.fact_avpay_holidays_hours_overt,
             a_salary_sheets_r.salary_avpay_free_days,
             a_salary_sheets_r.salary_avpay_work_days,
             a_salary_sheets_r.salary_avpay_work_days_overtime,
             a_salary_sheets_r.salary_avpay_holidays,
             a_salary_sheets_r.salary_avpay_holidays_overtime,

             a_salary_sheets_r.business_trip_days,
             a_salary_sheets_r.business_trip_pay,
             a_salary_sheets_r.paid_holidays,
             a_salary_sheets_r.paid_holidays_pay,
             a_salary_sheets_r.vacation_days_current,
             a_salary_sheets_r.vacation_days_next,
             a_salary_sheets_r.vacation_hours_current,
             a_salary_sheets_r.vacation_hours_next,
             a_salary_sheets_r.vacation_pay_current,
             a_salary_sheets_r.vacation_pay_next,
             a_salary_sheets_r.vacation_dns_next,
             a_salary_sheets_r.vacation_dds_next,
             a_salary_sheets_r.vacation_iin_next,
             a_salary_sheets_r.vacation_iin_reduce_next,
             a_salary_sheets_r.vacation_cash_next,
             a_salary_sheets_r.vacation_pay_prev,
             a_salary_sheets_r.vacation_dns_prev,
             a_salary_sheets_r.vacation_dds_prev,
             a_salary_sheets_r.vacation_iin_prev,
             a_salary_sheets_r.vacation_days_comp,
             a_salary_sheets_r.vacation_pay_comp,

             a_salary_sheets_r.plus_taxed,
             a_salary_sheets_r.plus_nottaxed,
             a_salary_sheets_r.plus_nosai,
             a_salary_sheets_r.plus_authors_fees,
             a_salary_sheets_r.minus_before_iin,
             a_salary_sheets_r.minus_after_iin,
             a_salary_sheets_r.plus_pf_nottaxed,
             a_salary_sheets_r.plus_pf_taxed,
             a_salary_sheets_r.plus_li_nottaxed,
             a_salary_sheets_r.plus_li_taxed,
             a_salary_sheets_r.plus_hi_nottaxed,
             a_salary_sheets_r.plus_hi_taxed,
             a_salary_sheets_r.plus_np_taxed,
             a_salary_sheets_r.plus_np_nottaxed,
             a_salary_sheets_r.plus_np_nosai,

             a_salary_sheets_r.total_before_taxes,
             a_salary_sheets_r.adjusted_amount,
             a_salary_sheets_r.amount_before_sn,
             a_salary_sheets_r.amount_before_sn_reverse,
             a_salary_sheets_r.rate_dnsn,
             a_salary_sheets_r.rate_ddsn,
             a_salary_sheets_r.dnsn_amount,
             a_salary_sheets_r.ddsn_amount,
             a_salary_sheets_r.sn_amount,
             a_salary_sheets_r.dnsn_amount_reverse,
             a_salary_sheets_r.ddsn_amount_reverse,
             a_salary_sheets_r.sn_max_amount,

             a_salary_sheets_r.iin_exempt_untaxed_minimum0,
             a_salary_sheets_r.iin_exempt_dependants0,
             a_salary_sheets_r.iin_exempt_retaliation0,
             a_salary_sheets_r.iin_exempt_invalidity0,
             a_salary_sheets_r.iin_exempt_national_movement0,
             a_salary_sheets_r.iin_exempt_untaxed_minimum,
             a_salary_sheets_r.iin_exempt_dependants,
             a_salary_sheets_r.iin_exempt_retaliation,
             a_salary_sheets_r.iin_exempt_invalidity,
             a_salary_sheets_r.iin_exempt_national_movement,
             a_salary_sheets_r.iin_exempt_expenses,
             a_salary_sheets_r.iin_exempt_2tp,
             a_salary_sheets_r.iin_exempt_20,
             a_salary_sheets_r.iin_exempt_2,
             a_salary_sheets_r.amount_before_iin,
             a_salary_sheets_r.amount_before_iin_reverse,
             a_salary_sheets_r.rate_iin,
             a_salary_sheets_r.rate_iin2,
             a_salary_sheets_r.iin_amount,
             a_salary_sheets_r.iin_amount_reverse,
             a_salary_sheets_r.urvn_amaount,

             a_salary_sheets_r.plus_not_paid,
             a_salary_sheets_r.vacation_advance_current,
             a_salary_sheets_r.vacation_advance_next,
             a_salary_sheets_r.vacation_advance_prev,
             a_salary_sheets_r.advance,
             a_salary_sheets_r.pay0,
             a_salary_sheets_r.pay,
             a_salary_sheets_r.payt,
             a_salary_sheets_r.pay_date,
             a_salary_sheets_r.comments,
             a_salary_sheets_r.withhold_from_pay,

             a_salary_sheets_r.foravpaycalc_bruto,
             a_salary_sheets_r.foravpaycalc_payout,
             a_salary_sheets_r.foravpaycalc_days,
             a_salary_sheets_r.foravpaycalc_hours,
             a_salary_sheets_r.avpaycalc_calday,
             a_salary_sheets_r.avpaycalc_day,
             a_salary_sheets_r.avpaycalc_hour,

             a_salary_sheets_r.dt_edited,
             a_salary_sheets_r.calc_ver


    from a_salary_sheets
    join a_salary_sheets_r on a_salary_sheets.id = a_salary_sheets_r.ids

    where ((a_salary_sheets.yr - 1900)*13 + a_salary_sheets.mt) between :km1 and :km2

    order by a_salary_sheets.yr, a_salary_sheets.mt, a_salary_sheets.snr, a_salary_sheets_r.snr

    into :id,
        :ids,
        :idsx,
        :idst,
        :is_temp,
        :type_tag,
        :idp,
        :idam,
        :snr,
        :fname,
        :lname,
        :position_title,
        :territorial_code,
        :calendar_days,
        :calendar_days_use,
        :month_workdays,
        :month_workhours,
        :plan_days,
        :plan_hours,
        :plan_hours_night,
        :plan_hours_overtime,
        :fact_days,
        :fact_hours,
        :fact_hours_night,
        :fact_hours_overtime,
        :plan_work_days,
        :plan_work_hours,
        :plan_work_hours_night,
        :plan_work_hours_overtime,
        :fact_work_days,
        :fact_work_hours,
        :fact_work_hours_night,
        :fact_work_hours_overtime,
        :plan_holidays_days,
        :plan_holidays_hours,
        :plan_holidays_hours_night,
        :plan_holidays_hours_overtime,
        :fact_holidays_days,
        :fact_holidays_hours,
        :fact_holidays_hours_night,
        :fact_holidays_hours_overtime,
        :salary,
        :salary_day,
        :salary_night,
        :salary_overtime,
        :salary_holidays_day,
        :salary_holidays_night,
        :salary_holidays_overtime,
        :salary_paid_holidays_day,
        :salary_paid_holidays_night,
        :salary_piecework,
        :sickdays,
        :sickdays_pay,
        :accident_days,
        :accident_pay,
        :average_income_days,
        :average_income_pay,
        
        :fact_avpay_free_days,
        :fact_avpay_free_hours,
        :fact_avpay_work_days,
        :fact_avpay_workinholidays,
        :fact_avpay_hours,
        :fact_avpay_hours_overtime,
        :fact_avpay_holidays_hours,
        :fact_avpay_holidays_hours_overt,
        :salary_avpay_free_days,
        :salary_avpay_work_days,
        :salary_avpay_work_days_overtime,
        :salary_avpay_holidays,
        :salary_avpay_holidays_overtime,
        
        :business_trip_days,
        :business_trip_pay,
        :paid_holidays,
        :paid_holidays_pay,
        :vacation_days_current,
        :vacation_days_next,
        :vacation_hours_current,
        :vacation_hours_next,
        :vacation_pay_current,
        :vacation_pay_next,
        :vacation_dns_next,
        :vacation_dds_next,
        :vacation_iin_next,
        :vacation_iin_reduce_next,
        :vacation_cash_next,
        :vacation_pay_prev,
        :vacation_dns_prev,
        :vacation_dds_prev,
        :vacation_iin_prev,
        :vacation_days_comp,
        :vacation_pay_comp,

        :plus_taxed,
        :plus_nottaxed,
        :plus_nosai,
        :plus_authors_fees,
        :minus_before_iin,
        :minus_after_iin,
        :plus_pf_nottaxed,
        :plus_pf_taxed,
        :plus_li_nottaxed,
        :plus_li_taxed,
        :plus_hi_nottaxed,
        :plus_hi_taxed,
        :plus_np_taxed,
        :plus_np_nottaxed,
        :plus_np_nosai,

        :total_before_taxes,
        :adjusted_amount,
        :amount_before_sn,
        :amount_before_sn_reverse,
        :rate_dnsn,
        :rate_ddsn,
        :dnsn_amount,
        :ddsn_amount,
        :sn_amount,
        :dnsn_amount_reverse,
        :ddsn_amount_reverse,
        :sn_max_amount,

        :iin_exempt_untaxed_minimum0,
        :iin_exempt_dependants0,
        :iin_exempt_retaliation0,
        :iin_exempt_invalidity0,
        :iin_exempt_national_movement0,
        :iin_exempt_untaxed_minimum,
        :iin_exempt_dependants,
        :iin_exempt_retaliation,
        :iin_exempt_invalidity,
        :iin_exempt_national_movement,
        :iin_exempt_expenses,
        :iin_exempt_2tp,
        :iin_exempt_20,
        :iin_exempt_2,
        :amount_before_iin,
        :amount_before_iin_reverse,
        :rate_iin,
        :rate_iin2,
        :iin_amount,
        :iin_amount_reverse,
        :urvn_amaount,

        :plus_not_paid,
        :vacation_advance_current,
        :vacation_advance_next,
        :vacation_advance_prev,
        :advance,
        :pay0,
        :pay,
        :payt,
        :pay_date,
        :comments,
        :withhold_from_pay,

        :foravpaycalc_bruto,
        :foravpaycalc_payout,
        :foravpaycalc_days,
        :foravpaycalc_hours,
        :avpaycalc_calday,
        :avpaycalc_day,
        :avpaycalc_hour,

        :dt_edited,
        :calc_ver
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_A_STATS_01 (
    PDT1 DATE,
    PDT2 DATE)
RETURNS (
    HIRED INTEGER,
    FIRED INTEGER,
    WORKING INTEGER,
    POS_ADDED INTEGER,
    POS_REMOVED INTEGER,
    POS_NO_TIME_TEMPL INTEGER,
    POS_NO_TIME INTEGER,
    POS_NO_SALARY_TEMPL INTEGER,
    POS_NO_SALARY INTEGER,
    POS_NO_PAY_TEMPL INTEGER,
    POS_NO_PAY INTEGER,
    SALARY_PAY DOM_MONEY,
    PAID DOM_MONEY,
    SALARY_PAY_PAID DOM_MONEY)
AS
begin
    select
        coalesce(count(idp), 0)
    from
    (
        select distinct a_persons.id as idp
        from a_persons
        join a_events on a_persons.id = a_events.idp
        where a_events.idn = 1 and a_events.date1 between :pdt1 and :pdt2
    )
    into :HIRED;

    select
        coalesce(count(idp), 0)
    from
    (
        select distinct a_persons.id as idp
        from a_persons
        join a_events on a_persons.id = a_events.idp
        where a_events.idn = 2 and a_events.date1 between :pdt1 and :pdt2
    )
    into :FIRED;


    select
        coalesce(count(idp), 0)
    from
    (
        select
            HT.idp as idp,
            HT.dt as hdate,
            iif(FT.dt is null or HT.dt is null or FT.dt < HT.dt, null, FT.dt) as fdate
        from
        (
            (
                select distinct a_events.idp as idp, max(a_events.date1) as dt
                from a_events
                where a_events.idn = 1 and a_events.date1 <= :pdt2
                group by idp
            ) as HT
            left join
            (
                select distinct a_events.idp as idp, max(a_events.date1) as dt
                from a_events
                where a_events.idn = 2 and a_events.date1 <= :pdt2
                group by idp
            ) as FT
            on HT.idp = FT.idp
        )
    )
    where hdate is not null and (fdate is null or fdate >= :pdt1)
    into :WORKING;


    select
        coalesce(count(idp), 0)
    from
    (
        select distinct a_positions.idp as idp
        from a_positions
        join a_events on a_positions.id = a_events.ida
        where a_events.idn = 3 and a_events.date1 between :pdt1 and :pdt2
    )
    into :POS_ADDED;

    select
        coalesce(count(idp), 0)
    from
    (
        select distinct a_positions.idp as idp
        from a_positions
        join a_events on a_positions.id = a_events.ida
        where a_events.idn = 4 and a_events.date1 between :pdt1 and :pdt2
    )
    into :POS_REMOVED;


    insert into a_temp_rep_inkp
    select ida as idp, hdate, fdate
    from
    (
        select
            HT.ida as ida,
            HT.dt as hdate,
            iif(FT.dt is null or HT.dt is null or FT.dt < HT.dt, null, FT.dt) as fdate
        from
        (
            (
                select distinct a_events.ida as ida, max(a_events.date1) as dt
                from a_events
                where a_events.idn = 3 and a_events.date1 <= :pdt2
                group by ida
            ) as HT
            left join
            (
                select distinct a_events.ida as ida, max(a_events.date1) as dt
                from a_events
                where a_events.idn = 4 and a_events.date1 <= :pdt2
                group by ida
            ) as FT
            on HT.ida = FT.ida
        )
    )
    where hdate is not null and (fdate is null or fdate >= :pdt1);

    select coalesce(count(a_temp_rep_inkp.idp), 0) as ct
    from a_temp_rep_inkp
    left join a_timesheet_templ_r
        on a_temp_rep_inkp.idp = a_timesheet_templ_r.idam
    where a_timesheet_templ_r.id is null
    into :POS_NO_TIME_TEMPL;


    select coalesce(count(a_temp_rep_inkp.idp), 0) as ct
    from a_temp_rep_inkp
    left join
    (
        a_timesheet_lists_r
        join a_timesheet_lists
            on a_timesheet_lists.id = a_timesheet_lists_r.ids and
                a_timesheet_lists.yr = extract(year from :pdt1) and
                a_timesheet_lists.mt = extract(month from :pdt1)
    )
        on a_temp_rep_inkp.idp = a_timesheet_lists_r.idam
    where a_timesheet_lists_r.id is null
    into :POS_NO_TIME;


    select coalesce(count(a_temp_rep_inkp.idp), 0) as ct
    from a_temp_rep_inkp
    left join a_salary_sheet_templ_r
        on a_temp_rep_inkp.idp = a_salary_sheet_templ_r.idam
    where a_salary_sheet_templ_r.id is null
    into :POS_NO_SALARY_TEMPL;


    select coalesce(count(a_temp_rep_inkp.idp), 0) as ct
    from a_temp_rep_inkp
    left join
    (
        a_salary_sheets_r
        join a_salary_sheets
            on a_salary_sheets.id = a_salary_sheets_r.ids and
                a_salary_sheets.yr = extract(year from :pdt1) and
                a_salary_sheets.mt = extract(month from :pdt1)
    )
        on a_temp_rep_inkp.idp = a_salary_sheets_r.idam
    where a_salary_sheets_r.id is null
    into :POS_NO_SALARY;


    select coalesce(count(a_temp_rep_inkp.idp), 0) as ct
    from a_temp_rep_inkp
    left join a_paylist_templ_r
        on a_temp_rep_inkp.idp = a_paylist_templ_r.idam
    where a_paylist_templ_r.id is null
    into :POS_NO_PAY_TEMPL;


    select coalesce(count(a_temp_rep_inkp.idp), 0) as ct
    from a_temp_rep_inkp
    left join
    (
        a_paylists_r
        join a_paylists
            on a_paylists.id = a_paylists_r.ids and
                a_paylists.yr = extract(year from :pdt1) and
                a_paylists.mt = extract(month from :pdt1)
    )
        on a_temp_rep_inkp.idp = a_paylists_r.idam

    where a_paylists_r.id is null
    into :POS_NO_PAY;

    select coalesce(sum(a_salary_sheets_r.pay), 0.0) as pay
    from a_salary_sheets
    join a_salary_sheets_r on a_salary_sheets.id = a_salary_sheets_r.ids
    where a_salary_sheets.dt1 >= :pdt1 and a_salary_sheets.dt2 <= :pdt2
    into :SALARY_PAY;

    select coalesce(sum(a_paylists_r.pay), 0.0) as pay
    from a_paylists
    join a_paylists_r on a_paylists.id = a_paylists_r.ids
    where a_paylists.dt between :pdt1 and :pdt2
    into :PAID;


    select coalesce(sum(pay), 0.0) as pay
    from
    (
        select
            a_salary_sheets_r.pay as pay

        from a_paylists_r
        join a_salary_sheets_r on a_salary_sheets_r.idam = a_paylists_r.idam
        join a_salary_sheets
            on (a_salary_sheets_r.ids = a_salary_sheets.id and
                a_salary_sheets.is_temp = 0 and
                a_salary_sheets.kind = 0 and
                a_salary_sheets.dt1 >= :pdt1 and
                a_salary_sheets.dt2 <= :pdt2 and
                (
                    (a_salary_sheets.dt1 > a_paylists_r.dt1 and
                    a_salary_sheets.dt2 < a_paylists_r.dt2) or

                    (a_salary_sheets.dt1 = a_paylists_r.dt1 and
                    a_salary_sheets_r.pay = a_paylists_r.s1) or

                    (a_salary_sheets.dt2 = a_paylists_r.dt2 and
                    a_salary_sheets_r.pay = a_paylists_r.s2)
                ))

    
        union all
    
        select
            S1 as PAY
    
        from a_paylists_r
        join a_salary_sheets_r
            on (a_paylists_r.id_shr_1 is not null and
                a_paylists_r.id_shr_1 = a_salary_sheets_r.id)
        join a_salary_sheets
            on (a_salary_sheets.id = a_salary_sheets_r.ids and
                a_salary_sheets.dt1 >= :pdt1 and
                a_salary_sheets.dt2 <= :pdt2)

    
        union all
    
        select
            S2 as PAY
    
        from a_paylists_r
        join a_salary_sheets_r
            on (a_paylists_r.id_shr_2 is not null and
                a_paylists_r.id_shr_2 = a_salary_sheets_r.id)
        join a_salary_sheets
            on (a_salary_sheets.id = a_salary_sheets_r.ids and
                a_salary_sheets.dt1 >= :pdt1 and
                a_salary_sheets.dt2 <= :pdt2)

    )
    into :SALARY_PAY_PAID;



    suspend;
end^


ALTER PROCEDURE SP_A_STATS_02 (
    PDT1 DATE,
    PDT2 DATE)
RETURNS (
    IDP INTEGER,
    IDAM INTEGER,
    FNAME VARCHAR(20),
    LNAME VARCHAR(20),
    POSTITLE VARCHAR(50),
    TAG INTEGER)
AS
begin

    insert into a_temp_rep_inkp
    select ida as idp, hdate, fdate
    from
    (
        select
            HT.ida as ida,
            HT.dt as hdate,
            iif(FT.dt is null or HT.dt is null or FT.dt < HT.dt, null, FT.dt) as fdate
        from
        (
            (
                select distinct a_events.ida as ida, max(a_events.date1) as dt
                from a_events
                where a_events.idn = 3 and a_events.date1 <= :pdt2
                group by ida
            ) as HT
            left join
            (
                select distinct a_events.ida as ida, max(a_events.date1) as dt
                from a_events
                where a_events.idn = 4 and a_events.date1 <= :pdt2
                group by ida
            ) as FT
            on HT.ida = FT.ida
        )
    )
    where hdate is not null and (fdate is null or fdate >= :pdt1);



    for select
        coalesce(xt.idp, persons2.id) as idp,
        xt.idam,
        xt.tag,
        coalesce(a_persons.fname, persons2.fname) as fname,
        coalesce(a_persons.lname, persons2.lname) as lname,
        a_positions.title as postitle
    from
    (

        select distinct a_persons.id as idp, null as idam, 1 as tag
        from a_persons
        join a_events on a_persons.id = a_events.idp
        where a_events.idn = 1 and a_events.date1 between :pdt1 and :pdt2
    
        union all
    
        select distinct a_persons.id as idp, null as idam, 2 as tag
        from a_persons
        join a_events on a_persons.id = a_events.idp
        where a_events.idn = 2 and a_events.date1 between :pdt1 and :pdt2
    
        union all
    
        select
            idp, null as idam, 3 as tag
        from
        (
            select
                HT.idp as idp,
                HT.dt as hdate,
                iif(FT.dt is null or HT.dt is null or FT.dt < HT.dt, null, FT.dt) as fdate
            from
            (
                (
                    select distinct a_events.idp as idp, max(a_events.date1) as dt
                    from a_events
                    where a_events.idn = 1 and a_events.date1 <= :pdt2
                    group by idp
                ) as HT
                left join
                (
                    select distinct a_events.idp as idp, max(a_events.date1) as dt
                    from a_events
                    where a_events.idn = 2 and a_events.date1 <= :pdt2
                    group by idp
                ) as FT
                on HT.idp = FT.idp
            )
        )
        where hdate is not null and (fdate is null or fdate >= :pdt1)
    
        union all
    
        select distinct a_positions.idp as idp, a_positions.id as ida, 4 as tag
        from a_positions
        join a_events on a_positions.id = a_events.ida
        where a_events.idn = 3 and a_events.date1 between :pdt1 and :pdt2
    
    
        union all
    
    
        select distinct a_positions.idp as idp, a_positions.id as ida, 5 as tag
        from a_positions
        join a_events on a_positions.id = a_events.ida
        where a_events.idn = 4 and a_events.date1 between :pdt1 and :pdt2
    
    
        union all
    
    
    
        select a_positions.idp as idp, a_temp_rep_inkp.idp as ida, 6 as tag
        from a_temp_rep_inkp
        join a_positions on a_positions.id = a_temp_rep_inkp.idp
        left join a_timesheet_templ_r
            on a_temp_rep_inkp.idp = a_timesheet_templ_r.idam
        where a_timesheet_templ_r.id is null
    
        union all
    
    
        select a_positions.idp as idp, a_temp_rep_inkp.idp as ida, 7 as tag
        from a_temp_rep_inkp
        join a_positions on a_positions.id = a_temp_rep_inkp.idp
        left join
        (
            a_timesheet_lists_r
            join a_timesheet_lists
                on a_timesheet_lists.id = a_timesheet_lists_r.ids and
                    a_timesheet_lists.yr = extract(year from :pdt1) and
                    a_timesheet_lists.mt = extract(month from :pdt1)
        )
            on a_temp_rep_inkp.idp = a_timesheet_lists_r.idam
        where a_timesheet_lists_r.id is null
    
    
        union all
    
        select a_positions.idp as idp, a_temp_rep_inkp.idp as ida, 8 as tag
        from a_temp_rep_inkp
        join a_positions on a_positions.id = a_temp_rep_inkp.idp
        left join a_salary_sheet_templ_r
            on a_temp_rep_inkp.idp = a_salary_sheet_templ_r.idam
        where a_salary_sheet_templ_r.id is null
    
        union all
    
    
        select a_salary_sheets_r.idp as idp, a_temp_rep_inkp.idp as ida, 9 as tag
        from a_temp_rep_inkp
        left join
        (
            a_salary_sheets_r
            join a_salary_sheets
                on a_salary_sheets.id = a_salary_sheets_r.ids and
                    a_salary_sheets.yr = extract(year from :pdt1) and
                    a_salary_sheets.mt = extract(month from :pdt1)
        )
            on a_temp_rep_inkp.idp = a_salary_sheets_r.idam
        where a_salary_sheets_r.id is null
    
        union all
    
        select a_positions.idp as idp, a_temp_rep_inkp.idp as ida, 10 as tag
        from a_temp_rep_inkp
        join a_positions on a_positions.id = a_temp_rep_inkp.idp
        left join a_paylist_templ_r
            on a_temp_rep_inkp.idp = a_paylist_templ_r.idam
        where a_paylist_templ_r.id is null
    
        union all
    
        select a_paylists_r.idp as idp, a_temp_rep_inkp.idp as ida, 11 as tag
        from a_temp_rep_inkp
        left join
        (
            a_paylists_r
            join a_paylists
                on a_paylists.id = a_paylists_r.ids and
                    a_paylists.yr = extract(year from :pdt1) and
                    a_paylists.mt = extract(month from :pdt1)
        )
            on a_temp_rep_inkp.idp = a_paylists_r.idam
        where a_paylists_r.id is null

    ) as XT

    left join a_persons on XT.idp = a_persons.id
    left join
    (
        a_positions
        join a_persons as persons2 on a_positions.idp = persons2.id
    )
    on XT.idam = a_positions.id

    order by tag, fname, lname

    into
        :idp, :idam, :tag, :fname, :lname, :postitle

    do
        suspend;
end^


ALTER PROCEDURE SP_A_TIMESHEET_01 (
    PID INTEGER)
RETURNS (
    ID TYPE OF COLUMN A_TIMESHEET.ID,
    IDP TYPE OF COLUMN A_TIMESHEET.IDP,
    IDL TYPE OF COLUMN A_TIMESHEET.IDL,
    SNR TYPE OF COLUMN A_TIMESHEET.SNR,
    PERID TYPE OF COLUMN A_TIMESHEET.PERID,
    AMID TYPE OF COLUMN A_TIMESHEET.AMID,
    YR TYPE OF COLUMN A_TIMESHEET.YR,
    MT TYPE OF COLUMN A_TIMESHEET.MT,
    KIND1 TYPE OF COLUMN A_TIMESHEET.KIND1,
    KIND2 TYPE OF COLUMN A_TIMESHEET.KIND2,
    V1 TYPE OF COLUMN A_TIMESHEET.V1,
    V2 TYPE OF COLUMN A_TIMESHEET.V2,
    V3 TYPE OF COLUMN A_TIMESHEET.V3,
    V4 TYPE OF COLUMN A_TIMESHEET.V4,
    V5 TYPE OF COLUMN A_TIMESHEET.V5,
    V6 TYPE OF COLUMN A_TIMESHEET.V6,
    V7 TYPE OF COLUMN A_TIMESHEET.V7,
    V8 TYPE OF COLUMN A_TIMESHEET.V8,
    V9 TYPE OF COLUMN A_TIMESHEET.V9,
    V10 TYPE OF COLUMN A_TIMESHEET.V10,
    V11 TYPE OF COLUMN A_TIMESHEET.V11,
    V12 TYPE OF COLUMN A_TIMESHEET.V12,
    V13 TYPE OF COLUMN A_TIMESHEET.V13,
    V14 TYPE OF COLUMN A_TIMESHEET.V14,
    V15 TYPE OF COLUMN A_TIMESHEET.V15,
    V16 TYPE OF COLUMN A_TIMESHEET.V16,
    V17 TYPE OF COLUMN A_TIMESHEET.V17,
    V18 TYPE OF COLUMN A_TIMESHEET.V18,
    V19 TYPE OF COLUMN A_TIMESHEET.V19,
    V20 TYPE OF COLUMN A_TIMESHEET.V20,
    V21 TYPE OF COLUMN A_TIMESHEET.V21,
    V22 TYPE OF COLUMN A_TIMESHEET.V22,
    V23 TYPE OF COLUMN A_TIMESHEET.V23,
    V24 TYPE OF COLUMN A_TIMESHEET.V24,
    V25 TYPE OF COLUMN A_TIMESHEET.V25,
    V26 TYPE OF COLUMN A_TIMESHEET.V26,
    V27 TYPE OF COLUMN A_TIMESHEET.V27,
    V28 TYPE OF COLUMN A_TIMESHEET.V28,
    V29 TYPE OF COLUMN A_TIMESHEET.V29,
    V30 TYPE OF COLUMN A_TIMESHEET.V30,
    V31 TYPE OF COLUMN A_TIMESHEET.V31,
    K1 TYPE OF COLUMN A_TIMESHEET.K1,
    D1 TYPE OF COLUMN A_TIMESHEET.D1,
    D2 TYPE OF COLUMN A_TIMESHEET.D2,
    D3 TYPE OF COLUMN A_TIMESHEET.D3,
    D4 TYPE OF COLUMN A_TIMESHEET.D4,
    D5 TYPE OF COLUMN A_TIMESHEET.D5,
    D6 TYPE OF COLUMN A_TIMESHEET.D6,
    D7 TYPE OF COLUMN A_TIMESHEET.D7,
    D8 TYPE OF COLUMN A_TIMESHEET.D8,
    D9 TYPE OF COLUMN A_TIMESHEET.D9,
    D10 TYPE OF COLUMN A_TIMESHEET.D10,
    D11 TYPE OF COLUMN A_TIMESHEET.D11,
    D12 TYPE OF COLUMN A_TIMESHEET.D12,
    D13 TYPE OF COLUMN A_TIMESHEET.D13,
    D14 TYPE OF COLUMN A_TIMESHEET.D14,
    D15 TYPE OF COLUMN A_TIMESHEET.D15,
    D16 TYPE OF COLUMN A_TIMESHEET.D16,
    D17 TYPE OF COLUMN A_TIMESHEET.D17,
    D18 TYPE OF COLUMN A_TIMESHEET.D18,
    D19 TYPE OF COLUMN A_TIMESHEET.D19,
    D20 TYPE OF COLUMN A_TIMESHEET.D20,
    D21 TYPE OF COLUMN A_TIMESHEET.D21,
    D22 TYPE OF COLUMN A_TIMESHEET.D22,
    D23 TYPE OF COLUMN A_TIMESHEET.D23,
    D24 TYPE OF COLUMN A_TIMESHEET.D24,
    D25 TYPE OF COLUMN A_TIMESHEET.D25,
    D26 TYPE OF COLUMN A_TIMESHEET.D26,
    D27 TYPE OF COLUMN A_TIMESHEET.D27,
    D28 TYPE OF COLUMN A_TIMESHEET.D28,
    D29 TYPE OF COLUMN A_TIMESHEET.D29,
    D30 TYPE OF COLUMN A_TIMESHEET.D30,
    D31 TYPE OF COLUMN A_TIMESHEET.D31)
AS
begin
    for select
        ID, IDP, IDL, SNR, PERID, AMID,
        YR, MT, KIND1, KIND2,
        V1, V2, V3, V4, V5, V6, V7, V8, V9, V10,
        V11, V12, V13, V14, V15, V16, V17, V18, V19, V20,
        V21, V22, V23, V24, V25, V26, V27, V28, V29, V30,
        V31, K1,
        D1, D2, D3, D4, D5, D6, D7, D8, D9, D10,
        D11, D12, D13, D14, D15, D16, D17, D18, D19, D20,
        D21, D22, D23, D24, D25, D26, D27, D28, D29, D30,
        D31
    from a_timesheet
    where
        (IDL = :PID) or (KIND1 = 0) or (KIND1 = 1)
    order by
        snr
    into
        :ID, :IDP, :IDL, :SNR, :PERID, :AMID,
        :YR, :MT, :KIND1, :KIND2,
        :V1, :V2, :V3, :V4, :V5, :V6, :V7, :V8, :V9, :V10,
        :V11, :V12, :V13, :V14, :V15, :V16, :V17, :V18, :V19, :V20,
        :V21, :V22, :V23, :V24, :V25, :V26, :V27, :V28, :V29, :V30,
        :V31, :K1,
        :D1, :D2, :D3, :D4, :D5, :D6, :D7, :D8, :D9, :D10,
        :D11, :D12, :D13, :D14, :D15, :D16, :D17, :D18, :D19, :D20,
        :D21, :D22, :D23, :D24, :D25, :D26, :D27, :D28, :D29, :D30,
        :D31
    do
        suspend;

end^


ALTER PROCEDURE SP_A_TIMESHEET_LISTS_01 (
    PYR1 INTEGER,
    PMT1 INTEGER,
    PYR2 INTEGER,
    PMT2 INTEGER)
RETURNS (
    ID TYPE OF COLUMN A_TIMESHEET_LISTS.ID,
    YR TYPE OF COLUMN A_TIMESHEET_LISTS.YR,
    MT TYPE OF COLUMN A_TIMESHEET_LISTS.MT,
    SNR TYPE OF COLUMN A_TIMESHEET_LISTS.SNR,
    DESCR TYPE OF COLUMN A_TIMESHEET_LISTS.DESCR,
    IDSH TYPE OF COLUMN A_TIMESHEET_LISTS.IDSH,
    DEP TYPE OF COLUMN A_TIMESHEET_LISTS.DEP)
AS
declare km1 integer;
    declare km2 integer;
begin

    km1 = (:pyr1 - 1900) * 13 + :pmt1;
    km2 = (:pyr2 - 1900) * 13 + :pmt2;

    for select
        id, yr, mt, snr, descr, idsh, dep
    from
        A_TIMESHEET_LISTS
    where ((yr - 1900)*13 + mt) between :km1 and :km2
    order by yr, mt, snr
    into
        :id, :yr, :mt, :snr, :descr, :idsh, :dep
    do
        suspend;
end^


ALTER PROCEDURE SP_A_TIMESHEET_LISTS_R_01 (
    PYR1 INTEGER,
    PMT1 INTEGER,
    PYR2 INTEGER,
    PMT2 INTEGER)
RETURNS (
    ID TYPE OF COLUMN A_TIMESHEET_LISTS_R.ID,
    IDS TYPE OF COLUMN A_TIMESHEET_LISTS_R.IDS,
    IDP TYPE OF COLUMN A_TIMESHEET_LISTS_R.IDP,
    IDAM TYPE OF COLUMN A_TIMESHEET_LISTS_R.IDAM,
    IDPL TYPE OF COLUMN A_TIMESHEET_LISTS_R.IDPL,
    SNR TYPE OF COLUMN A_TIMESHEET_LISTS_R.SNR,
    PLAN_TYPE TYPE OF COLUMN A_TIMESHEET_LISTS_R.PLAN_TYPE,
    NIGHT TYPE OF COLUMN A_TIMESHEET_LISTS_R.NIGHT,
    OVERTIME TYPE OF COLUMN A_TIMESHEET_LISTS_R.OVERTIME)
AS
declare km1 integer;
    declare km2 integer;
begin

    km1 = (:pyr1 - 1900) * 13 + :pmt1;
    km2 = (:pyr2 - 1900) * 13 + :pmt2;

    for select
        a_timesheet_lists_r.id,
        a_timesheet_lists_r.ids,
        a_timesheet_lists_r.idp,
        a_timesheet_lists_r.idam,
        a_timesheet_lists_r.idpl,
        a_timesheet_lists_r.snr,
        a_timesheet_lists_r.plan_type,
        a_timesheet_lists_r.night,
        a_timesheet_lists_r.overtime

    from
        a_timesheet_lists_r
        join a_timesheet_lists
        on a_timesheet_lists_r.ids = a_timesheet_lists.id
    where ((a_timesheet_lists.yr - 1900)*13 + a_timesheet_lists.mt) between :km1 and :km2
    order by yr, mt
    into
        :id, :ids, :idp, :idam, :idpl, :snr, :plan_type, :night, :overtime
    do
        suspend;
end^


ALTER PROCEDURE SP_A_TIMESHEET_PER_01 (
    PYR1 INTEGER,
    PMT1 INTEGER,
    PYR2 INTEGER,
    PMT2 INTEGER)
RETURNS (
    ID TYPE OF COLUMN A_TIMESHEET.ID,
    IDP TYPE OF COLUMN A_TIMESHEET.IDP,
    IDL TYPE OF COLUMN A_TIMESHEET.IDL,
    SNR TYPE OF COLUMN A_TIMESHEET.SNR,
    PERID TYPE OF COLUMN A_TIMESHEET.PERID,
    AMID TYPE OF COLUMN A_TIMESHEET.AMID,
    YR TYPE OF COLUMN A_TIMESHEET.YR,
    MT TYPE OF COLUMN A_TIMESHEET.MT,
    KIND1 TYPE OF COLUMN A_TIMESHEET.KIND1,
    KIND2 TYPE OF COLUMN A_TIMESHEET.KIND2,
    V1 TYPE OF COLUMN A_TIMESHEET.V1,
    V2 TYPE OF COLUMN A_TIMESHEET.V2,
    V3 TYPE OF COLUMN A_TIMESHEET.V3,
    V4 TYPE OF COLUMN A_TIMESHEET.V4,
    V5 TYPE OF COLUMN A_TIMESHEET.V5,
    V6 TYPE OF COLUMN A_TIMESHEET.V6,
    V7 TYPE OF COLUMN A_TIMESHEET.V7,
    V8 TYPE OF COLUMN A_TIMESHEET.V8,
    V9 TYPE OF COLUMN A_TIMESHEET.V9,
    V10 TYPE OF COLUMN A_TIMESHEET.V10,
    V11 TYPE OF COLUMN A_TIMESHEET.V11,
    V12 TYPE OF COLUMN A_TIMESHEET.V12,
    V13 TYPE OF COLUMN A_TIMESHEET.V13,
    V14 TYPE OF COLUMN A_TIMESHEET.V14,
    V15 TYPE OF COLUMN A_TIMESHEET.V15,
    V16 TYPE OF COLUMN A_TIMESHEET.V16,
    V17 TYPE OF COLUMN A_TIMESHEET.V17,
    V18 TYPE OF COLUMN A_TIMESHEET.V18,
    V19 TYPE OF COLUMN A_TIMESHEET.V19,
    V20 TYPE OF COLUMN A_TIMESHEET.V20,
    V21 TYPE OF COLUMN A_TIMESHEET.V21,
    V22 TYPE OF COLUMN A_TIMESHEET.V22,
    V23 TYPE OF COLUMN A_TIMESHEET.V23,
    V24 TYPE OF COLUMN A_TIMESHEET.V24,
    V25 TYPE OF COLUMN A_TIMESHEET.V25,
    V26 TYPE OF COLUMN A_TIMESHEET.V26,
    V27 TYPE OF COLUMN A_TIMESHEET.V27,
    V28 TYPE OF COLUMN A_TIMESHEET.V28,
    V29 TYPE OF COLUMN A_TIMESHEET.V29,
    V30 TYPE OF COLUMN A_TIMESHEET.V30,
    V31 TYPE OF COLUMN A_TIMESHEET.V31,
    K1 TYPE OF COLUMN A_TIMESHEET.K1,
    D1 TYPE OF COLUMN A_TIMESHEET.D1,
    D2 TYPE OF COLUMN A_TIMESHEET.D2,
    D3 TYPE OF COLUMN A_TIMESHEET.D3,
    D4 TYPE OF COLUMN A_TIMESHEET.D4,
    D5 TYPE OF COLUMN A_TIMESHEET.D5,
    D6 TYPE OF COLUMN A_TIMESHEET.D6,
    D7 TYPE OF COLUMN A_TIMESHEET.D7,
    D8 TYPE OF COLUMN A_TIMESHEET.D8,
    D9 TYPE OF COLUMN A_TIMESHEET.D9,
    D10 TYPE OF COLUMN A_TIMESHEET.D10,
    D11 TYPE OF COLUMN A_TIMESHEET.D11,
    D12 TYPE OF COLUMN A_TIMESHEET.D12,
    D13 TYPE OF COLUMN A_TIMESHEET.D13,
    D14 TYPE OF COLUMN A_TIMESHEET.D14,
    D15 TYPE OF COLUMN A_TIMESHEET.D15,
    D16 TYPE OF COLUMN A_TIMESHEET.D16,
    D17 TYPE OF COLUMN A_TIMESHEET.D17,
    D18 TYPE OF COLUMN A_TIMESHEET.D18,
    D19 TYPE OF COLUMN A_TIMESHEET.D19,
    D20 TYPE OF COLUMN A_TIMESHEET.D20,
    D21 TYPE OF COLUMN A_TIMESHEET.D21,
    D22 TYPE OF COLUMN A_TIMESHEET.D22,
    D23 TYPE OF COLUMN A_TIMESHEET.D23,
    D24 TYPE OF COLUMN A_TIMESHEET.D24,
    D25 TYPE OF COLUMN A_TIMESHEET.D25,
    D26 TYPE OF COLUMN A_TIMESHEET.D26,
    D27 TYPE OF COLUMN A_TIMESHEET.D27,
    D28 TYPE OF COLUMN A_TIMESHEET.D28,
    D29 TYPE OF COLUMN A_TIMESHEET.D29,
    D30 TYPE OF COLUMN A_TIMESHEET.D30,
    D31 TYPE OF COLUMN A_TIMESHEET.D31)
AS
declare km1 integer;
    declare km2 integer;
begin
    km1 = (:pyr1 - 1900) * 13 + :pmt1;
    km2 = (:pyr2 - 1900) * 13 + :pmt2;

    for select
        a_timesheet.ID,
        a_timesheet.IDP,
        a_timesheet.IDL,
        a_timesheet.SNR,
        a_timesheet.PERID,
        a_timesheet.AMID,
        a_timesheet.YR,
        a_timesheet.MT,
        a_timesheet.KIND1,
        a_timesheet.KIND2,
        a_timesheet.V1,
        a_timesheet.V2,
        a_timesheet.V3,
        a_timesheet.V4,
        a_timesheet.V5,
        a_timesheet.V6,
        a_timesheet.V7,
        a_timesheet.V8,
        a_timesheet.V9,
        a_timesheet.V10,
        a_timesheet.V11,
        a_timesheet.V12,
        a_timesheet.V13,
        a_timesheet.V14,
        a_timesheet.V15,
        a_timesheet.V16,
        a_timesheet.V17,
        a_timesheet.V18,
        a_timesheet.V19,
        a_timesheet.V20,
        a_timesheet.V21,
        a_timesheet.V22,
        a_timesheet.V23,
        a_timesheet.V24,
        a_timesheet.V25,
        a_timesheet.V26,
        a_timesheet.V27,
        a_timesheet.V28,
        a_timesheet.V29,
        a_timesheet.V30,
        a_timesheet.V31,
        a_timesheet.K1,
        a_timesheet.D1,
        a_timesheet.D2,
        a_timesheet.D3,
        a_timesheet.D4,
        a_timesheet.D5,
        a_timesheet.D6,
        a_timesheet.D7,
        a_timesheet.D8,
        a_timesheet.D9,
        a_timesheet.D10,
        a_timesheet.D11,
        a_timesheet.D12,
        a_timesheet.D13,
        a_timesheet.D14,
        a_timesheet.D15,
        a_timesheet.D16,
        a_timesheet.D17,
        a_timesheet.D18,
        a_timesheet.D19,
        a_timesheet.D20,
        a_timesheet.D21,
        a_timesheet.D22,
        a_timesheet.D23,
        a_timesheet.D24,
        a_timesheet.D25,
        a_timesheet.D26,
        a_timesheet.D27,
        a_timesheet.D28,
        a_timesheet.D29,
        a_timesheet.D30,
        a_timesheet.D31

    from
        a_timesheet
    where
        ((a_timesheet.yr - 1900)*13 + a_timesheet.mt) between :km1 and :km2
    order by
        snr

    into
        :ID, :IDP, :IDL, :SNR, :PERID, :AMID,
        :YR, :MT, :KIND1, :KIND2,
        :V1, :V2, :V3, :V4, :V5, :V6, :V7, :V8, :V9, :V10,
        :V11, :V12, :V13, :V14, :V15, :V16, :V17, :V18, :V19, :V20,
        :V21, :V22, :V23, :V24, :V25, :V26, :V27, :V28, :V29, :V30,
        :V31, :K1,
        :D1, :D2, :D3, :D4, :D5, :D6, :D7, :D8, :D9, :D10,
        :D11, :D12, :D13, :D14, :D15, :D16, :D17, :D18, :D19, :D20,
        :D21, :D22, :D23, :D24, :D25, :D26, :D27, :D28, :D29, :D30,
        :D31

    do
        suspend;

end^


ALTER PROCEDURE SP_F_BAL0_ID
RETURNS (
    NEXTID INTEGER)
AS
begin
    nextid = GEN_ID("GEN_F_BAL0_ID",1);
end^


ALTER PROCEDURE SP_F_BAL0_IDA
RETURNS (
    NEXTID INTEGER)
AS
begin
    nextid = GEN_ID("GEN_F_BAL0_ID",1);
    suspend;
end^


ALTER PROCEDURE SP_F_BALA2_ID
RETURNS (
    NEXTID INTEGER)
AS
begin
    nextid = GEN_ID("GEN_F_BALA2_ID",1);
    suspend;
end^


ALTER PROCEDURE SP_F_BALA3_ID
RETURNS (
    NEXTID INTEGER)
AS
begin
    nextid = GEN_ID("GEN_F_BALA3_ID",1);
    suspend;
end^


ALTER PROCEDURE SP_F_CURRCHECK_01 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15),
    PCUR VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN F_ROPS1A.ID,
    SPID TYPE OF COLUMN F_ROPS1A.SPID,
    DID TYPE OF COLUMN F_ROPS1A.DID,
    DETE TYPE OF COLUMN F_ROPS1A.DETE,
    NRX TYPE OF COLUMN F_ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN F_ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN F_ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN F_ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN F_ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN F_ROPS1A.DOCNR,
    CLID TYPE OF COLUMN F_ROPS1A.CLID,
    CLID2 TYPE OF COLUMN F_ROPS1A.CLID2,
    NAME TYPE OF COLUMN F_ROPS1A.NAME,
    NAME2 TYPE OF COLUMN F_ROPS1A.NAME2,
    REGNR TYPE OF COLUMN F_ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN F_ROPS1A.REGNR2,
    B0 TYPE OF COLUMN F_ROPS1A.B0,
    DESCR TYPE OF COLUMN F_ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN F_ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN F_ROPS1A.AC1,
    AC2 TYPE OF COLUMN F_ROPS1A.AC2,
    SAC1 TYPE OF COLUMN F_ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN F_ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN F_ROPS1A.SUMMC,
    CUR TYPE OF COLUMN F_ROPS1A.CUR,
    SUMM TYPE OF COLUMN F_ROPS1A.SUMM,
    PVN TYPE OF COLUMN F_ROPS1A.PVN,
    RAC TYPE OF COLUMN F_ROPS1A.RAC,
    SDB TYPE OF COLUMN F_ROPS1A.SDB,
    SCR TYPE OF COLUMN F_ROPS1A.SCR,
    RAC2 TYPE OF COLUMN F_ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN F_ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN F_ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN F_ROPS1A.RAC5,
    QV TYPE OF COLUMN F_ROPS1A.QV,
    ZNR TYPE OF COLUMN F_ROPS1A.ZNR)
AS
begin
    FOR SELECT DISTINCT
        gen_id(GEN_F_ROPS2A_ID, 1) as id,
        current_connection as spid,
        F_OPSd.id AS did, 
        F_OPSd.Dete AS Dete,
        F_OPSd.NrX AS NrX,
        F_OPSd.DocTyp AS DocTyp,
        F_DocTyp.id1 AS DocTyp1, 
        null as DocTyp2,
        F_OPSd.DocSt AS DocSt,
        F_OPSd.DocNr AS DocNr,
        F_OPSd.ClId AS Clid,
        F_OPSd.ClId2 AS Clid2,
        F_Persons.Name AS Name, 
        F_Persons2.Name AS Name2, 
        F_Persons.RegNr AS RegNr,
        F_Persons2.RegNr AS RegNr2,
        0 AS b0, 
        F_OPSd.Descr AS Descr,
        null AS Descr2,
        null AS AC1,
        null AS AC2,
        null AS SAC1,
        null AS SAC2,
        0 AS SummC,
        null AS Cur,
        F_OPSd.Summ AS Summ,
        F_OPSd.PVN AS PVN,
        null AS Rac,
        0 AS Sdb,
        0 AS SCr,
        null AS Rac2,
        null AS Rac3,
        null AS Rac4,
        null AS Rac5,
        0 AS qv,
        F_OPSd.ZNR AS ZNR

    FROM F_OPSd
        JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
        LEFT JOIN F_DocTyp ON F_OPSd.DocTyp = F_DocTyp.id
        LEFT JOIN F_Persons ON F_OPSd.ClId = F_Persons.ClId
        LEFT JOIN F_Persons AS F_Persons2 ON F_OPSd.ClId2 = F_Persons2.ClId        
        LEFT JOIN F_Currency ON F_Currency.id = F_OPS.cur AND F_Currency.dete = F_OPSd.Dete
    WHERE 
        F_OPSd.Dete BETWEEN :sdt AND :edt AND
        F_OPS.Cur <> 'EUR' AND
        (F_OPS.AC11 LIKE :pac OR F_OPS.AC21 LIKE :pac) AND
        (
            F_Currency.id IS NULL OR
            ROUND(F_OPS.SummC*F_Currency.rate,2) <> F_OPS.Summ
        )
    ORDER BY Dete, DocId


    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_DIFF_01 (
    PDOCID INTEGER)
RETURNS (
    IDL TYPE OF COLUMN F_LOPSD.IDL,
    ID TYPE OF COLUMN F_LOPSD.ID,
    ZDT TYPE OF COLUMN F_LOPSD.ZDT,
    DTLD TYPE OF COLUMN F_LOPSD.DTLD,
    ODT TYPE OF COLUMN F_LOPSD.ODT,
    USL TYPE OF COLUMN F_LOPSD.USL,
    DETE TYPE OF COLUMN F_LOPSD.DETE,
    NRX TYPE OF COLUMN F_LOPSD.NRX,
    ZNR TYPE OF COLUMN F_LOPSD.ZNR,
    DOCTYP TYPE OF COLUMN F_LOPSD.DOCTYP,
    DOCST TYPE OF COLUMN F_LOPSD.DOCST,
    DOCNR TYPE OF COLUMN F_LOPSD.DOCNR,
    CLID TYPE OF COLUMN F_LOPSD.CLID,
    CLID2 TYPE OF COLUMN F_LOPSD.CLID2,
    DESCR TYPE OF COLUMN F_LOPSD.DESCR,
    SUMM TYPE OF COLUMN F_LOPSD.SUMM,
    PVN TYPE OF COLUMN F_LOPSD.PVN,
    ZU TYPE OF COLUMN F_LOPSD.ZU,
    TPL INTEGER)
AS
begin
  for select *
  from
  (
    select
        idl, id, zdt, dtld, odt, usl, dete, nrx, znr,
        doctyp, docst, docnr, clid, clid2, descr,
        summ, pvn, zu, 1 as tpl
    from f_lopsd
    where id = :pdocid

    union all

    select
        -9999999 as idl, id, null as zdt, null as dtld,
        zdt as odt, null as usl, dete, nrx, znr,
        doctyp, docst, docnr, clid, clid2, descr,
        summ, pvn, zu, 2 as tpl
    from f_opsd
    where id = :pdocid

  )
  into
    :idl, :id, :zdt, :dtld, :odt, :usl, :dete, :nrx, :znr,
    :doctyp, :docst, :docnr, :clid, :clid2, :descr,
    :summ, :pvn, :zu, :tpl
  do
    suspend;
end^


ALTER PROCEDURE SP_F_DIFF_02 (
    PDOCID INTEGER)
RETURNS (
    IDL TYPE OF COLUMN F_LOPS.IDL,
    DOCID TYPE OF COLUMN F_LOPS.DOCID,
    ID TYPE OF COLUMN F_LOPS.ID,
    DTL TYPE OF COLUMN F_LOPS.DTL,
    DTLD TYPE OF COLUMN F_LOPS.DTLD,
    ODT TYPE OF COLUMN F_LOPS.ODT,
    USL TYPE OF COLUMN F_LOPS.USL,
    AC11 TYPE OF COLUMN F_LOPS.AC11,
    AC12 TYPE OF COLUMN F_LOPS.AC12,
    AC13 TYPE OF COLUMN F_LOPS.AC13,
    AC14 TYPE OF COLUMN F_LOPS.AC14,
    AC15 TYPE OF COLUMN F_LOPS.AC15,
    AC21 TYPE OF COLUMN F_LOPS.AC21,
    AC22 TYPE OF COLUMN F_LOPS.AC22,
    AC23 TYPE OF COLUMN F_LOPS.AC23,
    AC24 TYPE OF COLUMN F_LOPS.AC24,
    AC25 TYPE OF COLUMN F_LOPS.AC25,
    SUMMC TYPE OF COLUMN F_LOPS.SUMMC,
    CUR TYPE OF COLUMN F_LOPS.CUR,
    SUMM TYPE OF COLUMN F_LOPS.SUMM,
    QV TYPE OF COLUMN F_LOPS.QV,
    TPL INTEGER)
AS
begin
  for select *
  from
  (
    select
        idl, docid, id, dtl, dtld, odt, usl,
        ac11, ac12, ac13, ac14, ac15,
        ac21, ac22, ac23, ac24, ac25,
        summc, cur, summ, qv, 1 as tpl
    from f_lops
    where docid = :pdocid

    union all

    select
        -9999999 + id as idl, docid, id, null as dtl,
        null as dtld, zdt as odt, null as usl,
        ac11, ac12, ac13, ac14, ac15,
        ac21, ac22, ac23, ac24, ac25,
        summc, cur, summ, qv, 2 as tpl
    from f_ops
    where docid = :pdocid

  )
  into
    :idl, :docid, :id, :dtl, :dtld, :odt, :usl,
    :ac11, :ac12, :ac13, :ac14, :ac15,
    :ac21, :ac22, :ac23, :ac24, :ac25,
    :summc, :cur, :summ, :qv, :tpl
  do
    suspend;
end^


ALTER PROCEDURE SP_F_DIFF_11 (
    PDATE1 DATE,
    PDATE2 DATE,
    PDATE3 DATE)
RETURNS (
    IDL1 TYPE OF COLUMN F_LOPSD.IDL,
    IDL2 TYPE OF COLUMN F_LOPS.IDL,
    DOCID TYPE OF COLUMN F_LOPSD.ID,
    ROWID TYPE OF COLUMN F_LOPS.ID)
AS
begin
    for select distinct
        idl1, idl2, docid, rowid
    from
    (
        select
            T3.idl as idl1,
            T4.idl as idl2,
            T3.id as docid,
            T4.id as rowid
        from
        (
            select T1.idl, T1.id
            from f_lopsd as T1
            where
                T1.dete between :pdate1 and :pdate2 and
                T1.odt < :pdate3 and
                not exists (
                    select idl
                    from f_lopsd as T2
                    where
                        T2.id = T1.id and
                        T2.odt < :pdate3 and
                        (T2.odt > T1.odt or
                        T2.odt = T1.odt and
                        T2.idl > T1.idl)
                )
        ) as T3
        join f_lops as T4
        on T3.id = T4.docid and
            T4.odt < :pdate3 and
            not exists (
                select idl
                from f_lops as T5
                where
                    T5.id = T4.id and
                    T5.odt < :pdate3 and
                    (T5.odt > T4.odt or
                    T5.odt = T4.odt and
                    T5.idl > T4.idl)
                    
            )

        union all

        select
            T4.idl as idl1,
            null as idl2,
            T4.id as docid,
            T5.id as rowid
        from
        (
            select T1.idl, T1.id
            from f_lopsd as T1
            where
                T1.dete between :pdate1 and :pdate2 and
                T1.odt < :pdate3 and
                not exists (
                    select idl
                    from f_lopsd as T2
                    where
                        T2.id = T1.id and
                        T2.odt < :pdate3 and
                        (T2.odt > T1.odt or
                        T2.odt = T1.odt and
                        T2.idl > T1.idl)
                )
                and not exists (
                    select idl
                    from f_lops as T3
                    where T3.docid = T1.id
                )
        ) as T4
        join f_ops as T5
        on T5.id = T4.id and
            T5.zdt < :pdate3
    )
    into
        :idl1, :idl2, :docid, :rowid
    do
    suspend;
end^


ALTER PROCEDURE SP_F_DIFF_12 (
    PDATE1 DATE,
    PDATE2 DATE,
    PDATE3 DATE,
    PCLID VARCHAR(15),
    PAC1 VARCHAR(8),
    PAC2 VARCHAR(8),
    PAC3 VARCHAR(5),
    PAC4 VARCHAR(8),
    PAC5 VARCHAR(5))
RETURNS (
    TP INTEGER,
    DOCID TYPE OF COLUMN F_OPS.DOCID,
    ROWID TYPE OF COLUMN F_OPS.ID,
    DOCDTL TIMESTAMP,
    DOCDTLD TIMESTAMP,
    DOCODT TIMESTAMP,
    ROWDTL TIMESTAMP,
    ROWDTLD TIMESTAMP,
    ROWODT TIMESTAMP,
    DETE TYPE OF COLUMN F_OPSD.DETE,
    ZNR TYPE OF COLUMN F_OPSD.ZNR,
    NRX TYPE OF COLUMN F_OPSD.NRX,
    DOCTYP TYPE OF COLUMN F_OPSD.DOCTYP,
    DOCST TYPE OF COLUMN F_OPSD.DOCST,
    DOCNR TYPE OF COLUMN F_OPSD.DOCNR,
    DOCTYP2 TYPE OF COLUMN F_DOCTYP.ID1,
    CLID TYPE OF COLUMN F_OPSD.CLID,
    CLID2 TYPE OF COLUMN F_OPSD.CLID2,
    DESCR TYPE OF COLUMN F_OPSD.DESCR,
    DOCSUMM TYPE OF COLUMN F_OPSD.SUMM,
    DOCPVN TYPE OF COLUMN F_OPSD.PVN,
    AC11 TYPE OF COLUMN F_OPS.AC11,
    AC12 TYPE OF COLUMN F_OPS.AC12,
    AC13 TYPE OF COLUMN F_OPS.AC13,
    AC14 TYPE OF COLUMN F_OPS.AC14,
    AC15 TYPE OF COLUMN F_OPS.AC15,
    AC21 TYPE OF COLUMN F_OPS.AC21,
    AC22 TYPE OF COLUMN F_OPS.AC22,
    AC23 TYPE OF COLUMN F_OPS.AC23,
    AC24 TYPE OF COLUMN F_OPS.AC24,
    AC25 TYPE OF COLUMN F_OPS.AC25,
    SUMMC TYPE OF COLUMN F_OPS.SUMMC,
    CUR TYPE OF COLUMN F_OPS.CUR,
    SUMM TYPE OF COLUMN F_OPS.SUMM,
    QV TYPE OF COLUMN F_OPS.QV,
    DESCR2 TYPE OF COLUMN F_OPS.DESCR)
AS
begin

    insert into
    f_ttemp_diff2(idl1, idl2, docid, rowid)
    select distinct idl1, idl2, docid, rowid
    from sp_f_diff_11(:pdate1, :pdate2, :pdate3) as T1
    where exists (
        select idl
        from f_lopsd
        where
            T1.docid = f_lopsd.id and
            f_lopsd.dtld > :pdate3

        union all

        select idl
        from f_lops
        where
            T1.rowid = f_lops.id and
            f_lops.dtld > :pdate3

        union all

        select id
        from f_opsd
        where
            T1.docid = f_opsd.id and
            f_opsd.zdt > :pdate3

        union all

        select id
        from f_ops
        where
            T1.rowid = f_ops.id and
            f_ops.zdt > :pdate3
    );

    for select distinct *
    from
    (
        select
            1 as tp,
            f_lops.docid, f_lops.id as rowid,
            f_lopsd.zdt as docdtl, f_lopsd.dtld as docdtld, f_lopsd.odt as docodt,
            f_lops.dtl as rowdtl, f_lops.dtld as rowdtld, f_lops.odt as rowodt,
            f_lopsd.dete, f_lopsd.znr, f_lopsd.nrx,
            f_lopsd.doctyp, f_lopsd.docst, f_lopsd.docnr,
            f_lopsd.clid, f_lopsd.clid2, f_lopsd.descr, 
            f_lopsd.summ as docsumm, f_lopsd.pvn as docpvn, 
            f_lops.ac11,  f_lops.ac12, f_lops.ac13, f_lops.ac14, f_lops.ac15,
            f_lops.ac21,  f_lops.ac22, f_lops.ac23, f_lops.ac24, f_lops.ac25,
            f_lops.summc, f_lops.cur, f_lops.summ, f_lops.qv, null as descr2
    
        from f_ttemp_diff2 as T1
        join f_lopsd on T1.idl1 = f_lopsd.idl
        join f_lops on T1.idl2 = f_lops.idl
        where
            (:pclid is null or :pclid = f_lopsd.clid) and
            (:pac1 is null or :pac1 = f_lops.ac11 or :pac1 = f_lops.ac21) and
            (:pac2 is null or :pac2 = f_lops.ac12 or :pac2 = f_lops.ac22) and
            (:pac3 is null or :pac3 = f_lops.ac13 or :pac3 = f_lops.ac23) and
            (:pac4 is null or :pac4 = f_lops.ac14 or :pac4 = f_lops.ac24) and
            (:pac5 is null or :pac5 = f_lops.ac15 or :pac5 = f_lops.ac25)

    union all

        select
            1 as tp,
            f_lops.docid, f_lops.id as rowid,
            f_lopsd.zdt as docdtl, f_lopsd.dtld as docdtld, f_lopsd.odt as docodt,
            f_lops.dtl as rowdtl, f_lops.dtld as rowdtld, f_lops.odt as rowodt,
            f_lopsd.dete, f_lopsd.znr, f_lopsd.nrx,
            f_lopsd.doctyp, f_lopsd.docst, f_lopsd.docnr,
            f_lopsd.clid, f_lopsd.clid2, f_lopsd.descr, 
            f_lopsd.summ as docsumm, f_lopsd.pvn as docpvn, 
            f_lops.ac11,  f_lops.ac12, f_lops.ac13, f_lops.ac14, f_lops.ac15,
            f_lops.ac21,  f_lops.ac22, f_lops.ac23, f_lops.ac24, f_lops.ac25,
            f_lops.summc, f_lops.cur, f_lops.summ, f_lops.qv, null as descr2

        from f_ttemp_diff2 as T1
        join f_lopsd on T1.idl1 = f_lopsd.idl
        join f_lops on T1.idl2 = f_lops.idl
        join f_ops on T1.rowid = f_ops.id
        join f_opsd on f_ops.docid = f_opsd.id
        where
            (not (
                (:pclid is null or :pclid = f_lopsd.clid) and
                (:pac1 is null or :pac1 = f_lops.ac11 or :pac1 = f_lops.ac21) and
                (:pac2 is null or :pac2 = f_lops.ac12 or :pac2 = f_lops.ac22) and
                (:pac3 is null or :pac3 = f_lops.ac13 or :pac3 = f_lops.ac23) and
                (:pac4 is null or :pac4 = f_lops.ac14 or :pac4 = f_lops.ac24) and
                (:pac5 is null or :pac5 = f_lops.ac15 or :pac5 = f_lops.ac25)
            )) and (
                (:pclid is null or :pclid = f_opsd.clid) and
                (:pac1 is null or :pac1 = f_ops.ac11 or :pac1 = f_ops.ac21) and
                (:pac2 is null or :pac2 = f_ops.ac12 or :pac2 = f_ops.ac22) and
                (:pac3 is null or :pac3 = f_ops.ac13 or :pac3 = f_ops.ac23) and
                (:pac4 is null or :pac4 = f_ops.ac14 or :pac4 = f_ops.ac24) and
                (:pac5 is null or :pac5 = f_ops.ac15 or :pac5 = f_ops.ac25)
            )

    union all

        select
            2 as tp,
            f_ops.docid, f_ops.id as rowid,
            null as docdtl, null as docdtld, f_opsd.zdt as docodt,
            null as rowdtl, null as rowdtld, f_ops.zdt as rowodt,
            f_opsd.dete, f_opsd.znr, f_opsd.nrx,
            f_opsd.doctyp, f_opsd.docst, f_opsd.docnr,
            f_opsd.clid, f_opsd.clid2, f_opsd.descr,
            f_opsd.summ as docsumm, f_opsd.pvn as docpvn,
            f_ops.ac11,  f_ops.ac12, f_ops.ac13, f_ops.ac14, f_ops.ac15,
            f_ops.ac21,  f_ops.ac22, f_ops.ac23, f_ops.ac24, f_ops.ac25,
            f_ops.summc, f_ops.cur, f_ops.summ, f_ops.qv, f_ops.descr as descr2
    
        from f_ttemp_diff2 as T1
        join f_lopsd on T1.idl1 = f_lopsd.idl
        join f_lops on T1.idl2 = f_lops.idl
        join f_ops on T1.rowid = f_ops.id
        join f_opsd on f_ops.docid = f_opsd.id
        where
            (
                (:pclid is null or :pclid = f_lopsd.clid) and
                (:pac1 is null or :pac1 = f_lops.ac11 or :pac1 = f_lops.ac21) and
                (:pac2 is null or :pac2 = f_lops.ac12 or :pac2 = f_lops.ac22) and
                (:pac3 is null or :pac3 = f_lops.ac13 or :pac3 = f_lops.ac23) and
                (:pac4 is null or :pac4 = f_lops.ac14 or :pac4 = f_lops.ac24) and
                (:pac5 is null or :pac5 = f_lops.ac15 or :pac5 = f_lops.ac25)
            ) or (
                (:pclid is null or :pclid = f_opsd.clid) and
                (:pac1 is null or :pac1 = f_ops.ac11 or :pac1 = f_ops.ac21) and
                (:pac2 is null or :pac2 = f_ops.ac12 or :pac2 = f_ops.ac22) and
                (:pac3 is null or :pac3 = f_ops.ac13 or :pac3 = f_ops.ac23) and
                (:pac4 is null or :pac4 = f_ops.ac14 or :pac4 = f_ops.ac24) and
                (:pac5 is null or :pac5 = f_ops.ac15 or :pac5 = f_ops.ac25)
            )     

    union all

        select
            3 as tp,
            f_lops.docid, f_lops.id as rowid,
            f_lopsd.zdt as docdtl, f_lopsd.dtld as docdtld, f_lopsd.odt as docodt,
            f_lops.dtl as rowdtl, f_lops.dtld as rowdtld, f_lops.odt as rowodt,
            f_lopsd.dete, f_lopsd.znr, f_lopsd.nrx,
            f_lopsd.doctyp, f_lopsd.docst, f_lopsd.docnr,
            f_lopsd.clid, f_lopsd.clid2, f_lopsd.descr, 
            f_lopsd.summ as docsumm, f_lopsd.pvn as docpvn, 
            f_lops.ac11,  f_lops.ac12, f_lops.ac13, f_lops.ac14, f_lops.ac15,
            f_lops.ac21,  f_lops.ac22, f_lops.ac23, f_lops.ac24, f_lops.ac25,
            f_lops.summc, f_lops.cur, f_lops.summ, f_lops.qv, null as descr2

        from f_ttemp_diff2 as T1
        join f_lopsd on T1.idl1 = f_lopsd.idl
        join f_lops on T1.idl2 = f_lops.idl
        join f_lops as f_lops2 on T1.rowid = f_lops2.id and f_lops2.dtld > :pdate3
        join f_lopsd as f_lopsd2 on f_lopsd2.id = f_lops2.docid and
            not exists(
                select idl
                from f_lopsd as f_lopsd3
                where f_lopsd2.id = f_lopsd3.id and f_lopsd3.zdt > f_lopsd2.dtld
            )
        where
            (
                (:pclid is null or :pclid = f_lopsd.clid) and
                (:pac1 is null or :pac1 = f_lops.ac11 or :pac1 = f_lops.ac21) and
                (:pac2 is null or :pac2 = f_lops.ac12 or :pac2 = f_lops.ac22) and
                (:pac3 is null or :pac3 = f_lops.ac13 or :pac3 = f_lops.ac23) and
                (:pac4 is null or :pac4 = f_lops.ac14 or :pac4 = f_lops.ac24) and
                (:pac5 is null or :pac5 = f_lops.ac15 or :pac5 = f_lops.ac25)
            ) or (
                (:pclid is null or :pclid = f_lopsd2.clid) and
                (:pac1 is null or :pac1 = f_lops2.ac11 or :pac1 = f_lops2.ac21) and
                (:pac2 is null or :pac2 = f_lops2.ac12 or :pac2 = f_lops2.ac22) and
                (:pac3 is null or :pac3 = f_lops2.ac13 or :pac3 = f_lops2.ac23) and
                (:pac4 is null or :pac4 = f_lops2.ac14 or :pac4 = f_lops2.ac24) and
                (:pac5 is null or :pac5 = f_lops2.ac15 or :pac5 = f_lops2.ac25)
            )

    union all

        select
            4 as tp,
            f_ops.docid, f_ops.id as rowid,
            null as docdtl, null as docdtld, f_opsd.zdt as docodt,
            null as rowdtl, null as rowdtld, f_ops.zdt as rowodt,
            f_opsd.dete, f_opsd.znr, f_opsd.nrx,
            f_opsd.doctyp, f_opsd.docst, f_opsd.docnr,
            f_opsd.clid, f_opsd.clid2, f_opsd.descr,
            f_opsd.summ as docsumm, f_opsd.pvn as docpvn,
            f_ops.ac11,  f_ops.ac12, f_ops.ac13, f_ops.ac14, f_ops.ac15,
            f_ops.ac21,  f_ops.ac22, f_ops.ac23, f_ops.ac24, f_ops.ac25,
            f_ops.summc, f_ops.cur, f_ops.summ, f_ops.qv, f_ops.descr as descr2
    
        from
            f_opsd join f_ops
            on
                f_ops.docid = f_opsd.id and
                f_opsd.dete between :pdate1 and :pdate2 and
                f_opsd.zdt > :pdate3
            left join f_ttemp_diff2 as T1
            on f_ops.id = T1.rowid
        where
            T1.idl1 is null and
            (:pclid is null or :pclid = f_opsd.clid) and
            (:pac1 is null or :pac1 = f_ops.ac11 or :pac1 = f_ops.ac21) and
            (:pac2 is null or :pac2 = f_ops.ac12 or :pac2 = f_ops.ac22) and
            (:pac3 is null or :pac3 = f_ops.ac13 or :pac3 = f_ops.ac23) and
            (:pac4 is null or :pac4 = f_ops.ac14 or :pac4 = f_ops.ac24) and
            (:pac5 is null or :pac5 = f_ops.ac15 or :pac5 = f_ops.ac25)

    union all

        select
            5 as tp,
            f_ops.docid, f_ops.id as rowid,
            f_lopsd.zdt as docdtl, f_lopsd.dtld as docdtld, f_lopsd.odt as docodt,
            null as rowdtl, null as rowdtld, f_ops.zdt as rowodt,
            f_lopsd.dete, f_lopsd.znr, f_lopsd.nrx,
            f_lopsd.doctyp, f_lopsd.docst, f_lopsd.docnr,
            f_lopsd.clid, f_lopsd.clid2, f_lopsd.descr, 
            f_lopsd.summ as docsumm, f_lopsd.pvn as docpvn, 
            f_ops.ac11,  f_ops.ac12, f_ops.ac13, f_ops.ac14, f_ops.ac15,
            f_ops.ac21,  f_ops.ac22, f_ops.ac23, f_ops.ac24, f_ops.ac25,
            f_ops.summc, f_ops.cur, f_ops.summ, f_ops.qv, f_ops.descr as descr2

        from f_ttemp_diff2 as T1
        join f_lopsd on T1.idl1 = f_lopsd.idl and T1.idl2 = null
        join f_ops on T1.rowid = f_ops.id
        join f_opsd on f_ops.docid = f_opsd.id
        where
            (
                (:pclid is null or :pclid = f_lopsd.clid)
            ) or (
                (:pclid is null or :pclid = f_opsd.clid) and
                (:pac1 is null or :pac1 = f_ops.ac11 or :pac1 = f_ops.ac21) and
                (:pac2 is null or :pac2 = f_ops.ac12 or :pac2 = f_ops.ac22) and
                (:pac3 is null or :pac3 = f_ops.ac13 or :pac3 = f_ops.ac23) and
                (:pac4 is null or :pac4 = f_ops.ac14 or :pac4 = f_ops.ac24) and
                (:pac5 is null or :pac5 = f_ops.ac15 or :pac5 = f_ops.ac25)
            )


    )
    order by docid, rowid, tp, iif(rowodt > docodt, docodt, rowodt)
    into
        :tp, :docid, :rowid,
        :docdtl, :docdtld, :docodt,
        :rowdtl, :rowdtld, :rowodt,
        :dete, :znr, :nrx, 
        :doctyp, :docst, :docnr,
        :clid, :clid2, :descr, 
        :docsumm, :docpvn,
        :ac11, :ac12, :ac13, :ac14, :ac15, 
        :ac21, :ac22, :ac23, :ac24, :ac25,
        :summc, :cur, :summ, :qv, :descr2

    do
    suspend;
end^


ALTER PROCEDURE SP_F_DOCS0_ID
RETURNS (
    NEXTID INTEGER)
AS
begin
    nextid = GEN_ID("GEN_F_DOCS0_ID",1);
    suspend;
end^


ALTER PROCEDURE SP_F_FIXLOPSODT
AS
declare variable vidl integer;
    declare variable viddoc integer;
    declare variable vidrow integer;
    declare variable vpid integer;
    declare variable vdt timestamp;
    declare variable vdt2 timestamp;
    declare variable vpdt timestamp;
    declare variable vodt timestamp;
begin
    vpid = null;
    vpdt = null;

    for select idl, id, docid, adt, odt
    from
    (
        select idl, id, docid, iif(dtld is null, dtl, dtld) as adt, odt
        from f_lops
    ) as T1
    order by id, adt
    into :vidl, :vidrow, :viddoc, :vdt, :vodt
    do
    begin
        if (vpid is null or vpid <> vidrow) then begin

            vpid = vidrow;
            vpdt = vdt;

            if (vodt is null) then begin

                vdt2 = null;

                select min(iif(dtld is null, zdt, dtld))
                from f_lopsd
                where id = :viddoc
                into :vdt2;

                if (vdt2 is not null) then begin

                    select first 1 dete
                    from f_lopsd
                    where id = :viddoc and :vdt2 = (iif(dtld is null, zdt, dtld))
                    order by idl
                    into :vdt2;

               end else begin

                    select dete
                    from f_opsd
                    where f_opsd.id = :viddoc
                    into :vdt2;

               end

               update f_lops set odt = :vdt2 where idl = :vidl;

            end
        end else begin

            if (:vpdt is not null) then begin
               update f_lops set odt = :vpdt where idl = :vidl;
            end

            vpdt = vdt;

        end
    end

    vpid = null;
    vpdt = null;

    for select idl, id, adt, dete, odt
    from
    (
        select idl, id, iif(dtld is null, zdt, dtld) as adt, dete, odt
        from f_lopsd
    ) as T1
    order by id, adt
    into :vidl, :viddoc, :vdt, :vdt2, :vodt
    do
    begin
        if (vpid is null or vpid <> viddoc) then begin

            vpid = viddoc;
            vpdt = vdt;

            if (vodt is null) then begin

               vdt = vdt2;
               update f_lopsd set odt = :vdt2 where idl = :vidl;

            end

        end else begin

            if (:vpdt is not null) then begin
               update f_lopsd set odt = :vpdt where idl = :vidl;
            end

            vpdt = vdt;

        end
    end


end^


ALTER PROCEDURE SP_F_FIXOPSDATES
AS
declare variable vid integer;
    declare variable vzdt timestamp;
begin
    for select f_ops.id, f_opsd.zdt
    from f_ops join f_opsd
    on f_ops.docid = f_opsd.id and f_ops.zdt is null
    into :vid, :vzdt
    do
    begin
        update f_ops
        set f_ops.zdt = :vzdt
        where f_ops.id = :vid and f_ops.zdt is null;
    end
end^


ALTER PROCEDURE SP_F_LINKEDDOCS_1 (
    PSD DATE,
    PED DATE,
    PCLID VARCHAR(15),
    PDOCNR VARCHAR(15))
RETURNS (
    ID INTEGER,
    DETE DATE,
    CLID VARCHAR(15),
    DOCTYP VARCHAR(10),
    DOCST VARCHAR(6),
    DOCNR VARCHAR(15),
    DESCR VARCHAR(80),
    SUMM NUMERIC(15,4),
    PVN NUMERIC(15,4))
AS
declare variable k integer;
begin
    k = GEN_ID("GEN_F_OPSD_ID",0) + 1;

    FOR SELECT
        ID,
        DETE,
        clid,
        (DocTyp),
        DocSt,
        DocNr,
        Descr,
        Summ,
        PVN
    FROM
    (
        SELECT
            NULL AS ID,
            DETE,
            F_DOCS0.clid,
            F_DOCS0.DocTyp,
            F_DOCS0.DocSt,
            F_DOCS0.DocNr,
            F_DOCS0.Descr,
            CASE WHEN F_DOCS0.ac STARTING WITH '2'
                THEN summ
                ELSE -summ
            END AS Summ,
            CASE WHEN F_DOCS0.ac STARTING WITH '2'
                THEN pvn
                ELSE -pvn
            END AS PVN
        FROM F_DOCS0
        WHERE
            F_DOCS0.ClId = :PCLID AND
            (:PDOCNR is null OR F_DOCS0.DocNr = :PDOCNR)

        UNION ALL
    
        SELECT
            f_opsd.id,
            f_opsd.DETE,
            f_opsd.clid,
            f_opsd.DocTyp,
            f_opsd.DocSt,
            f_opsd.DocNr,
            f_opsd.Descr,
            CASE WHEN AP1 = 1 OR AP2 = 1
                THEN -F_OPSd.Summ
                ELSE F_OPSd.Summ
            END AS Summ,
            CASE WHEN AP1 = 1 OR AP2 = 1
                THEN -F_OPSd.PVN
                ELSE F_OPSd.PVN
            END AS PVN
        FROM
        (
            SELECT 
                F_OPSd.id, 
                MAX(CASE WHEN AcP21_1.AC IS NULL THEN 0 ELSE 1 END) AS AP1,
                MAX(CASE WHEN AcP21_2.AC IS NULL THEN 0 ELSE 1 END) AS AP2
            FROM
                F_OPS INNER JOIN F_OPSd ON F_OPSd.id = F_OPS.DocId
                LEFT JOIN F_AcP21 AS AcP21_1 ON F_OPS.AC11 = AcP21_1.AC AND AcP21_1.id1 IN ('KA','BA','CN')
                LEFT JOIN F_AcP21 AS AcP21_2 ON F_OPS.AC21 = AcP21_2.AC AND AcP21_2.id1 IN ('KA','BA','CN')
            WHERE
                F_OPSd.DETE BETWEEN :PSD AND :PED AND
                f_opsd.ClId = :PCLID AND
                (:PDOCNR is null OR f_opsd.DocNr = :PDOCNR)
            GROUP BY F_OPSd.id
        ) AS T1 
        INNER JOIN F_OPSd ON T1.id = F_OPSd.id

    )
    order by DETE

    INTO :ID, :DETE, :clid, :doctyp, :docst, :docnr, :descr, :summ, :pvn
    do
    begin
        if (ID is null) then
        begin
            ID = k;
            k = k + 1;
        end
        suspend;
    end
end^


ALTER PROCEDURE SP_F_LINKEDDOCS_2 (
    PSD DATE,
    PED DATE,
    PCLID VARCHAR(15),
    PDOCNR VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN F_OPS.ID,
    DOCID TYPE OF COLUMN F_OPS.DOCID,
    DESCR TYPE OF COLUMN F_OPS.DESCR,
    AC11 TYPE OF COLUMN F_OPS.AC11,
    AC12 TYPE OF COLUMN F_OPS.AC12,
    AC13 TYPE OF COLUMN F_OPS.AC13,
    AC14 TYPE OF COLUMN F_OPS.AC14,
    AC15 TYPE OF COLUMN F_OPS.AC15,
    AC21 TYPE OF COLUMN F_OPS.AC21,
    AC22 TYPE OF COLUMN F_OPS.AC22,
    AC23 TYPE OF COLUMN F_OPS.AC23,
    AC24 TYPE OF COLUMN F_OPS.AC24,
    AC25 TYPE OF COLUMN F_OPS.AC25,
    SUMMC TYPE OF COLUMN F_OPS.SUMMC,
    CUR TYPE OF COLUMN F_OPS.CUR,
    SUMM TYPE OF COLUMN F_OPS.SUMM,
    QV TYPE OF COLUMN F_OPS.QV,
    NL TYPE OF COLUMN F_OPS.NL,
    ZDT TYPE OF COLUMN F_OPS.ZDT)
AS
begin
  for select f_ops.id,
             f_ops.docid,
             f_ops.descr,
             f_ops.ac11,
             f_ops.ac12,
             f_ops.ac13,
             f_ops.ac14,
             f_ops.ac15,
             f_ops.ac21,
             f_ops.ac22,
             f_ops.ac23,
             f_ops.ac24,
             f_ops.ac25,
             f_ops.summc,
             f_ops.cur,
             f_ops.summ,
             f_ops.qv,
             f_ops.nl,
             f_ops.zdt

      FROM F_OPSd INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
      WHERE
        f_opsd.DETE BETWEEN :PSD AND :PED AND
        ClId = :PCLID AND
        (:PDOCNR is null OR f_opsd.DocNr = :PDOCNR)
      ORDER BY F_OPSd.DETE, F_OPS.id
      into :id,
           :docid,
           :descr,
           :ac11,
           :ac12,
           :ac13,
           :ac14,
           :ac15,
           :ac21,
           :ac22,
           :ac23,
           :ac24,
           :ac25,
           :summc,
           :cur,
           :summ,
           :qv,
           :nl,
           :zdt
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_F_OPS_DELETE (
    ORIGINAL_ID INTEGER,
    ORIGINAL_DOCID INTEGER,
    ISNULL_DESCR INTEGER,
    ORIGINAL_DESCR VARCHAR(50),
    ORIGINAL_AC11 VARCHAR(8),
    ISNULL_AC12 INTEGER,
    ORIGINAL_AC12 VARCHAR(8),
    ISNULL_AC13 INTEGER,
    ORIGINAL_AC13 VARCHAR(5),
    ISNULL_AC14 INTEGER,
    ORIGINAL_AC14 VARCHAR(8),
    ISNULL_AC15 INTEGER,
    ORIGINAL_AC15 VARCHAR(5),
    ORIGINAL_AC21 VARCHAR(8),
    ISNULL_AC22 INTEGER,
    ORIGINAL_AC22 VARCHAR(8),
    ISNULL_AC23 INTEGER,
    ORIGINAL_AC23 VARCHAR(5),
    ISNULL_AC24 INTEGER,
    ORIGINAL_AC24 VARCHAR(8),
    ISNULL_AC25 INTEGER,
    ORIGINAL_AC25 VARCHAR(5),
    ORIGINAL_SUMMC NUMERIC(15,4),
    ORIGINAL_CUR VARCHAR(3),
    ORIGINAL_SUMM NUMERIC(15,4),
    ISNULL_QV INTEGER,
    ORIGINAL_QV FLOAT,
    ISNULL_ZDT INTEGER,
    ORIGINAL_ZDT TIMESTAMP)
AS
declare variable VUSER varchar(50);
    declare variable O_ZDT timestamp;
begin

    DELETE FROM F_OPS
    WHERE (
        (id = :Original_id) AND
        (DocId = :Original_DocId) AND
        ((:IsNull_Descr = 1 AND Descr IS NULL) OR (Descr = :Original_Descr)) AND
        (AC11 = :Original_AC11) AND
        ((:IsNull_AC12 = 1 AND AC12 IS NULL) OR (AC12 = :Original_AC12)) AND
        ((:IsNull_AC13 = 1 AND AC13 IS NULL) OR (AC13 = :Original_AC13)) AND
        ((:IsNull_AC14 = 1 AND AC14 IS NULL) OR (AC14 = :Original_AC14)) AND
        ((:IsNull_AC15 = 1 AND AC15 IS NULL) OR (AC15 = :Original_AC15)) AND
        (AC21 = :Original_AC21) AND
        ((:IsNull_AC22 = 1 AND AC22 IS NULL) OR (AC22 = :Original_AC22)) AND
        ((:IsNull_AC23 = 1 AND AC23 IS NULL) OR (AC23 = :Original_AC23)) AND
        ((:IsNull_AC24 = 1 AND AC24 IS NULL) OR (AC24 = :Original_AC24)) AND
        ((:IsNull_AC25 = 1 AND AC25 IS NULL) OR (AC25 = :Original_AC25)) AND
        (SummC = :Original_SummC) AND
        (Cur = :Original_Cur) AND
        (Summ = :Original_Summ) AND
        ((:IsNull_QV = 1 AND QV IS NULL) OR (QV = :Original_QV))
    );

    O_ZDt = :Original_ZDt;
    IF (:IsNull_ZDt = 1) THEN
    BEGIN
        O_ZDt = null;
    END

    VUSER = rdb$get_context('USER_SESSION', 'UserName');
    if(VUSER is null) then VUSER = User;

     execute procedure sp_f_ops_delete_log(
        :Original_id,
        :vuser,
        :Original_DocId, 
        :Original_AC11, 
        :Original_AC12, 
        :Original_AC13, 
        :Original_AC14, 
        :Original_AC15, 
        :Original_AC21, 
        :Original_AC22, 
        :Original_AC23, 
        :Original_AC24, 
        :Original_AC25, 
        :Original_SummC, 
        :Original_Cur, 
        :Original_Summ, 
        :Original_QV,
        :O_ZDt);

end^


ALTER PROCEDURE SP_F_OPS_DELETE_LOG (
    ID INTEGER,
    USR VARCHAR(15),
    ORIGINAL_DOCID INTEGER,
    ORIGINAL_AC11 VARCHAR(8),
    ORIGINAL_AC12 VARCHAR(8),
    ORIGINAL_AC13 VARCHAR(5),
    ORIGINAL_AC14 VARCHAR(8),
    ORIGINAL_AC15 VARCHAR(5),
    ORIGINAL_AC21 VARCHAR(8),
    ORIGINAL_AC22 VARCHAR(8),
    ORIGINAL_AC23 VARCHAR(5),
    ORIGINAL_AC24 VARCHAR(8),
    ORIGINAL_AC25 VARCHAR(5),
    ORIGINAL_SUMMC NUMERIC(15,4),
    ORIGINAL_CUR VARCHAR(3),
    ORIGINAL_SUMM NUMERIC(15,4),
    ORIGINAL_QV FLOAT,
    ORIGINAL_ZDT TIMESTAMP)
AS
DECLARE idl INT;
    DECLARE now timestamp;
    DECLARE xdt timestamp;
BEGIN
    now = localtimestamp(0);
    xdt = dateadd(-1 hour to now);

    IF (:Original_ZDt IS NULL OR :Original_ZDt < xdt)
    THEN BEGIN
        INSERT INTO F_LOPS 
            (dtl, dtld, usl, id, DocId,
            AC11, AC12, AC13, AC14, AC15,
            AC21, AC22, AC23, AC24, AC25,
            SummC, Cur, Summ, QV, ODT)
        VALUES 
        (
            :now,
            :now,
            :Usr,
            :id,
            :Original_DocId, 
            :Original_AC11,
            :Original_AC12, 
            :Original_AC13, 
            :Original_AC14, 
            :Original_AC15, 
            :Original_AC21, 
            :Original_AC22, 
            :Original_AC23, 
            :Original_AC24, 
            :Original_AC25, 
            :Original_SummC, 
            :Original_Cur, 
            :Original_Summ, 
            :Original_QV,
            :ORIGINAL_ZDT
        );
    END
    ELSE BEGIN

        UPDATE F_LOPS
        SET 
            dtld = :now
        WHERE F_LOPS.id = :id;

    END
END^


ALTER PROCEDURE SP_F_OPS_FILTER_AND (
    PDATE1 DATE,
    PDATE2 DATE,
    PTEXT VARCHAR(50),
    PCLID VARCHAR(15),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PDOCGR VARCHAR(10))
RETURNS (
    ID TYPE OF COLUMN F_OPS.ID,
    DOCID TYPE OF COLUMN F_OPS.DOCID,
    DESCR TYPE OF COLUMN F_OPS.DESCR,
    AC11 TYPE OF COLUMN F_OPS.AC11,
    AC12 TYPE OF COLUMN F_OPS.AC12,
    AC13 TYPE OF COLUMN F_OPS.AC13,
    AC14 TYPE OF COLUMN F_OPS.AC14,
    AC15 TYPE OF COLUMN F_OPS.AC15,
    AC21 TYPE OF COLUMN F_OPS.AC21,
    AC22 TYPE OF COLUMN F_OPS.AC22,
    AC23 TYPE OF COLUMN F_OPS.AC23,
    AC24 TYPE OF COLUMN F_OPS.AC24,
    AC25 TYPE OF COLUMN F_OPS.AC25,
    SUMMC TYPE OF COLUMN F_OPS.SUMMC,
    CUR TYPE OF COLUMN F_OPS.CUR,
    SUMM TYPE OF COLUMN F_OPS.SUMM,
    QV TYPE OF COLUMN F_OPS.QV,
    NL TYPE OF COLUMN F_OPS.NL,
    ZDT TYPE OF COLUMN F_OPS.ZDT)
AS
begin
    if
    (
        pac11 is null and
        pac12 is null and
        pac13 is null and
        pac14 is null and
        pac15 is null and
        pac21 is null and
        pac22 is null and
        pac23 is null and
        pac24 is null and
        pac25 is null

    )
    then begin
        for select f_ops.id,
                 f_ops.docid,
                 f_ops.descr,
                 f_ops.ac11,
                 f_ops.ac12,
                 f_ops.ac13,
                 f_ops.ac14,
                 f_ops.ac15,
                 f_ops.ac21,
                 f_ops.ac22,
                 f_ops.ac23,
                 f_ops.ac24,
                 f_ops.ac25,
                 f_ops.summc,
                 f_ops.cur,
                 f_ops.summ,
                 f_ops.qv,
                 f_ops.nl,
                 f_ops.zdt
        
          FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId

          WHERE
            (:pdate1 IS NULL OR f_opsd.DETE >= :pdate1) AND
            (:pdate2 IS NULL OR f_opsd.DETE <= :pdate2) AND
            (:pclid IS NULL OR ClId = :pclid OR ClId2 = :pclid) AND
            (:ptext IS NULL OR F_OPSd.Descr LIKE :ptext)  AND
            (
                :PDOCGR IS NULL OR EXISTS(
                    SELECT DTA.ID
                    FROM f_doctypb AS DTB inner join f_doctypa AS DTA on DTB.ida = DTA.id
                    WHERE DTB.ID = F_OPSD.doctyp AND DTA.ID = :PDOCGR
                )
            )

          ORDER BY F_OPSd.DETE, F_OPSd.id, F_OPS.id
          into :id,
               :docid,
               :descr,
               :ac11,
               :ac12,
               :ac13,
               :ac14,
               :ac15,
               :ac21,
               :ac22,
               :ac23,
               :ac24,
               :ac25,
               :summc,
               :cur,
               :summ,
               :qv,
               :nl,
               :zdt
        do
        begin
            suspend;
        end
    end

    else begin

        for select f_ops.id,
                 f_ops.docid,
                 f_ops.descr,
                 f_ops.ac11,
                 f_ops.ac12,
                 f_ops.ac13,
                 f_ops.ac14,
                 f_ops.ac15,
                 f_ops.ac21,
                 f_ops.ac22,
                 f_ops.ac23,
                 f_ops.ac24,
                 f_ops.ac25,
                 f_ops.summc,
                 f_ops.cur,
                 f_ops.summ,
                 f_ops.qv,
                 f_ops.nl,
                 f_ops.zdt
        
          FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId

          WHERE
            (:pdate1 IS NULL OR f_opsd.DETE >= :pdate1) AND
            (:pdate2 IS NULL OR f_opsd.DETE <= :pdate2) AND
            (:pclid IS NULL OR ClId = :pclid OR ClId2 = :pclid) AND
            (:ptext IS NULL OR F_OPSd.Descr LIKE :ptext) AND
            (
                :PDOCGR IS NULL OR EXISTS(
                    SELECT DTA.ID
                    FROM f_doctypb AS DTB inner join f_doctypa AS DTA on DTB.ida = DTA.id
                    WHERE DTB.ID = F_OPSD.doctyp AND DTA.ID = :PDOCGR
                )
            ) AND
            EXISTS
            (
                
                SELECT NULL
                FROM F_OPS o1
                WHERE
                (
                    (o1.DocId = F_OPSd.id) AND
                    (
                        (
                            (:pac11 IS NULL OR o1.AC11 LIKE :pac11) AND
                            (:pac12 IS NULL OR o1.AC12 LIKE :pac12) AND
                            (:pac13 IS NULL OR o1.AC13 LIKE :pac13) AND
                            (:pac14 IS NULL OR o1.AC14 LIKE :pac14) AND
                            (:pac15 IS NULL OR o1.AC15 LIKE :pac15)
                        )
                        AND
                        (
                            (:pac21 IS NULL OR o1.AC21 LIKE :pac21) AND
                            (:pac22 IS NULL OR o1.AC22 LIKE :pac22) AND
                            (:pac23 IS NULL OR o1.AC23 LIKE :pac23) AND
                            (:pac24 IS NULL OR o1.AC24 LIKE :pac24) AND
                            (:pac25 IS NULL OR o1.AC25 LIKE :pac25)
                        )
                    )
                )
            )

          ORDER BY F_OPSd.DETE, F_OPSd.id, F_OPS.id
          into :id,
               :docid,
               :descr,
               :ac11,
               :ac12,
               :ac13,
               :ac14,
               :ac15,
               :ac21,
               :ac22,
               :ac23,
               :ac24,
               :ac25,
               :summc,
               :cur,
               :summ,
               :qv,
               :nl,
               :zdt
        do
        begin
            suspend;
        end

    end
end^


ALTER PROCEDURE SP_F_OPS_FILTER_OR (
    PDATE1 DATE,
    PDATE2 DATE,
    PTEXT VARCHAR(50),
    PCLID VARCHAR(15),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PDOCGR VARCHAR(10))
RETURNS (
    ID TYPE OF COLUMN F_OPS.ID,
    DOCID TYPE OF COLUMN F_OPS.DOCID,
    DESCR TYPE OF COLUMN F_OPS.DESCR,
    AC11 TYPE OF COLUMN F_OPS.AC11,
    AC12 TYPE OF COLUMN F_OPS.AC12,
    AC13 TYPE OF COLUMN F_OPS.AC13,
    AC14 TYPE OF COLUMN F_OPS.AC14,
    AC15 TYPE OF COLUMN F_OPS.AC15,
    AC21 TYPE OF COLUMN F_OPS.AC21,
    AC22 TYPE OF COLUMN F_OPS.AC22,
    AC23 TYPE OF COLUMN F_OPS.AC23,
    AC24 TYPE OF COLUMN F_OPS.AC24,
    AC25 TYPE OF COLUMN F_OPS.AC25,
    SUMMC TYPE OF COLUMN F_OPS.SUMMC,
    CUR TYPE OF COLUMN F_OPS.CUR,
    SUMM TYPE OF COLUMN F_OPS.SUMM,
    QV TYPE OF COLUMN F_OPS.QV,
    NL TYPE OF COLUMN F_OPS.NL,
    ZDT TYPE OF COLUMN F_OPS.ZDT)
AS
begin
    if
    (
        pac11 is null and
        pac12 is null and
        pac13 is null and
        pac14 is null and
        pac15 is null and
        pac21 is null and
        pac22 is null and
        pac23 is null and
        pac24 is null and
        pac25 is null

    )
    then begin
        for select f_ops.id,
                 f_ops.docid,
                 f_ops.descr,
                 f_ops.ac11,
                 f_ops.ac12,
                 f_ops.ac13,
                 f_ops.ac14,
                 f_ops.ac15,
                 f_ops.ac21,
                 f_ops.ac22,
                 f_ops.ac23,
                 f_ops.ac24,
                 f_ops.ac25,
                 f_ops.summc,
                 f_ops.cur,
                 f_ops.summ,
                 f_ops.qv,
                 f_ops.nl,
                 f_ops.zdt
        
          FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId

          WHERE
            (:pdate1 IS NULL OR f_opsd.DETE >= :pdate1) AND
            (:pdate2 IS NULL OR f_opsd.DETE <= :pdate2) AND
            (:pclid IS NULL OR ClId = :pclid OR ClId2 = :pclid) AND
            (:ptext IS NULL OR F_OPSd.Descr LIKE :ptext) AND
            (
                :PDOCGR IS NULL OR EXISTS(
                    SELECT DTA.ID
                    FROM f_doctypb AS DTB inner join f_doctypa AS DTA on DTB.ida = DTA.id
                    WHERE DTB.ID = F_OPSD.doctyp AND DTA.ID = :PDOCGR
                )
            )

          ORDER BY F_OPSd.DETE, F_OPSd.id, F_OPS.id
          into :id,
               :docid,
               :descr,
               :ac11,
               :ac12,
               :ac13,
               :ac14,
               :ac15,
               :ac21,
               :ac22,
               :ac23,
               :ac24,
               :ac25,
               :summc,
               :cur,
               :summ,
               :qv,
               :nl,
               :zdt
        do
        begin
            suspend;
        end
    end

    else begin

        for select f_ops.id,
                 f_ops.docid,
                 f_ops.descr,
                 f_ops.ac11,
                 f_ops.ac12,
                 f_ops.ac13,
                 f_ops.ac14,
                 f_ops.ac15,
                 f_ops.ac21,
                 f_ops.ac22,
                 f_ops.ac23,
                 f_ops.ac24,
                 f_ops.ac25,
                 f_ops.summc,
                 f_ops.cur,
                 f_ops.summ,
                 f_ops.qv,
                 f_ops.nl,
                 f_ops.zdt
        
          FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId

          WHERE
            (:pdate1 IS NULL OR f_opsd.DETE >= :pdate1) AND
            (:pdate2 IS NULL OR f_opsd.DETE <= :pdate2) AND
            (:pclid IS NULL OR ClId = :pclid OR ClId2 = :pclid) AND
            (:ptext IS NULL OR F_OPSd.Descr LIKE :ptext) AND
            (
                :PDOCGR IS NULL OR EXISTS(
                    SELECT DTA.ID
                    FROM f_doctypb AS DTB inner join f_doctypa AS DTA on DTB.ida = DTA.id
                    WHERE DTB.ID = F_OPSD.doctyp AND DTA.ID = :PDOCGR
                )
            ) AND
            EXISTS
            (
                
                SELECT NULL
                FROM F_OPS o1
                WHERE
                (
                    (o1.DocId = F_OPSd.id) AND
                    (
                        (
                            (:pac11 IS NULL OR o1.AC11 LIKE :pac11) AND
                            (:pac12 IS NULL OR o1.AC12 LIKE :pac12) AND
                            (:pac13 IS NULL OR o1.AC13 LIKE :pac13) AND
                            (:pac14 IS NULL OR o1.AC14 LIKE :pac14) AND
                            (:pac15 IS NULL OR o1.AC15 LIKE :pac15)
                        )
                        OR
                        (
                            (:pac21 IS NULL OR o1.AC21 LIKE :pac21) AND
                            (:pac22 IS NULL OR o1.AC22 LIKE :pac22) AND
                            (:pac23 IS NULL OR o1.AC23 LIKE :pac23) AND
                            (:pac24 IS NULL OR o1.AC24 LIKE :pac24) AND
                            (:pac25 IS NULL OR o1.AC25 LIKE :pac25)
                        )
                    )
                )
            )

          ORDER BY F_OPSd.DETE, F_OPSd.id, F_OPS.id
          into :id,
               :docid,
               :descr,
               :ac11,
               :ac12,
               :ac13,
               :ac14,
               :ac15,
               :ac21,
               :ac22,
               :ac23,
               :ac24,
               :ac25,
               :summc,
               :cur,
               :summ,
               :qv,
               :nl,
               :zdt
        do
        begin
            suspend;
        end

    end
end^


ALTER PROCEDURE SP_F_OPS_ID
RETURNS (
    NEXTID INTEGER)
AS
begin
    nextid = GEN_ID("GEN_F_OPS_ID",1);
    suspend;
end^


ALTER PROCEDURE SP_F_OPS_IDK (
    PK INTEGER)
RETURNS (
    NEXTID INTEGER)
AS
begin
    nextid = GEN_ID("GEN_F_OPS_ID", :PK);
    suspend;
end^


ALTER PROCEDURE SP_F_OPS_INSERT (
    PID INTEGER,
    PDOCID INTEGER,
    PDESCR VARCHAR(50),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PSUMMC NUMERIC(15,4),
    PCUR VARCHAR(3),
    PSUMM NUMERIC(15,4),
    PQV FLOAT,
    PNL SMALLINT)
RETURNS (
    ID TYPE OF COLUMN F_OPS.ID,
    DOCID TYPE OF COLUMN F_OPS.DOCID,
    DESCR TYPE OF COLUMN F_OPS.DESCR,
    AC11 TYPE OF COLUMN F_OPS.AC11,
    AC12 TYPE OF COLUMN F_OPS.AC12,
    AC13 TYPE OF COLUMN F_OPS.AC13,
    AC14 TYPE OF COLUMN F_OPS.AC14,
    AC15 TYPE OF COLUMN F_OPS.AC15,
    AC21 TYPE OF COLUMN F_OPS.AC21,
    AC22 TYPE OF COLUMN F_OPS.AC22,
    AC23 TYPE OF COLUMN F_OPS.AC23,
    AC24 TYPE OF COLUMN F_OPS.AC24,
    AC25 TYPE OF COLUMN F_OPS.AC25,
    SUMMC TYPE OF COLUMN F_OPS.SUMMC,
    CUR TYPE OF COLUMN F_OPS.CUR,
    SUMM TYPE OF COLUMN F_OPS.SUMM,
    QV TYPE OF COLUMN F_OPS.QV,
    NL TYPE OF COLUMN F_OPS.NL,
    ZDT TYPE OF COLUMN F_OPS.ZDT)
AS
declare newid int;
begin
    INSERT INTO F_OPS
        (id, ZDt, DocId, Descr,
        AC11, AC12, AC13, AC14, AC15, 
        AC21, AC22, AC23, AC24, AC25, 
        SummC, Cur, Summ, QV, NL) 
    VALUES 
        (:pid, localtimestamp(0), :pDocId, :pDescr,
        :pAC11, :pAC12, :pAC13, :pAC14, :pAC15,
        :pAC21, :pAC22, :pAC23, :pAC24, :pAC25,
        :pSummC, :pCur, :pSumm, :pQV, :pNL)
    RETURNING
        id, DocId, Descr, 
        AC11, AC12, AC13, AC14, AC15, 
        AC21, AC22, AC23, AC24, AC25, 
        SummC, Cur, Summ, QV, NL, ZDt
    INTO
        :id, :DocId, :Descr,
        :AC11, :AC12, :AC13, :AC14, :AC15, 
        :AC21, :AC22, :AC23, :AC24, :AC25, 
        :SummC, :Cur, :Summ, :QV, :NL, :ZDt;

end^


ALTER PROCEDURE SP_F_OPS_UPDATE (
    PDOCID INTEGER,
    PDESCR VARCHAR(50),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PSUMMC NUMERIC(15,4),
    PCUR VARCHAR(3),
    PSUMM NUMERIC(15,4),
    PQV FLOAT,
    PNL SMALLINT,
    ORIGINAL_ID INTEGER,
    ORIGINAL_DOCID INTEGER,
    ISNULL_DESCR INTEGER,
    ORIGINAL_DESCR VARCHAR(50),
    ORIGINAL_AC11 VARCHAR(8),
    ISNULL_AC12 INTEGER,
    ORIGINAL_AC12 VARCHAR(8),
    ISNULL_AC13 INTEGER,
    ORIGINAL_AC13 VARCHAR(5),
    ISNULL_AC14 INTEGER,
    ORIGINAL_AC14 VARCHAR(8),
    ISNULL_AC15 INTEGER,
    ORIGINAL_AC15 VARCHAR(5),
    ORIGINAL_AC21 VARCHAR(8),
    ISNULL_AC22 INTEGER,
    ORIGINAL_AC22 VARCHAR(8),
    ISNULL_AC23 INTEGER,
    ORIGINAL_AC23 VARCHAR(5),
    ISNULL_AC24 INTEGER,
    ORIGINAL_AC24 VARCHAR(8),
    ISNULL_AC25 INTEGER,
    ORIGINAL_AC25 VARCHAR(5),
    ORIGINAL_SUMMC NUMERIC(15,4),
    ORIGINAL_CUR VARCHAR(3),
    ORIGINAL_SUMM NUMERIC(15,4),
    ISNULL_QV INTEGER,
    ORIGINAL_QV FLOAT,
    ISNULL_NL INTEGER,
    ORIGINAL_NL SMALLINT,
    ISNULL_ZDT INTEGER,
    ORIGINAL_ZDT TIMESTAMP,
    PID INTEGER)
RETURNS (
    ID TYPE OF COLUMN F_OPS.ID,
    DOCID TYPE OF COLUMN F_OPS.DOCID,
    DESCR TYPE OF COLUMN F_OPS.DESCR,
    AC11 TYPE OF COLUMN F_OPS.AC11,
    AC12 TYPE OF COLUMN F_OPS.AC12,
    AC13 TYPE OF COLUMN F_OPS.AC13,
    AC14 TYPE OF COLUMN F_OPS.AC14,
    AC15 TYPE OF COLUMN F_OPS.AC15,
    AC21 TYPE OF COLUMN F_OPS.AC21,
    AC22 TYPE OF COLUMN F_OPS.AC22,
    AC23 TYPE OF COLUMN F_OPS.AC23,
    AC24 TYPE OF COLUMN F_OPS.AC24,
    AC25 TYPE OF COLUMN F_OPS.AC25,
    SUMMC TYPE OF COLUMN F_OPS.SUMMC,
    CUR TYPE OF COLUMN F_OPS.CUR,
    SUMM TYPE OF COLUMN F_OPS.SUMM,
    QV TYPE OF COLUMN F_OPS.QV,
    NL TYPE OF COLUMN F_OPS.NL,
    ZDT TYPE OF COLUMN F_OPS.ZDT)
AS
declare variable VUSER varchar(50);
    declare variable O_ZDT timestamp;
begin

    UPDATE F_OPS
    SET 
        DocId = :pDocId,
        Descr = :pDescr,
        AC11 = :pAC11,
        AC12 = :pAC12,
        AC13 = :pAC13,
        AC14 = :pAC14,
        AC15 = :pAC15,
        AC21 = :pAC21,
        AC22 = :pAC22,
        AC23 = :pAC23,
        AC24 = :pAC24,
        AC25 = :pAC25,
        SummC = :pSummC,
        Cur = :pCur,
        Summ = :pSumm,
        QV = :pQV,
        NL = :pNL,
        ZDt = localtimestamp(0)
    WHERE (
        (id = :Original_id) AND
        (DocId = :Original_DocId) AND
        ((:IsNull_Descr = 1 AND Descr IS NULL) OR (Descr = :Original_Descr)) AND
        (AC11 = :Original_AC11) AND
        ((:IsNull_AC12 = 1 AND AC12 IS NULL) OR (AC12 = :Original_AC12)) AND
        ((:IsNull_AC13 = 1 AND AC13 IS NULL) OR (AC13 = :Original_AC13)) AND
        ((:IsNull_AC14 = 1 AND AC14 IS NULL) OR (AC14 = :Original_AC14)) AND
        ((:IsNull_AC15 = 1 AND AC15 IS NULL) OR (AC15 = :Original_AC15)) AND
        (AC21 = :Original_AC21) AND
        ((:IsNull_AC22 = 1 AND AC22 IS NULL) OR (AC22 = :Original_AC22)) AND
        ((:IsNull_AC23 = 1 AND AC23 IS NULL) OR (AC23 = :Original_AC23)) AND
        ((:IsNull_AC24 = 1 AND AC24 IS NULL) OR (AC24 = :Original_AC24)) AND
        ((:IsNull_AC25 = 1 AND AC25 IS NULL) OR (AC25 = :Original_AC25)) AND
        (SummC = :Original_SummC) AND
        (Cur = :Original_Cur) AND
        (Summ = :Original_Summ) AND
        ((:IsNull_QV = 1 AND QV IS NULL) OR (QV = :Original_QV))
    );

    O_ZDt = ORIGINAL_ZDT;
    IF (ISNULL_ZDT = 1) THEN
    BEGIN
        O_ZDt = null;
    END

    VUSER = rdb$get_context('USER_SESSION', 'UserName');
    if(VUSER is null) then VUSER = User;

     execute procedure sp_f_ops_update_log(
        :Original_id,
        :vuser,
        :Original_DocId, 
        :Original_AC11, 
        :Original_AC12, 
        :Original_AC13, 
        :Original_AC14, 
        :Original_AC15, 
        :Original_AC21, 
        :Original_AC22, 
        :Original_AC23, 
        :Original_AC24, 
        :Original_AC25, 
        :Original_SummC, 
        :Original_Cur, 
        :Original_Summ, 
        :Original_QV,
        :O_ZDt);


    SELECT 
        id, DocId, Descr, 
        AC11, AC12, AC13, AC14, AC15, 
        AC21, AC22, AC23, AC24, AC25, 
        SummC, Cur, Summ, QV, NL, ZDt
    FROM F_OPS 
    WHERE (id = :pid)
    INTO
        :id, :DocId, :Descr,
        :AC11, :AC12, :AC13, :AC14, :AC15, 
        :AC21, :AC22, :AC23, :AC24, :AC25, 
        :SummC, :Cur, :Summ, :QV, :NL, :ZDt;

end^


ALTER PROCEDURE SP_F_OPS_UPDATE_LOG (
    ID INTEGER,
    USR VARCHAR(15),
    ORIGINAL_DOCID INTEGER,
    ORIGINAL_AC11 VARCHAR(8),
    ORIGINAL_AC12 VARCHAR(8),
    ORIGINAL_AC13 VARCHAR(5),
    ORIGINAL_AC14 VARCHAR(8),
    ORIGINAL_AC15 VARCHAR(5),
    ORIGINAL_AC21 VARCHAR(8),
    ORIGINAL_AC22 VARCHAR(8),
    ORIGINAL_AC23 VARCHAR(5),
    ORIGINAL_AC24 VARCHAR(8),
    ORIGINAL_AC25 VARCHAR(5),
    ORIGINAL_SUMMC NUMERIC(15,4),
    ORIGINAL_CUR VARCHAR(3),
    ORIGINAL_SUMM NUMERIC(15,4),
    ORIGINAL_QV FLOAT,
    ORIGINAL_ZDT TIMESTAMP)
AS
declare variable IDL integer;
    declare variable NOW timestamp;
    declare variable XDT timestamp;
BEGIN
    now = localtimestamp(0);
    xdt = dateadd(-1 hour to now);

    IF (:Original_ZDt IS NULL OR :Original_ZDt < xdt)
    THEN BEGIN
        INSERT INTO F_LOPS 
            (dtl, usl, id, DocId,
            AC11, AC12, AC13, AC14, AC15,
            AC21, AC22, AC23, AC24, AC25,
            SummC, Cur, Summ, QV, ODT)
        VALUES 
        (
            :now,
            :Usr,
            :id,
            :Original_DocId, 
            :Original_AC11,
            :Original_AC12, 
            :Original_AC13, 
            :Original_AC14, 
            :Original_AC15, 
            :Original_AC21, 
            :Original_AC22, 
            :Original_AC23, 
            :Original_AC24, 
            :Original_AC25, 
            :Original_SummC, 
            :Original_Cur, 
            :Original_Summ, 
            :Original_QV,
            :ORIGINAL_ZDT
        );
    END
END^


ALTER PROCEDURE SP_F_OPSD_DELETE (
    ORIGINAL_ID INTEGER,
    ORIGINAL_DATE DATE,
    ISNULL_NRX INTEGER,
    ORIGINAL_NRX VARCHAR(5),
    ISNULL_DOCTYP INTEGER,
    ORIGINAL_DOCTYP VARCHAR(10),
    ISNULL_DOCST INTEGER,
    ORIGINAL_DOCST VARCHAR(6),
    ISNULL_DOCNR INTEGER,
    ORIGINAL_DOCNR VARCHAR(15),
    ISNULL_CLID INTEGER,
    ORIGINAL_CLID VARCHAR(15),
    ISNULL_CLID2 INTEGER,
    ORIGINAL_CLID2 VARCHAR(15),
    ISNULL_DESCR INTEGER,
    ORIGINAL_DESCR VARCHAR(80),
    ORIGINAL_SUMM NUMERIC(15,4),
    ORIGINAL_PVN NUMERIC(15,4),
    ORIGINAL_ZNR INTEGER,
    ISNULL_ZU INTEGER,
    ORIGINAL_ZU VARCHAR(20),
    ISNULL_ZDT INTEGER,
    ORIGINAL_ZDT TIMESTAMP,
    ISNULL_DT2 INTEGER,
    ORIGINAL_DT2 DATE)
AS
declare variable VUSER varchar(50);
    declare variable O_ZDT timestamp;
begin
    DELETE FROM F_OPSd
    WHERE 
    (
        (id = :Original_id) AND 
        (DETE = :Original_Date) AND
        ((:IsNull_NrX = 1 AND NrX IS NULL) OR (NrX = :Original_NrX)) AND 
        ((:IsNull_DocTyp = 1 AND DocTyp IS NULL) OR (DocTyp = :Original_DocTyp)) AND 
        ((:IsNull_DocSt = 1 AND DocSt IS NULL) OR (DocSt = :Original_DocSt)) AND 
        ((:IsNull_DocNr = 1 AND DocNr IS NULL) OR (DocNr = :Original_DocNr)) AND 
        ((:IsNull_ClId = 1 AND ClId IS NULL) OR (ClId = :Original_ClId)) AND 
        ((:IsNull_ClId2 = 1 AND ClId2 IS NULL) OR (ClId2 = :Original_ClId2)) AND 
        ((:IsNull_Descr = 1 AND Descr IS NULL) OR (Descr = :Original_Descr)) AND 
        (Summ = :Original_Summ) AND 
        (PVN = :Original_PVN) AND 
        (ZNR = :Original_ZNR) AND 
        ((:IsNull_DT2 = 1 AND DT2 IS NULL) OR (DT2 = :Original_DT2))
    );

    O_ZDt = :Original_ZDt;
    IF (:IsNull_ZDt = 1) THEN
    BEGIN
        O_ZDt = null;
    END

    VUSER = rdb$get_context('USER_SESSION', 'UserName');
    if(VUSER is null) then VUSER = User;

    EXECUTE PROCEDURE sp_f_opsd_delete_log(
            :Original_id,
            :VUSER,
            :Original_Date, 
            :Original_NrX, 
            :Original_DocTyp, 
            :Original_DocSt, 
            :Original_DocNr, 
            :Original_ClId, 
            :Original_ClId2, 
            :Original_Descr, 
            :Original_Summ, 
            :Original_PVN, 
            :Original_ZNR,
            :O_ZDt);


end^


ALTER PROCEDURE SP_F_OPSD_DELETE_LOG (
    ID INTEGER,
    USR VARCHAR(15),
    ORIGINAL_DATE DATE,
    ORIGINAL_NRX VARCHAR(5),
    ORIGINAL_DOCTYP VARCHAR(10),
    ORIGINAL_DOCST VARCHAR(6),
    ORIGINAL_DOCNR VARCHAR(15),
    ORIGINAL_CLID VARCHAR(15),
    ORIGINAL_CLID2 VARCHAR(15),
    ORIGINAL_DESCR VARCHAR(80),
    ORIGINAL_SUMM NUMERIC(15,4),
    ORIGINAL_PVN NUMERIC(15,4),
    ORIGINAL_ZNR INTEGER,
    ORIGINAL_ZDT TIMESTAMP)
AS
declare variable IDL integer;
    declare variable NOW timestamp;
    declare variable XDT timestamp;
begin
    now = current_timestamp(0);
    xdt = dateadd(-1 hour to now);

    IF (:Original_ZDt IS NULL OR :Original_ZDt < xdt)
    THEN BEGIN

        INSERT INTO F_LOPSD
            (id, ZDt, dtld, ZU, DETE, NrX,
            DocTyp, DocSt, DocNr,
            ClId, ClId2, Descr, Summ, PVN, ZNR, ODT)
        VALUES (
            :id,
            :now,
            :now,
            :Usr,
            :Original_Date, 
            :Original_NrX, 
            :Original_DocTyp, 
            :Original_DocSt, 
            :Original_DocNr, 
            :Original_ClId, 
            :Original_ClId2, 
            :Original_Descr, 
            :Original_Summ, 
            :Original_PVN, 
            :Original_ZNR,
            :ORIGINAL_ZDT
            );

    END
    ELSE BEGIN

        UPDATE F_LOPSD 
        SET 
            dtld = :now
        WHERE F_LOPSD.id = :id;

    END

end^


ALTER PROCEDURE SP_F_OPSD_FILTER_AND (
    PDATE1 DATE,
    PDATE2 DATE,
    PTEXT VARCHAR(50),
    PCLID VARCHAR(15),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PDOCGR VARCHAR(10))
RETURNS (
    ID TYPE OF COLUMN F_OPSD.ID,
    DETE TYPE OF COLUMN F_OPSD.DETE,
    NRX TYPE OF COLUMN F_OPSD.NRX,
    DOCTYP TYPE OF COLUMN F_OPSD.DOCTYP,
    DOCST TYPE OF COLUMN F_OPSD.DOCST,
    DOCNR TYPE OF COLUMN F_OPSD.DOCNR,
    CLID TYPE OF COLUMN F_OPSD.CLID,
    CLID2 TYPE OF COLUMN F_OPSD.CLID2,
    DESCR TYPE OF COLUMN F_OPSD.DESCR,
    SUMM TYPE OF COLUMN F_OPSD.SUMM,
    PVN TYPE OF COLUMN F_OPSD.PVN,
    OPT TYPE OF COLUMN F_OPSD.OPT,
    ZNR TYPE OF COLUMN F_OPSD.ZNR,
    ZU TYPE OF COLUMN F_OPSD.ZU,
    ZDT TYPE OF COLUMN F_OPSD.ZDT,
    DT2 TYPE OF COLUMN F_OPSD.DT2,
    YR TYPE OF COLUMN F_OPSD.YR,
    NL TYPE OF COLUMN F_OPSD.NL,
    IDDOCM TYPE OF COLUMN F_OPSD.IDDOCM)
AS
begin
    if
    (
        pac11 is null and
        pac12 is null and
        pac13 is null and
        pac14 is null and
        pac15 is null and
        pac21 is null and
        pac22 is null and
        pac23 is null and
        pac24 is null and
        pac25 is null

    )
    then begin
        for select
            id, DETE,  nrx, doctyp, docst, docnr,
            clid, clid2, descr, summ, pvn,
            opt, znr, zu, zdt, dt2, nl, yr, iddocm
        from f_opsd
        where
            (:pdate1 IS NULL OR f_opsd.DETE >= :pdate1) AND
            (:pdate2 IS NULL OR f_opsd.DETE <= :pdate2) AND
            (:pclid IS NULL OR ClId = :pclid OR ClId2 = :pclid) AND
            (:ptext IS NULL OR F_OPSd.Descr LIKE :ptext) AND
            (
                :PDOCGR IS NULL OR EXISTS(
                    SELECT DTA.ID
                    FROM f_doctypb AS DTB inner join f_doctypa AS DTA on DTB.ida = DTA.id
                    WHERE DTB.ID = F_OPSD.doctyp AND DTA.ID = :PDOCGR
                )
            )

        ORDER BY DETE, id
        into
            :id, :DETE, :nrx, :doctyp, :docst, :docnr,
            :clid, :clid2, :descr, :summ, :pvn,
            :opt, :znr, :zu, :zdt, :dt2, :nl, :yr, :iddocm
        do
        begin
            suspend;
        end
    end
    else begin
        for select
            id, DETE,  nrx, doctyp, docst, docnr,
            clid, clid2, descr, summ, pvn,
            opt, znr, zu, zdt, dt2, nl, yr, iddocm
        from f_opsd
        where
            (:pdate1 IS NULL OR f_opsd.DETE >= :pdate1) AND
            (:pdate2 IS NULL OR f_opsd.DETE <= :pdate2) AND
            (:pclid IS NULL OR ClId = :pclid OR ClId2 = :pclid) AND
            (:ptext IS NULL OR F_OPSd.Descr LIKE :ptext) AND
            (
                :PDOCGR IS NULL OR EXISTS(
                    SELECT DTA.ID
                    FROM f_doctypb AS DTB inner join f_doctypa AS DTA on DTB.ida = DTA.id
                    WHERE DTB.ID = F_OPSD.doctyp AND DTA.ID = :PDOCGR
                )
            ) AND
            EXISTS
            (
                SELECT NULL
                FROM F_OPS o1
                WHERE
                (
                    (o1.DocId = F_OPSd.id) AND
                    (
                        (
                            (:pac11 IS NULL OR o1.AC11 LIKE :pac11) AND
                            (:pac12 IS NULL OR o1.AC12 LIKE :pac12) AND
                            (:pac13 IS NULL OR o1.AC13 LIKE :pac13) AND
                            (:pac14 IS NULL OR o1.AC14 LIKE :pac14) AND
                            (:pac15 IS NULL OR o1.AC15 LIKE :pac15)
                        )
                        AND
                        (
                            (:pac21 IS NULL OR o1.AC21 LIKE :pac21) AND
                            (:pac22 IS NULL OR o1.AC22 LIKE :pac22) AND
                            (:pac23 IS NULL OR o1.AC23 LIKE :pac23) AND
                            (:pac24 IS NULL OR o1.AC24 LIKE :pac24) AND
                            (:pac25 IS NULL OR o1.AC25 LIKE :pac25)
                        )
                    )
                )
            )
        ORDER BY DETE, f_opsd.id
        into
            :id, :DETE, :nrx, :doctyp, :docst, :docnr,
            :clid, :clid2, :descr, :summ, :pvn,
            :opt, :znr, :zu, :zdt, :dt2, :nl, :yr, :iddocm
        do
        begin
            suspend;
        end
    end
end^


ALTER PROCEDURE SP_F_OPSD_FILTER_OR (
    PDATE1 DATE,
    PDATE2 DATE,
    PTEXT VARCHAR(50),
    PCLID VARCHAR(15),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PDOCGR VARCHAR(10))
RETURNS (
    ID TYPE OF COLUMN F_OPSD.ID,
    DETE TYPE OF COLUMN F_OPSD.DETE,
    NRX TYPE OF COLUMN F_OPSD.NRX,
    DOCTYP TYPE OF COLUMN F_OPSD.DOCTYP,
    DOCST TYPE OF COLUMN F_OPSD.DOCST,
    DOCNR TYPE OF COLUMN F_OPSD.DOCNR,
    CLID TYPE OF COLUMN F_OPSD.CLID,
    CLID2 TYPE OF COLUMN F_OPSD.CLID2,
    DESCR TYPE OF COLUMN F_OPSD.DESCR,
    SUMM TYPE OF COLUMN F_OPSD.SUMM,
    PVN TYPE OF COLUMN F_OPSD.PVN,
    OPT TYPE OF COLUMN F_OPSD.OPT,
    ZNR TYPE OF COLUMN F_OPSD.ZNR,
    ZU TYPE OF COLUMN F_OPSD.ZU,
    ZDT TYPE OF COLUMN F_OPSD.ZDT,
    DT2 TYPE OF COLUMN F_OPSD.DT2,
    YR TYPE OF COLUMN F_OPSD.YR,
    NL TYPE OF COLUMN F_OPSD.NL,
    IDDOCM TYPE OF COLUMN F_OPSD.IDDOCM)
AS
begin
    if
    (
        pac11 is null and
        pac12 is null and
        pac13 is null and
        pac14 is null and
        pac15 is null and
        pac21 is null and
        pac22 is null and
        pac23 is null and
        pac24 is null and
        pac25 is null

    )
    then begin
        for select
            id, DETE,  nrx, doctyp, docst, docnr,
            clid, clid2, descr, summ, pvn,
            opt, znr, zu, zdt, dt2, nl, yr, iddocm
        from f_opsd
        where
            (:pdate1 IS NULL OR f_opsd.DETE >= :pdate1) AND
            (:pdate2 IS NULL OR f_opsd.DETE <= :pdate2) AND
            (:pclid IS NULL OR ClId = :pclid OR ClId2 = :pclid) AND
            (:ptext IS NULL OR F_OPSd.Descr LIKE :ptext) AND
            (
                :PDOCGR IS NULL OR EXISTS(
                    SELECT DTA.ID
                    FROM f_doctypb AS DTB inner join f_doctypa AS DTA on DTB.ida = DTA.id
                    WHERE DTB.ID = F_OPSD.doctyp AND DTA.ID = :PDOCGR
                )
            )
        ORDER BY DETE, id
        into
            :id, :DETE, :nrx, :doctyp, :docst, :docnr,
            :clid, :clid2, :descr, :summ, :pvn,
            :opt, :znr, :zu, :zdt, :dt2, :nl, :yr, :iddocm
        do
        begin
            suspend;
        end
    end
    else begin
        for select
            id, DETE,  nrx, doctyp, docst, docnr,
            clid, clid2, descr, summ, pvn,
            opt, znr, zu, zdt, dt2, nl, yr, iddocm
        from f_opsd
        where
            (:pdate1 IS NULL OR f_opsd.DETE >= :pdate1) AND
            (:pdate2 IS NULL OR f_opsd.DETE <= :pdate2) AND
            (:pclid IS NULL OR ClId = :pclid OR ClId2 = :pclid) AND
            (:ptext IS NULL OR F_OPSd.Descr LIKE :ptext) AND
            (
                :PDOCGR IS NULL OR EXISTS(
                    SELECT DTA.ID
                    FROM f_doctypb AS DTB inner join f_doctypa AS DTA on DTB.ida = DTA.id
                    WHERE DTB.ID = F_OPSD.doctyp AND DTA.ID = :PDOCGR
                )
            ) AND
            EXISTS
            (
                SELECT NULL
                FROM F_OPS o1
                WHERE
                (
                    (o1.DocId = F_OPSd.id) AND
                    (
                        (
                            (:pac11 IS NULL OR o1.AC11 LIKE :pac11) AND
                            (:pac12 IS NULL OR o1.AC12 LIKE :pac12) AND
                            (:pac13 IS NULL OR o1.AC13 LIKE :pac13) AND
                            (:pac14 IS NULL OR o1.AC14 LIKE :pac14) AND
                            (:pac15 IS NULL OR o1.AC15 LIKE :pac15)
                        )
                        OR
                        (
                            (:pac21 IS NULL OR o1.AC21 LIKE :pac21) AND
                            (:pac22 IS NULL OR o1.AC22 LIKE :pac22) AND
                            (:pac23 IS NULL OR o1.AC23 LIKE :pac23) AND
                            (:pac24 IS NULL OR o1.AC24 LIKE :pac24) AND
                            (:pac25 IS NULL OR o1.AC25 LIKE :pac25)
                        )
                    )
                )
            )
        ORDER BY DETE, f_opsd.id
        into
            :id, :DETE, :nrx, :doctyp, :docst, :docnr,
            :clid, :clid2, :descr, :summ, :pvn,
            :opt, :znr, :zu, :zdt, :dt2, :nl, :yr, :iddocm
        do
        begin
            suspend;
        end
    end
end^


ALTER PROCEDURE SP_F_OPSD_GETNEXTNRFORYEARA (
    YR INTEGER)
RETURNS (
    NEXTNR INTEGER)
AS
begin
    execute procedure SP_F_OPSD_GETNEXTNRFORYEARA_K(:yr, 1)
    returning_values :NEXTNR;

    suspend;
end^


ALTER PROCEDURE SP_F_OPSD_GETNEXTNRFORYEARA_K (
    YR INTEGER,
    PK INTEGER)
RETURNS (
    NEXTNR INTEGER)
AS
declare variable K integer;
begin
    if (yr < 2010 or (yr > 2040) ) then
    begin
        nextnr = -1;
        exit;
    end
    k = yr - 2010;

    if (k < 16) then
        if (k < 8) then
            if (k < 4) then
                nextnr = case k
                when 0 then gen_id(f_year00, :pk)
                when 1 then gen_id(f_year01, :pk)
                when 2 then gen_id(f_year02, :pk)
                when 3 then gen_id(f_year03, :pk)
                end;
            else
                nextnr = case k
                when 4 then gen_id(f_year04, :pk)
                when 5 then gen_id(f_year05, :pk)
                when 6 then gen_id(f_year06, :pk)
                when 7 then gen_id(f_year07, :pk)
                end;
        else
            if (k < 12) then
                nextnr = case k
                when 8 then gen_id(f_year08, :pk)
                when 9 then gen_id(f_year09, :pk)
                when 10 then gen_id(f_year10, :pk)
                when 11 then gen_id(f_year11, :pk)
                end;
            else
                nextnr = case k
                when 12 then gen_id(f_year12, :pk)
                when 13 then gen_id(f_year13, :pk)
                when 14 then gen_id(f_year14, :pk)
                when 15 then gen_id(f_year15, :pk)
                end;
    else
        if (k < 24) then
            if (k < 20) then
                nextnr = case k
                when 16 then gen_id(f_year16, :pk)
                when 17 then gen_id(f_year17, :pk)
                when 18 then gen_id(f_year18, :pk)
                when 19 then gen_id(f_year19, :pk)
                end;
            else
                nextnr = case k
                when 20 then gen_id(f_year20, :pk)
                when 21 then gen_id(f_year21, :pk)
                when 22 then gen_id(f_year22, :pk)
                when 23 then gen_id(f_year23, :pk)
                end;
        else
            if (k < 28) then
                nextnr = case k
                when 24 then gen_id(f_year24, :pk)
                when 25 then gen_id(f_year25, :pk)
                when 26 then gen_id(f_year26, :pk)
                when 27 then gen_id(f_year27, :pk)
                end;
            else
                nextnr = case k
                when 28 then gen_id(f_year28, :pk)
                when 29 then gen_id(f_year29, :pk)
                when 30 then gen_id(f_year30, :pk)
                when 31 then gen_id(f_year31, :pk)
                end;

    suspend;

end^


ALTER PROCEDURE SP_F_OPSD_ID
RETURNS (
    NEXTID INTEGER)
AS
begin
    nextid = GEN_ID("GEN_F_OPSD_ID",1);
    suspend;
end^


ALTER PROCEDURE SP_F_OPSD_IDK (
    PK INTEGER)
RETURNS (
    NEXTID INTEGER)
AS
begin
    nextid = GEN_ID("GEN_F_OPSD_ID", :PK);
    suspend;
end^


ALTER PROCEDURE SP_F_OPSD_INSERT (
    PID INTEGER,
    PDETE DATE,
    PNRX VARCHAR(5),
    PDOCTYP VARCHAR(10),
    PDOCST VARCHAR(6),
    PDOCNR VARCHAR(15),
    PCLID VARCHAR(15),
    PCLID2 VARCHAR(15),
    PDESCR VARCHAR(80),
    PSUMM NUMERIC(15,4),
    PPVN NUMERIC(15,4),
    POPT INTEGER,
    PZNR INTEGER,
    PZU VARCHAR(20),
    PZDT TIMESTAMP,
    PDT2 DATE,
    PNL SMALLINT,
    PIDDOCM INTEGER)
RETURNS (
    ID TYPE OF COLUMN F_OPSD.ID,
    DETE TYPE OF COLUMN F_OPSD.DETE,
    NRX TYPE OF COLUMN F_OPSD.NRX,
    DOCTYP TYPE OF COLUMN F_OPSD.DOCTYP,
    DOCST TYPE OF COLUMN F_OPSD.DOCST,
    DOCNR TYPE OF COLUMN F_OPSD.DOCNR,
    CLID TYPE OF COLUMN F_OPSD.CLID,
    CLID2 TYPE OF COLUMN F_OPSD.CLID2,
    DESCR TYPE OF COLUMN F_OPSD.DESCR,
    SUMM TYPE OF COLUMN F_OPSD.SUMM,
    PVN TYPE OF COLUMN F_OPSD.PVN,
    OPT TYPE OF COLUMN F_OPSD.OPT,
    ZNR TYPE OF COLUMN F_OPSD.ZNR,
    ZU TYPE OF COLUMN F_OPSD.ZU,
    ZDT TYPE OF COLUMN F_OPSD.ZDT,
    DT2 TYPE OF COLUMN F_OPSD.DT2,
    YR TYPE OF COLUMN F_OPSD.YR,
    NL TYPE OF COLUMN F_OPSD.NL,
    IDDOCM TYPE OF COLUMN F_OPSD.IDDOCM)
AS
begin
    INSERT INTO F_OPSd
        (id, DETE, NrX, DocTyp, DocSt, DocNr,
        ClId, ClId2, Descr, Summ, PVN,
        Opt, ZNR, ZU, ZDt, DT2, NL, IDDOCM)
    VALUES
        (:pid, :pDete, :pNrX, :pDocTyp, :pDocSt, :pDocNr,
        :pClId, :pClId2, :pDescr, :pSumm, :pPVN,
        :pOpt, :pznr, :pZU, localtimestamp(0), :pDT2, 0, :piddocm)
    RETURNING
        id, DETE,  nrx, doctyp, docst, docnr,
        clid, clid2, descr, summ, pvn,
        opt, znr, zu, zdt, dt2, nl, yr, iddocm
    INTO
        :id, :DETE, :nrx, :doctyp, :docst, :docnr,
        :clid, :clid2, :descr, :summ, :pvn,
        :opt, :znr, :zu, :zdt, :dt2, :nl, :yr, :iddocm;

    suspend;

end^


ALTER PROCEDURE SP_F_OPSD_UPDATE (
    PDETE DATE,
    PNRX VARCHAR(5),
    PDOCTYP VARCHAR(10),
    PDOCST VARCHAR(6),
    PDOCNR VARCHAR(15),
    PCLID VARCHAR(15),
    PCLID2 VARCHAR(15),
    PDESCR VARCHAR(80),
    PSUMM NUMERIC(15,4),
    PPVN NUMERIC(15,4),
    POPT INTEGER,
    PZNR INTEGER,
    PZU VARCHAR(20),
    PZDT TIMESTAMP,
    PDT2 DATE,
    PNL SMALLINT,
    ORIGINAL_ID INTEGER,
    ORIGINAL_DATE DATE,
    ISNULL_NRX INTEGER,
    ORIGINAL_NRX VARCHAR(5),
    ISNULL_DOCTYP INTEGER,
    ORIGINAL_DOCTYP VARCHAR(10),
    ISNULL_DOCST INTEGER,
    ORIGINAL_DOCST VARCHAR(6),
    ISNULL_DOCNR INTEGER,
    ORIGINAL_DOCNR VARCHAR(15),
    ISNULL_CLID INTEGER,
    ORIGINAL_CLID VARCHAR(15),
    ISNULL_CLID2 INTEGER,
    ORIGINAL_CLID2 VARCHAR(15),
    ISNULL_DESCR INTEGER,
    ORIGINAL_DESCR VARCHAR(80),
    ORIGINAL_SUMM NUMERIC(15,4),
    ORIGINAL_PVN NUMERIC(15,4),
    ISNULL_OPT INTEGER,
    ORIGINAL_OPT INTEGER,
    ORIGINAL_ZNR INTEGER,
    ISNULL_ZU INTEGER,
    ORIGINAL_ZU VARCHAR(20),
    ISNULL_ZDT INTEGER,
    ORIGINAL_ZDT TIMESTAMP,
    ISNULL_DT2 INTEGER,
    ORIGINAL_DT2 DATE,
    ISNULL_NL INTEGER,
    ORIGINAL_NL SMALLINT,
    ISNULL_YR INTEGER,
    ORIGINAL_YR INTEGER,
    PID INTEGER)
RETURNS (
    ID TYPE OF COLUMN F_OPSD.ID,
    DETE TYPE OF COLUMN F_OPSD.DETE,
    NRX TYPE OF COLUMN F_OPSD.NRX,
    DOCTYP TYPE OF COLUMN F_OPSD.DOCTYP,
    DOCST TYPE OF COLUMN F_OPSD.DOCST,
    DOCNR TYPE OF COLUMN F_OPSD.DOCNR,
    CLID TYPE OF COLUMN F_OPSD.CLID,
    CLID2 TYPE OF COLUMN F_OPSD.CLID2,
    DESCR TYPE OF COLUMN F_OPSD.DESCR,
    SUMM TYPE OF COLUMN F_OPSD.SUMM,
    PVN TYPE OF COLUMN F_OPSD.PVN,
    OPT TYPE OF COLUMN F_OPSD.OPT,
    ZNR TYPE OF COLUMN F_OPSD.ZNR,
    ZU TYPE OF COLUMN F_OPSD.ZU,
    ZDT TYPE OF COLUMN F_OPSD.ZDT,
    DT2 TYPE OF COLUMN F_OPSD.DT2,
    YR TYPE OF COLUMN F_OPSD.YR,
    NL TYPE OF COLUMN F_OPSD.NL)
AS
declare variable XYR integer;
declare variable NEXTNR integer;
declare variable VUSER varchar(50);
declare variable O_ZDT timestamp;
begin
    /*
    xyr = EXTRACT(YEAR FROM :pDete);
    NEXTNR = :Original_ZNR;

    IF (:Original_yr <> xyr) THEN
    BEGIN
        EXECUTE PROCEDURE  sp_opsd_getNextNrForYearA(:xyr) returning_values :nextnr;
        IF (NEXTNR = -1) THEN
        BEGIN
            exception my_exception_badyearvalue;
            EXIT;
        END
    END
    */
    --VUSER = USER;
    VUSER = PZU;

    UPDATE F_OPSd
    SET 
        DETE = :pDete,
        NrX = :pNrX,
        DocTyp = :pDocTyp,
        DocSt = :pDocSt,
        DocNr = :pDocNr,
        ClId = :pClId,
        ClId2 = :pClId2,
        Descr = :pDescr,
        Summ = :pSumm,
        PVN = :pPVN,
        Opt = :pOpt,
        ZNR = :pznr,
        ZU = :VUSER,
        ZDt = localtimestamp(0),
        DT2 = :pDT2,
        NL = :pNL
    WHERE 
    (
        (id = :Original_id) AND 
        (DETE = :Original_Date) AND
        ((:IsNull_NrX = 1 AND NrX IS NULL) OR (NrX = :Original_NrX)) AND 
        ((:IsNull_DocTyp = 1 AND DocTyp IS NULL) OR (DocTyp = :Original_DocTyp)) AND 
        ((:IsNull_DocSt = 1 AND DocSt IS NULL) OR (DocSt = :Original_DocSt)) AND 
        ((:IsNull_DocNr = 1 AND DocNr IS NULL) OR (DocNr = :Original_DocNr)) AND 
        ((:IsNull_ClId = 1 AND ClId IS NULL) OR (ClId = :Original_ClId)) AND 
        ((:IsNull_ClId2 = 1 AND ClId2 IS NULL) OR (ClId2 = :Original_ClId2)) AND 
        ((:IsNull_Descr = 1 AND Descr IS NULL) OR (Descr = :Original_Descr)) AND 
        (Summ = :Original_Summ) AND 
        (PVN = :Original_PVN) AND 
        (ZNR = :Original_ZNR) AND 
        ((:IsNull_DT2 = 1 AND DT2 IS NULL) OR (DT2 = :Original_DT2))
    );

    O_ZDt = :Original_ZDt;
    IF (:IsNull_ZDt = 1) THEN
    BEGIN
        O_ZDt = null;
    END

    EXECUTE PROCEDURE sp_f_opsd_update_log(
            :Original_id,
            :VUSER,
            :Original_Date, 
            :Original_NrX, 
            :Original_DocTyp, 
            :Original_DocSt, 
            :Original_DocNr, 
            :Original_ClId, 
            :Original_ClId2, 
            :Original_Descr, 
            :Original_Summ, 
            :Original_PVN, 
            :Original_ZNR,
            :O_ZDt);


end^


ALTER PROCEDURE SP_F_OPSD_UPDATE_LOG (
    ID INTEGER,
    USR VARCHAR(15),
    ORIGINAL_DATE DATE,
    ORIGINAL_NRX VARCHAR(5),
    ORIGINAL_DOCTYP VARCHAR(10),
    ORIGINAL_DOCST VARCHAR(6),
    ORIGINAL_DOCNR VARCHAR(15),
    ORIGINAL_CLID VARCHAR(15),
    ORIGINAL_CLID2 VARCHAR(15),
    ORIGINAL_DESCR VARCHAR(80),
    ORIGINAL_SUMM NUMERIC(15,4),
    ORIGINAL_PVN NUMERIC(15,4),
    ORIGINAL_ZNR INTEGER,
    ORIGINAL_ZDT TIMESTAMP)
AS
declare variable NOW timestamp;
    declare variable XDT timestamp;
begin
    now = localtimestamp(0);
    xdt = dateadd(-1 hour to now);

    IF (:Original_ZDt IS NULL OR :Original_ZDt < xdt)
    THEN BEGIN
        INSERT INTO F_LOPSD
            (id, ZDt, ZU, DETE, NrX,
            DocTyp, DocSt, DocNr,
            ClId, ClId2, Descr, Summ, PVN, ZNR, ODT)
        VALUES (
            :id,
            :now,
            :Usr,
            :Original_Date, 
            :Original_NrX, 
            :Original_DocTyp, 
            :Original_DocSt, 
            :Original_DocNr, 
            :Original_ClId, 
            :Original_ClId2, 
            :Original_Descr, 
            :Original_Summ, 
            :Original_PVN, 
            :Original_ZNR,
            :ORIGINAL_ZDT
            );

    END

end^


ALTER PROCEDURE SP_F_REKINS_11 (
    PDID INTEGER)
RETURNS (
    ID TYPE OF COLUMN F_OPS.ID,
    DOCID TYPE OF COLUMN F_OPS.DOCID,
    DESCR TYPE OF COLUMN F_OPS.DESCR,
    AC11 TYPE OF COLUMN F_OPS.AC11,
    AC12 TYPE OF COLUMN F_OPS.AC12,
    AC13 TYPE OF COLUMN F_OPS.AC13,
    AC14 TYPE OF COLUMN F_OPS.AC14,
    AC15 TYPE OF COLUMN F_OPS.AC15,
    AC21 TYPE OF COLUMN F_OPS.AC21,
    AC22 TYPE OF COLUMN F_OPS.AC22,
    AC23 TYPE OF COLUMN F_OPS.AC23,
    AC24 TYPE OF COLUMN F_OPS.AC24,
    AC25 TYPE OF COLUMN F_OPS.AC25,
    SUMMC TYPE OF COLUMN F_OPS.SUMMC,
    CUR TYPE OF COLUMN F_OPS.CUR,
    SUMM TYPE OF COLUMN F_OPS.SUMM,
    QV TYPE OF COLUMN F_OPS.QV,
    NL TYPE OF COLUMN F_OPS.NL,
    ZDT TYPE OF COLUMN F_OPS.ZDT)
AS
begin
  for select f_ops.id,
             f_ops.docid,
             f_ops.descr,
             f_ops.ac11,
             f_ops.ac12,
             f_ops.ac13,
             f_ops.ac14,
             f_ops.ac15,
             f_ops.ac21,
             f_ops.ac22,
             f_ops.ac23,
             f_ops.ac24,
             f_ops.ac25,
             f_ops.summc,
             f_ops.cur,
             f_ops.summ,
             f_ops.qv,
             f_ops.nl,
             f_ops.zdt

      FROM F_OPS
      WHERE
        f_ops.DOCID = :PDID
      ORDER BY f_ops.id

      into :id,
           :docid,
           :descr,
           :ac11,
           :ac12,
           :ac13,
           :ac14,
           :ac15,
           :ac21,
           :ac22,
           :ac23,
           :ac24,
           :ac25,
           :summc,
           :cur,
           :summ,
           :qv,
           :nl,
           :zdt
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_F_REP_APGR_01 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN F_ROPS2A.ID,
    SPID TYPE OF COLUMN F_ROPS2A.SPID,
    AC TYPE OF COLUMN F_ROPS2A.AC,
    RAC TYPE OF COLUMN F_ROPS2A.RAC,
    NAME TYPE OF COLUMN F_ROPS2A.NAME,
    B0 TYPE OF COLUMN F_ROPS2A.B0,
    SDB TYPE OF COLUMN F_ROPS2A.SDB,
    SCR TYPE OF COLUMN F_ROPS2A.SCR,
    TDB TYPE OF COLUMN F_ROPS2A.TDB,
    TCR TYPE OF COLUMN F_ROPS2A.TCR,
    CLID TYPE OF COLUMN F_ROPS2A.CLID,
    NAME1 TYPE OF COLUMN F_ROPS2A.NAME1,
    REGNR TYPE OF COLUMN F_ROPS2A.REGNR,
    RNAME TYPE OF COLUMN F_ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_F_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        :PAC as AC,
        null as RAC,
        f_acp21.name as NAME,
        0 as b0,
        coalesce(T2.ADb, 0.00) as sdb,
        coalesce(T2.ACr, 0.00) as scr,
        coalesce(T2.BDb, 0.00) as tdb,
        coalesce(T2.BCr, 0.00) as tcr,
        null as clid,
        null as name1,
        null as regnr,
        null as rname
    FROM
    (
        SELECT SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                F_OPS.AC11 AS AC,
                CASE
                    WHEN F_OPSd.Dete < :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as SDb,
                0.00 as SCr,
                CASE
                    WHEN F_OPSd.Dete >= :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as TDb,
                0.00 as TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE F_OPSd.Dete <= :edt AND F_OPS.AC11 LIKE :pac

            UNION ALL

            SELECT 
                F_OPS.AC21 AS AC,
                0.00 as SDb,
                CASE
                    WHEN F_OPSd.Dete < :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as SCr,
                0.00 as TDb,
                CASE
                    WHEN F_OPSd.Dete >= :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE F_OPSd.Dete <= :edt AND F_OPS.AC21 LIKE :pac

            UNION ALL

            SELECT 
                F_Bal0.AC11 AS AC,
                F_Bal0.SummD AS SDb,
                F_Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr
            FROM F_Bal0
            WHERE F_Bal0.AC11 LIKE :pac

        ) AS T1

    ) AS T2
    LEFT JOIN F_AcP21 ON :pac = F_AcP21.AC

    INTO
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname

    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_F_REP_APGR_01_CLID (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN F_ROPS2A.ID,
    SPID TYPE OF COLUMN F_ROPS2A.SPID,
    AC TYPE OF COLUMN F_ROPS2A.AC,
    RAC TYPE OF COLUMN F_ROPS2A.RAC,
    NAME TYPE OF COLUMN F_ROPS2A.NAME,
    B0 TYPE OF COLUMN F_ROPS2A.B0,
    SDB TYPE OF COLUMN F_ROPS2A.SDB,
    SCR TYPE OF COLUMN F_ROPS2A.SCR,
    TDB TYPE OF COLUMN F_ROPS2A.TDB,
    TCR TYPE OF COLUMN F_ROPS2A.TCR,
    CLID TYPE OF COLUMN F_ROPS2A.CLID,
    NAME1 TYPE OF COLUMN F_ROPS2A.NAME1,
    REGNR TYPE OF COLUMN F_ROPS2A.REGNR,
    RNAME TYPE OF COLUMN F_ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_F_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        :PAC as AC,
        null as RAC,
        f_acp21.name as NAME,
        0 as b0,
        coalesce(T2.ADb, 0.00) as sdb,
        coalesce(T2.ACr, 0.00) as scr,
        coalesce(T2.BDb, 0.00) as tdb,
        coalesce(T2.BCr, 0.00) as tcr,
        :pclid as clid,
        F_Persons.Name as name1,
        F_Persons.regnr as regnr,
        null as rname
    FROM
    (
        SELECT SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                F_OPS.AC11 AS AC,
                CASE
                    WHEN F_OPSd.Dete < :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as SDb,
                0.00 as SCr,
                CASE
                    WHEN F_OPSd.Dete >= :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as TDb,
                0.00 as TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE
                F_OPSd.Dete <= :edt AND
                F_OPS.AC11 LIKE :pac AND
                F_OPSd.clid = :pclid


            UNION ALL

            SELECT 
                F_OPS.AC21 AS AC,
                0.00 as SDb,
                CASE
                    WHEN F_OPSd.Dete < :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as SCr,
                0.00 as TDb,
                CASE
                    WHEN F_OPSd.Dete >= :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE
                F_OPSd.Dete <= :edt AND
                F_OPS.AC21 LIKE :pac AND
                F_OPSd.clid = :pclid

            UNION ALL

            SELECT 
                F_Bal0.AC11 AS AC,
                F_Bal0.SummD AS SDb,
                F_Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr
            FROM F_Bal0
            WHERE
                F_Bal0.AC11 LIKE :pac AND
                F_Bal0.ClId = :pclid

        ) AS T1

    ) AS T2
    LEFT JOIN F_AcP21 ON :pac = F_AcP21.AC
    LEFT JOIN F_Persons ON :pclid = F_Persons.ClId

    INTO
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname

    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_F_REP_APGR_01_CLID2 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN F_ROPS2A.ID,
    SPID TYPE OF COLUMN F_ROPS2A.SPID,
    AC TYPE OF COLUMN F_ROPS2A.AC,
    RAC TYPE OF COLUMN F_ROPS2A.RAC,
    NAME TYPE OF COLUMN F_ROPS2A.NAME,
    B0 TYPE OF COLUMN F_ROPS2A.B0,
    SDB TYPE OF COLUMN F_ROPS2A.SDB,
    SCR TYPE OF COLUMN F_ROPS2A.SCR,
    TDB TYPE OF COLUMN F_ROPS2A.TDB,
    TCR TYPE OF COLUMN F_ROPS2A.TCR,
    CLID TYPE OF COLUMN F_ROPS2A.CLID,
    NAME1 TYPE OF COLUMN F_ROPS2A.NAME1,
    REGNR TYPE OF COLUMN F_ROPS2A.REGNR,
    RNAME TYPE OF COLUMN F_ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_F_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        :PAC as AC,
        null as RAC,
        f_acp21.name as NAME,
        0 as b0,
        coalesce(T2.ADb, 0.00) as sdb,
        coalesce(T2.ACr, 0.00) as scr,
        coalesce(T2.BDb, 0.00) as tdb,
        coalesce(T2.BCr, 0.00) as tcr,
        :pclid as clid,
        F_Persons.Name as name1,
        F_Persons.regnr as regnr,
        null as rname
    FROM
    (
        SELECT SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                F_OPS.AC11 AS AC,
                CASE
                    WHEN F_OPSd.Dete < :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as SDb,
                0.00 as SCr,
                CASE
                    WHEN F_OPSd.Dete >= :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as TDb,
                0.00 as TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE
                F_OPSd.Dete <= :edt AND
                F_OPS.AC11 LIKE :pac AND
                F_OPSd.clid2 = :pclid


            UNION ALL

            SELECT 
                F_OPS.AC21 AS AC,
                0.00 as SDb,
                CASE
                    WHEN F_OPSd.Dete < :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as SCr,
                0.00 as TDb,
                CASE
                    WHEN F_OPSd.Dete >= :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE
                F_OPSd.Dete <= :edt AND
                F_OPS.AC21 LIKE :pac AND
                F_OPSd.clid2 = :pclid

            UNION ALL

            SELECT 
                F_Bal0.AC11 AS AC,
                F_Bal0.SummD AS SDb,
                F_Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr
            FROM F_Bal0
            WHERE
                F_Bal0.AC11 LIKE :pac AND
                F_Bal0.ClId = :pclid

        ) AS T1

    ) AS T2
    LEFT JOIN F_AcP21 ON :pac = F_AcP21.AC
    LEFT JOIN F_Persons ON :pclid = F_Persons.ClId

    INTO
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname

    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_F_REP_APGR_02 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN F_ROPS2A.ID,
    SPID TYPE OF COLUMN F_ROPS2A.SPID,
    AC TYPE OF COLUMN F_ROPS2A.AC,
    RAC TYPE OF COLUMN F_ROPS2A.RAC,
    NAME TYPE OF COLUMN F_ROPS2A.NAME,
    B0 TYPE OF COLUMN F_ROPS2A.B0,
    SDB TYPE OF COLUMN F_ROPS2A.SDB,
    SCR TYPE OF COLUMN F_ROPS2A.SCR,
    TDB TYPE OF COLUMN F_ROPS2A.TDB,
    TCR TYPE OF COLUMN F_ROPS2A.TCR,
    CLID TYPE OF COLUMN F_ROPS2A.CLID,
    NAME1 TYPE OF COLUMN F_ROPS2A.NAME1,
    REGNR TYPE OF COLUMN F_ROPS2A.REGNR,
    RNAME TYPE OF COLUMN F_ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_F_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        T2.AC as AC,
        null as RAC,
        f_acp21.name as NAME,
        T2.ADb - T2.ACr as b0,
        T2.ADb as sdb,
        T2.ACr as scr,
        T2.BDb as tdb,
        T2.BCr as tcr,
        null as clid,
        null as name1,
        null as regnr,
        null as rname
    FROM
    (
        SELECT AC, SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                F_OPS.AC11 AS AC,
                CASE
                    WHEN F_OPSd.Dete < :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as SDb,
                0.00 as SCr,
                CASE
                    WHEN F_OPSd.Dete >= :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as TDb,
                0.00 as TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE F_OPSd.Dete <= :edt AND F_OPS.AC11 LIKE :pac

            UNION ALL

            SELECT 
                F_OPS.AC21 AS AC,
                0.00 as SDb,
                CASE
                    WHEN F_OPSd.Dete < :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as SCr,
                0.00 as TDb,
                CASE
                    WHEN F_OPSd.Dete >= :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE F_OPSd.Dete <= :edt AND F_OPS.AC21 LIKE :pac

            UNION ALL

            SELECT 
                F_Bal0.AC11 AS AC,
                F_Bal0.SummD AS SDb,
                F_Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr
            FROM F_Bal0
            WHERE F_Bal0.AC11 LIKE :pac

        ) AS T1
        GROUP BY AC

    ) AS T2
    LEFT JOIN F_AcP21 ON T2.AC = F_AcP21.AC

    WHERE 
        (T2.ADb - T2.ACr) <> 0.00 OR
        T2.BDb <> 0.00 OR
        T2.BCr <> 0.00

    ORDER BY AC

    INTO
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname

    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_F_REP_APGR_02_CLID (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN F_ROPS2A.ID,
    SPID TYPE OF COLUMN F_ROPS2A.SPID,
    AC TYPE OF COLUMN F_ROPS2A.AC,
    RAC TYPE OF COLUMN F_ROPS2A.RAC,
    NAME TYPE OF COLUMN F_ROPS2A.NAME,
    B0 TYPE OF COLUMN F_ROPS2A.B0,
    SDB TYPE OF COLUMN F_ROPS2A.SDB,
    SCR TYPE OF COLUMN F_ROPS2A.SCR,
    TDB TYPE OF COLUMN F_ROPS2A.TDB,
    TCR TYPE OF COLUMN F_ROPS2A.TCR,
    CLID TYPE OF COLUMN F_ROPS2A.CLID,
    NAME1 TYPE OF COLUMN F_ROPS2A.NAME1,
    REGNR TYPE OF COLUMN F_ROPS2A.REGNR,
    RNAME TYPE OF COLUMN F_ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_F_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        T2.AC as AC,
        null as RAC,
        f_acp21.name as NAME,
        T2.ADb - T2.ACr as b0,
        T2.ADb as sdb,
        T2.ACr as scr,
        T2.BDb as tdb,
        T2.BCr as tcr,
        T2.Clid as clid,
        F_Persons.Name as name1,
        F_Persons.regnr as regnr,
        null as rname
    FROM
    (
        SELECT T1.AC, T1.clid, SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                F_OPS.AC11 AS AC,
                F_OPSd.ClId AS Clid,
                CASE
                    WHEN F_OPSd.Dete < :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as SDb,
                0.00 as SCr,
                CASE
                    WHEN F_OPSd.Dete >= :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as TDb,
                0.00 as TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE
                F_OPSd.Dete <= :edt AND
                F_OPS.AC11 LIKE :pac AND
                (:pclid IS NULL OR F_OPSd.ClId = :pclid)


            UNION ALL

            SELECT 
                F_OPS.AC21 AS AC,
                F_OPSd.ClId AS Clid,
                0.00 as SDb,
                CASE
                    WHEN F_OPSd.Dete < :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as SCr,
                0.00 as TDb,
                CASE
                    WHEN F_OPSd.Dete >= :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE
                F_OPSd.Dete <= :edt AND
                F_OPS.AC21 LIKE :pac AND
                (:pclid IS NULL OR F_OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                F_Bal0.AC11 AS AC,
                F_Bal0.ClId AS Clid,
                F_Bal0.SummD AS SDb,
                F_Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr
            FROM F_Bal0
            WHERE
                F_Bal0.AC11 LIKE :pac AND
                (:pclid IS NULL OR F_Bal0.ClId = :pclid)

        ) AS T1
        GROUP BY T1.AC, T1.clid

    ) AS T2
    LEFT JOIN F_AcP21 ON T2.AC = F_AcP21.AC
    LEFT JOIN F_Persons ON T2.Clid = F_Persons.ClId

    WHERE 
        (T2.ADb - T2.ACr) <> 0.00 OR
        T2.BDb <> 0.00 OR
        T2.BCr <> 0.00

    ORDER BY AC, Clid

    INTO
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname

    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_F_REP_APGR_10 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN F_ROPS2A.ID,
    SPID TYPE OF COLUMN F_ROPS2A.SPID,
    AC TYPE OF COLUMN F_ROPS2A.AC,
    RAC TYPE OF COLUMN F_ROPS2A.RAC,
    NAME TYPE OF COLUMN F_ROPS2A.NAME,
    B0 TYPE OF COLUMN F_ROPS2A.B0,
    SDB TYPE OF COLUMN F_ROPS2A.SDB,
    SCR TYPE OF COLUMN F_ROPS2A.SCR,
    TDB TYPE OF COLUMN F_ROPS2A.TDB,
    TCR TYPE OF COLUMN F_ROPS2A.TCR,
    CLID TYPE OF COLUMN F_ROPS2A.CLID,
    NAME1 TYPE OF COLUMN F_ROPS2A.NAME1,
    REGNR TYPE OF COLUMN F_ROPS2A.REGNR,
    RNAME TYPE OF COLUMN F_ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_F_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        :PAC as AC,
        null as RAC,
        f_acp21.name as NAME,
        0 as b0,
        coalesce(T2.ADb, 0.00) as sdb,
        coalesce(T2.ACr, 0.00) as scr,
        coalesce(T2.BDb, 0.00) as tdb,
        coalesce(T2.BCr, 0.00) as tcr,
        null as clid,
        null as name1,
        null as regnr,
        null as rname
    FROM
    (
        SELECT SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                F_OPS.AC11 AS AC,
                CASE
                    WHEN F_OPSd.Dete < :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as SDb,
                0.00 as SCr,
                CASE
                    WHEN F_OPSd.Dete >= :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as TDb,
                0.00 as TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE F_OPSd.Dete <= :edt AND F_OPS.AC11 LIKE :pac

            UNION ALL

            SELECT 
                F_OPS.AC21 AS AC,
                0.00 as SDb,
                CASE
                    WHEN F_OPSd.Dete < :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as SCr,
                0.00 as TDb,
                CASE
                    WHEN F_OPSd.Dete >= :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE F_OPSd.Dete <= :edt AND F_OPS.AC21 LIKE :pac

            UNION ALL

            SELECT 
                F_Bal0.AC11 AS AC,
                F_Bal0.SummD AS SDb,
                F_Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr
            FROM F_Bal0
            WHERE F_Bal0.AC11 LIKE :pac

        ) AS T1

    ) AS T2
    LEFT JOIN F_AcP21 ON :pac = F_AcP21.AC

    INTO
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname

    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_F_REP_APGR_10_CLID (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN F_ROPS2A.ID,
    SPID TYPE OF COLUMN F_ROPS2A.SPID,
    AC TYPE OF COLUMN F_ROPS2A.AC,
    RAC TYPE OF COLUMN F_ROPS2A.RAC,
    NAME TYPE OF COLUMN F_ROPS2A.NAME,
    B0 TYPE OF COLUMN F_ROPS2A.B0,
    SDB TYPE OF COLUMN F_ROPS2A.SDB,
    SCR TYPE OF COLUMN F_ROPS2A.SCR,
    TDB TYPE OF COLUMN F_ROPS2A.TDB,
    TCR TYPE OF COLUMN F_ROPS2A.TCR,
    CLID TYPE OF COLUMN F_ROPS2A.CLID,
    NAME1 TYPE OF COLUMN F_ROPS2A.NAME1,
    REGNR TYPE OF COLUMN F_ROPS2A.REGNR,
    RNAME TYPE OF COLUMN F_ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_F_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        T2.AC as AC,
        null as RAC,
        f_acp21.name as NAME,
        0 as b0,
        T2.ADb as sdb,
        T2.ACr as scr,
        T2.BDb as tdb,
        T2.BCr as tcr,
        T2.Clid as clid,
        F_Persons.Name as name1,
        F_Persons.regnr as regnr,
        null as rname
    FROM
    (
        SELECT T1.AC, T1.clid, SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                F_OPS.AC11 AS AC,
                F_OPSd.ClId AS Clid,
                CASE
                    WHEN F_OPSd.Dete < :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as SDb,
                0.00 as SCr,
                CASE
                    WHEN F_OPSd.Dete >= :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as TDb,
                0.00 as TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE
                F_OPSd.Dete <= :edt AND
                F_OPS.AC11 LIKE :pac AND
                (:pclid IS NULL OR F_OPSd.ClId = :pclid)


            UNION ALL

            SELECT 
                F_OPS.AC21 AS AC,
                F_OPSd.ClId AS Clid,
                0.00 as SDb,
                CASE
                    WHEN F_OPSd.Dete < :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as SCr,
                0.00 as TDb,
                CASE
                    WHEN F_OPSd.Dete >= :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE
                F_OPSd.Dete <= :edt AND
                F_OPS.AC21 LIKE :pac AND
                (:pclid IS NULL OR F_OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                F_Bal0.AC11 AS AC,
                F_Bal0.ClId AS Clid,
                F_Bal0.SummD AS SDb,
                F_Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr
            FROM F_Bal0
            WHERE
                F_Bal0.AC11 LIKE :pac AND
                (:pclid IS NULL OR F_Bal0.ClId = :pclid)

        ) AS T1
        GROUP BY T1.AC, T1.clid

    ) AS T2
    LEFT JOIN F_AcP21 ON :pac = F_AcP21.AC
    LEFT JOIN F_Persons ON T2.Clid = F_Persons.ClId

    WHERE 
        (T2.ADb - T2.ACr) <> 0.00 OR
        T2.BDb <> 0.00 OR
        T2.BCr <> 0.00

    ORDER BY AC, Clid

    INTO
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname

    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_F_REP_APGR_11 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN F_ROPS2A.ID,
    SPID TYPE OF COLUMN F_ROPS2A.SPID,
    AC TYPE OF COLUMN F_ROPS2A.AC,
    RAC TYPE OF COLUMN F_ROPS2A.RAC,
    NAME TYPE OF COLUMN F_ROPS2A.NAME,
    B0 TYPE OF COLUMN F_ROPS2A.B0,
    SDB TYPE OF COLUMN F_ROPS2A.SDB,
    SCR TYPE OF COLUMN F_ROPS2A.SCR,
    TDB TYPE OF COLUMN F_ROPS2A.TDB,
    TCR TYPE OF COLUMN F_ROPS2A.TCR,
    CLID TYPE OF COLUMN F_ROPS2A.CLID,
    NAME1 TYPE OF COLUMN F_ROPS2A.NAME1,
    REGNR TYPE OF COLUMN F_ROPS2A.REGNR,
    RNAME TYPE OF COLUMN F_ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_F_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        T2.AC as AC,
        null as RAC,
        f_acp21.name as NAME,
        T2.ADb - T2.ACr as b0,
        T2.ADb as sdb,
        T2.ACr as scr,
        T2.BDb as tdb,
        T2.BCr as tcr,
        null as clid,
        null as name1,
        null as regnr,
        null as rname
    FROM
    (
        SELECT AC, SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                F_OPS.AC11 AS AC,
                CASE
                    WHEN F_OPSd.Dete < :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as SDb,
                0.00 as SCr,
                CASE
                    WHEN F_OPSd.Dete >= :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as TDb,
                0.00 as TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE F_OPSd.Dete <= :edt AND F_OPS.AC11 LIKE :pac

            UNION ALL

            SELECT 
                F_OPS.AC21 AS AC,
                0.00 as SDb,
                CASE
                    WHEN F_OPSd.Dete < :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as SCr,
                0.00 as TDb,
                CASE
                    WHEN F_OPSd.Dete >= :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE F_OPSd.Dete <= :edt AND F_OPS.AC21 LIKE :pac

            UNION ALL

            SELECT 
                F_Bal0.AC11 AS AC,
                F_Bal0.SummD AS SDb,
                F_Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr
            FROM F_Bal0
            WHERE F_Bal0.AC11 LIKE :pac

        ) AS T1
        GROUP BY AC

    ) AS T2
    LEFT JOIN F_AcP21 ON T2.AC = F_AcP21.AC

    WHERE 
        (T2.ADb - T2.ACr) <> 0.00 OR
        T2.BDb <> 0.00 OR
        T2.BCr <> 0.00

    ORDER BY AC

    INTO
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname

    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_F_REP_APGR_21 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PACLEN INTEGER)
RETURNS (
    ID TYPE OF COLUMN F_ROPS2A.ID,
    SPID TYPE OF COLUMN F_ROPS2A.SPID,
    AC TYPE OF COLUMN F_ROPS2A.AC,
    RAC TYPE OF COLUMN F_ROPS2A.RAC,
    NAME TYPE OF COLUMN F_ROPS2A.NAME,
    B0 TYPE OF COLUMN F_ROPS2A.B0,
    SDB TYPE OF COLUMN F_ROPS2A.SDB,
    SCR TYPE OF COLUMN F_ROPS2A.SCR,
    TDB TYPE OF COLUMN F_ROPS2A.TDB,
    TCR TYPE OF COLUMN F_ROPS2A.TCR,
    CLID TYPE OF COLUMN F_ROPS2A.CLID,
    NAME1 TYPE OF COLUMN F_ROPS2A.NAME1,
    REGNR TYPE OF COLUMN F_ROPS2A.REGNR,
    RNAME TYPE OF COLUMN F_ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_F_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        T2.AC as AC,
        null as RAC,
        f_acp21.name as NAME,
        T2.ADb - T2.ACr as b0,
        T2.ADb as sdb,
        T2.ACr as scr,
        T2.BDb as tdb,
        T2.BCr as tcr,
        null as clid,
        null as name1,
        null as regnr,
        null as rname
    FROM
    (
        SELECT AC, SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                LEFT(F_OPS.AC11, :paclen) AS AC,
                CASE
                    WHEN F_OPSd.Dete < :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as SDb,
                0.00 as SCr,
                CASE
                    WHEN F_OPSd.Dete >= :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as TDb,
                0.00 as TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE F_OPSd.Dete <= :edt AND F_OPS.AC11 LIKE :pac

            UNION ALL

            SELECT 
                LEFT(F_OPS.AC21, :paclen) AS AC,
                0.00 as SDb,
                CASE
                    WHEN F_OPSd.Dete < :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as SCr,
                0.00 as TDb,
                CASE
                    WHEN F_OPSd.Dete >= :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE F_OPSd.Dete <= :edt AND F_OPS.AC21 LIKE :pac

            UNION ALL

            SELECT 
                LEFT(F_Bal0.AC11, :paclen) AS AC,
                F_Bal0.SummD AS SDb,
                F_Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr
            FROM F_Bal0
            WHERE F_Bal0.AC11 LIKE :pac

        ) AS T1
        GROUP BY AC

    ) AS T2
    LEFT JOIN F_AcP21 ON T2.AC = F_AcP21.AC

    WHERE 
        (T2.ADb - T2.ACr) <> 0.00 OR
        T2.BDb <> 0.00 OR
        T2.BCr <> 0.00

    ORDER BY AC

    INTO
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname

    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_F_REP_APGR_CUR_01 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCUR VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN F_ROPS2A.ID,
    SPID TYPE OF COLUMN F_ROPS2A.SPID,
    AC TYPE OF COLUMN F_ROPS2A.AC,
    RAC TYPE OF COLUMN F_ROPS2A.RAC,
    NAME TYPE OF COLUMN F_ROPS2A.NAME,
    B0 TYPE OF COLUMN F_ROPS2A.B0,
    SDB TYPE OF COLUMN F_ROPS2A.SDB,
    SCR TYPE OF COLUMN F_ROPS2A.SCR,
    TDB TYPE OF COLUMN F_ROPS2A.TDB,
    TCR TYPE OF COLUMN F_ROPS2A.TCR,
    CLID TYPE OF COLUMN F_ROPS2A.CLID,
    NAME1 TYPE OF COLUMN F_ROPS2A.NAME1,
    REGNR TYPE OF COLUMN F_ROPS2A.REGNR,
    RNAME TYPE OF COLUMN F_ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_F_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        T2.AC as AC,
        null as RAC,
        f_acp21.name as NAME,
        T2.ADb - T2.ACr as b0,
        T2.ADb as sdb,
        T2.ACr as scr,
        T2.BDb as tdb,
        T2.BCr as tcr,
        null as clid,
        null as name1,
        null as regnr,
        null as rname
    FROM
    (
        SELECT AC, SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                F_OPS.AC11 AS AC,
                CASE
                    WHEN F_OPSd.Dete < :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as SDb,
                0.00 as SCr,
                CASE
                    WHEN F_OPSd.Dete >= :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as TDb,
                0.00 as TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE
                F_OPSd.Dete <= :edt AND
                F_OPS.AC11 = :pac AND
                F_OPS.Cur = :pcur

            UNION ALL

            SELECT 
                F_OPS.AC21 AS AC,
                0.00 as SDb,
                CASE
                    WHEN F_OPSd.Dete < :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as SCr,
                0.00 as TDb,
                CASE
                    WHEN F_OPSd.Dete >= :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE
                F_OPSd.Dete <= :edt AND
                F_OPS.AC21 = :pac AND
                F_OPS.Cur = :pcur

            UNION ALL

            SELECT 
                F_Bal0.AC11 AS AC,
                F_Bal0.SummD AS SDb,
                F_Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr
            FROM F_Bal0
            WHERE F_Bal0.AC11 = :pac AND F_Bal0.Cur = :pcur

        ) AS T1
        GROUP BY AC

    ) AS T2
    LEFT JOIN F_AcP21 ON T2.AC = F_AcP21.AC

    WHERE 
        (T2.ADb - T2.ACr) <> 0.00 OR
        T2.BDb <> 0.00 OR
        T2.BCr <> 0.00

    ORDER BY AC

    INTO
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname

    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_F_REP_APGR_CUR_01_CLID (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(8),
    PCUR VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN F_ROPS2A.ID,
    SPID TYPE OF COLUMN F_ROPS2A.SPID,
    AC TYPE OF COLUMN F_ROPS2A.AC,
    RAC TYPE OF COLUMN F_ROPS2A.RAC,
    NAME TYPE OF COLUMN F_ROPS2A.NAME,
    B0 TYPE OF COLUMN F_ROPS2A.B0,
    SDB TYPE OF COLUMN F_ROPS2A.SDB,
    SCR TYPE OF COLUMN F_ROPS2A.SCR,
    TDB TYPE OF COLUMN F_ROPS2A.TDB,
    TCR TYPE OF COLUMN F_ROPS2A.TCR,
    CLID TYPE OF COLUMN F_ROPS2A.CLID,
    NAME1 TYPE OF COLUMN F_ROPS2A.NAME1,
    REGNR TYPE OF COLUMN F_ROPS2A.REGNR,
    RNAME TYPE OF COLUMN F_ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_F_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        T2.AC as AC,
        null as RAC,
        f_acp21.name as NAME,
        T2.ADb - T2.ACr as b0,
        T2.ADb as sdb,
        T2.ACr as scr,
        T2.BDb as tdb,
        T2.BCr as tcr,
        T2.Clid as clid,
        F_Persons.Name as name1,
        F_Persons.regnr as regnr,
        null as rname
    FROM
    (
        SELECT AC, T1.Clid AS Clid, SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                F_OPS.AC11 AS AC,
                F_OPSd.ClId AS Clid,
                CASE
                    WHEN F_OPSd.Dete < :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as SDb,
                0.00 as SCr,
                CASE
                    WHEN F_OPSd.Dete >= :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as TDb,
                0.00 as TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE
                F_OPSd.Dete <= :edt AND
                F_OPS.AC11 LIKE :pac AND
                F_OPS.Cur = :pcur AND
                (:pclid IS NULL OR F_OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                F_OPS.AC21 AS AC,
                F_OPSd.ClId AS Clid,
                0.00 as SDb,
                CASE
                    WHEN F_OPSd.Dete < :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as SCr,
                0.00 as TDb,
                CASE
                    WHEN F_OPSd.Dete >= :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END as TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE
                F_OPSd.Dete <= :edt AND
                F_OPS.AC21 = :pac AND
                F_OPS.Cur = :pcur AND
                (:pclid IS NULL OR F_OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                F_Bal0.AC11 AS AC,
                F_Bal0.ClId AS Clid,
                F_Bal0.SummD AS SDb,
                F_Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr
            FROM F_Bal0
            WHERE
                F_Bal0.AC11 = :pac AND
                F_Bal0.Cur = :pcur AND
                (:pclid IS NULL OR F_Bal0.ClId = :pclid)

        ) AS T1
        GROUP BY AC, T1.Clid

    ) AS T2
    LEFT JOIN F_AcP21 ON T2.AC = F_AcP21.AC
    LEFT JOIN F_Persons ON T2.Clid = F_Persons.ClId

    WHERE 
        (T2.ADb - T2.ACr) <> 0.00 OR
        T2.BDb <> 0.00 OR
        T2.BCr <> 0.00

    ORDER BY AC

    INTO
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname

    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_F_REP_APGR_DZ_11 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID TYPE OF COLUMN F_ROPS3A.ID,
    SPID TYPE OF COLUMN F_ROPS3A.SPID,
    RAC TYPE OF COLUMN F_ROPS3A.RAC,
    NAME TYPE OF COLUMN F_ROPS3A.NAME,
    SDB TYPE OF COLUMN F_ROPS3A.SDB,
    SCR TYPE OF COLUMN F_ROPS3A.SCR,
    AC1 TYPE OF COLUMN F_ROPS3A.AC1,
    CLID TYPE OF COLUMN F_ROPS3A.CLID)
AS
begin
    FOR SELECT
        gen_id(GEN_F_ROPS3A_ID, 1) as id,
        current_connection as spid,
        T2.AC AS RAc,
        F_Acp23.Name AS Name,
        T2.BDb AS SDb,
        T2.BCr AS SCr,
        NULL AS AC1,
        NULL AS Clid

    FROM
    (
        SELECT AC, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                F_OPS.AC13 AS AC,
                F_OPS.Summ AS TDb,
                0.00 AS TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE 
                F_OPSd.Dete BETWEEN :sdt AND :edt AND
                F_OPS.AC13 IS NOT NULL AND
                F_OPS.AC13 NOT IN ('KA','BA','CN')

            UNION ALL

            SELECT 
                F_OPS.AC23 AS AC,
                0.00 AS TDb,
                F_OPS.Summ AS TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE 
                F_OPSd.Dete BETWEEN :sdt AND :edt AND
                F_OPS.AC23 IS NOT NULL AND
                F_OPS.AC23 NOT IN ('KA','BA','CN')

        ) AS T1

        GROUP BY T1.AC
    ) AS T2    
    LEFT JOIN F_Acp23 ON F_Acp23.idx = T2.AC
    
    ORDER BY RAc

    INTO
        :id, :spid, :rac, :name,
        :sdb, :scr, :ac1, :clid
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_APGR_DZ_12 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID TYPE OF COLUMN F_ROPS2A.ID,
    SPID TYPE OF COLUMN F_ROPS2A.SPID,
    AC TYPE OF COLUMN F_ROPS2A.AC,
    RAC TYPE OF COLUMN F_ROPS2A.RAC,
    NAME TYPE OF COLUMN F_ROPS2A.NAME,
    B0 TYPE OF COLUMN F_ROPS2A.B0,
    SDB TYPE OF COLUMN F_ROPS2A.SDB,
    SCR TYPE OF COLUMN F_ROPS2A.SCR,
    TDB TYPE OF COLUMN F_ROPS2A.TDB,
    TCR TYPE OF COLUMN F_ROPS2A.TCR,
    CLID TYPE OF COLUMN F_ROPS2A.CLID,
    NAME1 TYPE OF COLUMN F_ROPS2A.NAME1,
    REGNR TYPE OF COLUMN F_ROPS2A.REGNR,
    RNAME TYPE OF COLUMN F_ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_F_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        T2.AC as AC,
        null as RAC,
        f_acp23.name as NAME,
        T2.ADb - T2.ACr as b0,
        T2.ADb as sdb,
        T2.ACr as scr,
        T2.BDb as tdb,
        T2.BCr as tcr,
        null as clid,
        null as name1,
        null as regnr,
        null as rname
    FROM
    (
        SELECT AC, SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                F_OPS.AC13 AS AC,
                F_OPS.Summ AS SDb,
                0.00 AS SCr,
                0.00 AS TDb,
                0.00 AS TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE 
                F_OPSd.Dete < :sdt AND
                F_OPS.AC13 IN ('KA', 'BA', 'CN')

            UNION ALL

            SELECT 
                F_OPS.AC23 AS AC,
                0.00 AS SDb,
                F_OPS.Summ AS SCr,
                0.00 AS TDb,
                0.00 AS TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE 
                F_OPSd.Dete < :sdt AND
                F_OPS.AC23 IN ('KA', 'BA', 'CN')

            UNION ALL

            SELECT 
                F_OPS.AC13 AS AC,
                0.00 AS SDb,
                0.00 AS SCr,
                F_OPS.Summ AS TDb,
                0.00 AS TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE 
                F_OPSd.Dete BETWEEN :sdt AND :edt AND 
                F_OPS.AC13 IN ('KA', 'BA', 'CN')

            UNION ALL

            SELECT 
                F_OPS.AC23 AS AC,
                0.00 AS SDb,
                0.00 AS SCr,
                0.00 AS TDb,
                F_OPS.Summ AS TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE 
                F_OPSd.Dete BETWEEN :sdt AND :edt AND 
                F_OPS.AC23 IN ('KA', 'BA', 'CN')
            
            UNION ALL

            
            SELECT 
                F_AcP21.id1 AS AC,
                F_Bal0.SummD AS SDb,
                F_Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr

            FROM F_Bal0 JOIN F_AcP21 ON F_Bal0.AC11 = F_AcP21.AC
            WHERE F_AcP21.id1 IN ('KA', 'BA', 'CN')

        ) AS T1

        GROUP BY T1.AC
    ) AS T2    

    LEFT JOIN F_Acp23 ON F_Acp23.idx = T2.AC
    
    ORDER BY AC

    into
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname
    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_F_REP_APGR_FULL_11 (
    SDT DATE,
    EDT DATE,
    PAC1 VARCHAR(8),
    PAC2 VARCHAR(8),
    PAC3 VARCHAR(5),
    PAC4 VARCHAR(8),
    PAC5 VARCHAR(5),
    PCLID VARCHAR(15),
    PXAC1 INTEGER,
    PXAC2 INTEGER,
    PXAC3 INTEGER,
    PXAC4 INTEGER,
    PXAC5 INTEGER,
    PXCLID INTEGER)
RETURNS (
    ID TYPE OF COLUMN F_TREPAPAN.ID,
    SPID TYPE OF COLUMN F_TREPAPAN.SPID,
    AC1 TYPE OF COLUMN F_TREPAPAN.AC1,
    AC2 TYPE OF COLUMN F_TREPAPAN.AC2,
    AC3 TYPE OF COLUMN F_TREPAPAN.AC3,
    AC4 TYPE OF COLUMN F_TREPAPAN.AC4,
    AC5 TYPE OF COLUMN F_TREPAPAN.AC5,
    CL TYPE OF COLUMN F_TREPAPAN.CL,
    S1 TYPE OF COLUMN F_TREPAPAN.S1,
    S2 TYPE OF COLUMN F_TREPAPAN.S2,
    S3 TYPE OF COLUMN F_TREPAPAN.S3,
    S4 TYPE OF COLUMN F_TREPAPAN.S4)
AS
begin
    FOR SELECT
        gen_id(gen_f_trepapan_id, 1) AS ID,
        current_connection AS spid,
        T3.AC1 AS AC1,
        T3.AC2 AS AC2,
        T3.AC3 AS AC3,
        T3.AC4 AS AC4,
        T3.AC5 AS AC5,
        T3.CL AS CL,
        T3.SS1 AS S1,
        T3.SS2 AS S2,
        T3.SS3 AS s3,
        T3.SS4 AS s4
    FROM
    (
        SELECT 
            AC1, AC2, AC3, AC4, AC5, CL,
            SUM(SS1) AS SS1, SUM(SS2) AS SS2, SUM(SS3) AS SS3, SUM(SS4) AS SS4
        FROM
        (
            SELECT 
                CASE WHEN :pxac1 = 1 THEN T1.AC1 ELSE NULL END AS AC1,
                CASE WHEN :pxac2 = 1 THEN T1.AC2 ELSE NULL END AS AC2,
                CASE WHEN :pxac3 = 1 THEN T1.AC3 ELSE NULL END AS AC3,
                CASE WHEN :pxac4 = 1 THEN T1.AC4 ELSE NULL END AS AC4,
                CASE WHEN :pxac5 = 1 THEN T1.AC5 ELSE NULL END AS AC5,
                CASE WHEN :pxclid = 1 THEN T1.CL ELSE NULL END AS CL,
                SUM(S1) AS SS1, SUM(S2) AS SS2, SUM(s3) AS SS3, SUM(s4) AS SS4
            FROM
            (
                SELECT 
                    F_OPS.AC11 AS AC1,
                    F_OPS.AC12 AS AC2,
                    F_OPS.AC13 AS AC3,
                    F_OPS.AC14 AS AC4,
                    F_OPS.AC15 AS AC5,
                    F_OPSd.ClId AS CL,
                    F_OPS.Summ AS S1,
                    0.00 AS S2,
                    coalesce(F_OPS.QV, 0.00) AS s3,
                    0.00 AS S4

                FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                WHERE 
                    F_OPSd.Dete BETWEEN :sdt AND :edt AND 
                    (:pac1 IS NULL OR F_OPS.AC11 LIKE :pac1) AND
                    (:pac2 IS NULL OR F_OPS.AC12 LIKE :pac2) AND
                    (:pac3 IS NULL OR F_OPS.AC13 LIKE :pac3) AND
                    (:pac4 IS NULL OR F_OPS.AC14 LIKE :pac4) AND
                    (:pac5 IS NULL OR F_OPS.AC15 LIKE :pac5) AND
                    (:pclid IS NULL OR F_OPSd.ClId = :pclid)

                UNION ALL

                SELECT 
                    F_OPS.AC21 AS AC1,
                    F_OPS.AC22 AS AC2,
                    F_OPS.AC23 AS AC3,
                    F_OPS.AC24 AS AC4,
                    F_OPS.AC25 AS AC5,
                    F_OPSd.ClId AS CL,
                    0.00 AS S1,
                    F_OPS.Summ AS S2,
                    0.00 AS S3,
                    coalesce(F_OPS.QV, 0.00) AS s4

                FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                WHERE 
                    F_OPSd.Dete BETWEEN :sdt AND :edt AND 
                    (:pac1 IS NULL OR F_OPS.AC21 LIKE :pac1) AND
                    (:pac2 IS NULL OR F_OPS.AC22 LIKE :pac2) AND
                    (:pac3 IS NULL OR F_OPS.AC23 LIKE :pac3) AND
                    (:pac4 IS NULL OR F_OPS.AC24 LIKE :pac4) AND
                    (:pac5 IS NULL OR F_OPS.AC25 LIKE :pac5) AND
                    (:pclid IS NULL OR F_OPSd.ClId = :pclid)

            ) AS T1
            GROUP BY T1.AC1, T1.AC2, T1.AC3, T1.AC4, T1.AC5, T1.CL

        )AS T2
        GROUP BY T2.AC1, T2.AC2, T2.AC3, T2.AC4, T2.AC5, T2.CL

    ) AS T3    
    ORDER BY AC1, AC2, AC3, AC4, AC5, CL

    into
        :id, :spid, :ac1, :ac2, :ac3, :ac4, :ac5,
        :cl, :s1, :s2, :s3, :s4
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_APGR_FULL_12 (
    SDT DATE,
    EDT DATE,
    PAC1 VARCHAR(8),
    PAC2 VARCHAR(8),
    PAC3 VARCHAR(5),
    PAC4 VARCHAR(8),
    PAC5 VARCHAR(5),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN F_TREPAPAN.ID,
    SPID TYPE OF COLUMN F_TREPAPAN.SPID,
    AC1 TYPE OF COLUMN F_TREPAPAN.AC1,
    AC2 TYPE OF COLUMN F_TREPAPAN.AC2,
    AC3 TYPE OF COLUMN F_TREPAPAN.AC3,
    AC4 TYPE OF COLUMN F_TREPAPAN.AC4,
    AC5 TYPE OF COLUMN F_TREPAPAN.AC5,
    CL TYPE OF COLUMN F_TREPAPAN.CL,
    S1 TYPE OF COLUMN F_TREPAPAN.S1,
    S2 TYPE OF COLUMN F_TREPAPAN.S2,
    S3 TYPE OF COLUMN F_TREPAPAN.S3,
    S4 TYPE OF COLUMN F_TREPAPAN.S4)
AS
begin
    FOR SELECT
        gen_id(gen_f_trepapan_id, 1) AS ID,
        current_connection AS spid,
        T2.AC1 AS AC1,
        T2.AC2 AS AC2,
        T2.AC3 AS AC3,
        T2.AC4 AS AC4,
        T2.AC5 AS AC5,
        T2.CL AS CL,
        T2.SS1 AS S1,
        T2.SS2 AS S2,
        T2.SS3 AS s3,
        T2.SS4 AS s4
    FROM
    (
        SELECT
            AC1, AC2, AC3, AC4, AC5, CL,
            SUM(S1) AS SS1, SUM(S2) AS SS2, SUM(s3) AS SS3, SUM(s4) AS SS4
        FROM
        (
            SELECT 
                F_OPS.AC11 AS AC1,
                F_OPS.AC12 AS AC2,
                F_OPS.AC13 AS AC3,
                F_OPS.AC14 AS AC4,
                F_OPS.AC15 AS AC5,
                F_OPSd.ClId AS CL,
                F_OPS.Summ AS S1,
                0.00 AS S2,
                coalesce(F_OPS.QV, 0.00) AS s3,
                0.00 AS S4

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE 
                F_OPSd.Dete BETWEEN :sdt AND :edt AND 
                (:pac1 IS NULL OR F_OPS.AC11 LIKE :pac1) AND
                (:pac2 IS NULL OR F_OPS.AC12 LIKE :pac2) AND
                (:pac3 IS NULL OR F_OPS.AC13 LIKE :pac3) AND
                (:pac4 IS NULL OR F_OPS.AC14 LIKE :pac4) AND
                (:pac5 IS NULL OR F_OPS.AC15 LIKE :pac5)

            UNION ALL

            SELECT 
                F_OPS.AC21 AS AC1,
                F_OPS.AC22 AS AC2,
                F_OPS.AC23 AS AC3,
                F_OPS.AC24 AS AC4,
                F_OPS.AC25 AS AC5,
                F_OPSd.ClId AS CL,
                0.00 AS S1,
                F_OPS.Summ AS S2,
                0.00 AS S3,
                coalesce(F_OPS.QV, 0.00) AS s4

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE 
                F_OPSd.Dete BETWEEN :sdt AND :edt AND 
                (:pac1 IS NULL OR F_OPS.AC21 LIKE :pac1) AND
                (:pac2 IS NULL OR F_OPS.AC22 LIKE :pac2) AND
                (:pac3 IS NULL OR F_OPS.AC23 LIKE :pac3) AND
                (:pac4 IS NULL OR F_OPS.AC24 LIKE :pac4) AND
                (:pac5 IS NULL OR F_OPS.AC25 LIKE :pac5)

        ) AS T1

        GROUP BY T1.AC1, T1.AC2, T1.AC3, T1.AC4, T1.AC5, T1.CL
    ) AS T2    
    ORDER BY AC1, AC2, AC3, AC4, AC5, CL

    into
        :id, :spid, :ac1, :ac2, :ac3, :ac4, :ac5,
        :cl, :s1, :s2, :s3, :s4
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_APGR_MT_11 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN F_TREPMT.ID,
    SPID TYPE OF COLUMN F_TREPMT.SPID,
    AD TYPE OF COLUMN F_TREPMT.AD,
    AC1 TYPE OF COLUMN F_TREPMT.AC1,
    AC2 TYPE OF COLUMN F_TREPMT.AC2,
    ACN1 TYPE OF COLUMN F_TREPMT.ACN1,
    ACN2 TYPE OF COLUMN F_TREPMT.ACN2,
    M1 TYPE OF COLUMN F_TREPMT.M1,
    M2 TYPE OF COLUMN F_TREPMT.M2,
    M3 TYPE OF COLUMN F_TREPMT.M3,
    M4 TYPE OF COLUMN F_TREPMT.M4,
    M5 TYPE OF COLUMN F_TREPMT.M5,
    M6 TYPE OF COLUMN F_TREPMT.M6,
    M7 TYPE OF COLUMN F_TREPMT.M7,
    M8 TYPE OF COLUMN F_TREPMT.M8,
    M9 TYPE OF COLUMN F_TREPMT.M9,
    M10 TYPE OF COLUMN F_TREPMT.M10,
    M11 TYPE OF COLUMN F_TREPMT.M11,
    M12 TYPE OF COLUMN F_TREPMT.M12,
    N1 TYPE OF COLUMN F_TREPMT.N1,
    N2 TYPE OF COLUMN F_TREPMT.N2,
    N3 TYPE OF COLUMN F_TREPMT.N3,
    N4 TYPE OF COLUMN F_TREPMT.N4,
    N5 TYPE OF COLUMN F_TREPMT.N5,
    N6 TYPE OF COLUMN F_TREPMT.N6,
    N7 TYPE OF COLUMN F_TREPMT.N7,
    N8 TYPE OF COLUMN F_TREPMT.N8,
    N9 TYPE OF COLUMN F_TREPMT.N9,
    N10 TYPE OF COLUMN F_TREPMT.N10,
    N11 TYPE OF COLUMN F_TREPMT.N11,
    N12 TYPE OF COLUMN F_TREPMT.N12,
    MT TYPE OF COLUMN F_TREPMT.MT,
    NT TYPE OF COLUMN F_TREPMT.NT)
AS
begin
    FOR SELECT
        gen_id(GEN_F_TREPMT_ID, 1) AS id,
        current_connection AS spid,
        null AS ad,
        T3.AC AS AC1,
        null AS AC2,
        F_AcP21.Name AS ACN1,
        NULL AS ACN2,
        M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,
        N1,N2,N3,N4,N5,N6,N7,N8,N9,N10,N11,N12,
        0 AS MT, 0 as NT
    FROM
    (
        SELECT 
            AC,
            SUM(CASE WHEN MT = 1 THEN ADb ELSE 0.00 END) AS M1,
            SUM(CASE WHEN MT = 2 THEN ADb ELSE 0.00 END) AS M2,
            SUM(CASE WHEN MT = 3 THEN ADb ELSE 0.00 END) AS M3,
            SUM(CASE WHEN MT = 4 THEN ADb ELSE 0.00 END) AS M4,
            SUM(CASE WHEN MT = 5 THEN ADb ELSE 0.00 END) AS M5,
            SUM(CASE WHEN MT = 6 THEN ADb ELSE 0.00 END) AS M6,
            SUM(CASE WHEN MT = 7 THEN ADb ELSE 0.00 END) AS M7,
            SUM(CASE WHEN MT = 8 THEN ADb ELSE 0.00 END) AS M8,
            SUM(CASE WHEN MT = 9 THEN ADb ELSE 0.00 END) AS M9,
            SUM(CASE WHEN MT = 10 THEN ADb ELSE 0.00 END) AS M10,
            SUM(CASE WHEN MT = 11 THEN ADb ELSE 0.00 END) AS M11,
            SUM(CASE WHEN MT = 12 THEN ADb ELSE 0.00 END) AS M12,
            
            SUM(CASE WHEN MT = 1 THEN ACr ELSE 0.00 END) AS N1,
            SUM(CASE WHEN MT = 2 THEN ACr ELSE 0.00 END) AS N2,
            SUM(CASE WHEN MT = 3 THEN ACr ELSE 0.00 END) AS N3,
            SUM(CASE WHEN MT = 4 THEN ACr ELSE 0.00 END) AS N4,
            SUM(CASE WHEN MT = 5 THEN ACr ELSE 0.00 END) AS N5,
            SUM(CASE WHEN MT = 6 THEN ACr ELSE 0.00 END) AS N6,
            SUM(CASE WHEN MT = 7 THEN ACr ELSE 0.00 END) AS N7,
            SUM(CASE WHEN MT = 8 THEN ACr ELSE 0.00 END) AS N8,
            SUM(CASE WHEN MT = 9 THEN ACr ELSE 0.00 END) AS N9,
            SUM(CASE WHEN MT = 10 THEN ACr ELSE 0.00 END) AS N10,
            SUM(CASE WHEN MT = 11 THEN ACr ELSE 0.00 END) AS N11,
            SUM(CASE WHEN MT = 12 THEN ACr ELSE 0.00 END) AS N12

        FROM
        (
            SELECT AC, MT, SUM(SDb) AS ADb, SUM(SCr) AS ACr
            FROM
            (
                SELECT 
                    F_OPS.AC11 AS AC,
                    EXTRACT(MONTH FROM F_OPSd.Dete) AS MT,
                    F_OPS.Summ AS SDb,
                    0.00 AS SCr

                FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                WHERE F_OPSd.Dete BETWEEN :sdt AND :edt AND F_OPS.AC11 LIKE :pac

                UNION ALL

                SELECT 
                    F_OPS.AC21 AS AC,
                    EXTRACT(MONTH FROM F_OPSd.Dete) AS MT,
                    0.00 AS SDb,
                    F_OPS.Summ AS SCr

                FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                WHERE F_OPSd.Dete BETWEEN :sdt AND :edt AND F_OPS.AC21 LIKE :pac

            ) AS T1

            GROUP BY T1.AC, T1.MT

        ) AS T2
        GROUP BY T2.AC
    ) AS T3

    LEFT JOIN F_AcP21 ON F_AcP21.AC = T3.AC
    ORDER BY AC1

    into
        id, spid, ad, ac1, ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_APGR_MT_12 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN F_TREPMT.ID,
    SPID TYPE OF COLUMN F_TREPMT.SPID,
    AD TYPE OF COLUMN F_TREPMT.AD,
    AC1 TYPE OF COLUMN F_TREPMT.AC1,
    AC2 TYPE OF COLUMN F_TREPMT.AC2,
    ACN1 TYPE OF COLUMN F_TREPMT.ACN1,
    ACN2 TYPE OF COLUMN F_TREPMT.ACN2,
    M1 TYPE OF COLUMN F_TREPMT.M1,
    M2 TYPE OF COLUMN F_TREPMT.M2,
    M3 TYPE OF COLUMN F_TREPMT.M3,
    M4 TYPE OF COLUMN F_TREPMT.M4,
    M5 TYPE OF COLUMN F_TREPMT.M5,
    M6 TYPE OF COLUMN F_TREPMT.M6,
    M7 TYPE OF COLUMN F_TREPMT.M7,
    M8 TYPE OF COLUMN F_TREPMT.M8,
    M9 TYPE OF COLUMN F_TREPMT.M9,
    M10 TYPE OF COLUMN F_TREPMT.M10,
    M11 TYPE OF COLUMN F_TREPMT.M11,
    M12 TYPE OF COLUMN F_TREPMT.M12,
    N1 TYPE OF COLUMN F_TREPMT.N1,
    N2 TYPE OF COLUMN F_TREPMT.N2,
    N3 TYPE OF COLUMN F_TREPMT.N3,
    N4 TYPE OF COLUMN F_TREPMT.N4,
    N5 TYPE OF COLUMN F_TREPMT.N5,
    N6 TYPE OF COLUMN F_TREPMT.N6,
    N7 TYPE OF COLUMN F_TREPMT.N7,
    N8 TYPE OF COLUMN F_TREPMT.N8,
    N9 TYPE OF COLUMN F_TREPMT.N9,
    N10 TYPE OF COLUMN F_TREPMT.N10,
    N11 TYPE OF COLUMN F_TREPMT.N11,
    N12 TYPE OF COLUMN F_TREPMT.N12,
    MT TYPE OF COLUMN F_TREPMT.MT,
    NT TYPE OF COLUMN F_TREPMT.NT)
AS
begin
    FOR SELECT
        gen_id(GEN_F_TREPMT_ID, 1) AS id,
        current_connection AS spid,
        null AS ad,
        T3.AC1 AS AC1,
        T3.AC2 AS AC2,
        F_AcP21.Name AS ACN1,
        F_AcP24.Name AS ACN2,
        M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,
        N1,N2,N3,N4,N5,N6,N7,N8,N9,N10,N11,N12,
        0 AS MT, 0 as NT
    FROM
    (
        SELECT 
            AC1, AC2,
            SUM(CASE WHEN MT = 1 THEN ADb ELSE 0.00 END) AS M1,
            SUM(CASE WHEN MT = 2 THEN ADb ELSE 0.00 END) AS M2,
            SUM(CASE WHEN MT = 3 THEN ADb ELSE 0.00 END) AS M3,
            SUM(CASE WHEN MT = 4 THEN ADb ELSE 0.00 END) AS M4,
            SUM(CASE WHEN MT = 5 THEN ADb ELSE 0.00 END) AS M5,
            SUM(CASE WHEN MT = 6 THEN ADb ELSE 0.00 END) AS M6,
            SUM(CASE WHEN MT = 7 THEN ADb ELSE 0.00 END) AS M7,
            SUM(CASE WHEN MT = 8 THEN ADb ELSE 0.00 END) AS M8,
            SUM(CASE WHEN MT = 9 THEN ADb ELSE 0.00 END) AS M9,
            SUM(CASE WHEN MT = 10 THEN ADb ELSE 0.00 END) AS M10,
            SUM(CASE WHEN MT = 11 THEN ADb ELSE 0.00 END) AS M11,
            SUM(CASE WHEN MT = 12 THEN ADb ELSE 0.00 END) AS M12,
            
            SUM(CASE WHEN MT = 1 THEN ACr ELSE 0.00 END) AS N1,
            SUM(CASE WHEN MT = 2 THEN ACr ELSE 0.00 END) AS N2,
            SUM(CASE WHEN MT = 3 THEN ACr ELSE 0.00 END) AS N3,
            SUM(CASE WHEN MT = 4 THEN ACr ELSE 0.00 END) AS N4,
            SUM(CASE WHEN MT = 5 THEN ACr ELSE 0.00 END) AS N5,
            SUM(CASE WHEN MT = 6 THEN ACr ELSE 0.00 END) AS N6,
            SUM(CASE WHEN MT = 7 THEN ACr ELSE 0.00 END) AS N7,
            SUM(CASE WHEN MT = 8 THEN ACr ELSE 0.00 END) AS N8,
            SUM(CASE WHEN MT = 9 THEN ACr ELSE 0.00 END) AS N9,
            SUM(CASE WHEN MT = 10 THEN ACr ELSE 0.00 END) AS N10,
            SUM(CASE WHEN MT = 11 THEN ACr ELSE 0.00 END) AS N11,
            SUM(CASE WHEN MT = 12 THEN ACr ELSE 0.00 END) AS N12

        FROM
        (
            SELECT AC1, AC2, MT, SUM(SDb) AS ADb, SUM(SCr) AS ACr
            FROM
            (
                SELECT 
                    F_OPS.AC11 AS AC1,
                    F_OPS.AC14 AS AC2,
                    EXTRACT(MONTH FROM F_OPSd.Dete) AS MT,
                    F_OPS.Summ AS SDb,
                    0.00 AS SCr

                FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                WHERE F_OPSd.Dete BETWEEN :sdt AND :edt AND F_OPS.AC11 LIKE :pac

                UNION ALL

                SELECT 
                    F_OPS.AC21 AS AC,
                    F_OPS.AC24 AS AC2,
                    EXTRACT(MONTH FROM F_OPSd.Dete) AS MT,
                    0.00 AS SDb,
                    F_OPS.Summ AS SCr

                FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                WHERE F_OPSd.Dete BETWEEN :sdt AND :edt AND F_OPS.AC21 LIKE :pac

            ) AS T1

            GROUP BY T1.AC2, T1.AC1, T1.MT

        ) AS T2
        GROUP BY T2.AC2, T2.AC1
    ) AS T3

    LEFT JOIN F_AcP21 ON F_AcP21.AC = T3.AC1
    LEFT JOIN F_AcP24 ON F_AcP24.idx = T3.AC2

    ORDER BY AC2, AC1

    into
        id, spid, ad, ac1, ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_APGR_MT_21 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN F_TREPMT.ID,
    SPID TYPE OF COLUMN F_TREPMT.SPID,
    AD TYPE OF COLUMN F_TREPMT.AD,
    AC1 TYPE OF COLUMN F_TREPMT.AC1,
    AC2 TYPE OF COLUMN F_TREPMT.AC2,
    ACN1 TYPE OF COLUMN F_TREPMT.ACN1,
    ACN2 TYPE OF COLUMN F_TREPMT.ACN2,
    M1 TYPE OF COLUMN F_TREPMT.M1,
    M2 TYPE OF COLUMN F_TREPMT.M2,
    M3 TYPE OF COLUMN F_TREPMT.M3,
    M4 TYPE OF COLUMN F_TREPMT.M4,
    M5 TYPE OF COLUMN F_TREPMT.M5,
    M6 TYPE OF COLUMN F_TREPMT.M6,
    M7 TYPE OF COLUMN F_TREPMT.M7,
    M8 TYPE OF COLUMN F_TREPMT.M8,
    M9 TYPE OF COLUMN F_TREPMT.M9,
    M10 TYPE OF COLUMN F_TREPMT.M10,
    M11 TYPE OF COLUMN F_TREPMT.M11,
    M12 TYPE OF COLUMN F_TREPMT.M12,
    N1 TYPE OF COLUMN F_TREPMT.N1,
    N2 TYPE OF COLUMN F_TREPMT.N2,
    N3 TYPE OF COLUMN F_TREPMT.N3,
    N4 TYPE OF COLUMN F_TREPMT.N4,
    N5 TYPE OF COLUMN F_TREPMT.N5,
    N6 TYPE OF COLUMN F_TREPMT.N6,
    N7 TYPE OF COLUMN F_TREPMT.N7,
    N8 TYPE OF COLUMN F_TREPMT.N8,
    N9 TYPE OF COLUMN F_TREPMT.N9,
    N10 TYPE OF COLUMN F_TREPMT.N10,
    N11 TYPE OF COLUMN F_TREPMT.N11,
    N12 TYPE OF COLUMN F_TREPMT.N12,
    MT TYPE OF COLUMN F_TREPMT.MT,
    NT TYPE OF COLUMN F_TREPMT.NT)
AS
begin
-- Mx - debeta summa, Nx - daudzums
    FOR SELECT
        gen_id(GEN_F_TREPMT_ID, 1) AS id,
        current_connection AS spid,
        null AS ad,
        T3.AC1 AS AC1,
        T3.AC2 AS AC2,
        F_AcP21.Name AS ACN1,
        F_AcP24.Name AS ACN2,
        M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,
        N1,N2,N3,N4,N5,N6,N7,N8,N9,N10,N11,N12,
        0 AS MT, 0 as NT
    FROM
    (
        SELECT 
            AC1, AC2,
            SUM(CASE WHEN MT = 1 THEN ADb ELSE 0.00 END) AS M1,
            SUM(CASE WHEN MT = 2 THEN ADb ELSE 0.00 END) AS M2,
            SUM(CASE WHEN MT = 3 THEN ADb ELSE 0.00 END) AS M3,
            SUM(CASE WHEN MT = 4 THEN ADb ELSE 0.00 END) AS M4,
            SUM(CASE WHEN MT = 5 THEN ADb ELSE 0.00 END) AS M5,
            SUM(CASE WHEN MT = 6 THEN ADb ELSE 0.00 END) AS M6,
            SUM(CASE WHEN MT = 7 THEN ADb ELSE 0.00 END) AS M7,
            SUM(CASE WHEN MT = 8 THEN ADb ELSE 0.00 END) AS M8,
            SUM(CASE WHEN MT = 9 THEN ADb ELSE 0.00 END) AS M9,
            SUM(CASE WHEN MT = 10 THEN ADb ELSE 0.00 END) AS M10,
            SUM(CASE WHEN MT = 11 THEN ADb ELSE 0.00 END) AS M11,
            SUM(CASE WHEN MT = 12 THEN ADb ELSE 0.00 END) AS M12,
            
            SUM(CASE WHEN MT = 1 THEN AQV ELSE 0.00 END) AS N1,
            SUM(CASE WHEN MT = 2 THEN AQV ELSE 0.00 END) AS N2,
            SUM(CASE WHEN MT = 3 THEN AQV ELSE 0.00 END) AS N3,
            SUM(CASE WHEN MT = 4 THEN AQV ELSE 0.00 END) AS N4,
            SUM(CASE WHEN MT = 5 THEN AQV ELSE 0.00 END) AS N5,
            SUM(CASE WHEN MT = 6 THEN AQV ELSE 0.00 END) AS N6,
            SUM(CASE WHEN MT = 7 THEN AQV ELSE 0.00 END) AS N7,
            SUM(CASE WHEN MT = 8 THEN AQV ELSE 0.00 END) AS N8,
            SUM(CASE WHEN MT = 9 THEN AQV ELSE 0.00 END) AS N9,
            SUM(CASE WHEN MT = 10 THEN AQV ELSE 0.00 END) AS N10,
            SUM(CASE WHEN MT = 11 THEN AQV ELSE 0.00 END) AS N11,
            SUM(CASE WHEN MT = 12 THEN AQV ELSE 0.00 END) AS N12

        FROM
        (
            SELECT AC1, AC2, MT, SUM(SDb) AS ADb, SUM(SQV) AS AQV
            FROM
            (
                SELECT 
                    F_OPS.AC11 AS AC1,
                    F_OPS.AC14 AS AC2,
                    EXTRACT(MONTH FROM F_OPSd.Dete) AS MT,
                    F_OPS.Summ AS SDb,
                    coalesce(F_OPS.QV, 0.00) AS SQV

                FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                WHERE F_OPSd.Dete BETWEEN :sdt AND :edt AND F_OPS.AC11 LIKE :pac

            ) AS T1

            GROUP BY T1.AC1, T1.AC2, T1.MT

        ) AS T2
        GROUP BY T2.AC1, T2.AC2
    ) AS T3

    LEFT JOIN F_AcP21 ON F_AcP21.AC = T3.AC1
    LEFT JOIN F_AcP24 ON F_AcP24.idx = T3.AC2

    ORDER BY AC1, AC2

    into
        id, spid, ad, ac1, ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_APGR_MT_22 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN F_TREPMT.ID,
    SPID TYPE OF COLUMN F_TREPMT.SPID,
    AD TYPE OF COLUMN F_TREPMT.AD,
    AC1 TYPE OF COLUMN F_TREPMT.AC1,
    AC2 TYPE OF COLUMN F_TREPMT.AC2,
    ACN1 TYPE OF COLUMN F_TREPMT.ACN1,
    ACN2 TYPE OF COLUMN F_TREPMT.ACN2,
    M1 TYPE OF COLUMN F_TREPMT.M1,
    M2 TYPE OF COLUMN F_TREPMT.M2,
    M3 TYPE OF COLUMN F_TREPMT.M3,
    M4 TYPE OF COLUMN F_TREPMT.M4,
    M5 TYPE OF COLUMN F_TREPMT.M5,
    M6 TYPE OF COLUMN F_TREPMT.M6,
    M7 TYPE OF COLUMN F_TREPMT.M7,
    M8 TYPE OF COLUMN F_TREPMT.M8,
    M9 TYPE OF COLUMN F_TREPMT.M9,
    M10 TYPE OF COLUMN F_TREPMT.M10,
    M11 TYPE OF COLUMN F_TREPMT.M11,
    M12 TYPE OF COLUMN F_TREPMT.M12,
    N1 TYPE OF COLUMN F_TREPMT.N1,
    N2 TYPE OF COLUMN F_TREPMT.N2,
    N3 TYPE OF COLUMN F_TREPMT.N3,
    N4 TYPE OF COLUMN F_TREPMT.N4,
    N5 TYPE OF COLUMN F_TREPMT.N5,
    N6 TYPE OF COLUMN F_TREPMT.N6,
    N7 TYPE OF COLUMN F_TREPMT.N7,
    N8 TYPE OF COLUMN F_TREPMT.N8,
    N9 TYPE OF COLUMN F_TREPMT.N9,
    N10 TYPE OF COLUMN F_TREPMT.N10,
    N11 TYPE OF COLUMN F_TREPMT.N11,
    N12 TYPE OF COLUMN F_TREPMT.N12,
    MT TYPE OF COLUMN F_TREPMT.MT,
    NT TYPE OF COLUMN F_TREPMT.NT)
AS
begin
-- Mx - debeta summa, Nx - daudzums
    FOR SELECT
        gen_id(GEN_F_TREPMT_ID, 1) AS id,
        current_connection AS spid,
        null AS ad,
        T3.AC1 AS AC1,
        T3.AC2 AS AC2,
        F_AcP21.Name AS ACN1,
        F_AcP24.Name AS ACN2,
        M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,
        N1,N2,N3,N4,N5,N6,N7,N8,N9,N10,N11,N12,
        0 AS MT, 0 as NT
    FROM
    (
        SELECT 
            AC1, AC2,
            SUM(CASE WHEN MT = 1 THEN ADb ELSE 0.00 END) AS M1,
            SUM(CASE WHEN MT = 2 THEN ADb ELSE 0.00 END) AS M2,
            SUM(CASE WHEN MT = 3 THEN ADb ELSE 0.00 END) AS M3,
            SUM(CASE WHEN MT = 4 THEN ADb ELSE 0.00 END) AS M4,
            SUM(CASE WHEN MT = 5 THEN ADb ELSE 0.00 END) AS M5,
            SUM(CASE WHEN MT = 6 THEN ADb ELSE 0.00 END) AS M6,
            SUM(CASE WHEN MT = 7 THEN ADb ELSE 0.00 END) AS M7,
            SUM(CASE WHEN MT = 8 THEN ADb ELSE 0.00 END) AS M8,
            SUM(CASE WHEN MT = 9 THEN ADb ELSE 0.00 END) AS M9,
            SUM(CASE WHEN MT = 10 THEN ADb ELSE 0.00 END) AS M10,
            SUM(CASE WHEN MT = 11 THEN ADb ELSE 0.00 END) AS M11,
            SUM(CASE WHEN MT = 12 THEN ADb ELSE 0.00 END) AS M12,
            
            SUM(CASE WHEN MT = 1 THEN AQV ELSE 0.00 END) AS N1,
            SUM(CASE WHEN MT = 2 THEN AQV ELSE 0.00 END) AS N2,
            SUM(CASE WHEN MT = 3 THEN AQV ELSE 0.00 END) AS N3,
            SUM(CASE WHEN MT = 4 THEN AQV ELSE 0.00 END) AS N4,
            SUM(CASE WHEN MT = 5 THEN AQV ELSE 0.00 END) AS N5,
            SUM(CASE WHEN MT = 6 THEN AQV ELSE 0.00 END) AS N6,
            SUM(CASE WHEN MT = 7 THEN AQV ELSE 0.00 END) AS N7,
            SUM(CASE WHEN MT = 8 THEN AQV ELSE 0.00 END) AS N8,
            SUM(CASE WHEN MT = 9 THEN AQV ELSE 0.00 END) AS N9,
            SUM(CASE WHEN MT = 10 THEN AQV ELSE 0.00 END) AS N10,
            SUM(CASE WHEN MT = 11 THEN AQV ELSE 0.00 END) AS N11,
            SUM(CASE WHEN MT = 12 THEN AQV ELSE 0.00 END) AS N12

        FROM
        (
            SELECT AC1, AC2, MT, SUM(SDb) AS ADb, SUM(SQV) AS AQV
            FROM
            (
                SELECT 
                    F_OPS.AC21 AS AC1,
                    F_OPS.AC24 AS AC2,
                    EXTRACT(MONTH FROM F_OPSd.Dete) AS MT,
                    F_OPS.Summ AS SDb,
                    coalesce(F_OPS.QV, 0.00) AS SQV

                FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                WHERE F_OPSd.Dete BETWEEN :sdt AND :edt AND F_OPS.AC21 LIKE :pac

            ) AS T1

            GROUP BY T1.AC1, T1.AC2, T1.MT

        ) AS T2
        GROUP BY T2.AC1, T2.AC2
    ) AS T3

    LEFT JOIN F_AcP21 ON F_AcP21.AC = T3.AC1
    LEFT JOIN F_AcP24 ON F_AcP24.idx = T3.AC2

    ORDER BY AC1, AC2

    into
        id, spid, ad, ac1, ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_APGR_NP_11 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN F_ROPS2A.ID,
    SPID TYPE OF COLUMN F_ROPS2A.SPID,
    AC TYPE OF COLUMN F_ROPS2A.AC,
    RAC TYPE OF COLUMN F_ROPS2A.RAC,
    NAME TYPE OF COLUMN F_ROPS2A.NAME,
    B0 TYPE OF COLUMN F_ROPS2A.B0,
    SDB TYPE OF COLUMN F_ROPS2A.SDB,
    SCR TYPE OF COLUMN F_ROPS2A.SCR,
    TDB TYPE OF COLUMN F_ROPS2A.TDB,
    TCR TYPE OF COLUMN F_ROPS2A.TCR,
    CLID TYPE OF COLUMN F_ROPS2A.CLID,
    NAME1 TYPE OF COLUMN F_ROPS2A.NAME1,
    REGNR TYPE OF COLUMN F_ROPS2A.REGNR,
    RNAME TYPE OF COLUMN F_ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_F_ROPS2A_ID, 1) AS id,
        current_connection AS spid,
        T2.AC AS AC,
        NULL AS RAC,
        F_AcP21.Name AS Name,
        0.00 AS B0,
        0.00 AS SDb,
        0.00 AS SCr,
        T2.BDb AS TDb,
        T2.BCr AS TCr,
        NULL AS Clid,
        NULL AS Name1,
        NULL AS RegNr,
        NULL AS RName
    FROM
    (
        SELECT AC, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                F_OPS.AC12 AS AC,
                F_OPS.Summ AS TDb,
                0.00 AS TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE F_OPSd.Dete BETWEEN :sdt AND :edt AND F_OPS.AC12 LIKE :pac

            UNION ALL

            SELECT 
                F_OPS.AC22 AS AC,
                0.00 AS TDb,
                F_OPS.Summ AS TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE F_OPSd.Dete BETWEEN :sdt AND :edt AND F_OPS.AC22 LIKE :pac

        ) AS T1

        GROUP BY T1.AC
    ) AS T2    

    LEFT JOIN F_AcP21    ON F_AcP21.AC = T2.AC
    
    ORDER BY AC

    into
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname
    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_F_REP_APGR_NP_12 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PACLEN INTEGER)
RETURNS (
    ID TYPE OF COLUMN F_ROPS2A.ID,
    SPID TYPE OF COLUMN F_ROPS2A.SPID,
    AC TYPE OF COLUMN F_ROPS2A.AC,
    RAC TYPE OF COLUMN F_ROPS2A.RAC,
    NAME TYPE OF COLUMN F_ROPS2A.NAME,
    B0 TYPE OF COLUMN F_ROPS2A.B0,
    SDB TYPE OF COLUMN F_ROPS2A.SDB,
    SCR TYPE OF COLUMN F_ROPS2A.SCR,
    TDB TYPE OF COLUMN F_ROPS2A.TDB,
    TCR TYPE OF COLUMN F_ROPS2A.TCR,
    CLID TYPE OF COLUMN F_ROPS2A.CLID,
    NAME1 TYPE OF COLUMN F_ROPS2A.NAME1,
    REGNR TYPE OF COLUMN F_ROPS2A.REGNR,
    RNAME TYPE OF COLUMN F_ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_F_ROPS2A_ID, 1) AS id,
        current_connection AS spid,
        T2.AC AS AC,
        NULL AS RAC,
        F_AcP21.Name AS Name,
        0.00 AS B0,
        0.00 AS SDb,
        0.00 AS SCr,
        T2.BDb AS TDb,
        T2.BCr AS TCr,
        NULL AS Clid,
        NULL AS Name1,
        NULL AS RegNr,
        NULL AS RName
    FROM
    (
        SELECT AC, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                LEFT(F_OPS.AC12, :paclen) AS AC,
                F_OPS.Summ AS TDb,
                0.00 AS TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE F_OPSd.Dete BETWEEN :sdt AND :edt AND F_OPS.AC12 LIKE :pac

            UNION ALL

            SELECT 
                LEFT(F_OPS.AC22, :paclen) AS AC,
                0.00 AS TDb,
                F_OPS.Summ AS TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE F_OPSd.Dete BETWEEN :sdt AND :edt AND F_OPS.AC22 LIKE :pac

        ) AS T1

        GROUP BY T1.AC
    ) AS T2    

    LEFT JOIN F_AcP21    ON F_AcP21.AC = T2.AC
    
    ORDER BY AC

    into
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname
    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_F_REP_BAL_11 (
    SDT DATE,
    EDT DATE)
RETURNS (
    AC VARCHAR(8),
    S1 MONEY,
    S2 MONEY)
AS
begin
    FOR SELECT
        T2.AC AS AC,
        T2.ADb - T2.ACr AS S1,
        T2.BDb - T2.BCr AS S2
    FROM
    (
        SELECT AC, SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                F_OPS.AC11 AS AC,
                CASE
                    WHEN F_OPSd.Dete < :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END AS SDb,
                0.00 AS SCr,
                CASE
                    WHEN F_OPSd.Dete >= :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END AS TDb,
                0.00 AS TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE F_OPSd.Dete <= :edt

            UNION ALL

            SELECT 
                F_OPS.AC21 AS AC,
                0.00 AS SDb,
                CASE
                    WHEN F_OPSd.Dete < :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END AS SCr,
                0.00 AS TDb,
                CASE
                    WHEN F_OPSd.Dete >= :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END AS TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE F_OPSd.Dete <= :edt

            UNION ALL

            SELECT 
                F_Bal0.AC11 AS AC,
                F_Bal0.SummD AS SDb,
                F_Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr
            FROM F_Bal0

        ) AS T1

        GROUP BY T1.AC
    ) AS T2    

    WHERE (ADb - ACr) <> 0.00 OR BDb <> 0.00 OR BCr <> 0.00

    ORDER BY AC

    INTO
        :AC, :S1, S2
    DO
    BEGIN
        SUSPEND;
    END
end^


ALTER PROCEDURE SP_F_REP_BAL_12 (
    SDT DATE,
    EDT DATE,
    PBALID VARCHAR(10))
RETURNS (
    ID TYPE OF COLUMN F_BALA21.ID,
    SPID TYPE OF COLUMN F_BALA21.SPID,
    BID TYPE OF COLUMN F_BALA21.BID,
    S1 TYPE OF COLUMN F_BALA21.S1,
    S2 TYPE OF COLUMN F_BALA21.S2)
AS
begin
    INSERT INTO f_ttemp_balaC (AC, S1, S2)
        SELECT T1.AC, T1.S1, T1.S2
        FROM sp_f_rep_bal_11(:SDT, :EDT) AS T1;

    INSERT INTO f_ttemp_BalA21 (bid, S1, S2)
    SELECT 
        F_BalA2.id AS bid,
        SUM(iif(F_BalA3.tp = 'Db', T1a.S1, - T1a.S1)) AS s1,
        SUM(iif(F_BalA3.tp = 'Db', T1a.S2, - T1a.S2)) AS s2
    FROM F_BalA1
        INNER JOIN F_BalA2 ON F_BalA1.balid = F_BalA2.balid
        INNER JOIN F_BalA3 ON F_BalA2.id = F_BalA3.id2
        INNER JOIN f_ttemp_balaC AS T1a ON T1a.AC LIKE REPLACE(F_BalA3.ac,'*','%')
    WHERE
        F_BalA1.balid = :pbalid AND
        F_BalA2.tp = 'S'
    GROUP BY F_BalA2.id;


    INSERT INTO f_ttemp_BalA21 (bid, S1, S2)
    SELECT 
        F_BalA2.id AS bid,
        SUM(T2.s1) AS s1,
        SUM(T2.s2) AS s2
    FROM 
        F_BalA1 
        INNER JOIN F_BalA2 ON F_BalA1.balid = F_BalA2.balid
        INNER JOIN
            (
                SELECT F_BalA2.nr, f_ttemp_BalA21.s1, f_ttemp_BalA21.s2
                FROM F_BalA2 INNER JOIN f_ttemp_BalA21 
                    ON f_ttemp_BalA21.bid = F_BalA2.id
            ) AS T2
            ON T2.nr BETWEEN F_BalA2.nr1 AND F_BalA2.nr2
    WHERE
        F_BalA1.balid = :pbalid AND
        F_BalA2.tp = 'K'
    GROUP BY F_BalA2.id;


    INSERT INTO f_ttemp_BalA21 (bid, S1, S2)
    SELECT 
        F_BalA2.id AS bid,
        SUM(T2.s1) AS s1,
        SUM(T2.s2) AS s2
    FROM 
        F_BalA1 
        INNER JOIN F_BalA2 ON F_BalA1.balid = F_BalA2.balid
        INNER JOIN
            (
                SELECT F_BalA2.nr, f_ttemp_BalA21.s1, f_ttemp_BalA21.s2
                FROM F_BalA2 INNER JOIN f_ttemp_BalA21 
                    ON f_ttemp_BalA21.bid = F_BalA2.id
            ) AS T2
            ON T2.nr = F_BalA2.nr1
    WHERE
        F_BalA1.balid = :pbalid AND
        F_BalA2.tp = 'V'
    GROUP BY F_BalA2.id;


    FOR SELECT
        f_ttemp_BalA21.bid AS id, -- hack
        0 AS spid,
        f_ttemp_BalA21.bid AS bid,
        f_ttemp_BalA21.s1 AS s1,
        f_ttemp_BalA21.s2 AS s2
    FROM f_ttemp_BalA21
        INNER JOIN F_BalA2 ON f_ttemp_BalA21.bid = F_BalA2.id
    ORDER BY F_BalA2.nr

    into
        :id, :spid, :bid, :s1, :s2
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_BAL_13 (
    PBALID VARCHAR(10))
RETURNS (
    AC TYPE OF COLUMN F_ACP21.AC,
    NAME TYPE OF COLUMN F_ACP21.NAME,
    ID1 TYPE OF COLUMN F_ACP21.ID1,
    ID2 TYPE OF COLUMN F_ACP21.ID2)
AS
begin
-- rezultāti F_AcP21.AC, kas netika iesummēti bilances formulās
    FOR SELECT
        F_AcP21.AC, null, null, null
    FROM F_AcP21 LEFT JOIN
    (    
        SELECT DISTINCT F_AcP21.AC
        FROM F_BalA1
            INNER JOIN F_BalA2 ON F_BalA1.balid = F_BalA2.balid
            INNER JOIN F_BalA3 ON F_BalA2.id = F_BalA3.id2
            INNER JOIN F_AcP21 ON F_AcP21.AC LIKE REPLACE(F_BalA3.ac,'*','%')
        WHERE
            F_BalA1.balid = :pbalid AND
            F_BalA2.tp = 'S'
    ) AS T1 ON F_AcP21.AC = T1.AC
    WHERE T1.AC IS NULL
    ORDER BY AC
      into :ac, :name, :id1, :id2
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_F_REP_BAL_21 (
    SDT DATE,
    EDT DATE)
RETURNS (
    AC VARCHAR(8),
    M0 MONEY,
    M1 MONEY,
    M2 MONEY,
    M3 MONEY,
    M4 MONEY,
    M5 MONEY,
    M6 MONEY,
    M7 MONEY,
    M8 MONEY,
    M9 MONEY,
    M10 MONEY,
    M11 MONEY,
    M12 MONEY)
AS
begin
    FOR SELECT
        AC, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12
    FROM
    (
        SELECT
            T2.AC AS AC,
            SUM(CASE WHEN MT = 0 THEN S1 ELSE 0.00 END) AS M0,
            SUM(CASE WHEN MT = 1 THEN S1 ELSE 0.00 END) AS M1,
            SUM(CASE WHEN MT = 2 THEN S1 ELSE 0.00 END) AS M2,
            SUM(CASE WHEN MT = 3 THEN S1 ELSE 0.00 END) AS M3,
            SUM(CASE WHEN MT = 4 THEN S1 ELSE 0.00 END) AS M4,
            SUM(CASE WHEN MT = 5 THEN S1 ELSE 0.00 END) AS M5,
            SUM(CASE WHEN MT = 6 THEN S1 ELSE 0.00 END) AS M6,
            SUM(CASE WHEN MT = 7 THEN S1 ELSE 0.00 END) AS M7,
            SUM(CASE WHEN MT = 8 THEN S1 ELSE 0.00 END) AS M8,
            SUM(CASE WHEN MT = 9 THEN S1 ELSE 0.00 END) AS M9,
            SUM(CASE WHEN MT = 10 THEN S1 ELSE 0.00 END) AS M10,
            SUM(CASE WHEN MT = 11 THEN S1 ELSE 0.00 END) AS M11,
            SUM(CASE WHEN MT = 12 THEN S1 ELSE 0.00 END) AS M12
        FROM
        (
            SELECT AC, MT, SUM(SDb - SCr) AS S1
            FROM
            (
                SELECT 
                    F_OPS.AC11 AS AC,
                    CASE
                        WHEN F_OPSd.Dete < :sdt THEN 0
                        ELSE EXTRACT(MONTH FROM F_OPSd.Dete)
                    END AS MT,
    
                    F_OPS.Summ AS SDb,
                    0.00 AS SCr
    
                FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                WHERE F_OPSd.Dete <= :edt
    
                UNION ALL
    
                SELECT 
                    F_OPS.AC21 AS AC,
                    CASE
                        WHEN F_OPSd.Dete < :sdt THEN 0
                        ELSE EXTRACT(MONTH FROM F_OPSd.Dete)
                    END AS MT,
    
                    0.00 AS SDb,
                    F_OPS.Summ AS SCr
    
                FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                WHERE F_OPSd.Dete <= :edt
    
                UNION ALL
    
                SELECT 
                    F_Bal0.AC11 AS AC,
                    0 AS MT,
                    F_Bal0.SummD AS SDb,
                    F_Bal0.SummC AS SCr
                FROM F_Bal0
    
            ) AS T1
    
            GROUP BY T1.AC, T1.MT
        ) AS T2    
    
        WHERE (S1) <> 0.00
        GROUP BY AC
    )
    ORDER BY AC
    INTO
        :AC, :M0, :M1, :M2, :M3, :M4, :M5, :M6, :M7, :M8, :M9, :M10, :M11, :M12
    DO
    BEGIN
        SUSPEND;
    END
end^


ALTER PROCEDURE SP_F_REP_BAL_22 (
    SDT DATE,
    EDT DATE,
    PBALID VARCHAR(10))
RETURNS (
    ID INTEGER,
    SPID INTEGER,
    BID INTEGER,
    M0 MONEY,
    M1 MONEY,
    M2 MONEY,
    M3 MONEY,
    M4 MONEY,
    M5 MONEY,
    M6 MONEY,
    M7 MONEY,
    M8 MONEY,
    M9 MONEY,
    M10 MONEY,
    M11 MONEY,
    M12 MONEY)
AS
begin
    INSERT INTO f_ttemp_balmt1 (AC, M0, M1, M2, M3, M4, M5,
            M6, M7, M8, M9, M10, M11, M12)
        SELECT T1.AC, T1.M0, T1.M1, T1.M2, T1.M3, T1.M4, T1.M5,
                T1.M6, T1.M7, T1.M8, T1.M9, T1.M10, T1.M11, T1.M12
        FROM sp_f_rep_bal_21(:SDT, :EDT) AS T1;

    INSERT INTO f_ttemp_BalMT2 (bid, M0, M1, M2, M3, M4, M5,
            M6, M7, M8, M9, M10, M11, M12)
    SELECT 
        F_BalA2.id AS bid,
        SUM(iif(F_BalA3.tp = 'Db', T1a.M0, - T1a.M0)) AS M0,
        SUM(iif(F_BalA3.tp = 'Db', T1a.M1, - T1a.M1)) AS M1,
        SUM(iif(F_BalA3.tp = 'Db', T1a.M2, - T1a.M2)) AS M2,
        SUM(iif(F_BalA3.tp = 'Db', T1a.M3, - T1a.M3)) AS M3,
        SUM(iif(F_BalA3.tp = 'Db', T1a.M4, - T1a.M4)) AS M4,
        SUM(iif(F_BalA3.tp = 'Db', T1a.M5, - T1a.M5)) AS M5,
        SUM(iif(F_BalA3.tp = 'Db', T1a.M6, - T1a.M6)) AS M6,
        SUM(iif(F_BalA3.tp = 'Db', T1a.M7, - T1a.M7)) AS M7,
        SUM(iif(F_BalA3.tp = 'Db', T1a.M8, - T1a.M8)) AS M8,
        SUM(iif(F_BalA3.tp = 'Db', T1a.M9, - T1a.M9)) AS M9,
        SUM(iif(F_BalA3.tp = 'Db', T1a.M10, - T1a.M10)) AS M10,
        SUM(iif(F_BalA3.tp = 'Db', T1a.M11, - T1a.M11)) AS M11,
        SUM(iif(F_BalA3.tp = 'Db', T1a.M12, - T1a.M12)) AS M12
    FROM F_BalA1
        INNER JOIN F_BalA2 ON F_BalA1.balid = F_BalA2.balid
        INNER JOIN F_BalA3 ON F_BalA2.id = F_BalA3.id2
        INNER JOIN f_ttemp_balMT1 AS T1a ON T1a.AC LIKE REPLACE(F_BalA3.ac,'*','%')
    WHERE
        F_BalA1.balid = :pbalid AND
        F_BalA2.tp = 'S'
    GROUP BY F_BalA2.id;


    INSERT INTO f_ttemp_BalMT2 (bid, M0, M1, M2, M3, M4, M5,
            M6, M7, M8, M9, M10, M11, M12)
    SELECT 
        F_BalA2.id AS bid,
        SUM(T2.M0) AS M0,
        SUM(T2.M1) AS M1,
        SUM(T2.M2) AS M2,
        SUM(T2.M3) AS M3,
        SUM(T2.M4) AS M4,
        SUM(T2.M5) AS M5,
        SUM(T2.M6) AS M6,
        SUM(T2.M7) AS M7,
        SUM(T2.M8) AS M8,
        SUM(T2.M9) AS M9,
        SUM(T2.M10) AS M10,
        SUM(T2.M11) AS M11,
        SUM(T2.M12) AS M12
    FROM 
        F_BalA1 
        INNER JOIN F_BalA2 ON F_BalA1.balid = F_BalA2.balid
        INNER JOIN
            (
                SELECT
                    F_BalA2.nr,
                    f_ttemp_BalMT2.M0,
                    f_ttemp_BalMT2.M1,
                    f_ttemp_BalMT2.M2,
                    f_ttemp_BalMT2.M3,
                    f_ttemp_BalMT2.M4,
                    f_ttemp_BalMT2.M5,
                    f_ttemp_BalMT2.M6,
                    f_ttemp_BalMT2.M7,
                    f_ttemp_BalMT2.M8,
                    f_ttemp_BalMT2.M9,
                    f_ttemp_BalMT2.M10,
                    f_ttemp_BalMT2.M11,
                    f_ttemp_BalMT2.M12
                FROM F_BalA2 INNER JOIN f_ttemp_BalMT2
                    ON f_ttemp_BalMT2.bid = F_BalA2.id
            ) AS T2
            ON T2.nr BETWEEN F_BalA2.nr1 AND F_BalA2.nr2
    WHERE
        F_BalA1.balid = :pbalid AND
        F_BalA2.tp = 'K'
    GROUP BY F_BalA2.id;


    INSERT INTO f_ttemp_BalMT2 (bid, M0, M1, M2, M3, M4, M5,
            M6, M7, M8, M9, M10, M11, M12)
    SELECT 
        F_BalA2.id AS bid,
        SUM(T2.M0) AS M0,
        SUM(T2.M1) AS M1,
        SUM(T2.M2) AS M2,
        SUM(T2.M3) AS M3,
        SUM(T2.M4) AS M4,
        SUM(T2.M5) AS M5,
        SUM(T2.M6) AS M6,
        SUM(T2.M7) AS M7,
        SUM(T2.M8) AS M8,
        SUM(T2.M9) AS M9,
        SUM(T2.M10) AS M10,
        SUM(T2.M11) AS M11,
        SUM(T2.M12) AS M12
    FROM 
        F_BalA1 
        INNER JOIN F_BalA2 ON F_BalA1.balid = F_BalA2.balid
        INNER JOIN
            (
                SELECT
                    F_BalA2.nr,
                    f_ttemp_BalMT2.M0,
                    f_ttemp_BalMT2.M1,
                    f_ttemp_BalMT2.M2,
                    f_ttemp_BalMT2.M3,
                    f_ttemp_BalMT2.M4,
                    f_ttemp_BalMT2.M5,
                    f_ttemp_BalMT2.M6,
                    f_ttemp_BalMT2.M7,
                    f_ttemp_BalMT2.M8,
                    f_ttemp_BalMT2.M9,
                    f_ttemp_BalMT2.M10,
                    f_ttemp_BalMT2.M11,
                    f_ttemp_BalMT2.M12
                FROM F_BalA2 INNER JOIN f_ttemp_BalMT2
                    ON f_ttemp_BalMT2.bid = F_BalA2.id
            ) AS T2
            ON T2.nr = F_BalA2.nr1
    WHERE
        F_BalA1.balid = :pbalid AND
        F_BalA2.tp = 'V'
    GROUP BY F_BalA2.id;


    FOR SELECT
        f_ttemp_BalMT2.bid AS id, -- hack
        0 AS spid,
        f_ttemp_BalMT2.bid AS bid,
        f_ttemp_BalMT2.M0 AS M0,
        f_ttemp_BalMT2.M1 AS M1,
        f_ttemp_BalMT2.M2 AS M2,
        f_ttemp_BalMT2.M3 AS M3,
        f_ttemp_BalMT2.M4 AS M4,
        f_ttemp_BalMT2.M5 AS M5,
        f_ttemp_BalMT2.M6 AS M6,
        f_ttemp_BalMT2.M7 AS M7,
        f_ttemp_BalMT2.M8 AS M8,
        f_ttemp_BalMT2.M9 AS M9,
        f_ttemp_BalMT2.M10 AS M10,
        f_ttemp_BalMT2.M11 AS M11,
        f_ttemp_BalMT2.M12 AS M12
    FROM f_ttemp_BalMT2
        INNER JOIN F_BalA2 ON f_ttemp_BalMT2.bid = F_BalA2.id
    ORDER BY F_BalA2.nr

    into
        :id, :spid, :bid, :M0, :M1, :M2, :M3, :M4, :M5, :M6, :M7, :M8, :M9, :M10, :M11, :M12
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_CURCHECK_01 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(8),
    PCUR VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN F_ROPS1A.ID,
    SPID TYPE OF COLUMN F_ROPS1A.SPID,
    DID TYPE OF COLUMN F_ROPS1A.DID,
    DETE TYPE OF COLUMN F_ROPS1A.DETE,
    NRX TYPE OF COLUMN F_ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN F_ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN F_ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN F_ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN F_ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN F_ROPS1A.DOCNR,
    CLID TYPE OF COLUMN F_ROPS1A.CLID,
    CLID2 TYPE OF COLUMN F_ROPS1A.CLID2,
    NAME TYPE OF COLUMN F_ROPS1A.NAME,
    NAME2 TYPE OF COLUMN F_ROPS1A.NAME2,
    REGNR TYPE OF COLUMN F_ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN F_ROPS1A.REGNR2,
    B0 TYPE OF COLUMN F_ROPS1A.B0,
    DESCR TYPE OF COLUMN F_ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN F_ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN F_ROPS1A.AC1,
    AC2 TYPE OF COLUMN F_ROPS1A.AC2,
    SAC1 TYPE OF COLUMN F_ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN F_ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN F_ROPS1A.SUMMC,
    CUR TYPE OF COLUMN F_ROPS1A.CUR,
    SUMM TYPE OF COLUMN F_ROPS1A.SUMM,
    PVN TYPE OF COLUMN F_ROPS1A.PVN,
    RAC TYPE OF COLUMN F_ROPS1A.RAC,
    SDB TYPE OF COLUMN F_ROPS1A.SDB,
    SCR TYPE OF COLUMN F_ROPS1A.SCR,
    RAC2 TYPE OF COLUMN F_ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN F_ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN F_ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN F_ROPS1A.RAC5,
    QV TYPE OF COLUMN F_ROPS1A.QV,
    ZNR TYPE OF COLUMN F_ROPS1A.ZNR)
AS
begin
--meklējam dokumentus ar valūtas konvertÄcijas kÄ¼ūdÄm
    FOR SELECT
        gen_id(GEN_F_ROPS1A_ID, 1) as id,
        0 as spid,
        T1.id AS did, 
        T1.Dete AS Dete,
        T1.NrX AS NrX,
        T1.DocTyp AS DocTyp,
        F_DocTyp.id1 AS DocTyp1, 
        null AS DocTyp2,
        T1.DocSt AS DocSt,
        T1.DocNr AS DocNr,
        T1.ClId AS Clid,
        T1.ClId2 AS Clid2,
        F_Persons.Name AS Name,
        F_Persons2.Name AS Name2, 
        F_Persons.RegNr AS RegNr,
        F_Persons2.RegNr AS RegNr2,
        0 as b0, 
        T1.Descr AS Descr,
        null AS Descr2,
        null AS AC1,
        null AS AC2,
        null AS SAC1,
        null AS SAC2,
        0 AS SummC,
        null AS Cur,
        T1.Summ AS Summ,
        T1.PVN AS PVN,
        null AS Rac,
        0 AS Sdb,
        0 AS Scr,
        null AS Rac2,
        null AS Rac3,
        null AS Rac4,
        null AS Rac5,
        0 AS qv,
        T1.ZNR AS ZNR
    FROM
        (
            SELECT DISTINCT F_OPSd.*
            FROM 
                F_OPSd INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                LEFT JOIN F_Currency 
                ON F_Currency.id = F_OPS.Cur AND F_Currency.Dete = F_OPSd.Dete
            WHERE 
                F_OPSd.Dete BETWEEN :sdt AND :edt AND 
                F_OPS.Cur <> 'EUR' AND
                (F_OPS.AC11 LIKE :pac OR F_OPS.AC21 LIKE :pac) AND
                (
                    F_Currency.id IS NULL OR
                    ROUND(F_OPS.SummC*F_Currency.rate,2) <> F_OPS.Summ
                )
        ) AS T1

        LEFT JOIN F_DocTyp ON T1.DocTyp = F_DocTyp.id
        LEFT JOIN F_Persons ON T1.ClId = F_Persons.ClId
        LEFT JOIN F_Persons AS F_Persons2 ON T1.ClId2 = F_Persons2.ClId        

    ORDER BY T1.Dete, T1.id

    into
        :id, :spid, :did, :dete, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_CURRDIFF_01 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(8),
    PCUR VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN F_ROPS2A.ID,
    SPID TYPE OF COLUMN F_ROPS2A.SPID,
    AC TYPE OF COLUMN F_ROPS2A.AC,
    RAC TYPE OF COLUMN F_ROPS2A.RAC,
    NAME TYPE OF COLUMN F_ROPS2A.NAME,
    B0 TYPE OF COLUMN F_ROPS2A.B0,
    SDB TYPE OF COLUMN F_ROPS2A.SDB,
    SCR TYPE OF COLUMN F_ROPS2A.SCR,
    TDB TYPE OF COLUMN F_ROPS2A.TDB,
    TCR TYPE OF COLUMN F_ROPS2A.TCR,
    CLID TYPE OF COLUMN F_ROPS2A.CLID,
    NAME1 TYPE OF COLUMN F_ROPS2A.NAME1,
    REGNR TYPE OF COLUMN F_ROPS2A.REGNR,
    RNAME TYPE OF COLUMN F_ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_F_ROPS2A_ID, 1) AS id,
        current_connection AS spid,
        T2.AC AS AC,
        NULL AS RAC,
        F_AcP21.Name AS Name,
        0.00 as b0,
        T2.ADb AS SDb,
        T2.ACr AS SCr,
        T2.BDb AS TDb,
        T2.BCr AS TCr,
        T2.Clid AS Clid,
        F_Persons.Name AS Name1,
        F_Persons.regnr AS regnr,
        null as rname
    FROM
    (
        SELECT AC, T1.Clid AS Clid, SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            -- :pcur ***************
            SELECT 
                F_OPS.AC11 AS AC,
                F_OPSd.ClId AS Clid,
                F_OPS.SummC AS SDb,
                0.00 AS SCr,
                F_OPS.Summ AS TDb,
                0.00 AS TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE 
                F_OPSd.Dete <= :edt AND 
                F_OPS.AC11 = :pac AND 
                F_OPS.Cur = :pcur AND
                (:pclid IS NULL OR F_OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                F_OPS.AC21 AS AC,
                F_OPSd.ClId AS Clid,
                0.00 AS SDb,
                F_OPS.SummC AS SCr,
                0.00 AS TDb,
                F_OPS.Summ AS TCr


            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE 
                F_OPSd.Dete <= :edt AND 
                F_OPS.AC21 = :pac AND 
                F_OPS.Cur = :pcur AND
                (:pclid IS NULL OR F_OPSd.ClId = :pclid)

            -- EUR ***************
            UNION ALL

            SELECT 
                F_OPS.AC11 AS AC,
                F_OPSd.ClId AS Clid,
                0.00 AS SDb,
                0.00 AS SCr,
                F_OPS.Summ AS TDb,
                0.00 AS TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE 
                F_OPSd.Dete <= :edt AND 
                F_OPS.AC11 = :pac AND 
                F_OPS.Cur = 'EUR' AND
                (:pclid IS NULL OR F_OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                F_OPS.AC21 AS AC,
                F_OPSd.ClId AS Clid,
                0.00 AS SDb,
                0.00 AS SCr,
                0.00 AS TDb,
                F_OPS.Summ AS TCr


            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE 
                F_OPSd.Dete <= :edt AND 
                F_OPS.AC21 = :pac AND 
                F_OPS.Cur = 'EUR' AND
                (:pclid IS NULL OR F_OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                F_Bal0.AC11 AS AC,
                F_Bal0.ClId AS Clid,
                F_Bal0.SummDC AS SDb,
                F_Bal0.SummCC AS SCr,
                F_Bal0.SummD AS TDb,
                F_Bal0.SummC AS TCr
            FROM F_Bal0
            WHERE 
                F_Bal0.AC11 = :pac AND 
                F_Bal0.Cur = :pcur AND
                (:pclid IS NULL OR F_Bal0.ClId = :pclid)
            
            UNION ALL

            SELECT 
                F_Bal0.AC11 AS AC,
                F_Bal0.ClId AS Clid,
                0.00 AS SDb,
                0.00 AS SCr,
                F_Bal0.SummD AS TDb,
                F_Bal0.SummC AS TCr
            FROM F_Bal0
            WHERE 
                F_Bal0.AC11 = :pac AND 
                F_Bal0.Cur = 'EUR' AND
                (:pclid IS NULL OR F_Bal0.ClId = :pclid)

        ) AS T1
        GROUP BY AC, T1.Clid

    ) AS T2    
    LEFT JOIN F_AcP21 ON T2.AC = F_AcP21.AC
    LEFT JOIN F_Persons ON T2.Clid = F_Persons.ClId
    ORDER BY AC

    
    into
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_DARZ_1 (
    SDT DATE,
    EDT DATE,
    PAC1 TYPE OF COLUMN F_OPS.AC11,
    PAC3 TYPE OF COLUMN F_OPS.AC13)
RETURNS (
    ID TYPE OF COLUMN F_TREPDARZ1.ID,
    SPID TYPE OF COLUMN F_TREPDARZ1.SPID,
    DID TYPE OF COLUMN F_TREPDARZ1.DID,
    RID TYPE OF COLUMN F_TREPDARZ1.RID,
    DETE TYPE OF COLUMN F_TREPDARZ1.DETE,
    NRX TYPE OF COLUMN F_TREPDARZ1.NRX,
    DOCTYP TYPE OF COLUMN F_TREPDARZ1.DOCTYP,
    DOCST TYPE OF COLUMN F_TREPDARZ1.DOCST,
    DOCNR TYPE OF COLUMN F_TREPDARZ1.DOCNR,
    CLID TYPE OF COLUMN F_TREPDARZ1.CLID,
    NAME TYPE OF COLUMN F_TREPDARZ1.NAME,
    REGNR TYPE OF COLUMN F_TREPDARZ1.REGNR,
    DESCR TYPE OF COLUMN F_TREPDARZ1.DESCR,
    AC1 TYPE OF COLUMN F_TREPDARZ1.AC1,
    AC2 TYPE OF COLUMN F_TREPDARZ1.AC2,
    AA TYPE OF COLUMN F_TREPDARZ1.AA,
    A1 TYPE OF COLUMN F_TREPDARZ1.A1,
    A2 TYPE OF COLUMN F_TREPDARZ1.A2,
    A3 TYPE OF COLUMN F_TREPDARZ1.A3,
    A4 TYPE OF COLUMN F_TREPDARZ1.A4,
    A5 TYPE OF COLUMN F_TREPDARZ1.A5,
    A6 TYPE OF COLUMN F_TREPDARZ1.A6,
    A7 TYPE OF COLUMN F_TREPDARZ1.A7,
    A8 TYPE OF COLUMN F_TREPDARZ1.A8,
    A9 TYPE OF COLUMN F_TREPDARZ1.A9,
    A10 TYPE OF COLUMN F_TREPDARZ1.A10,
    A11 TYPE OF COLUMN F_TREPDARZ1.A11,
    A12 TYPE OF COLUMN F_TREPDARZ1.A12,
    A13 TYPE OF COLUMN F_TREPDARZ1.A13,
    A14 TYPE OF COLUMN F_TREPDARZ1.A14,
    A15 TYPE OF COLUMN F_TREPDARZ1.A15,
    A16 TYPE OF COLUMN F_TREPDARZ1.A16,
    A17 TYPE OF COLUMN F_TREPDARZ1.A17,
    A18 TYPE OF COLUMN F_TREPDARZ1.A18)
AS
begin
    FOR SELECT
        gen_id(GEN_F_TREPDARZ1_ID, 1) AS id,
        current_connection AS spid,
        DocId AS did,
        0 AS rid,
        MAX(Dete) AS Dete,
        MAX(NrX) AS NrX,
        MAX(F_DocTyp.id1) AS DocTyp,
        MAX(DocSt) AS DocSt,
        MAX(DocNr) AS DocNr,
        MAX(F_OPSd.clid) AS clid,
        MAX(F_Persons.name) AS Name,
        MAX(F_Persons.regnr) AS RegNr,
        MAX(F_OPSd.descr) AS Descr,

        null AS AC1,
        null AS AC2,
        null AS AA,

        SUM(CASE WHEN AC13 = 'KA' THEN F_OPS.Summ ELSE 0.00 END) AS A1,
        SUM(CASE WHEN AC23 = 'KA' THEN F_OPS.Summ ELSE 0.00 END) AS A2,
        
        SUM(CASE WHEN AC13 = 'BA' THEN F_OPS.Summ ELSE 0.00 END) AS A3,
        SUM(CASE WHEN AC23 = 'BA' THEN F_OPS.Summ ELSE 0.00 END) AS A4,
                                                                
        SUM(CASE WHEN AC13 = 'CN' THEN F_OPS.Summ ELSE 0.00 END) AS A5,
        SUM(CASE WHEN AC23 = 'CN' THEN F_OPS.Summ ELSE 0.00 END) AS A6,

        SUM(CASE WHEN AC23 = 'LIE' THEN F_OPS.Summ ELSE 0.00 END) AS A7,
        SUM(CASE WHEN AC23 = 'NIE' THEN F_OPS.Summ ELSE 0.00 END) AS A8,
        SUM(CASE WHEN AC23 = 'SUB' THEN F_OPS.Summ ELSE 0.00 END) AS A9,
        SUM(CASE WHEN AC23 = 'ZIE' THEN F_OPS.Summ ELSE 0.00 END) AS A10,
        SUM(CASE WHEN AC23 = 'CIE' THEN F_OPS.Summ ELSE 0.00 END) AS A11,

        SUM(CASE WHEN AC13 = 'LIZ' THEN F_OPS.Summ ELSE 0.00 END) AS A12,
        SUM(CASE WHEN AC13 = 'NIZ' THEN F_OPS.Summ ELSE 0.00 END) AS A13,
        SUM(CASE WHEN AC13 = 'PIZ' THEN F_OPS.Summ ELSE 0.00 END) AS A14,
        SUM(CASE WHEN AC13 = 'ZIZ' THEN F_OPS.Summ ELSE 0.00 END) AS A15,
        SUM(CASE WHEN AC13 = 'CIZ' THEN F_OPS.Summ ELSE 0.00 END) AS A16,

        SUM(CASE WHEN AC13 = 'LIZ1' THEN F_OPS.Summ ELSE 0.00 END) AS A17,
        SUM(CASE WHEN AC13 = 'NIZ1' THEN F_OPS.Summ ELSE 0.00 END) AS A18

    FROM
        F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
        LEFT JOIN f_persons ON F_OPSd.clid = F_Persons.clid
        LEFT JOIN f_doctyp ON F_OPSd.doctyp = f_doctyp.id
    WHERE
        F_OPSd.Dete BETWEEN :sdt AND :edt AND
        F_OPS.AC13 IS NOT NULL AND
        F_OPS.AC23 IS NOT NULL AND
        (:PAC1 IS NULL OR F_OPS.AC11 = :PAC1 OR F_OPS.AC21 = :PAC1) AND
        (:PAC3 IS NULL OR F_OPS.AC13 = :PAC3 OR F_OPS.AC23 = :PAC3)
    GROUP BY DocId
    ORDER BY Dete, did


    into
        :id, :spid, :did, :rid, :dete, :nrx,
        :doctyp, :docst, :docnr, :clid, :name, :regnr,
        :descr, :ac1, :ac2, :aa,
        :a1, :a2, :a3, :a4, :a5, :a6, :a7, :a8,
        :a9, :a10, :a11, :a12, :a13, :a14,:a15,:a16,:a17,:a18
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_DARZ_2 (
    SDT DATE,
    EDT DATE,
    PAC1 TYPE OF COLUMN F_OPS.AC11,
    PAC3 TYPE OF COLUMN F_OPS.AC13)
RETURNS (
    ID TYPE OF COLUMN F_TREPDARZ2.ID,
    SPID TYPE OF COLUMN F_TREPDARZ2.SPID,
    RID0 TYPE OF COLUMN F_TREPDARZ2.RID0,
    A1 TYPE OF COLUMN F_TREPDARZ2.A1,
    A2 TYPE OF COLUMN F_TREPDARZ2.A2,
    A3 TYPE OF COLUMN F_TREPDARZ2.A3,
    A4 TYPE OF COLUMN F_TREPDARZ2.A4,
    A5 TYPE OF COLUMN F_TREPDARZ2.A5,
    A6 TYPE OF COLUMN F_TREPDARZ2.A6,
    A7 TYPE OF COLUMN F_TREPDARZ2.A7,
    A8 TYPE OF COLUMN F_TREPDARZ2.A8,
    A9 TYPE OF COLUMN F_TREPDARZ2.A9,
    A10 TYPE OF COLUMN F_TREPDARZ2.A10,
    A11 TYPE OF COLUMN F_TREPDARZ2.A11,
    A12 TYPE OF COLUMN F_TREPDARZ2.A12,
    A13 TYPE OF COLUMN F_TREPDARZ2.A13,
    A14 TYPE OF COLUMN F_TREPDARZ2.A14,
    A15 TYPE OF COLUMN F_TREPDARZ2.A15,
    A16 TYPE OF COLUMN F_TREPDARZ2.A16,
    A17 TYPE OF COLUMN F_TREPDARZ2.A17,
    A18 TYPE OF COLUMN F_TREPDARZ2.A18,
    A19 TYPE OF COLUMN F_TREPDARZ2.A19,
    A20 TYPE OF COLUMN F_TREPDARZ2.A20,
    A21 TYPE OF COLUMN F_TREPDARZ2.A21)
AS
begin

    FOR SELECT
        gen_id(GEN_F_TREPDARZ2_ID, 1) AS id,
        current_connection AS spid,
        coalesce(T2.rid0, 0) AS rid0,
        coalesce(T1.A1, 0.00) AS A1,
        coalesce(T1.A2, 0.00) AS A2,
        coalesce(T1.A3, 0.00) AS A3,
        coalesce(T1.A4, 0.00) AS A4,
        coalesce(T1.A5, 0.00) AS A5,
        coalesce(T1.A6, 0.00) AS A6,
        coalesce(T2.A7, 0.00) AS A7,
        coalesce(T2.A8, 0.00) AS A8,
        coalesce(T2.A9, 0.00) AS A9,
        coalesce(T2.A10, 0.00) AS A10,
        coalesce(T2.A11, 0.00) AS A11,
        coalesce(T2.A12, 0.00) AS A12,
        coalesce(T2.A13, 0.00) AS A13,
        coalesce(T2.A14, 0.00) AS A14,
        coalesce(T2.A15, 0.00) AS A15,
        coalesce(T2.A16, 0.00) AS A16,
        coalesce(T3.A17, 0.00) AS A17,
        coalesce(T3.A18, 0.00) AS A18,
        coalesce(T3.A19, 0.00) AS A19,
        coalesce(T2.A20, 0.00) AS A20,
        coalesce(T2.A21, 0.00) AS A21

    FROM
        (SELECT
            SUM(CASE WHEN AC13 = 'KA' THEN F_OPS.Summ ELSE 0.00 END) AS A1,
            SUM(CASE WHEN AC23 = 'KA' THEN F_OPS.Summ ELSE 0.00 END) AS A2,
        
            SUM(CASE WHEN AC13 = 'BA' THEN F_OPS.Summ ELSE 0.00 END) AS A3,
            SUM(CASE WHEN AC23 = 'BA' THEN F_OPS.Summ ELSE 0.00 END) AS A4,
        
            SUM(CASE WHEN AC13 = 'CN' THEN F_OPS.Summ ELSE 0.00 END) AS A5,
            SUM(CASE WHEN AC23 = 'CN' THEN F_OPS.Summ ELSE 0.00 END) AS A6

        FROM
            F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId

        WHERE
            F_OPSd.Dete <= :edt AND
            F_OPS.AC13 IS NOT NULL AND
            F_OPS.AC23 IS NOT NULL AND
            (:PAC1 IS NULL OR F_OPS.AC11 = :PAC1 OR F_OPS.AC21 = :PAC1) AND
            (:PAC3 IS NULL OR F_OPS.AC13 = :PAC3 OR F_OPS.AC23 = :PAC3)
        ) AS T1,
        
        (SELECT
            COUNT(DISTINCT DocId) rid0,
        
            SUM(CASE WHEN AC23 = 'LIE' THEN F_OPS.Summ ELSE 0.00 END) AS A7,
            SUM(CASE WHEN AC23 = 'NIE' THEN F_OPS.Summ ELSE 0.00 END) AS A8,
            SUM(CASE WHEN AC23 = 'SUB' THEN F_OPS.Summ ELSE 0.00 END) AS A9,
            SUM(CASE WHEN AC23 = 'ZIE' THEN F_OPS.Summ ELSE 0.00 END) AS A10,
            SUM(CASE WHEN AC23 = 'CIE' THEN F_OPS.Summ ELSE 0.00 END) AS A11,

            SUM(CASE WHEN AC13 = 'LIZ' THEN F_OPS.Summ ELSE 0.00 END) AS A12,
            SUM(CASE WHEN AC13 = 'NIZ' THEN F_OPS.Summ ELSE 0.00 END) AS A13,
            SUM(CASE WHEN AC13 = 'PIZ' THEN F_OPS.Summ ELSE 0.00 END) AS A14,
            SUM(CASE WHEN AC13 = 'ZIZ' THEN F_OPS.Summ ELSE 0.00 END) AS A15,
            SUM(CASE WHEN AC13 = 'CIZ' THEN F_OPS.Summ ELSE 0.00 END) AS A16,

            SUM(CASE WHEN AC13 = 'LIZ1' THEN F_OPS.Summ ELSE 0.00 END) AS A20,
            SUM(CASE WHEN AC13 = 'NIZ1' THEN F_OPS.Summ ELSE 0.00 END) AS A21

        FROM
            F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
        WHERE
            F_OPSd.Dete BETWEEN :sdt AND :edt AND
            F_OPS.AC13 IS NOT NULL AND
            F_OPS.AC23 IS NOT NULL AND
            (:PAC1 IS NULL OR F_OPS.AC11 = :PAC1 OR F_OPS.AC21 = :PAC1) AND
            (:PAC3 IS NULL OR F_OPS.AC13 = :PAC3 OR F_OPS.AC23 = :PAC3)
        ) AS T2,

        (SELECT 
            SUM(CASE WHEN F_AcP21.id1 = 'KA'
                THEN F_Bal0.SummD - F_Bal0.SummC ELSE 0.00 END) AS A17,
            SUM(CASE WHEN F_AcP21.id1 = 'BA'
                THEN F_Bal0.SummD - F_Bal0.SummC ELSE 0.00 END) AS A18,
            SUM(CASE WHEN F_AcP21.id1 = 'CN'
                THEN F_Bal0.SummD - F_Bal0.SummC ELSE 0.00 END) AS A19

        FROM F_Bal0
            INNER JOIN F_AcP21 ON F_Bal0.AC11 = F_AcP21.AC
        WHERE
            F_AcP21.id1 IN ('KA','BA','CN') AND
            (:PAC1 IS NULL OR F_AcP21.ac = :PAC1) AND
            (:PAC3 IS NULL OR F_AcP21.id1 = :PAC3)

        ) AS T3


    into
        :id, :spid, :rid0,
        :a1, :a2, :a3, :a4, :a5, :a6, :a7, :a8, :a9, :a10,
        :a11, :a12, :a13, :a14, :a15, :a16, :a17, :a18, :a19, :a20, :a21
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_DARZ_3 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID TYPE OF COLUMN F_TREPDARZ1.ID,
    SPID TYPE OF COLUMN F_TREPDARZ1.SPID,
    DID TYPE OF COLUMN F_TREPDARZ1.DID,
    RID TYPE OF COLUMN F_TREPDARZ1.RID,
    DETE TYPE OF COLUMN F_TREPDARZ1.DETE,
    NRX TYPE OF COLUMN F_TREPDARZ1.NRX,
    DOCTYP TYPE OF COLUMN F_TREPDARZ1.DOCTYP,
    DOCST TYPE OF COLUMN F_TREPDARZ1.DOCST,
    DOCNR TYPE OF COLUMN F_TREPDARZ1.DOCNR,
    CLID TYPE OF COLUMN F_TREPDARZ1.CLID,
    NAME TYPE OF COLUMN F_TREPDARZ1.NAME,
    REGNR TYPE OF COLUMN F_TREPDARZ1.REGNR,
    DESCR TYPE OF COLUMN F_TREPDARZ1.DESCR,
    AC1 TYPE OF COLUMN F_TREPDARZ1.AC1,
    AC2 TYPE OF COLUMN F_TREPDARZ1.AC2,
    AA TYPE OF COLUMN F_TREPDARZ1.AA,
    A1 TYPE OF COLUMN F_TREPDARZ1.A1,
    A2 TYPE OF COLUMN F_TREPDARZ1.A2,
    A3 TYPE OF COLUMN F_TREPDARZ1.A3,
    A4 TYPE OF COLUMN F_TREPDARZ1.A4,
    A5 TYPE OF COLUMN F_TREPDARZ1.A5,
    A6 TYPE OF COLUMN F_TREPDARZ1.A6,
    A7 TYPE OF COLUMN F_TREPDARZ1.A7,
    A8 TYPE OF COLUMN F_TREPDARZ1.A8,
    A9 TYPE OF COLUMN F_TREPDARZ1.A9,
    A10 TYPE OF COLUMN F_TREPDARZ1.A10,
    A11 TYPE OF COLUMN F_TREPDARZ1.A11,
    A12 TYPE OF COLUMN F_TREPDARZ1.A12,
    A13 TYPE OF COLUMN F_TREPDARZ1.A13,
    A14 TYPE OF COLUMN F_TREPDARZ1.A14,
    A15 TYPE OF COLUMN F_TREPDARZ1.A15,
    A16 TYPE OF COLUMN F_TREPDARZ1.A16)
AS
begin
    FOR SELECT
        gen_id(GEN_F_TREPDARZ1_ID, 1) AS id,
        current_connection AS spid,
        DocId AS did,
        0 AS rid,
        MAX(Dete) AS Dete,
        MAX(NrX) AS NrX,
        MAX(F_DocTyp.id1) AS DocTyp,
        MAX(DocSt) AS DocSt,
        MAX(DocNr) AS DocNr,
        MAX(F_OPSd.clid) AS clid,
        MAX(F_Persons.name) AS Name,
        MAX(F_Persons.regnr) AS RegNr,
        MAX(F_OPSd.descr) AS Descr,

        null AS AC1,
        null AS AC2,
        null AS AA,

        SUM(CASE WHEN AC13 = 'KA' THEN F_OPS.Summ ELSE 0.00 END) AS A1,
        SUM(CASE WHEN AC23 = 'KA' THEN F_OPS.Summ ELSE 0.00 END) AS A2,
        
        SUM(CASE WHEN AC13 = 'BA' THEN F_OPS.Summ ELSE 0.00 END) AS A3,
        SUM(CASE WHEN AC23 = 'BA' THEN F_OPS.Summ ELSE 0.00 END) AS A4,
        
        SUM(CASE WHEN AC13 = 'CN' THEN F_OPS.Summ ELSE 0.00 END) AS A5,
        SUM(CASE WHEN AC23 = 'CN' THEN F_OPS.Summ ELSE 0.00 END) AS A6,

        SUM(CASE WHEN AC23 = 'LIE' OR AC23 = 'SUB' THEN F_OPS.Summ ELSE 0.00 END) AS A7,
        SUM(CASE WHEN AC23 = 'NIE' THEN F_OPS.Summ ELSE 0.00 END) AS A8,
        SUM(CASE WHEN AC23 = 'ZIE' OR AC23 = 'CIE' THEN F_OPS.Summ ELSE 0.00 END) AS A9,

        SUM(CASE WHEN AC13 = 'DIZ' THEN F_OPS.Summ ELSE 0.00 END) AS A10,
        SUM(CASE WHEN AC13 = 'MIZ' THEN F_OPS.Summ ELSE 0.00 END) AS A11,
        SUM(CASE WHEN AC13 = 'LIZ' OR AC13 = 'NIZ' OR AC13 = 'PIZ' THEN F_OPS.Summ ELSE 0.00 END) AS A12,
        SUM(CASE WHEN AC13 = 'ZIZ' OR AC13 = 'CIZ' THEN F_OPS.Summ ELSE 0.00 END) AS A13,
        
        0 AS A14,
        0 AS A15,
        0 AS A16

    FROM
        F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
        LEFT JOIN f_persons ON F_OPSd.clid = F_Persons.clid
        LEFT JOIN f_doctyp ON F_OPSd.doctyp = f_doctyp.id
    WHERE
        F_OPSd.Dete BETWEEN :sdt AND :edt AND
        F_OPS.AC13 IS NOT NULL AND
        F_OPS.AC23 IS NOT NULL
    GROUP BY DocId
    ORDER BY Dete, did

    into
        :id, :spid, :did, :rid, :DETE, :nrx,
        :doctyp, :docst, :docnr, :clid, :name, :regnr,
        :descr, :ac1, :ac2, :aa,
        :a1, :a2, :a3, :a4, :a5, :a6, :a7, :a8,
        :a9, :a10, :a11, :a12, :a13, :a14,:a15,:a16
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_DARZ_4 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID TYPE OF COLUMN F_TREPDARZ2.ID,
    SPID TYPE OF COLUMN F_TREPDARZ2.SPID,
    RID0 TYPE OF COLUMN F_TREPDARZ2.RID0,
    A1 TYPE OF COLUMN F_TREPDARZ2.A1,
    A2 TYPE OF COLUMN F_TREPDARZ2.A2,
    A3 TYPE OF COLUMN F_TREPDARZ2.A3,
    A4 TYPE OF COLUMN F_TREPDARZ2.A4,
    A5 TYPE OF COLUMN F_TREPDARZ2.A5,
    A6 TYPE OF COLUMN F_TREPDARZ2.A6,
    A7 TYPE OF COLUMN F_TREPDARZ2.A7,
    A8 TYPE OF COLUMN F_TREPDARZ2.A8,
    A9 TYPE OF COLUMN F_TREPDARZ2.A9,
    A10 TYPE OF COLUMN F_TREPDARZ2.A10,
    A11 TYPE OF COLUMN F_TREPDARZ2.A11,
    A12 TYPE OF COLUMN F_TREPDARZ2.A12,
    A13 TYPE OF COLUMN F_TREPDARZ2.A13,
    A14 TYPE OF COLUMN F_TREPDARZ2.A14,
    A15 TYPE OF COLUMN F_TREPDARZ2.A15,
    A16 TYPE OF COLUMN F_TREPDARZ2.A16,
    A17 TYPE OF COLUMN F_TREPDARZ2.A17,
    A18 TYPE OF COLUMN F_TREPDARZ2.A18,
    A19 TYPE OF COLUMN F_TREPDARZ2.A19)
AS
begin
    FOR SELECT
        gen_id(GEN_F_TREPDARZ2_ID, 1) AS id,
        current_connection AS spid,
        coalesce(T2.rid0, 0) AS rid0,
        coalesce(T1.A1, 0.00) AS A1,
        coalesce(T1.A2, 0.00) AS A2,
        coalesce(T1.A3, 0.00) AS A3,
        coalesce(T1.A4, 0.00) AS A4,
        coalesce(T1.A5, 0.00) AS A5,
        coalesce(T1.A6, 0.00) AS A6,
        coalesce(T2.A7, 0.00) AS A7,
        coalesce(T2.A8, 0.00) AS A8,
        coalesce(T2.A9, 0.00) AS A9,
        coalesce(T2.A10, 0.00) AS A10,
        coalesce(T2.A11, 0.00) AS A11,
        coalesce(T2.A12, 0.00) AS A12,
        coalesce(T2.A13, 0.00) AS A13,
        0.00 AS A14,
        0.00 AS A15,
        0.00 AS A16,
        coalesce(T3.A17, 0.00) AS A17,
        coalesce(T3.A18, 0.00) AS A18,
        coalesce(T3.A19, 0.00) AS A19

    FROM
        (SELECT
            SUM(CASE WHEN AC13 = 'KA' THEN F_OPS.Summ ELSE 0.00 END) AS A1,
            SUM(CASE WHEN AC23 = 'KA' THEN F_OPS.Summ ELSE 0.00 END) AS A2,
        
            SUM(CASE WHEN AC13 = 'BA' THEN F_OPS.Summ ELSE 0.00 END) AS A3,
            SUM(CASE WHEN AC23 = 'BA' THEN F_OPS.Summ ELSE 0.00 END) AS A4,
        
            SUM(CASE WHEN AC13 = 'CN' THEN F_OPS.Summ ELSE 0.00 END) AS A5,
            SUM(CASE WHEN AC23 = 'CN' THEN F_OPS.Summ ELSE 0.00 END) AS A6

        FROM
            F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId

        WHERE
            F_OPSd.Dete <= :edt AND
            F_OPS.AC13 IS NOT NULL AND
            F_OPS.AC23 IS NOT NULL

        ) AS T1,

        (SELECT
            COUNT(DISTINCT DocId) rid0,

            SUM(CASE WHEN AC23 = 'LIE' OR AC23 = 'SUB' THEN F_OPS.Summ ELSE 0.00 END) AS A7,
            SUM(CASE WHEN AC23 = 'NIE' THEN F_OPS.Summ ELSE 0.00 END) AS A8,
            SUM(CASE WHEN AC23 = 'ZIE' OR AC23 = 'CIE' THEN F_OPS.Summ ELSE 0.00 END) AS A9,

            SUM(CASE WHEN AC13 = 'DIZ' THEN F_OPS.Summ ELSE 0.00 END) AS A10,
            SUM(CASE WHEN AC13 = 'MIZ' THEN F_OPS.Summ ELSE 0.00 END) AS A11,
            SUM(CASE WHEN AC13 = 'LIZ' OR AC13 = 'NIZ' OR AC13 = 'PIZ' THEN F_OPS.Summ ELSE 0.00 END) AS A12,
            SUM(CASE WHEN AC13 = 'ZIZ' OR AC13 = 'CIZ' THEN F_OPS.Summ ELSE 0.00 END) AS A13

        FROM
            F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId

        WHERE
            F_OPSd.Dete BETWEEN :sdt AND :edt AND
            F_OPS.AC13 IS NOT NULL AND
            F_OPS.AC23 IS NOT NULL

        ) AS T2,

        (SELECT 
            SUM(CASE WHEN F_AcP21.id1 = 'KA'
                THEN F_Bal0.SummD - F_Bal0.SummC ELSE 0.00 END) AS A17,
            SUM(CASE WHEN F_AcP21.id1 = 'BA'
                THEN F_Bal0.SummD - F_Bal0.SummC ELSE 0.00 END) AS A18,
            SUM(CASE WHEN F_AcP21.id1 = 'CN'
                THEN F_Bal0.SummD - F_Bal0.SummC ELSE 0.00 END) AS A19

        FROM F_Bal0
            INNER JOIN F_AcP21 ON F_Bal0.AC11 = F_AcP21.AC
        WHERE F_AcP21.id1 IN ('KA','BA','CN')
        ) AS T3


    into
        :id, :spid, :rid0,
        :a1, :a2, :a3, :a4, :a5, :a6, :a7, :a8, :a9, :a10,
        :a11, :a12, :a13, :a14, :a15, :a16, :a17, :a18, :a19
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_DOKS_11 (
    PDATE1 DATE,
    PDATE2 DATE,
    PTEXT VARCHAR(50),
    PCLID VARCHAR(15),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PDOCGR VARCHAR(10),
    PANDOR VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN F_ROPS1A.ID,
    SPID TYPE OF COLUMN F_ROPS1A.SPID,
    DID TYPE OF COLUMN F_ROPS1A.DID,
    DETE TYPE OF COLUMN F_ROPS1A.DETE,
    NRX TYPE OF COLUMN F_ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN F_ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN F_ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN F_ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN F_ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN F_ROPS1A.DOCNR,
    CLID TYPE OF COLUMN F_ROPS1A.CLID,
    CLID2 TYPE OF COLUMN F_ROPS1A.CLID2,
    NAME TYPE OF COLUMN F_ROPS1A.NAME,
    NAME2 TYPE OF COLUMN F_ROPS1A.NAME2,
    REGNR TYPE OF COLUMN F_ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN F_ROPS1A.REGNR2,
    B0 TYPE OF COLUMN F_ROPS1A.B0,
    DESCR TYPE OF COLUMN F_ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN F_ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN F_ROPS1A.AC1,
    AC2 TYPE OF COLUMN F_ROPS1A.AC2,
    SAC1 TYPE OF COLUMN F_ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN F_ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN F_ROPS1A.SUMMC,
    CUR TYPE OF COLUMN F_ROPS1A.CUR,
    SUMM TYPE OF COLUMN F_ROPS1A.SUMM,
    PVN TYPE OF COLUMN F_ROPS1A.PVN,
    RAC TYPE OF COLUMN F_ROPS1A.RAC,
    SDB TYPE OF COLUMN F_ROPS1A.SDB,
    SCR TYPE OF COLUMN F_ROPS1A.SCR,
    RAC2 TYPE OF COLUMN F_ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN F_ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN F_ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN F_ROPS1A.RAC5,
    QV TYPE OF COLUMN F_ROPS1A.QV,
    ZNR TYPE OF COLUMN F_ROPS1A.ZNR)
AS
begin
    IF
    (
        :PAC11 IS NULL AND 
        :PAC12 IS NULL AND 
        :PAC13 IS NULL AND 
        :PAC14 IS NULL AND
        :PAC15 IS NULL AND
        :PAC21 IS NULL AND 
        :PAC22 IS NULL AND 
        :PAC23 IS NULL AND 
        :PAC24 IS NULL AND
        :PAC25 IS NULL
    ) THEN
    BEGIN
        FOR SELECT
            gen_id(GEN_F_ROPS1A_ID, 1) as id,
            current_connection as spid,
            F_OPSd.id AS did, 
            F_OPSd.Dete AS Dete,
            F_OPSd.NrX AS NrX,
            F_OPSd.DocTyp AS DocTyp,
            F_DocTyp.id1 AS DocTyp1, 
            null as DocTyp2,
            F_OPSd.DocSt AS DocSt,
            F_OPSd.DocNr AS DocNr,
            F_OPSd.ClId AS Clid,
            F_OPSd.ClId2 AS Clid2,
            F_Persons.Name AS Name, 
            F_Persons2.Name AS Name2, 
            F_Persons.RegNr AS RegNr,
            F_Persons2.RegNr AS RegNr2,
            0 AS b0, 
            F_OPSd.Descr AS Descr,
            null AS Descr2,
            null AS AC1,
            null AS AC2,
            null AS SAC1,
            null AS SAC2,
            0 AS SummC,
            null AS Cur,
            F_OPSd.Summ AS Summ,
            F_OPSd.PVN AS PVN,
            null AS Rac,
            0 AS Sdb,
            0 AS SCr,
            null AS Rac2,
            null AS Rac3,
            null AS Rac4,
            null AS Rac5,
            0 AS qv,
            F_OPSd.ZNR AS ZNR

        FROM F_OPSd
            LEFT JOIN F_DocTyp ON F_OPSd.DocTyp = F_DocTyp.id
            LEFT JOIN F_Persons ON F_OPSd.ClId = F_Persons.ClId
            LEFT JOIN F_Persons AS F_Persons2 ON F_OPSd.ClId2 = F_Persons2.ClId        
        WHERE 
        (
            (:PDATE1 IS NULL OR Dete >= :PDATE1) AND
            (:PDATE2 IS NULL OR Dete <= :PDATE2) AND
            (:PCLID IS NULL OR F_OPSd.ClId = :PCLID OR ClId2 = :pclid) AND
            (:PTEXT IS NULL OR F_OPSd.Descr LIKE :PTEXT) AND
            (
                :PDOCGR IS NULL OR EXISTS(
                    SELECT DTA.ID
                    FROM f_doctypb AS DTB inner join f_doctypa AS DTA on DTB.ida = DTA.id
                    WHERE DTB.ID = F_OPSD.doctyp AND DTA.ID = :PDOCGR
                )
            )
        )
        ORDER BY Dete, did
        into
            :id, :spid, :did, :DETE, :nrx,
            :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
            :clid, :clid2, :name, :name2, :regnr, :regnr2,
            :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
            :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
            :rac2, :rac3, :rac4, :rac5, :qv, :znr
        do
        begin
            suspend;
        end

    END
    ELSE
    BEGIN
        IF (pandor = 'AND') THEN
        BEGIN
            FOR SELECT
                gen_id(GEN_F_ROPS1A_ID, 1) as id,
                current_connection as spid,
                F_OPSd.id AS did, 
                F_OPSd.Dete AS Dete,
                F_OPSd.NrX AS NrX,
                F_OPSd.DocTyp AS DocTyp,
                F_DocTyp.id1 AS DocTyp1, 
                null as DocTyp2,
                F_OPSd.DocSt AS DocSt,
                F_OPSd.DocNr AS DocNr,
                F_OPSd.ClId AS Clid,
                F_OPSd.ClId2 AS Clid2,
                F_Persons.Name AS Name, 
                F_Persons2.Name AS Name2, 
                F_Persons.RegNr AS RegNr,
                F_Persons2.RegNr AS RegNr2,
                0 AS b0, 
                F_OPSd.Descr AS Descr,
                null AS Descr2,
                null AS AC1,
                null AS AC2,
                null AS SAC1,
                null AS SAC2,
                0 AS SummC,
                null AS Cur,
                F_OPSd.Summ AS Summ,
                F_OPSd.PVN AS PVN,
                null AS Rac,
                0 AS Sdb,
                0 AS SCr,
                null AS Rac2,
                null AS Rac3,
                null AS Rac4,
                null AS Rac5,
                0 AS qv,
                F_OPSd.ZNR AS ZNR
            FROM F_OPSd
                LEFT JOIN F_DocTyp ON F_OPSd.DocTyp = F_DocTyp.id
                LEFT JOIN F_Persons ON F_OPSd.ClId = F_Persons.ClId
                LEFT JOIN F_Persons AS F_Persons2 ON F_OPSd.ClId2 = F_Persons2.ClId        
            WHERE 
            (
                (:PDATE1 IS NULL OR Dete >= :PDATE1) AND
                (:PDATE2 IS NULL OR Dete <= :PDATE2) AND
                (:PCLID IS NULL OR F_OPSd.ClId = :PCLID OR ClId2 = :pclid) AND
                (:PTEXT IS NULL OR F_OPSd.Descr LIKE :PTEXT)  AND
                (
                    :PDOCGR IS NULL OR EXISTS(
                        SELECT DTA.ID
                        FROM f_doctypb AS DTB inner join f_doctypa AS DTA on DTB.ida = DTA.id
                        WHERE DTB.ID = F_OPSD.doctyp AND DTA.ID = :PDOCGR
                    )
                )
                AND

                EXISTS     
                (
                    SELECT NULL
                    FROM F_OPS
                    WHERE
                    (
                        (F_OPS.DocId = F_OPSd.id) AND
                        (:PAC11 IS NULL OR AC11 LIKE :PAC11) AND
                        (:PAC12 IS NULL OR AC12 LIKE :PAC12) AND
                        (:PAC13 IS NULL OR AC13 LIKE :PAC13) AND
                        (:PAC14 IS NULL OR AC14 LIKE :PAC14) AND
                        (:PAC15 IS NULL OR AC15 LIKE :PAC15) AND

                        (:PAC21 IS NULL OR AC21 LIKE :PAC21) AND
                        (:PAC22 IS NULL OR AC22 LIKE :PAC22) AND
                        (:PAC23 IS NULL OR AC23 LIKE :PAC23) AND
                        (:PAC24 IS NULL OR AC24 LIKE :PAC24) AND
                        (:PAC25 IS NULL OR AC25 LIKE :PAC25)
                    )
                )
            )
            ORDER BY Dete, did
            into
                :id, :spid, :did, :DETE, :nrx,
                :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
                :clid, :clid2, :name, :name2, :regnr, :regnr2,
                :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
                :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
                :rac2, :rac3, :rac4, :rac5, :qv, :znr
            do
            begin
                suspend;
            end

        END 
        ELSE
        BEGIN
            FOR SELECT
                gen_id(GEN_F_ROPS1A_ID, 1) as id,
                current_connection as spid,
                F_OPSd.id AS did, 
                F_OPSd.Dete AS Dete,
                F_OPSd.NrX AS NrX,
                F_OPSd.DocTyp AS DocTyp,
                F_DocTyp.id1 AS DocTyp1, 
                null as DocTyp2,
                F_OPSd.DocSt AS DocSt,
                F_OPSd.DocNr AS DocNr,
                F_OPSd.ClId AS Clid,
                F_OPSd.ClId2 AS Clid2,
                F_Persons.Name AS Name, 
                F_Persons2.Name AS Name2, 
                F_Persons.RegNr AS RegNr,
                F_Persons2.RegNr AS RegNr2,
                0 AS b0, 
                F_OPSd.Descr AS Descr,
                null AS Descr2,
                null AS AC1,
                null AS AC2,
                null AS SAC1,
                null AS SAC2,
                0 AS SummC,
                null AS Cur,
                F_OPSd.Summ AS Summ,
                F_OPSd.PVN AS PVN,
                null AS Rac,
                0 AS Sdb,
                0 AS SCr,
                null AS Rac2,
                null AS Rac3,
                null AS Rac4,
                null AS Rac5,
                0 AS qv,
                F_OPSd.ZNR AS ZNR
            FROM F_OPSd
                LEFT JOIN F_DocTyp ON F_OPSd.DocTyp = F_DocTyp.id
                LEFT JOIN F_Persons ON F_OPSd.ClId = F_Persons.ClId
                LEFT JOIN F_Persons AS F_Persons2 ON F_OPSd.ClId2 = F_Persons2.ClId        

            WHERE 
            (
                (:PDATE1 IS NULL OR Dete >= :PDATE1) AND
                (:PDATE2 IS NULL OR Dete <= :PDATE2) AND
                (:PCLID IS NULL OR F_OPSd.ClId = :PCLID OR ClId2 = :pclid) AND
                (:PTEXT IS NULL OR F_OPSd.Descr LIKE :PTEXT) AND
                (
                    :PDOCGR IS NULL OR EXISTS(
                        SELECT DTA.ID
                        FROM f_doctypb AS DTB inner join f_doctypa AS DTA on DTB.ida = DTA.id
                        WHERE DTB.ID = F_OPSD.doctyp AND DTA.ID = :PDOCGR
                    )
                )
                AND

                EXISTS     
                (
                    SELECT NULL
                    FROM F_OPS
                    WHERE
                    (
                        (F_OPS.DocId = F_OPSd.id) AND
                        (
                            (
                                (:PAC11 IS NULL OR AC11 LIKE :PAC11) AND
                                (:PAC12 IS NULL OR AC12 LIKE :PAC12) AND
                                (:PAC13 IS NULL OR AC13 LIKE :PAC13) AND
                                (:PAC14 IS NULL OR AC14 LIKE :PAC14) AND
                                (:PAC15 IS NULL OR AC15 LIKE :PAC15)
                            )
                            OR
                            (
                                (:PAC21 IS NULL OR AC21 LIKE :PAC21) AND
                                (:PAC22 IS NULL OR AC22 LIKE :PAC22) AND
                                (:PAC23 IS NULL OR AC23 LIKE :PAC23) AND
                                (:PAC24 IS NULL OR AC24 LIKE :PAC24) AND
                                (:PAC25 IS NULL OR AC25 LIKE :PAC25)
                            )
                        )
                    )
                )
            )
            ORDER BY Dete, did
            into
                :id, :spid, :did, :DETE, :nrx,
                :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
                :clid, :clid2, :name, :name2, :regnr, :regnr2,
                :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
                :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
                :rac2, :rac3, :rac4, :rac5, :qv, :znr
            do
            begin
                suspend;
            end

        END
    END
end^


ALTER PROCEDURE SP_F_REP_KG_11 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN F_ROPS1A.ID,
    SPID TYPE OF COLUMN F_ROPS1A.SPID,
    DID TYPE OF COLUMN F_ROPS1A.DID,
    DETE TYPE OF COLUMN F_ROPS1A.DETE,
    NRX TYPE OF COLUMN F_ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN F_ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN F_ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN F_ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN F_ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN F_ROPS1A.DOCNR,
    CLID TYPE OF COLUMN F_ROPS1A.CLID,
    CLID2 TYPE OF COLUMN F_ROPS1A.CLID2,
    NAME TYPE OF COLUMN F_ROPS1A.NAME,
    NAME2 TYPE OF COLUMN F_ROPS1A.NAME2,
    REGNR TYPE OF COLUMN F_ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN F_ROPS1A.REGNR2,
    B0 TYPE OF COLUMN F_ROPS1A.B0,
    DESCR TYPE OF COLUMN F_ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN F_ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN F_ROPS1A.AC1,
    AC2 TYPE OF COLUMN F_ROPS1A.AC2,
    SAC1 TYPE OF COLUMN F_ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN F_ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN F_ROPS1A.SUMMC,
    CUR TYPE OF COLUMN F_ROPS1A.CUR,
    SUMM TYPE OF COLUMN F_ROPS1A.SUMM,
    PVN TYPE OF COLUMN F_ROPS1A.PVN,
    RAC TYPE OF COLUMN F_ROPS1A.RAC,
    SDB TYPE OF COLUMN F_ROPS1A.SDB,
    SCR TYPE OF COLUMN F_ROPS1A.SCR,
    RAC2 TYPE OF COLUMN F_ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN F_ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN F_ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN F_ROPS1A.RAC5,
    QV TYPE OF COLUMN F_ROPS1A.QV,
    ZNR TYPE OF COLUMN F_ROPS1A.ZNR)
AS
begin
    FOR SELECT
        gen_id(GEN_F_ROPS1A_ID, 1) AS id,
        current_connection as spid,
        F_OPSd.id AS did,
        F_OPSd.Dete,
        F_OPSd.NrX,
        F_OPSd.DocTyp,
        F_DocTyp.id1 AS DocTyp1,
        F_DocTyp.tpZ AS DocTyp2,
        F_OPSd.DocSt,
        F_OPSd.DocNr,
        F_OPSd.ClId,
        F_OPSd.ClId2,
        P1.Name AS Name,
        P2.Name AS Name2,
        P1.RegNr AS RegNr,
        P2.RegNr AS RegNr2,
        0 AS b0,
        F_OPSd.Descr,
        F_OPS.Descr AS Descr2,
        null AS AC1,
        CASE WHEN F_OPS.AC11 = :pac THEN F_OPS.AC21 ELSE F_OPS.AC11 END AS Ac2,
        null AS SAC1,
        CASE WHEN F_OPS.AC11 = :pac THEN AcP21_2.Name ELSE F_AcP21.Name END AS SAc2,
        F_OPS.SummC AS SummC,
        F_OPS.cur AS Cur,
        F_OPS.Summ AS Summ,
        0 AS PVN,
        null AS Rac,
        CASE WHEN F_OPS.AC11 = :pac THEN F_OPS.Summ ELSE 0.00 END AS SDb,
        CASE WHEN F_OPS.AC21 = :pac THEN F_OPS.Summ ELSE 0.00 END AS SCr,
        null AS Rac2,
        null AS Rac3,
        null AS Rac4,
        null AS Rac5,
        0 AS qv,
        F_OPSd.ZNR
    FROM
        F_OPSd INNER 
        JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
        LEFT JOIN F_AcP21 ON F_OPS.AC11 = F_AcP21.AC
        LEFT JOIN F_AcP21 AS AcP21_2 ON F_OPS.AC21 = AcP21_2.AC
        LEFT JOIN F_Persons AS P1 ON F_OPSd.ClId = P1.ClId
        LEFT JOIN F_Persons AS P2 ON F_OPSd.ClId2 = P2.ClId
        LEFT JOIN F_DocTyp ON F_OPSd.DocTyp = F_DocTyp.id
    WHERE
        F_OPSd.Dete BETWEEN :sdt AND :edt AND
        (F_OPS.AC11 = :pac OR F_OPS.AC21 = :pac)
    ORDER BY
        F_OPSd.Dete, 
        CASE WHEN F_OPS.AC11 = :pac THEN 1 ELSE 2 END,
        NrX 


    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_KIEO_1 (
    PDID INTEGER)
RETURNS (
    ID TYPE OF COLUMN F_ROPS1A.ID,
    SPID TYPE OF COLUMN F_ROPS1A.SPID,
    DID TYPE OF COLUMN F_ROPS1A.DID,
    DETE TYPE OF COLUMN F_ROPS1A.DETE,
    NRX TYPE OF COLUMN F_ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN F_ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN F_ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN F_ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN F_ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN F_ROPS1A.DOCNR,
    CLID TYPE OF COLUMN F_ROPS1A.CLID,
    CLID2 TYPE OF COLUMN F_ROPS1A.CLID2,
    NAME TYPE OF COLUMN F_ROPS1A.NAME,
    NAME2 TYPE OF COLUMN F_ROPS1A.NAME2,
    REGNR TYPE OF COLUMN F_ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN F_ROPS1A.REGNR2,
    B0 TYPE OF COLUMN F_ROPS1A.B0,
    DESCR TYPE OF COLUMN F_ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN F_ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN F_ROPS1A.AC1,
    AC2 TYPE OF COLUMN F_ROPS1A.AC2,
    SAC1 TYPE OF COLUMN F_ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN F_ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN F_ROPS1A.SUMMC,
    CUR TYPE OF COLUMN F_ROPS1A.CUR,
    SUMM TYPE OF COLUMN F_ROPS1A.SUMM,
    PVN TYPE OF COLUMN F_ROPS1A.PVN,
    RAC TYPE OF COLUMN F_ROPS1A.RAC,
    SDB TYPE OF COLUMN F_ROPS1A.SDB,
    SCR TYPE OF COLUMN F_ROPS1A.SCR,
    RAC2 TYPE OF COLUMN F_ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN F_ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN F_ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN F_ROPS1A.RAC5,
    QV TYPE OF COLUMN F_ROPS1A.QV,
    ZNR TYPE OF COLUMN F_ROPS1A.ZNR)
AS
begin
    FOR SELECT
        gen_id(GEN_F_ROPS1A_ID, 1) AS id,
        current_connection as spid,
        F_OPSd.id AS did,
        F_OPSd.Dete,
        F_OPSd.NrX,
        F_OPSd.DocTyp,
        F_DocTyp.id1 AS DocTyp1,
        F_DocTyp.tpZ AS DocTyp2,
        F_OPSd.DocSt,
        F_OPSd.DocNr,
        F_OPSd.ClId,
        F_OPSd.ClId2,
        P1.Name AS Name,
        P2.Name AS Name2,
        P1.RegNr AS RegNr,
        P2.RegNr AS RegNr2,
        0 AS b0,
        F_OPSd.Descr,
        F_OPS.Descr AS Descr2,
        F_OPS.AC11 AS Ac1,
        F_OPS.AC21 AS Ac2,
        F_AcP21.Name AS SAc1,
        AcP21_2.Name AS SAc2,
        F_OPS.SummC AS SummC,
        F_OPS.cur AS Cur,
        F_OPS.Summ AS Summ,
        0 AS PVN,
        null AS Rac,
        F_OPS.Summ AS SDb,
        0.00 AS SCr,
        null AS Rac2,
        null AS Rac3,
        null AS Rac4,
        null AS Rac5,
        0 AS qv,
        F_OPSd.ZNR
    FROM
        F_OPSd INNER 
        JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
        LEFT JOIN F_AcP21 ON F_OPS.AC11 = F_AcP21.AC
        LEFT JOIN F_AcP21 AS AcP21_2 ON F_OPS.AC21 = AcP21_2.AC
        LEFT JOIN F_Persons AS P1 ON F_OPSd.ClId = P1.ClId
        LEFT JOIN F_Persons AS P2 ON F_OPSd.ClId2 = P2.ClId
        LEFT JOIN F_DocTyp ON F_OPSd.DocTyp = F_DocTyp.id
    WHERE
        F_OPSd.id = :pdid

    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_KIEO_21 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN F_ROPS1A.ID,
    SPID TYPE OF COLUMN F_ROPS1A.SPID,
    DID TYPE OF COLUMN F_ROPS1A.DID,
    DETE TYPE OF COLUMN F_ROPS1A.DETE,
    NRX TYPE OF COLUMN F_ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN F_ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN F_ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN F_ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN F_ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN F_ROPS1A.DOCNR,
    CLID TYPE OF COLUMN F_ROPS1A.CLID,
    CLID2 TYPE OF COLUMN F_ROPS1A.CLID2,
    NAME TYPE OF COLUMN F_ROPS1A.NAME,
    NAME2 TYPE OF COLUMN F_ROPS1A.NAME2,
    REGNR TYPE OF COLUMN F_ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN F_ROPS1A.REGNR2,
    B0 TYPE OF COLUMN F_ROPS1A.B0,
    DESCR TYPE OF COLUMN F_ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN F_ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN F_ROPS1A.AC1,
    AC2 TYPE OF COLUMN F_ROPS1A.AC2,
    SAC1 TYPE OF COLUMN F_ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN F_ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN F_ROPS1A.SUMMC,
    CUR TYPE OF COLUMN F_ROPS1A.CUR,
    SUMM TYPE OF COLUMN F_ROPS1A.SUMM,
    PVN TYPE OF COLUMN F_ROPS1A.PVN,
    RAC TYPE OF COLUMN F_ROPS1A.RAC,
    SDB TYPE OF COLUMN F_ROPS1A.SDB,
    SCR TYPE OF COLUMN F_ROPS1A.SCR,
    RAC2 TYPE OF COLUMN F_ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN F_ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN F_ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN F_ROPS1A.RAC5,
    QV TYPE OF COLUMN F_ROPS1A.QV,
    ZNR TYPE OF COLUMN F_ROPS1A.ZNR)
AS
begin
    FOR SELECT
        gen_id(GEN_F_ROPS1A_ID, 1) AS id,
        current_connection as spid,
        F_OPSd.id AS did,
        F_OPSd.Dete,
        F_OPSd.NrX,
        F_OPSd.DocTyp,
        F_DocTyp.id1 AS DocTyp1,
        F_DocTyp.tpZ AS DocTyp2,
        F_OPSd.DocSt,
        F_OPSd.DocNr,
        F_OPSd.ClId,
        F_OPSd.ClId2,
        P1.Name AS Name,
        P2.Name AS Name2,
        P1.RegNr AS RegNr,
        P2.RegNr AS RegNr2,
        0 AS b0,
        F_OPSd.Descr,
        F_OPS.Descr AS Descr2,
        F_OPS.AC11 AS Ac1,
        F_OPS.AC21 AS Ac2,
        F_AcP21.Name AS SAc1,
        AcP21_2.Name AS SAc2,
        F_OPS.SummC AS SummC,
        F_OPS.cur AS Cur,
        F_OPS.Summ AS Summ,
        0 AS PVN,
        null AS Rac,
        F_OPS.Summ AS SDb,
        0.00 AS SCr,
        null AS Rac2,
        null AS Rac3,
        null AS Rac4,
        null AS Rac5,
        0 AS qv,
        F_OPSd.ZNR
    FROM
        F_OPSd INNER 
        JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
        LEFT JOIN F_AcP21 ON F_OPS.AC11 = F_AcP21.AC
        LEFT JOIN F_AcP21 AS AcP21_2 ON F_OPS.AC21 = AcP21_2.AC
        LEFT JOIN F_Persons AS P1 ON F_OPSd.ClId = P1.ClId
        LEFT JOIN F_Persons AS P2 ON F_OPSd.ClId2 = P2.ClId
        LEFT JOIN F_DocTyp ON F_OPSd.DocTyp = F_DocTyp.id
    WHERE
        F_OPSd.Dete BETWEEN :sdt AND :edt AND
        F_OPS.AC11 = :pac
    ORDER BY
        F_OPSd.NrX

    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_KIZO_21 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN F_ROPS1A.ID,
    SPID TYPE OF COLUMN F_ROPS1A.SPID,
    DID TYPE OF COLUMN F_ROPS1A.DID,
    DETE TYPE OF COLUMN F_ROPS1A.DETE,
    NRX TYPE OF COLUMN F_ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN F_ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN F_ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN F_ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN F_ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN F_ROPS1A.DOCNR,
    CLID TYPE OF COLUMN F_ROPS1A.CLID,
    CLID2 TYPE OF COLUMN F_ROPS1A.CLID2,
    NAME TYPE OF COLUMN F_ROPS1A.NAME,
    NAME2 TYPE OF COLUMN F_ROPS1A.NAME2,
    REGNR TYPE OF COLUMN F_ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN F_ROPS1A.REGNR2,
    B0 TYPE OF COLUMN F_ROPS1A.B0,
    DESCR TYPE OF COLUMN F_ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN F_ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN F_ROPS1A.AC1,
    AC2 TYPE OF COLUMN F_ROPS1A.AC2,
    SAC1 TYPE OF COLUMN F_ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN F_ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN F_ROPS1A.SUMMC,
    CUR TYPE OF COLUMN F_ROPS1A.CUR,
    SUMM TYPE OF COLUMN F_ROPS1A.SUMM,
    PVN TYPE OF COLUMN F_ROPS1A.PVN,
    RAC TYPE OF COLUMN F_ROPS1A.RAC,
    SDB TYPE OF COLUMN F_ROPS1A.SDB,
    SCR TYPE OF COLUMN F_ROPS1A.SCR,
    RAC2 TYPE OF COLUMN F_ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN F_ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN F_ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN F_ROPS1A.RAC5,
    QV TYPE OF COLUMN F_ROPS1A.QV,
    ZNR TYPE OF COLUMN F_ROPS1A.ZNR)
AS
begin
    for SELECT
        gen_id(GEN_F_ROPS1A_ID, 1) AS id,
        current_connection as spid,
        F_OPSd.id AS did,
        F_OPSd.Dete,
        F_OPSd.NrX,
        F_OPSd.DocTyp,
        F_DocTyp.id1 AS DocTyp1,
        F_DocTyp.tpZ AS DocTyp2,
        F_OPSd.DocSt,
        F_OPSd.DocNr,
        F_OPSd.ClId,
        F_OPSd.ClId2,
        P1.Name AS Name,
        P2.Name AS Name2,
        P1.RegNr AS RegNr,
        P2.RegNr AS RegNr2,
        0.0 AS b0,
        F_OPSd.Descr,
        F_OPS.Descr AS Descr2,
        F_OPS.AC11 AS Ac1,
        F_OPS.AC21 AS Ac2,
        F_AcP21.Name AS SAc1,
        AcP21_2.Name AS SAc2,
        F_OPS.SummC AS SummC,
        F_OPS.cur AS Cur,
        F_OPS.Summ AS Summ,
        0.0 AS PVN,
        null AS Rac,
        0.00 AS SDb,
        F_OPS.Summ AS SCr,
        null AS Rac2,
        null AS Rac3,
        null AS Rac4,
        null AS Rac5,
        0 AS qv,
        F_OPSd.ZNR
    FROM
        F_OPSd INNER 
        JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
        LEFT JOIN F_AcP21 ON F_OPS.AC11 = F_AcP21.AC
        LEFT JOIN F_AcP21 AS AcP21_2 ON F_OPS.AC21 = AcP21_2.AC
        LEFT JOIN F_Persons AS P1 ON F_OPSd.ClId = P1.ClId
        LEFT JOIN F_Persons AS P2 ON F_OPSd.ClId2 = P2.ClId
        LEFT JOIN F_DocTyp ON F_OPSd.DocTyp = F_DocTyp.id
    WHERE
        F_OPSd.Dete BETWEEN :sdt AND :edt AND
        F_OPS.AC21 = :pac
    ORDER BY
        F_OPSd.NrX

    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_KORESP_01 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN F_ROPS3A.ID,
    SPID TYPE OF COLUMN F_ROPS3A.SPID,
    RAC TYPE OF COLUMN F_ROPS3A.RAC,
    NAME TYPE OF COLUMN F_ROPS3A.NAME,
    SDB TYPE OF COLUMN F_ROPS3A.SDB,
    SCR TYPE OF COLUMN F_ROPS3A.SCR,
    AC1 TYPE OF COLUMN F_ROPS3A.AC1,
    CLID TYPE OF COLUMN F_ROPS3A.CLID)
AS
begin
    for SELECT
        gen_id(GEN_F_ROPS3A_ID, 1) as ID,
        current_connection as SPID,
        T2.AC AS RAC,
        F_AcP21.Name AS Name,
        T2.BDb AS SDb,
        T2.BCr AS SCr,
        null AS AC1,
        null AS CLID
    FROM
    (
        SELECT AC, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                F_OPS.AC21 AS AC,
                F_OPS.Summ AS TDb,
                0.00 AS TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE (F_OPSd.Dete BETWEEN :sdt AND :edt) AND F_OPS.AC11 LIKE :pac

            UNION ALL

            SELECT 
                F_OPS.AC11 AS AC,
                0.00 AS TDb,
                F_OPS.Summ AS TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE (F_OPSd.Dete BETWEEN :sdt AND :edt) AND F_OPS.AC21 LIKE :pac

        ) AS T1

        GROUP BY T1.AC
    ) AS T2    

    LEFT JOIN F_AcP21 ON F_AcP21.AC = T2.AC
    
    ORDER BY RAC

    into
        :id, :spid, :rac, :name, :sdb, :scr, :ac1, :clid
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_KORESP_01_CLID (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN F_ROPS3A.ID,
    SPID TYPE OF COLUMN F_ROPS3A.SPID,
    RAC TYPE OF COLUMN F_ROPS3A.RAC,
    NAME TYPE OF COLUMN F_ROPS3A.NAME,
    SDB TYPE OF COLUMN F_ROPS3A.SDB,
    SCR TYPE OF COLUMN F_ROPS3A.SCR,
    AC1 TYPE OF COLUMN F_ROPS3A.AC1,
    CLID TYPE OF COLUMN F_ROPS3A.CLID)
AS
begin
    FOR SELECT
        gen_id(GEN_F_ROPS3A_ID, 1) as ID,
        current_connection as SPID,
        T2.AC AS RAC,
        F_AcP21.Name AS Name,
        T2.BDb AS SDb,
        T2.BCr AS SCr,
        null AS AC1,
        :pclid AS Clid
    FROM
    (
        SELECT AC, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                F_OPS.AC21 AS AC,
                F_OPS.Summ AS TDb,
                0.00 AS TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE 
                (F_OPSd.Dete BETWEEN :sdt AND :edt) AND 
                F_OPS.AC11 LIKE :pac AND
                F_OPSd.ClId = :pclid


            UNION ALL

            SELECT 
                F_OPS.AC11 AS AC,
                0.00 AS TDb,
                F_OPS.Summ AS TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE 
                (F_OPSd.Dete BETWEEN :sdt AND :edt) AND 
                F_OPS.AC21 LIKE :pac AND
                F_OPSd.ClId = :pclid

        ) AS T1

        GROUP BY T1.AC
    ) AS T2    

    LEFT JOIN F_AcP21 ON F_AcP21.AC = T2.AC
    
    ORDER BY RAC

    into
        :id, :spid, :rac, :name, :sdb, :scr, :ac1, :clid
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_KORESP_01_CLID2 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN F_ROPS3A.ID,
    SPID TYPE OF COLUMN F_ROPS3A.SPID,
    RAC TYPE OF COLUMN F_ROPS3A.RAC,
    NAME TYPE OF COLUMN F_ROPS3A.NAME,
    SDB TYPE OF COLUMN F_ROPS3A.SDB,
    SCR TYPE OF COLUMN F_ROPS3A.SCR,
    AC1 TYPE OF COLUMN F_ROPS3A.AC1,
    CLID TYPE OF COLUMN F_ROPS3A.CLID)
AS
begin
    FOR SELECT
        gen_id(GEN_F_ROPS3A_ID, 1) as ID,
        current_connection as SPID,
        T2.AC AS RAC,
        F_AcP21.Name AS Name,
        T2.BDb AS SDb,
        T2.BCr AS SCr,
        null AS AC1,
        :pclid AS Clid
    FROM
    (
        SELECT AC, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                F_OPS.AC21 AS AC,
                F_OPS.Summ AS TDb,
                0.00 AS TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE 
                (F_OPSd.Dete BETWEEN :sdt AND :edt) AND 
                F_OPS.AC11 LIKE :pac AND
                F_OPSd.ClId2 = :pclid


            UNION ALL

            SELECT 
                F_OPS.AC11 AS AC,
                0.00 AS TDb,
                F_OPS.Summ AS TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE 
                (F_OPSd.Dete BETWEEN :sdt AND :edt) AND 
                F_OPS.AC21 LIKE :pac AND
                F_OPSd.ClId2 = :pclid

        ) AS T1

        GROUP BY T1.AC
    ) AS T2    

    LEFT JOIN F_AcP21 ON F_AcP21.AC = T2.AC
    
    ORDER BY RAC

    into
        :id, :spid, :rac, :name, :sdb, :scr, :ac1, :clid
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_KORESP_01_CUR (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15),
    PCUR VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN F_ROPS3A.ID,
    SPID TYPE OF COLUMN F_ROPS3A.SPID,
    RAC TYPE OF COLUMN F_ROPS3A.RAC,
    NAME TYPE OF COLUMN F_ROPS3A.NAME,
    SDB TYPE OF COLUMN F_ROPS3A.SDB,
    SCR TYPE OF COLUMN F_ROPS3A.SCR,
    AC1 TYPE OF COLUMN F_ROPS3A.AC1,
    CLID TYPE OF COLUMN F_ROPS3A.CLID)
AS
begin
    FOR SELECT
        gen_id(GEN_F_ROPS3A_ID, 1) as ID,
        current_connection as SPID,
        T2.AC AS RAC,
        F_AcP21.Name AS Name,
        T2.BDb AS SDb,
        T2.BCr AS SCr,
        null AS AC1,
        null AS Clid
    FROM
    (
        SELECT AC, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                F_OPS.AC21 AS AC,
                F_OPS.SummC AS TDb,
                0.00 AS TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE 
                (F_OPSd.Dete BETWEEN :sdt AND :edt) AND 
                F_OPS.AC11 = :pac AND
                (:pclid IS NULL OR F_OPSd.ClId = :pclid) AND
                F_OPS.Cur = :pcur

            UNION ALL

            SELECT 
                F_OPS.AC11 AS AC,
                0.00 AS TDb,
                F_OPS.SummC AS TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE 
                (F_OPSd.Dete BETWEEN :sdt AND :edt) AND 
                F_OPS.AC21 LIKE :pac AND
                (:pclid IS NULL OR F_OPSd.ClId = :pclid) AND
                F_OPS.Cur = :pcur

        ) AS T1

        GROUP BY T1.AC
    ) AS T2    

    LEFT JOIN F_AcP21 ON F_AcP21.AC = T2.AC
    
    ORDER BY RAC
    into
        :id, :spid, :rac, :name, :sdb, :scr, :ac1, :clid
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_KORESP_02 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN F_ROPS3A.ID,
    SPID TYPE OF COLUMN F_ROPS3A.SPID,
    RAC TYPE OF COLUMN F_ROPS3A.RAC,
    NAME TYPE OF COLUMN F_ROPS3A.NAME,
    SDB TYPE OF COLUMN F_ROPS3A.SDB,
    SCR TYPE OF COLUMN F_ROPS3A.SCR,
    AC1 TYPE OF COLUMN F_ROPS3A.AC1,
    CLID TYPE OF COLUMN F_ROPS3A.CLID)
AS
begin
-- summējam korespondējošos kontus pēc bāzes konta un koresp. konta
    FOR SELECT
        gen_id(GEN_F_ROPS3A_ID, 1) as ID,
        current_connection as SPID,
        T2.RAC AS RAC,
        F_AcP21.Name AS Name,
        T2.BDb AS SDb,
        T2.BCr AS SCr,
        T2.AC AS AC1,
        null AS Clid
    FROM
    (
        SELECT AC, RAC, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                F_OPS.AC11 AS AC,
                F_OPS.AC21 AS RAC,
                F_OPS.Summ AS TDb,
                0.00 AS TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE (F_OPSd.Dete BETWEEN :sdt AND :edt) AND F_OPS.AC11 LIKE :pac

            UNION ALL

            SELECT 
                F_OPS.AC21 AS AC,
                F_OPS.AC11 AS RAC,
                0.00 AS TDb,
                F_OPS.Summ AS TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE (F_OPSd.Dete BETWEEN :sdt AND :edt) AND F_OPS.AC21 LIKE :pac

        ) AS T1

        GROUP BY T1.AC, T1.RAC
    ) AS T2    

    LEFT JOIN F_AcP21 ON F_AcP21.AC = T2.RAC
    
    ORDER BY AC1, RAC

    into
        :id, :spid, :rac, :name, :sdb, :scr, :ac1, :clid
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_KORESP_02_CLID (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN F_ROPS3A.ID,
    SPID TYPE OF COLUMN F_ROPS3A.SPID,
    RAC TYPE OF COLUMN F_ROPS3A.RAC,
    NAME TYPE OF COLUMN F_ROPS3A.NAME,
    SDB TYPE OF COLUMN F_ROPS3A.SDB,
    SCR TYPE OF COLUMN F_ROPS3A.SCR,
    AC1 TYPE OF COLUMN F_ROPS3A.AC1,
    CLID TYPE OF COLUMN F_ROPS3A.CLID)
AS
begin
-- summējam pec bāzes konta (AC), personas un korespondējošā konta (RAC)
    FOR SELECT
        gen_id(GEN_F_ROPS3A_ID, 1) as ID,
        current_connection as SPID,
        T2.RAC AS RAC,
        F_AcP21.Name AS Name,
        T2.BDb AS SDb,
        T2.BCr AS SCr,
        T2.AC AS AC1,
        T2.Clid AS Clid
    FROM
    (
        SELECT AC, RAC, Clid, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                F_OPS.AC11 AS AC,
                F_OPS.AC21 AS RAC,
                F_OPSd.ClId AS Clid,
                F_OPS.Summ AS TDb,
                0.00 AS TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE 
                (F_OPSd.Dete BETWEEN :sdt AND :edt) AND 
                F_OPS.AC11 LIKE :pac AND
                (:pclid IS NULL OR F_OPSd.ClId = :pclid)


            UNION ALL

            SELECT 
                F_OPS.AC21 AS AC,
                F_OPS.AC11 AS RAC,
                F_OPSd.ClId AS Clid,
                0.00 AS TDb,
                F_OPS.Summ AS TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE 
                (F_OPSd.Dete BETWEEN :sdt AND :edt) AND 
                F_OPS.AC21 LIKE :pac AND
                (:pclid IS NULL OR F_OPSd.ClId = :pclid)

        ) AS T1

        GROUP BY T1.AC, T1.RAC, Clid
    ) AS T2    

    LEFT JOIN F_AcP21 ON F_AcP21.AC = T2.RAC
    
    ORDER BY AC1, Clid, RAC

    into
        :id, :spid, :rac, :name, :sdb, :scr, :ac1, :clid
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_KORESP_11 (
    PSD DATE,
    PED DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN F_ROPS1A.ID,
    SPID TYPE OF COLUMN F_ROPS1A.SPID,
    DID TYPE OF COLUMN F_ROPS1A.DID,
    DETE TYPE OF COLUMN F_ROPS1A.DETE,
    NRX TYPE OF COLUMN F_ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN F_ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN F_ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN F_ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN F_ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN F_ROPS1A.DOCNR,
    CLID TYPE OF COLUMN F_ROPS1A.CLID,
    CLID2 TYPE OF COLUMN F_ROPS1A.CLID2,
    NAME TYPE OF COLUMN F_ROPS1A.NAME,
    NAME2 TYPE OF COLUMN F_ROPS1A.NAME2,
    REGNR TYPE OF COLUMN F_ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN F_ROPS1A.REGNR2,
    B0 TYPE OF COLUMN F_ROPS1A.B0,
    DESCR TYPE OF COLUMN F_ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN F_ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN F_ROPS1A.AC1,
    AC2 TYPE OF COLUMN F_ROPS1A.AC2,
    SAC1 TYPE OF COLUMN F_ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN F_ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN F_ROPS1A.SUMMC,
    CUR TYPE OF COLUMN F_ROPS1A.CUR,
    SUMM TYPE OF COLUMN F_ROPS1A.SUMM,
    PVN TYPE OF COLUMN F_ROPS1A.PVN,
    RAC TYPE OF COLUMN F_ROPS1A.RAC,
    SDB TYPE OF COLUMN F_ROPS1A.SDB,
    SCR TYPE OF COLUMN F_ROPS1A.SCR,
    RAC2 TYPE OF COLUMN F_ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN F_ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN F_ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN F_ROPS1A.RAC5,
    QV TYPE OF COLUMN F_ROPS1A.QV,
    ZNR TYPE OF COLUMN F_ROPS1A.ZNR)
AS
begin
    FOR SELECT
        id, spid, did, DETE, nrx,
        doctyp, doctyp1, doctyp2, docst, docnr,
        clid, clid2, name, name2, regnr, regnr2,
        b0, descr, descr2, ac1, ac2, sac1, sac2,
        summc, cur, summ, pvn, rac, sdb, scr,
        rac2, rac3, rac4, rac5, qv, znr

    FROM
    (
        SELECT 
            gen_id(GEN_F_ROPS1A_ID, 1) AS id,
            current_connection as spid,
            F_OPSd.id AS did,
            F_OPSd.Dete,
            F_OPSd.NrX,
            F_OPSd.DocTyp,
            F_DocTyp.id1 AS DocTyp1,
            F_DocTyp.tpZ AS DocTyp2,
            F_OPSd.DocSt,
            F_OPSd.DocNr,
            F_OPSd.ClId,
            F_OPSd.ClId2,
            P1.Name AS Name,
            P2.Name AS Name2,
            P1.RegNr AS RegNr,
            P2.RegNr AS RegNr2,
            0 AS b0,
            F_OPSd.Descr,
            F_OPS.Descr AS Descr2,
            F_OPS.AC11 AS Ac1,
            null AS Ac2,
            null AS SAc1,
            null AS SAc2,
            F_OPS.SummC AS SummC,
            F_OPS.cur AS Cur,
            F_OPS.Summ AS Summ,
            0 AS PVN,
            F_OPS.AC21 AS RAC,
            F_OPS.Summ AS SDb,
            0.00 AS SCr,
            F_OPS.AC22 AS RAC2,
            F_OPS.AC23 AS RAC3,
            F_OPS.AC24 AS RAC4,
            F_OPS.AC25 AS RAC5,
            F_OPS.QV,
            F_OPSd.ZNR
        FROM
            F_OPSd INNER 
            JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            LEFT JOIN F_Persons AS P1 ON F_OPSd.ClId = P1.ClId
            LEFT JOIN F_Persons AS P2 ON F_OPSd.ClId2 = P2.ClId
            LEFT JOIN F_DocTyp ON F_OPSd.DocTyp = F_DocTyp.id
        WHERE
            (F_OPSd.Dete BETWEEN :psd AND :ped) AND
            F_OPS.AC11 LIKE :pac

        UNION ALL

        SELECT 
            gen_id(GEN_F_ROPS1A_ID, 1) AS id,
            current_connection as spid,
            F_OPSd.id AS did,
            F_OPSd.Dete,
            F_OPSd.NrX,
            F_OPSd.DocTyp,
            F_DocTyp.id1 AS DocTyp1,
            F_DocTyp.tpZ AS DocTyp2,
            F_OPSd.DocSt,
            F_OPSd.DocNr,
            F_OPSd.ClId,
            F_OPSd.ClId2,
            P1.Name AS Name,
            P2.Name AS Name2,
            P1.RegNr AS RegNr,
            P2.RegNr AS RegNr2,
            0 AS b0,
            F_OPSd.Descr,
            F_OPS.Descr AS Descr2,
            F_OPS.AC21 AS Ac1,
            null AS Ac2,
            null AS SAc1,
            null AS SAc2,
            F_OPS.SummC AS SummC,
            F_OPS.cur AS Cur,
            F_OPS.Summ AS Summ,
            0 AS PVN,
            F_OPS.AC11 AS RAC,
            0.00 AS SDb,
            F_OPS.Summ AS SCr,
            F_OPS.AC12 AS RAC2,
            F_OPS.AC13 AS RAC3,
            F_OPS.AC14 AS RAC4,
            F_OPS.AC15 AS RAC5,
            F_OPS.QV,
            F_OPSd.ZNR
        FROM
            F_OPSd INNER 
            JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            LEFT JOIN F_Persons AS P1 ON F_OPSd.ClId = P1.ClId
            LEFT JOIN F_Persons AS P2 ON F_OPSd.ClId2 = P2.ClId
            LEFT JOIN F_DocTyp ON F_OPSd.DocTyp = F_DocTyp.id
        WHERE
            (F_OPSd.Dete BETWEEN :psd AND :ped) AND
            F_OPS.AC21 LIKE :pac
    ) AS TT
    ORDER BY TT.Dete, TT.ZNR


    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_KORESP_11_CLID (
    PSD DATE,
    PED DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN F_ROPS1A.ID,
    SPID TYPE OF COLUMN F_ROPS1A.SPID,
    DID TYPE OF COLUMN F_ROPS1A.DID,
    DETE TYPE OF COLUMN F_ROPS1A.DETE,
    NRX TYPE OF COLUMN F_ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN F_ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN F_ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN F_ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN F_ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN F_ROPS1A.DOCNR,
    CLID TYPE OF COLUMN F_ROPS1A.CLID,
    CLID2 TYPE OF COLUMN F_ROPS1A.CLID2,
    NAME TYPE OF COLUMN F_ROPS1A.NAME,
    NAME2 TYPE OF COLUMN F_ROPS1A.NAME2,
    REGNR TYPE OF COLUMN F_ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN F_ROPS1A.REGNR2,
    B0 TYPE OF COLUMN F_ROPS1A.B0,
    DESCR TYPE OF COLUMN F_ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN F_ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN F_ROPS1A.AC1,
    AC2 TYPE OF COLUMN F_ROPS1A.AC2,
    SAC1 TYPE OF COLUMN F_ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN F_ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN F_ROPS1A.SUMMC,
    CUR TYPE OF COLUMN F_ROPS1A.CUR,
    SUMM TYPE OF COLUMN F_ROPS1A.SUMM,
    PVN TYPE OF COLUMN F_ROPS1A.PVN,
    RAC TYPE OF COLUMN F_ROPS1A.RAC,
    SDB TYPE OF COLUMN F_ROPS1A.SDB,
    SCR TYPE OF COLUMN F_ROPS1A.SCR,
    RAC2 TYPE OF COLUMN F_ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN F_ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN F_ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN F_ROPS1A.RAC5,
    QV TYPE OF COLUMN F_ROPS1A.QV,
    ZNR TYPE OF COLUMN F_ROPS1A.ZNR)
AS
begin
    FOR SELECT
        id, spid, did, DETE, nrx,
        doctyp, doctyp1, doctyp2, docst, docnr,
        clid, clid2, name, name2, regnr, regnr2,
        b0, descr, descr2, ac1, ac2, sac1, sac2,
        summc, cur, summ, pvn, rac, sdb, scr,
        rac2, rac3, rac4, rac5, qv, znr

    FROM
    (
        SELECT 
            gen_id(GEN_F_ROPS1A_ID, 1) AS id,
            current_connection as spid,
            F_OPSd.id AS did,
            F_OPSd.Dete,
            F_OPSd.NrX,
            F_OPSd.DocTyp,
            F_DocTyp.id1 AS DocTyp1,
            F_DocTyp.tpZ AS DocTyp2,
            F_OPSd.DocSt,
            F_OPSd.DocNr,
            F_OPSd.ClId,
            F_OPSd.ClId2,
            P1.Name AS Name,
            P2.Name AS Name2,
            P1.RegNr AS RegNr,
            P2.RegNr AS RegNr2,
            0 AS b0,
            F_OPSd.Descr,
            F_OPS.Descr AS Descr2,
            F_OPS.AC11 AS Ac1,
            null AS Ac2,
            null AS SAc1,
            null AS SAc2,
            F_OPS.SummC AS SummC,
            F_OPS.cur AS Cur,
            F_OPS.Summ AS Summ,
            0 AS PVN,
            F_OPS.AC21 AS RAC,
            F_OPS.Summ AS SDb,
            0.00 AS SCr,
            F_OPS.AC22 AS RAC2,
            F_OPS.AC23 AS RAC3,
            F_OPS.AC24 AS RAC4,
            F_OPS.AC25 AS RAC5,
            F_OPS.QV,
            F_OPSd.ZNR
        FROM
            F_OPSd
            INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            LEFT JOIN F_Persons AS P1 ON F_OPSd.ClId = P1.ClId
            LEFT JOIN F_Persons AS P2 ON F_OPSd.ClId2 = P2.ClId
            LEFT JOIN F_DocTyp ON F_OPSd.DocTyp = F_DocTyp.id
        WHERE
            (F_OPSd.Dete BETWEEN :psd AND :ped) AND
            F_OPS.AC11 LIKE :pac AND
            F_OPSd.ClId = :pclid

        UNION ALL

        SELECT 
            gen_id(GEN_F_ROPS1A_ID, 1) AS id,
            current_connection as spid,
            F_OPSd.id AS did,
            F_OPSd.Dete,
            F_OPSd.NrX,
            F_OPSd.DocTyp,
            F_DocTyp.id1 AS DocTyp1,
            F_DocTyp.tpZ AS DocTyp2,
            F_OPSd.DocSt,
            F_OPSd.DocNr,
            F_OPSd.ClId,
            F_OPSd.ClId2,
            P1.Name AS Name,
            P2.Name AS Name2,
            P1.RegNr AS RegNr,
            P2.RegNr AS RegNr2,
            0 AS b0,
            F_OPSd.Descr,
            F_OPS.Descr AS Descr2,
            F_OPS.AC21 AS Ac1,
            null AS Ac2,
            null AS SAc1,
            null AS SAc2,
            F_OPS.SummC AS SummC,
            F_OPS.cur AS Cur,
            F_OPS.Summ AS Summ,
            0 AS PVN,
            F_OPS.AC11 AS RAC,
            0.00 AS SDb,
            F_OPS.Summ AS SCr,
            F_OPS.AC12 AS RAC2,
            F_OPS.AC13 AS RAC3,
            F_OPS.AC14 AS RAC4,
            F_OPS.AC15 AS RAC5,
            F_OPS.QV,
            F_OPSd.ZNR
        FROM
            F_OPSd
            INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            LEFT JOIN F_Persons AS P1 ON F_OPSd.ClId = P1.ClId
            LEFT JOIN F_Persons AS P2 ON F_OPSd.ClId2 = P2.ClId
            LEFT JOIN F_DocTyp ON F_OPSd.DocTyp = F_DocTyp.id
        WHERE
            (F_OPSd.Dete BETWEEN :psd AND :ped) AND
            F_OPS.AC21 LIKE :pac AND
            F_OPSd.ClId = :pclid
    ) AS TT
    ORDER BY TT.Dete, TT.ZNR


    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_KORESP_11_CLID2 (
    PSD DATE,
    PED DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN F_ROPS1A.ID,
    SPID TYPE OF COLUMN F_ROPS1A.SPID,
    DID TYPE OF COLUMN F_ROPS1A.DID,
    DETE TYPE OF COLUMN F_ROPS1A.DETE,
    NRX TYPE OF COLUMN F_ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN F_ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN F_ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN F_ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN F_ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN F_ROPS1A.DOCNR,
    CLID TYPE OF COLUMN F_ROPS1A.CLID,
    CLID2 TYPE OF COLUMN F_ROPS1A.CLID2,
    NAME TYPE OF COLUMN F_ROPS1A.NAME,
    NAME2 TYPE OF COLUMN F_ROPS1A.NAME2,
    REGNR TYPE OF COLUMN F_ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN F_ROPS1A.REGNR2,
    B0 TYPE OF COLUMN F_ROPS1A.B0,
    DESCR TYPE OF COLUMN F_ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN F_ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN F_ROPS1A.AC1,
    AC2 TYPE OF COLUMN F_ROPS1A.AC2,
    SAC1 TYPE OF COLUMN F_ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN F_ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN F_ROPS1A.SUMMC,
    CUR TYPE OF COLUMN F_ROPS1A.CUR,
    SUMM TYPE OF COLUMN F_ROPS1A.SUMM,
    PVN TYPE OF COLUMN F_ROPS1A.PVN,
    RAC TYPE OF COLUMN F_ROPS1A.RAC,
    SDB TYPE OF COLUMN F_ROPS1A.SDB,
    SCR TYPE OF COLUMN F_ROPS1A.SCR,
    RAC2 TYPE OF COLUMN F_ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN F_ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN F_ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN F_ROPS1A.RAC5,
    QV TYPE OF COLUMN F_ROPS1A.QV,
    ZNR TYPE OF COLUMN F_ROPS1A.ZNR)
AS
begin
    FOR SELECT
        id, spid, did, DETE, nrx,
        doctyp, doctyp1, doctyp2, docst, docnr,
        clid, clid2, name, name2, regnr, regnr2,
        b0, descr, descr2, ac1, ac2, sac1, sac2,
        summc, cur, summ, pvn, rac, sdb, scr,
        rac2, rac3, rac4, rac5, qv, znr

    FROM
    (
        SELECT 
            gen_id(GEN_F_ROPS1A_ID, 1) AS id,
            current_connection as spid,
            F_OPSd.id AS did,
            F_OPSd.Dete,
            F_OPSd.NrX,
            F_OPSd.DocTyp,
            F_DocTyp.id1 AS DocTyp1,
            F_DocTyp.tpZ AS DocTyp2,
            F_OPSd.DocSt,
            F_OPSd.DocNr,
            F_OPSd.ClId,
            F_OPSd.ClId2,
            P1.Name AS Name,
            P2.Name AS Name2,
            P1.RegNr AS RegNr,
            P2.RegNr AS RegNr2,
            0 AS b0,
            F_OPSd.Descr,
            F_OPS.Descr AS Descr2,
            F_OPS.AC11 AS Ac1,
            null AS Ac2,
            null AS SAc1,
            null AS SAc2,
            F_OPS.SummC AS SummC,
            F_OPS.cur AS Cur,
            F_OPS.Summ AS Summ,
            0 AS PVN,
            F_OPS.AC21 AS RAC,
            F_OPS.Summ AS SDb,
            0.00 AS SCr,
            F_OPS.AC22 AS RAC2,
            F_OPS.AC23 AS RAC3,
            F_OPS.AC24 AS RAC4,
            F_OPS.AC25 AS RAC5,
            F_OPS.QV,
            F_OPSd.ZNR
        FROM
            F_OPSd
            INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            LEFT JOIN F_Persons AS P1 ON F_OPSd.ClId = P1.ClId
            LEFT JOIN F_Persons AS P2 ON F_OPSd.ClId2 = P2.ClId
            LEFT JOIN F_DocTyp ON F_OPSd.DocTyp = F_DocTyp.id
        WHERE
            (F_OPSd.Dete BETWEEN :psd AND :ped) AND
            F_OPS.AC11 LIKE :pac AND
            F_OPSd.ClId2 = :pclid

        UNION ALL

        SELECT 
            gen_id(GEN_F_ROPS1A_ID, 1) AS id,
            current_connection as spid,
            F_OPSd.id AS did,
            F_OPSd.Dete,
            F_OPSd.NrX,
            F_OPSd.DocTyp,
            F_DocTyp.id1 AS DocTyp1,
            F_DocTyp.tpZ AS DocTyp2,
            F_OPSd.DocSt,
            F_OPSd.DocNr,
            F_OPSd.ClId,
            F_OPSd.ClId2,
            P1.Name AS Name,
            P2.Name AS Name2,
            P1.RegNr AS RegNr,
            P2.RegNr AS RegNr2,
            0 AS b0,
            F_OPSd.Descr,
            F_OPS.Descr AS Descr2,
            F_OPS.AC21 AS Ac1,
            null AS Ac2,
            null AS SAc1,
            null AS SAc2,
            F_OPS.SummC AS SummC,
            F_OPS.cur AS Cur,
            F_OPS.Summ AS Summ,
            0 AS PVN,
            F_OPS.AC11 AS RAC,
            0.00 AS SDb,
            F_OPS.Summ AS SCr,
            F_OPS.AC12 AS RAC2,
            F_OPS.AC13 AS RAC3,
            F_OPS.AC14 AS RAC4,
            F_OPS.AC15 AS RAC5,
            F_OPS.QV,
            F_OPSd.ZNR
        FROM
            F_OPSd
            INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            LEFT JOIN F_Persons AS P1 ON F_OPSd.ClId = P1.ClId
            LEFT JOIN F_Persons AS P2 ON F_OPSd.ClId2 = P2.ClId
            LEFT JOIN F_DocTyp ON F_OPSd.DocTyp = F_DocTyp.id
        WHERE
            (F_OPSd.Dete BETWEEN :psd AND :ped) AND
            F_OPS.AC21 LIKE :pac AND
            F_OPSd.ClId2 = :pclid
    ) AS TT
    ORDER BY TT.Dete, TT.ZNR


    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_KORESP_11_CUR (
    PSD DATE,
    PED DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15),
    PCUR VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN F_ROPS1A.ID,
    SPID TYPE OF COLUMN F_ROPS1A.SPID,
    DID TYPE OF COLUMN F_ROPS1A.DID,
    DETE TYPE OF COLUMN F_ROPS1A.DETE,
    NRX TYPE OF COLUMN F_ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN F_ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN F_ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN F_ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN F_ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN F_ROPS1A.DOCNR,
    CLID TYPE OF COLUMN F_ROPS1A.CLID,
    CLID2 TYPE OF COLUMN F_ROPS1A.CLID2,
    NAME TYPE OF COLUMN F_ROPS1A.NAME,
    NAME2 TYPE OF COLUMN F_ROPS1A.NAME2,
    REGNR TYPE OF COLUMN F_ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN F_ROPS1A.REGNR2,
    B0 TYPE OF COLUMN F_ROPS1A.B0,
    DESCR TYPE OF COLUMN F_ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN F_ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN F_ROPS1A.AC1,
    AC2 TYPE OF COLUMN F_ROPS1A.AC2,
    SAC1 TYPE OF COLUMN F_ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN F_ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN F_ROPS1A.SUMMC,
    CUR TYPE OF COLUMN F_ROPS1A.CUR,
    SUMM TYPE OF COLUMN F_ROPS1A.SUMM,
    PVN TYPE OF COLUMN F_ROPS1A.PVN,
    RAC TYPE OF COLUMN F_ROPS1A.RAC,
    SDB TYPE OF COLUMN F_ROPS1A.SDB,
    SCR TYPE OF COLUMN F_ROPS1A.SCR,
    RAC2 TYPE OF COLUMN F_ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN F_ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN F_ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN F_ROPS1A.RAC5,
    QV TYPE OF COLUMN F_ROPS1A.QV,
    ZNR TYPE OF COLUMN F_ROPS1A.ZNR)
AS
begin
    FOR SELECT
        id, spid, did, DETE, nrx,
        doctyp, doctyp1, doctyp2, docst, docnr,
        clid, clid2, name, name2, regnr, regnr2,
        b0, descr, descr2, ac1, ac2, sac1, sac2,
        summc, cur, summ, pvn, rac, sdb, scr,
        rac2, rac3, rac4, rac5, qv, znr

    FROM
    (
        SELECT 
            gen_id(GEN_F_ROPS1A_ID, 1) AS id,
            current_connection as spid,
            F_OPSd.id AS did,
            F_OPSd.Dete,
            F_OPSd.NrX,
            F_OPSd.DocTyp,
            F_DocTyp.id1 AS DocTyp1,
            F_DocTyp.tpZ AS DocTyp2,
            F_OPSd.DocSt,
            F_OPSd.DocNr,
            F_OPSd.ClId,
            F_OPSd.ClId2,
            P1.Name AS Name,
            P2.Name AS Name2,
            P1.RegNr AS RegNr,
            P2.RegNr AS RegNr2,
            0 AS b0,
            F_OPSd.Descr,
            F_OPS.Descr AS Descr2,
            F_OPS.AC11 AS Ac1,
            null AS Ac2,
            null AS SAc1,
            null AS SAc2,
            F_OPS.SummC AS SummC,
            F_OPS.cur AS Cur,
            F_OPS.SummC AS Summ,
            0 AS PVN,
            F_OPS.AC21 AS RAC,
            F_OPS.SummC AS SDb,
            0.00 AS SCr,
            F_OPS.AC22 AS RAC2,
            F_OPS.AC23 AS RAC3,
            F_OPS.AC24 AS RAC4,
            F_OPS.AC25 AS RAC5,
            F_OPS.QV,
            F_OPSd.ZNR
        FROM
            F_OPSd
            INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            LEFT JOIN F_Persons AS P1 ON F_OPSd.ClId = P1.ClId
            LEFT JOIN F_Persons AS P2 ON F_OPSd.ClId2 = P2.ClId
            LEFT JOIN F_DocTyp ON F_OPSd.DocTyp = F_DocTyp.id
        WHERE
            (F_OPSd.Dete BETWEEN :psd AND :ped) AND
            F_OPS.AC11 LIKE :pac AND
            (:pclid IS NULL OR F_OPSd.ClId = :pclid) AND
            F_OPS.Cur = :pcur

        UNION ALL

        SELECT 
            gen_id(GEN_F_ROPS1A_ID, 1) AS id,
            current_connection as spid,
            F_OPSd.id AS did,
            F_OPSd.Dete,
            F_OPSd.NrX,
            F_OPSd.DocTyp,
            F_DocTyp.id1 AS DocTyp1,
            F_DocTyp.tpZ AS DocTyp2,
            F_OPSd.DocSt,
            F_OPSd.DocNr,
            F_OPSd.ClId,
            F_OPSd.ClId2,
            P1.Name AS Name,
            P2.Name AS Name2,
            P1.RegNr AS RegNr,
            P2.RegNr AS RegNr2,
            0 AS b0,
            F_OPSd.Descr,
            F_OPS.Descr AS Descr2,
            F_OPS.AC21 AS Ac1,
            null AS Ac2,
            null AS SAc1,
            null AS SAc2,
            F_OPS.SummC AS SummC,
            F_OPS.cur AS Cur,
            F_OPS.SummC AS Summ,
            0 AS PVN,
            F_OPS.AC11 AS RAC,
            0.00 AS SDb,
            F_OPS.SummC AS SCr,
            F_OPS.AC12 AS RAC2,
            F_OPS.AC13 AS RAC3,
            F_OPS.AC14 AS RAC4,
            F_OPS.AC15 AS RAC5,
            F_OPS.QV,
            F_OPSd.ZNR
        FROM
            F_OPSd
            INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            LEFT JOIN F_Persons AS P1 ON F_OPSd.ClId = P1.ClId
            LEFT JOIN F_Persons AS P2 ON F_OPSd.ClId2 = P2.ClId
            LEFT JOIN F_DocTyp ON F_OPSd.DocTyp = F_DocTyp.id
        WHERE
            (F_OPSd.Dete BETWEEN :psd AND :ped) AND
            F_OPS.AC21 LIKE :pac AND
            (:pclid IS NULL OR F_OPSd.ClId = :pclid) AND
            F_OPS.Cur = :pcur
    ) AS TT
    ORDER BY TT.Dete, TT.ZNR


    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_NPMT_11 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN F_TREPMT.ID,
    SPID TYPE OF COLUMN F_TREPMT.SPID,
    AD TYPE OF COLUMN F_TREPMT.AD,
    AC1 TYPE OF COLUMN F_TREPMT.AC1,
    AC2 TYPE OF COLUMN F_TREPMT.AC2,
    ACN1 TYPE OF COLUMN F_TREPMT.ACN1,
    ACN2 TYPE OF COLUMN F_TREPMT.ACN2,
    M1 TYPE OF COLUMN F_TREPMT.M1,
    M2 TYPE OF COLUMN F_TREPMT.M2,
    M3 TYPE OF COLUMN F_TREPMT.M3,
    M4 TYPE OF COLUMN F_TREPMT.M4,
    M5 TYPE OF COLUMN F_TREPMT.M5,
    M6 TYPE OF COLUMN F_TREPMT.M6,
    M7 TYPE OF COLUMN F_TREPMT.M7,
    M8 TYPE OF COLUMN F_TREPMT.M8,
    M9 TYPE OF COLUMN F_TREPMT.M9,
    M10 TYPE OF COLUMN F_TREPMT.M10,
    M11 TYPE OF COLUMN F_TREPMT.M11,
    M12 TYPE OF COLUMN F_TREPMT.M12,
    N1 TYPE OF COLUMN F_TREPMT.N1,
    N2 TYPE OF COLUMN F_TREPMT.N2,
    N3 TYPE OF COLUMN F_TREPMT.N3,
    N4 TYPE OF COLUMN F_TREPMT.N4,
    N5 TYPE OF COLUMN F_TREPMT.N5,
    N6 TYPE OF COLUMN F_TREPMT.N6,
    N7 TYPE OF COLUMN F_TREPMT.N7,
    N8 TYPE OF COLUMN F_TREPMT.N8,
    N9 TYPE OF COLUMN F_TREPMT.N9,
    N10 TYPE OF COLUMN F_TREPMT.N10,
    N11 TYPE OF COLUMN F_TREPMT.N11,
    N12 TYPE OF COLUMN F_TREPMT.N12,
    MT TYPE OF COLUMN F_TREPMT.MT,
    NT TYPE OF COLUMN F_TREPMT.NT)
AS
begin
-- summējam debeta AC12 (izdevumus)
-- uz F_TRepMT
    FOR SELECT
        gen_id(GEN_F_TREPMT_ID, 1) as ID,
        current_connection as SPID,
        :pad AS ad,
        T3.AC AS AC1,
        NULL AS AC2,
        F_AcP21.Name AS ACN1,
        NULL AS ACN2,
        M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,
        0.0 AS N1, 0.0 AS N2, 0.0 AS N3, 0.0 AS N4, 0.0 AS N5, 0.0 AS N6,
        0.0 AS N7, 0.0 AS N8, 0.0 AS N9, 0.0 AS N10, 0.0 AS N11, 0.0 AS N12,
        0.0 AS MT, 0.0 AS NT
        
    FROM
    (
        SELECT 
            AC,
            SUM(CASE WHEN MT = 1 THEN ADb ELSE 0.00 END) AS M1,
            SUM(CASE WHEN MT = 2 THEN ADb ELSE 0.00 END) AS M2,
            SUM(CASE WHEN MT = 3 THEN ADb ELSE 0.00 END) AS M3,
            SUM(CASE WHEN MT = 4 THEN ADb ELSE 0.00 END) AS M4,
            SUM(CASE WHEN MT = 5 THEN ADb ELSE 0.00 END) AS M5,
            SUM(CASE WHEN MT = 6 THEN ADb ELSE 0.00 END) AS M6,
            SUM(CASE WHEN MT = 7 THEN ADb ELSE 0.00 END) AS M7,
            SUM(CASE WHEN MT = 8 THEN ADb ELSE 0.00 END) AS M8,
            SUM(CASE WHEN MT = 9 THEN ADb ELSE 0.00 END) AS M9,
            SUM(CASE WHEN MT = 10 THEN ADb ELSE 0.00 END) AS M10,
            SUM(CASE WHEN MT = 11 THEN ADb ELSE 0.00 END) AS M11,
            SUM(CASE WHEN MT = 12 THEN ADb ELSE 0.00 END) AS M12

        FROM
        (
            SELECT AC, MT, SUM(SDb) AS ADb, SUM(SCr) AS ACr
            FROM
            (
                SELECT 
                    F_OPS.AC12 AS AC,
                    EXTRACT(MONTH FROM F_OPSd.Dete) AS MT,
                    F_OPS.Summ AS SDb,
                    0.00 AS SCr

                FROM 
                    F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                    LEFT JOIN F_AcP21 ON F_OPS.AC12 = F_AcP21.AC
                WHERE 
                    F_OPSd.Dete BETWEEN :sdt AND :edt AND
                    F_OPS.AC12 IS NOT NULL AND
                    (F_AcP21.id1 IS NULL OR F_AcP21.id1 NOT IN ('KA','BA','CN'))

            ) AS T1

            GROUP BY T1.AC, T1.MT

        ) AS T2
        GROUP BY T2.AC
    ) AS T3

    LEFT JOIN F_AcP21 ON F_AcP21.AC = T3.AC
    ORDER BY AC1

    into
        :id, :spid, :ad, :ac1, :ac2, :acn1, :acn2,
        :m1, :m2, :m3, :m4, :m5, :m6, :m7, :m8, :m9, :m10, :m11, :m12,
        :n1, :n2, :n3, :n4, :n5, :n6, :n7, :n8, :n9, :n10, :n11, :n12,
        :mt, :nt
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_F_REP_NPMT_12 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN F_TREPMT.ID,
    SPID TYPE OF COLUMN F_TREPMT.SPID,
    AD TYPE OF COLUMN F_TREPMT.AD,
    AC1 TYPE OF COLUMN F_TREPMT.AC1,
    AC2 TYPE OF COLUMN F_TREPMT.AC2,
    ACN1 TYPE OF COLUMN F_TREPMT.ACN1,
    ACN2 TYPE OF COLUMN F_TREPMT.ACN2,
    M1 TYPE OF COLUMN F_TREPMT.M1,
    M2 TYPE OF COLUMN F_TREPMT.M2,
    M3 TYPE OF COLUMN F_TREPMT.M3,
    M4 TYPE OF COLUMN F_TREPMT.M4,
    M5 TYPE OF COLUMN F_TREPMT.M5,
    M6 TYPE OF COLUMN F_TREPMT.M6,
    M7 TYPE OF COLUMN F_TREPMT.M7,
    M8 TYPE OF COLUMN F_TREPMT.M8,
    M9 TYPE OF COLUMN F_TREPMT.M9,
    M10 TYPE OF COLUMN F_TREPMT.M10,
    M11 TYPE OF COLUMN F_TREPMT.M11,
    M12 TYPE OF COLUMN F_TREPMT.M12,
    N1 TYPE OF COLUMN F_TREPMT.N1,
    N2 TYPE OF COLUMN F_TREPMT.N2,
    N3 TYPE OF COLUMN F_TREPMT.N3,
    N4 TYPE OF COLUMN F_TREPMT.N4,
    N5 TYPE OF COLUMN F_TREPMT.N5,
    N6 TYPE OF COLUMN F_TREPMT.N6,
    N7 TYPE OF COLUMN F_TREPMT.N7,
    N8 TYPE OF COLUMN F_TREPMT.N8,
    N9 TYPE OF COLUMN F_TREPMT.N9,
    N10 TYPE OF COLUMN F_TREPMT.N10,
    N11 TYPE OF COLUMN F_TREPMT.N11,
    N12 TYPE OF COLUMN F_TREPMT.N12,
    MT TYPE OF COLUMN F_TREPMT.MT,
    NT TYPE OF COLUMN F_TREPMT.NT)
AS
begin
-- summējam debeta AC22 (ieņēmumi)
-- uz F_TRepMT
    FOR SELECT
        gen_id(GEN_F_TREPMT_ID, 1) as ID,
        current_connection as SPID,
        :pad AS ad,
        T3.AC AS AC1,
        NULL AS AC2,
        F_AcP21.Name AS ACN1,
        NULL AS ACN2,
        M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,
        0.0 AS N1, 0.0 AS N2, 0.0 AS N3, 0.0 AS N4, 0.0 AS N5, 0.0 AS N6,
        0.0 AS N7, 0.0 AS N8, 0.0 AS N9, 0.0 AS N10, 0.0 AS N11, 0.0 AS N12,
        0.0 AS MT, 0.0 AS NT
        
    FROM
    (
        SELECT 
            AC,
            SUM(CASE WHEN MT = 1 THEN ACr ELSE 0.00 END) AS M1,
            SUM(CASE WHEN MT = 2 THEN ACr ELSE 0.00 END) AS M2,
            SUM(CASE WHEN MT = 3 THEN ACr ELSE 0.00 END) AS M3,
            SUM(CASE WHEN MT = 4 THEN ACr ELSE 0.00 END) AS M4,
            SUM(CASE WHEN MT = 5 THEN ACr ELSE 0.00 END) AS M5,
            SUM(CASE WHEN MT = 6 THEN ACr ELSE 0.00 END) AS M6,
            SUM(CASE WHEN MT = 7 THEN ACr ELSE 0.00 END) AS M7,
            SUM(CASE WHEN MT = 8 THEN ACr ELSE 0.00 END) AS M8,
            SUM(CASE WHEN MT = 9 THEN ACr ELSE 0.00 END) AS M9,
            SUM(CASE WHEN MT = 10 THEN ACr ELSE 0.00 END) AS M10,
            SUM(CASE WHEN MT = 11 THEN ACr ELSE 0.00 END) AS M11,
            SUM(CASE WHEN MT = 12 THEN ACr ELSE 0.00 END) AS M12

        FROM
        (
            SELECT AC, MT, SUM(SDb) AS ADb, SUM(SCr) AS ACr
            FROM
            (
                SELECT 
                    F_OPS.AC22 AS AC,
                    EXTRACT(MONTH FROM F_OPSd.Dete) AS MT,
                    0.00 AS SDb,
                    F_OPS.Summ AS SCr

                FROM 
                    F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                    LEFT JOIN F_AcP21 ON F_OPS.AC22 = F_AcP21.AC
                WHERE 
                    F_OPSd.Dete BETWEEN :sdt AND :edt AND
                    F_OPS.AC22 IS NOT NULL AND
                    (F_AcP21.id1 IS NULL OR F_AcP21.id1 NOT IN ('KA','BA','CN'))

            ) AS T1

            GROUP BY T1.AC, T1.MT

        ) AS T2
        GROUP BY T2.AC
    ) AS T3

    LEFT JOIN F_AcP21 ON F_AcP21.AC = T3.AC
    ORDER BY AC1

    into
        :id, :spid, :ad, :ac1, :ac2, :acn1, :acn2,
        :m1, :m2, :m3, :m4, :m5, :m6, :m7, :m8, :m9, :m10, :m11, :m12,
        :n1, :n2, :n3, :n4, :n5, :n6, :n7, :n8, :n9, :n10, :n11, :n12,
        :mt, :nt
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_F_REP_NPMT_13 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN F_TREPMT.ID,
    SPID TYPE OF COLUMN F_TREPMT.SPID,
    AD TYPE OF COLUMN F_TREPMT.AD,
    AC1 TYPE OF COLUMN F_TREPMT.AC1,
    AC2 TYPE OF COLUMN F_TREPMT.AC2,
    ACN1 TYPE OF COLUMN F_TREPMT.ACN1,
    ACN2 TYPE OF COLUMN F_TREPMT.ACN2,
    M1 TYPE OF COLUMN F_TREPMT.M1,
    M2 TYPE OF COLUMN F_TREPMT.M2,
    M3 TYPE OF COLUMN F_TREPMT.M3,
    M4 TYPE OF COLUMN F_TREPMT.M4,
    M5 TYPE OF COLUMN F_TREPMT.M5,
    M6 TYPE OF COLUMN F_TREPMT.M6,
    M7 TYPE OF COLUMN F_TREPMT.M7,
    M8 TYPE OF COLUMN F_TREPMT.M8,
    M9 TYPE OF COLUMN F_TREPMT.M9,
    M10 TYPE OF COLUMN F_TREPMT.M10,
    M11 TYPE OF COLUMN F_TREPMT.M11,
    M12 TYPE OF COLUMN F_TREPMT.M12,
    N1 TYPE OF COLUMN F_TREPMT.N1,
    N2 TYPE OF COLUMN F_TREPMT.N2,
    N3 TYPE OF COLUMN F_TREPMT.N3,
    N4 TYPE OF COLUMN F_TREPMT.N4,
    N5 TYPE OF COLUMN F_TREPMT.N5,
    N6 TYPE OF COLUMN F_TREPMT.N6,
    N7 TYPE OF COLUMN F_TREPMT.N7,
    N8 TYPE OF COLUMN F_TREPMT.N8,
    N9 TYPE OF COLUMN F_TREPMT.N9,
    N10 TYPE OF COLUMN F_TREPMT.N10,
    N11 TYPE OF COLUMN F_TREPMT.N11,
    N12 TYPE OF COLUMN F_TREPMT.N12,
    MT TYPE OF COLUMN F_TREPMT.MT,
    NT TYPE OF COLUMN F_TREPMT.NT)
AS
begin
-- summējam naudas apgrozijumu pa mēnešiem
-- sākuma atlikumi (pirms sdt) būs iekš MT, NT
-- uz F_TRepMT
    FOR SELECT
        gen_id(GEN_F_TREPMT_ID, 1) as ID,
        current_connection as SPID,
        :pad AS ad,
        T3.AC AS AC1,
        NULL AS AC2,
        F_AcP21.Name AS ACN1,
        NULL AS ACN2,
        M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,
        N1,N2,N3,N4,N5,N6,N7,N8,N9,N10,N11,N12,
        MT, NT
    FROM
    (
        SELECT 
            AC,
            SUM(CASE WHEN MT = 0 THEN ADb ELSE 0.00 END) AS MT,
            SUM(CASE WHEN MT = 0 THEN ACr ELSE 0.00 END) AS NT,

            SUM(CASE WHEN MT = 1 THEN ADb ELSE 0.00 END) AS M1,
            SUM(CASE WHEN MT = 2 THEN ADb ELSE 0.00 END) AS M2,
            SUM(CASE WHEN MT = 3 THEN ADb ELSE 0.00 END) AS M3,
            SUM(CASE WHEN MT = 4 THEN ADb ELSE 0.00 END) AS M4,
            SUM(CASE WHEN MT = 5 THEN ADb ELSE 0.00 END) AS M5,
            SUM(CASE WHEN MT = 6 THEN ADb ELSE 0.00 END) AS M6,
            SUM(CASE WHEN MT = 7 THEN ADb ELSE 0.00 END) AS M7,
            SUM(CASE WHEN MT = 8 THEN ADb ELSE 0.00 END) AS M8,
            SUM(CASE WHEN MT = 9 THEN ADb ELSE 0.00 END) AS M9,
            SUM(CASE WHEN MT = 10 THEN ADb ELSE 0.00 END) AS M10,
            SUM(CASE WHEN MT = 11 THEN ADb ELSE 0.00 END) AS M11,
            SUM(CASE WHEN MT = 12 THEN ADb ELSE 0.00 END) AS M12,

            SUM(CASE WHEN MT = 1 THEN ACr ELSE 0.00 END) AS N1,
            SUM(CASE WHEN MT = 2 THEN ACr ELSE 0.00 END) AS N2,
            SUM(CASE WHEN MT = 3 THEN ACr ELSE 0.00 END) AS N3,
            SUM(CASE WHEN MT = 4 THEN ACr ELSE 0.00 END) AS N4,
            SUM(CASE WHEN MT = 5 THEN ACr ELSE 0.00 END) AS N5,
            SUM(CASE WHEN MT = 6 THEN ACr ELSE 0.00 END) AS N6,
            SUM(CASE WHEN MT = 7 THEN ACr ELSE 0.00 END) AS N7,
            SUM(CASE WHEN MT = 8 THEN ACr ELSE 0.00 END) AS N8,
            SUM(CASE WHEN MT = 9 THEN ACr ELSE 0.00 END) AS N9,
            SUM(CASE WHEN MT = 10 THEN ACr ELSE 0.00 END) AS N10,
            SUM(CASE WHEN MT = 11 THEN ACr ELSE 0.00 END) AS N11,
            SUM(CASE WHEN MT = 12 THEN ACr ELSE 0.00 END) AS N12

        FROM
        (
            SELECT AC, MT, SUM(SDb) AS ADb, SUM(SCr) AS ACr
            FROM
            (
                SELECT 
                    F_OPS.AC11 AS AC,
                    CASE
                        WHEN F_OPSd.Dete < :sdt THEN 0
                        ELSE EXTRACT(MONTH FROM F_OPSd.Dete) END AS MT,
                    F_OPS.Summ AS SDb,
                    0.00 AS SCr

                FROM 
                    F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                    INNER JOIN F_AcP21 ON F_OPS.AC12 = F_AcP21.AC

                WHERE 
                    F_OPSd.Dete <= :edt AND
                    F_OPS.AC12 IS NOT NULL AND
                    F_AcP21.id1 IN ('KA','BA','CN')

                UNION ALL

                SELECT 
                    F_OPS.AC21 AS AC,
                    CASE
                        WHEN F_OPSd.Dete < :sdt THEN 0
                        ELSE EXTRACT(MONTH FROM F_OPSd.Dete) END AS MT,
                    0.00 AS SDb,
                    F_OPS.Summ AS SCr

                FROM 
                    F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                    INNER JOIN F_AcP21 ON F_OPS.AC22 = F_AcP21.AC

                WHERE 
                    F_OPSd.Dete <= :edt AND
                    F_OPS.AC22 IS NOT NULL AND
                    F_AcP21.id1 IN ('KA','BA','CN')

                UNION ALL

                    SELECT
                        F_Bal0.AC11 AS AC,
                        0 AS MT,
                        coalesce(F_Bal0.SummD, 0.00) AS SDb,
                        coalesce(F_Bal0.SummC, 0.00) AS SCr
                    FROM 
                        F_Bal0 JOIN F_AcP21 ON F_Bal0.AC11 = F_AcP21.AC
                    WHERE
                        F_AcP21.id1 IN ('KA','BA','CN')

            ) AS T1

            GROUP BY T1.AC, T1.MT

        ) AS T2
        GROUP BY T2.AC
    ) AS T3

    LEFT JOIN F_AcP21 ON F_AcP21.AC = T3.AC
    ORDER BY AC1


    into
        :id, :spid, :ad, :ac1, :ac2, :acn1, :acn2,
        :m1, :m2, :m3, :m4, :m5, :m6, :m7, :m8, :m9, :m10, :m11, :m12,
        :n1, :n2, :n3, :n4, :n5, :n6, :n7, :n8, :n9, :n10, :n11, :n12,
        :mt, :nt
    do
    begin
     suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_NPMT_14 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID TYPE OF COLUMN F_TREPMT.ID,
    SPID TYPE OF COLUMN F_TREPMT.SPID,
    AD TYPE OF COLUMN F_TREPMT.AD,
    AC1 TYPE OF COLUMN F_TREPMT.AC1,
    AC2 TYPE OF COLUMN F_TREPMT.AC2,
    ACN1 TYPE OF COLUMN F_TREPMT.ACN1,
    ACN2 TYPE OF COLUMN F_TREPMT.ACN2,
    M1 TYPE OF COLUMN F_TREPMT.M1,
    M2 TYPE OF COLUMN F_TREPMT.M2,
    M3 TYPE OF COLUMN F_TREPMT.M3,
    M4 TYPE OF COLUMN F_TREPMT.M4,
    M5 TYPE OF COLUMN F_TREPMT.M5,
    M6 TYPE OF COLUMN F_TREPMT.M6,
    M7 TYPE OF COLUMN F_TREPMT.M7,
    M8 TYPE OF COLUMN F_TREPMT.M8,
    M9 TYPE OF COLUMN F_TREPMT.M9,
    M10 TYPE OF COLUMN F_TREPMT.M10,
    M11 TYPE OF COLUMN F_TREPMT.M11,
    M12 TYPE OF COLUMN F_TREPMT.M12,
    N1 TYPE OF COLUMN F_TREPMT.N1,
    N2 TYPE OF COLUMN F_TREPMT.N2,
    N3 TYPE OF COLUMN F_TREPMT.N3,
    N4 TYPE OF COLUMN F_TREPMT.N4,
    N5 TYPE OF COLUMN F_TREPMT.N5,
    N6 TYPE OF COLUMN F_TREPMT.N6,
    N7 TYPE OF COLUMN F_TREPMT.N7,
    N8 TYPE OF COLUMN F_TREPMT.N8,
    N9 TYPE OF COLUMN F_TREPMT.N9,
    N10 TYPE OF COLUMN F_TREPMT.N10,
    N11 TYPE OF COLUMN F_TREPMT.N11,
    N12 TYPE OF COLUMN F_TREPMT.N12,
    MT TYPE OF COLUMN F_TREPMT.MT,
    NT TYPE OF COLUMN F_TREPMT.NT)
AS
begin
    DELETE 
    FROM F_TRepMT
    WHERE F_TRepMT.spid = current_connection;
    
    INSERT INTO F_TRepMT(
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt)
    SELECT
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    FROM sp_f_rep_npmt_13(:sdt, :edt, 'A');

    INSERT INTO F_TRepMT(
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt)
    SELECT
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    FROM sp_f_rep_npmt_12(:sdt, :edt, 'B');
    
    INSERT INTO F_TRepMT(
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt)
    SELECT
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    FROM sp_f_rep_npmt_11(:sdt, :edt, 'C');

    INSERT INTO F_TRepMT(
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt)
    SELECT
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    FROM sp_f_rep_npmt_13(:sdt, :edt, 'D');

    FOR SELECT *
    FROM F_TRepMT
    WHERE F_TRepMT.spid = current_connection

    into
        :id, :spid, :ad, :ac1, :ac2, :acn1, :acn2,
        :m1, :m2, :m3, :m4, :m5, :m6, :m7, :m8, :m9, :m10, :m11, :m12,
        :n1, :n2, :n3, :n4, :n5, :n6, :n7, :n8, :n9, :n10, :n11, :n12,
        :mt, :nt
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_NPMT_21 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN F_TREPMT.ID,
    SPID TYPE OF COLUMN F_TREPMT.SPID,
    AD TYPE OF COLUMN F_TREPMT.AD,
    AC1 TYPE OF COLUMN F_TREPMT.AC1,
    AC2 TYPE OF COLUMN F_TREPMT.AC2,
    ACN1 TYPE OF COLUMN F_TREPMT.ACN1,
    ACN2 TYPE OF COLUMN F_TREPMT.ACN2,
    M1 TYPE OF COLUMN F_TREPMT.M1,
    M2 TYPE OF COLUMN F_TREPMT.M2,
    M3 TYPE OF COLUMN F_TREPMT.M3,
    M4 TYPE OF COLUMN F_TREPMT.M4,
    M5 TYPE OF COLUMN F_TREPMT.M5,
    M6 TYPE OF COLUMN F_TREPMT.M6,
    M7 TYPE OF COLUMN F_TREPMT.M7,
    M8 TYPE OF COLUMN F_TREPMT.M8,
    M9 TYPE OF COLUMN F_TREPMT.M9,
    M10 TYPE OF COLUMN F_TREPMT.M10,
    M11 TYPE OF COLUMN F_TREPMT.M11,
    M12 TYPE OF COLUMN F_TREPMT.M12,
    N1 TYPE OF COLUMN F_TREPMT.N1,
    N2 TYPE OF COLUMN F_TREPMT.N2,
    N3 TYPE OF COLUMN F_TREPMT.N3,
    N4 TYPE OF COLUMN F_TREPMT.N4,
    N5 TYPE OF COLUMN F_TREPMT.N5,
    N6 TYPE OF COLUMN F_TREPMT.N6,
    N7 TYPE OF COLUMN F_TREPMT.N7,
    N8 TYPE OF COLUMN F_TREPMT.N8,
    N9 TYPE OF COLUMN F_TREPMT.N9,
    N10 TYPE OF COLUMN F_TREPMT.N10,
    N11 TYPE OF COLUMN F_TREPMT.N11,
    N12 TYPE OF COLUMN F_TREPMT.N12,
    MT TYPE OF COLUMN F_TREPMT.MT,
    NT TYPE OF COLUMN F_TREPMT.NT)
AS
begin
-- summējam debeta AC12 un AC14 (izdevumus)
-- uz F_TRepMT
    FOR SELECT
        gen_id(GEN_F_TREPMT_ID, 1) as ID,
        current_connection as SPID,
        :pad AS ad,
        T3.AC AS AC1,
        T3.AC2 AS AC2,
        F_AcP21.Name AS ACN1,
        F_AcP24.Name AS ACN2,
        M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,
        0.0 AS N1, 0.0 AS N2, 0.0 AS N3, 0.0 AS N4, 0.0 AS N5, 0.0 AS N6,
        0.0 AS N7, 0.0 AS N8, 0.0 AS N9, 0.0 AS N10, 0.0 AS N11, 0.0 AS N12,
        0.0 AS MT, 0.0 AS NT
        
    FROM
    (
        SELECT 
            AC, AC2,
            SUM(CASE WHEN MT = 1 THEN ADb ELSE 0.00 END) AS M1,
            SUM(CASE WHEN MT = 2 THEN ADb ELSE 0.00 END) AS M2,
            SUM(CASE WHEN MT = 3 THEN ADb ELSE 0.00 END) AS M3,
            SUM(CASE WHEN MT = 4 THEN ADb ELSE 0.00 END) AS M4,
            SUM(CASE WHEN MT = 5 THEN ADb ELSE 0.00 END) AS M5,
            SUM(CASE WHEN MT = 6 THEN ADb ELSE 0.00 END) AS M6,
            SUM(CASE WHEN MT = 7 THEN ADb ELSE 0.00 END) AS M7,
            SUM(CASE WHEN MT = 8 THEN ADb ELSE 0.00 END) AS M8,
            SUM(CASE WHEN MT = 9 THEN ADb ELSE 0.00 END) AS M9,
            SUM(CASE WHEN MT = 10 THEN ADb ELSE 0.00 END) AS M10,
            SUM(CASE WHEN MT = 11 THEN ADb ELSE 0.00 END) AS M11,
            SUM(CASE WHEN MT = 12 THEN ADb ELSE 0.00 END) AS M12

        FROM
        (
            SELECT AC, AC2, MT, SUM(SDb) AS ADb, SUM(SCr) AS ACr
            FROM
            (
                SELECT 
                    F_OPS.AC12 AS AC,
                    F_OPS.AC14 AS AC2,
                    EXTRACT(MONTH FROM F_OPSd.Dete) AS MT,
                    F_OPS.Summ AS SDb,
                    0.00 AS SCr

                FROM 
                    F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                    LEFT JOIN F_AcP21 ON F_OPS.AC12 = F_AcP21.AC
                WHERE 
                    F_OPSd.Dete BETWEEN :sdt AND :edt AND
                    F_OPS.AC12 IS NOT NULL AND
                    (F_AcP21.id1 IS NULL OR F_AcP21.id1 NOT IN ('KA','BA','CN'))

            ) AS T1

            GROUP BY T1.AC, T1.AC2, T1.MT

        ) AS T2
        GROUP BY T2.AC, T2.AC2
    ) AS T3

    LEFT JOIN F_AcP21 ON F_AcP21.AC = T3.AC
    LEFT JOIN F_AcP24 ON F_AcP24.idx = T3.AC2

    ORDER BY AC1

    into
        :id, :spid, :ad, :ac1, :ac2, :acn1, :acn2,
        :m1, :m2, :m3, :m4, :m5, :m6, :m7, :m8, :m9, :m10, :m11, :m12,
        :n1, :n2, :n3, :n4, :n5, :n6, :n7, :n8, :n9, :n10, :n11, :n12,
        :mt, :nt
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_F_REP_NPMT_22 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN F_TREPMT.ID,
    SPID TYPE OF COLUMN F_TREPMT.SPID,
    AD TYPE OF COLUMN F_TREPMT.AD,
    AC1 TYPE OF COLUMN F_TREPMT.AC1,
    AC2 TYPE OF COLUMN F_TREPMT.AC2,
    ACN1 TYPE OF COLUMN F_TREPMT.ACN1,
    ACN2 TYPE OF COLUMN F_TREPMT.ACN2,
    M1 TYPE OF COLUMN F_TREPMT.M1,
    M2 TYPE OF COLUMN F_TREPMT.M2,
    M3 TYPE OF COLUMN F_TREPMT.M3,
    M4 TYPE OF COLUMN F_TREPMT.M4,
    M5 TYPE OF COLUMN F_TREPMT.M5,
    M6 TYPE OF COLUMN F_TREPMT.M6,
    M7 TYPE OF COLUMN F_TREPMT.M7,
    M8 TYPE OF COLUMN F_TREPMT.M8,
    M9 TYPE OF COLUMN F_TREPMT.M9,
    M10 TYPE OF COLUMN F_TREPMT.M10,
    M11 TYPE OF COLUMN F_TREPMT.M11,
    M12 TYPE OF COLUMN F_TREPMT.M12,
    N1 TYPE OF COLUMN F_TREPMT.N1,
    N2 TYPE OF COLUMN F_TREPMT.N2,
    N3 TYPE OF COLUMN F_TREPMT.N3,
    N4 TYPE OF COLUMN F_TREPMT.N4,
    N5 TYPE OF COLUMN F_TREPMT.N5,
    N6 TYPE OF COLUMN F_TREPMT.N6,
    N7 TYPE OF COLUMN F_TREPMT.N7,
    N8 TYPE OF COLUMN F_TREPMT.N8,
    N9 TYPE OF COLUMN F_TREPMT.N9,
    N10 TYPE OF COLUMN F_TREPMT.N10,
    N11 TYPE OF COLUMN F_TREPMT.N11,
    N12 TYPE OF COLUMN F_TREPMT.N12,
    MT TYPE OF COLUMN F_TREPMT.MT,
    NT TYPE OF COLUMN F_TREPMT.NT)
AS
begin
-- summējam debeta AC22 (ieņēmumi)
-- uz F_TRepMT
    FOR SELECT
        gen_id(GEN_F_TREPMT_ID, 1) as ID,
        current_connection as SPID,
        :pad AS ad,
        T3.AC AS AC1,
        T3.AC2 AS AC2,
        F_AcP21.Name AS ACN1,
        F_AcP24.Name AS ACN2,
        M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,
        0.0 AS N1, 0.0 AS N2, 0.0 AS N3, 0.0 AS N4, 0.0 AS N5, 0.0 AS N6,
        0.0 AS N7, 0.0 AS N8, 0.0 AS N9, 0.0 AS N10, 0.0 AS N11, 0.0 AS N12,
        0.0 AS MT, 0.0 AS NT
        
    FROM
    (
        SELECT 
            AC, AC2,
            SUM(CASE WHEN MT = 1 THEN ACr ELSE 0.00 END) AS M1,
            SUM(CASE WHEN MT = 2 THEN ACr ELSE 0.00 END) AS M2,
            SUM(CASE WHEN MT = 3 THEN ACr ELSE 0.00 END) AS M3,
            SUM(CASE WHEN MT = 4 THEN ACr ELSE 0.00 END) AS M4,
            SUM(CASE WHEN MT = 5 THEN ACr ELSE 0.00 END) AS M5,
            SUM(CASE WHEN MT = 6 THEN ACr ELSE 0.00 END) AS M6,
            SUM(CASE WHEN MT = 7 THEN ACr ELSE 0.00 END) AS M7,
            SUM(CASE WHEN MT = 8 THEN ACr ELSE 0.00 END) AS M8,
            SUM(CASE WHEN MT = 9 THEN ACr ELSE 0.00 END) AS M9,
            SUM(CASE WHEN MT = 10 THEN ACr ELSE 0.00 END) AS M10,
            SUM(CASE WHEN MT = 11 THEN ACr ELSE 0.00 END) AS M11,
            SUM(CASE WHEN MT = 12 THEN ACr ELSE 0.00 END) AS M12

        FROM
        (
            SELECT AC, AC2, MT, SUM(SDb) AS ADb, SUM(SCr) AS ACr
            FROM
            (
                SELECT 
                    F_OPS.AC22 AS AC,
                    F_OPS.AC24 AS AC2,
                    EXTRACT(MONTH FROM F_OPSd.Dete) AS MT,
                    0.00 AS SDb,
                    F_OPS.Summ AS SCr

                FROM 
                    F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                    LEFT JOIN F_AcP21 ON F_OPS.AC22 = F_AcP21.AC
                WHERE 
                    F_OPSd.Dete BETWEEN :sdt AND :edt AND
                    F_OPS.AC22 IS NOT NULL AND
                    (F_AcP21.id1 IS NULL OR F_AcP21.id1 NOT IN ('KA','BA','CN'))

            ) AS T1

            GROUP BY T1.AC, T1.AC2, T1.MT

        ) AS T2
        GROUP BY T2.AC, T2.AC2
    ) AS T3

    LEFT JOIN F_AcP21 ON F_AcP21.AC = T3.AC
    LEFT JOIN F_AcP24    ON F_AcP24.idx = T3.AC2

    ORDER BY AC1, AC2

    into
        :id, :spid, :ad, :ac1, :ac2, :acn1, :acn2,
        :m1, :m2, :m3, :m4, :m5, :m6, :m7, :m8, :m9, :m10, :m11, :m12,
        :n1, :n2, :n3, :n4, :n5, :n6, :n7, :n8, :n9, :n10, :n11, :n12,
        :mt, :nt
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_NPMT_24 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID TYPE OF COLUMN F_TREPMT.ID,
    SPID TYPE OF COLUMN F_TREPMT.SPID,
    AD TYPE OF COLUMN F_TREPMT.AD,
    AC1 TYPE OF COLUMN F_TREPMT.AC1,
    AC2 TYPE OF COLUMN F_TREPMT.AC2,
    ACN1 TYPE OF COLUMN F_TREPMT.ACN1,
    ACN2 TYPE OF COLUMN F_TREPMT.ACN2,
    M1 TYPE OF COLUMN F_TREPMT.M1,
    M2 TYPE OF COLUMN F_TREPMT.M2,
    M3 TYPE OF COLUMN F_TREPMT.M3,
    M4 TYPE OF COLUMN F_TREPMT.M4,
    M5 TYPE OF COLUMN F_TREPMT.M5,
    M6 TYPE OF COLUMN F_TREPMT.M6,
    M7 TYPE OF COLUMN F_TREPMT.M7,
    M8 TYPE OF COLUMN F_TREPMT.M8,
    M9 TYPE OF COLUMN F_TREPMT.M9,
    M10 TYPE OF COLUMN F_TREPMT.M10,
    M11 TYPE OF COLUMN F_TREPMT.M11,
    M12 TYPE OF COLUMN F_TREPMT.M12,
    N1 TYPE OF COLUMN F_TREPMT.N1,
    N2 TYPE OF COLUMN F_TREPMT.N2,
    N3 TYPE OF COLUMN F_TREPMT.N3,
    N4 TYPE OF COLUMN F_TREPMT.N4,
    N5 TYPE OF COLUMN F_TREPMT.N5,
    N6 TYPE OF COLUMN F_TREPMT.N6,
    N7 TYPE OF COLUMN F_TREPMT.N7,
    N8 TYPE OF COLUMN F_TREPMT.N8,
    N9 TYPE OF COLUMN F_TREPMT.N9,
    N10 TYPE OF COLUMN F_TREPMT.N10,
    N11 TYPE OF COLUMN F_TREPMT.N11,
    N12 TYPE OF COLUMN F_TREPMT.N12,
    MT TYPE OF COLUMN F_TREPMT.MT,
    NT TYPE OF COLUMN F_TREPMT.NT)
AS
begin
    DELETE 
    FROM F_TRepMT
    WHERE F_TRepMT.spid = current_connection;

    INSERT INTO F_TRepMT(
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt)
    SELECT
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    FROM sp_f_rep_npmt_13(:sdt, :edt, 'A');

    INSERT INTO F_TRepMT(
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt)
    SELECT
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    FROM sp_f_rep_npmt_22(:sdt, :edt, 'B');

    INSERT INTO F_TRepMT(
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt)
    SELECT
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    FROM sp_f_rep_npmt_21(:sdt, :edt, 'C');

    INSERT INTO F_TRepMT(
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt)
    SELECT
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    FROM sp_f_rep_npmt_13(:sdt, :edt, 'D');

    FOR SELECT *
    FROM F_TRepMT
    WHERE F_TRepMT.spid = current_connection

    into
        :id, :spid, :ad, :ac1, :ac2, :acn1, :acn2,
        :m1, :m2, :m3, :m4, :m5, :m6, :m7, :m8, :m9, :m10, :m11, :m12,
        :n1, :n2, :n3, :n4, :n5, :n6, :n7, :n8, :n9, :n10, :n11, :n12,
        :mt, :nt
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_NPMT_31 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID TYPE OF COLUMN F_TREPMT.ID,
    SPID TYPE OF COLUMN F_TREPMT.SPID,
    AD TYPE OF COLUMN F_TREPMT.AD,
    AC1 TYPE OF COLUMN F_TREPMT.AC1,
    AC2 TYPE OF COLUMN F_TREPMT.AC2,
    ACN1 TYPE OF COLUMN F_TREPMT.ACN1,
    ACN2 TYPE OF COLUMN F_TREPMT.ACN2,
    M1 TYPE OF COLUMN F_TREPMT.M1,
    M2 TYPE OF COLUMN F_TREPMT.M2,
    M3 TYPE OF COLUMN F_TREPMT.M3,
    M4 TYPE OF COLUMN F_TREPMT.M4,
    M5 TYPE OF COLUMN F_TREPMT.M5,
    M6 TYPE OF COLUMN F_TREPMT.M6,
    M7 TYPE OF COLUMN F_TREPMT.M7,
    M8 TYPE OF COLUMN F_TREPMT.M8,
    M9 TYPE OF COLUMN F_TREPMT.M9,
    M10 TYPE OF COLUMN F_TREPMT.M10,
    M11 TYPE OF COLUMN F_TREPMT.M11,
    M12 TYPE OF COLUMN F_TREPMT.M12,
    N1 TYPE OF COLUMN F_TREPMT.N1,
    N2 TYPE OF COLUMN F_TREPMT.N2,
    N3 TYPE OF COLUMN F_TREPMT.N3,
    N4 TYPE OF COLUMN F_TREPMT.N4,
    N5 TYPE OF COLUMN F_TREPMT.N5,
    N6 TYPE OF COLUMN F_TREPMT.N6,
    N7 TYPE OF COLUMN F_TREPMT.N7,
    N8 TYPE OF COLUMN F_TREPMT.N8,
    N9 TYPE OF COLUMN F_TREPMT.N9,
    N10 TYPE OF COLUMN F_TREPMT.N10,
    N11 TYPE OF COLUMN F_TREPMT.N11,
    N12 TYPE OF COLUMN F_TREPMT.N12,
    MT TYPE OF COLUMN F_TREPMT.MT,
    NT TYPE OF COLUMN F_TREPMT.NT)
AS
begin
-- summējam pēc 3. pazīmes
-- uz F_TRepMT
    FOR SELECT
        gen_id(GEN_F_TREPMT_ID, 1) as ID,
        current_connection as SPID,
        null AS ad,
        T3.AC AS AC1,
        NULL AS AC2,
        F_Acp23.Name AS ACN1,
        NULL AS ACN2,
        M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,
        N1,N2,N3,N4,N5,N6,N7,N8,N9,N10,N11,N12,
        0.0 AS MT, 0.0 AS NT

    FROM
    (
        SELECT 
            AC,
            SUM(CASE WHEN MT = 0 THEN ADb ELSE 0.00 END) AS MT,
            SUM(CASE WHEN MT = 0 THEN ACr ELSE 0.00 END) AS NT,

            SUM(CASE WHEN MT = 1 THEN ADb ELSE 0.00 END) AS M1,
            SUM(CASE WHEN MT = 2 THEN ADb ELSE 0.00 END) AS M2,
            SUM(CASE WHEN MT = 3 THEN ADb ELSE 0.00 END) AS M3,
            SUM(CASE WHEN MT = 4 THEN ADb ELSE 0.00 END) AS M4,
            SUM(CASE WHEN MT = 5 THEN ADb ELSE 0.00 END) AS M5,
            SUM(CASE WHEN MT = 6 THEN ADb ELSE 0.00 END) AS M6,
            SUM(CASE WHEN MT = 7 THEN ADb ELSE 0.00 END) AS M7,
            SUM(CASE WHEN MT = 8 THEN ADb ELSE 0.00 END) AS M8,
            SUM(CASE WHEN MT = 9 THEN ADb ELSE 0.00 END) AS M9,
            SUM(CASE WHEN MT = 10 THEN ADb ELSE 0.00 END) AS M10,
            SUM(CASE WHEN MT = 11 THEN ADb ELSE 0.00 END) AS M11,
            SUM(CASE WHEN MT = 12 THEN ADb ELSE 0.00 END) AS M12,

            SUM(CASE WHEN MT = 1 THEN ACr ELSE 0.00 END) AS N1,
            SUM(CASE WHEN MT = 2 THEN ACr ELSE 0.00 END) AS N2,
            SUM(CASE WHEN MT = 3 THEN ACr ELSE 0.00 END) AS N3,
            SUM(CASE WHEN MT = 4 THEN ACr ELSE 0.00 END) AS N4,
            SUM(CASE WHEN MT = 5 THEN ACr ELSE 0.00 END) AS N5,
            SUM(CASE WHEN MT = 6 THEN ACr ELSE 0.00 END) AS N6,
            SUM(CASE WHEN MT = 7 THEN ACr ELSE 0.00 END) AS N7,
            SUM(CASE WHEN MT = 8 THEN ACr ELSE 0.00 END) AS N8,
            SUM(CASE WHEN MT = 9 THEN ACr ELSE 0.00 END) AS N9,
            SUM(CASE WHEN MT = 10 THEN ACr ELSE 0.00 END) AS N10,
            SUM(CASE WHEN MT = 11 THEN ACr ELSE 0.00 END) AS N11,
            SUM(CASE WHEN MT = 12 THEN ACr ELSE 0.00 END) AS N12

        FROM
        (
            SELECT AC, MT, SUM(SDb) AS ADb, SUM(SCr) AS ACr
            FROM
            (
                SELECT 
                    F_OPS.AC13 AS AC,
                    EXTRACT(MONTH FROM F_OPSd.Dete) AS MT,
                    F_OPS.Summ AS SDb,
                    0.00 AS SCr
                FROM 
                    F_OPSd INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                    INNER JOIN F_Acp23 AS AP3deb ON F_OPS.AC13 = AP3deb.idx
                WHERE 
                    F_OPSd.Dete BETWEEN :sdt AND :edt AND 
                    AP3deb.id2 IN (2,3)

                UNION ALL

                SELECT 
                    F_OPS.AC23 AS AC,
                    EXTRACT(MONTH FROM F_OPSd.Dete) AS MT,
                    0.00 AS SDb,
                    F_OPS.Summ AS SCr

                FROM 
                    F_OPSd INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                    INNER JOIN F_Acp23 AS AP3cre ON F_OPS.AC23 = AP3cre.idx
                WHERE 
                    F_OPSd.Dete BETWEEN :sdt AND :edt AND 
                    AP3cre.id2 IN (2,3)

            ) AS T1

            GROUP BY T1.AC, T1.MT

        ) AS T2
        GROUP BY T2.AC
    ) AS T3

    LEFT JOIN F_Acp23    ON F_Acp23.idx = T3.AC

    ORDER BY AC1


    into
        :id, :spid, :ad, :ac1, :ac2, :acn1, :acn2,
        :m1, :m2, :m3, :m4, :m5, :m6, :m7, :m8, :m9, :m10, :m11, :m12,
        :n1, :n2, :n3, :n4, :n5, :n6, :n7, :n8, :n9, :n10, :n11, :n12,
        :mt, :nt
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_F_REP_NPMT_41 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN F_TREPMT.ID,
    SPID TYPE OF COLUMN F_TREPMT.SPID,
    AD TYPE OF COLUMN F_TREPMT.AD,
    AC1 TYPE OF COLUMN F_TREPMT.AC1,
    AC2 TYPE OF COLUMN F_TREPMT.AC2,
    ACN1 TYPE OF COLUMN F_TREPMT.ACN1,
    ACN2 TYPE OF COLUMN F_TREPMT.ACN2,
    M1 TYPE OF COLUMN F_TREPMT.M1,
    M2 TYPE OF COLUMN F_TREPMT.M2,
    M3 TYPE OF COLUMN F_TREPMT.M3,
    M4 TYPE OF COLUMN F_TREPMT.M4,
    M5 TYPE OF COLUMN F_TREPMT.M5,
    M6 TYPE OF COLUMN F_TREPMT.M6,
    M7 TYPE OF COLUMN F_TREPMT.M7,
    M8 TYPE OF COLUMN F_TREPMT.M8,
    M9 TYPE OF COLUMN F_TREPMT.M9,
    M10 TYPE OF COLUMN F_TREPMT.M10,
    M11 TYPE OF COLUMN F_TREPMT.M11,
    M12 TYPE OF COLUMN F_TREPMT.M12,
    N1 TYPE OF COLUMN F_TREPMT.N1,
    N2 TYPE OF COLUMN F_TREPMT.N2,
    N3 TYPE OF COLUMN F_TREPMT.N3,
    N4 TYPE OF COLUMN F_TREPMT.N4,
    N5 TYPE OF COLUMN F_TREPMT.N5,
    N6 TYPE OF COLUMN F_TREPMT.N6,
    N7 TYPE OF COLUMN F_TREPMT.N7,
    N8 TYPE OF COLUMN F_TREPMT.N8,
    N9 TYPE OF COLUMN F_TREPMT.N9,
    N10 TYPE OF COLUMN F_TREPMT.N10,
    N11 TYPE OF COLUMN F_TREPMT.N11,
    N12 TYPE OF COLUMN F_TREPMT.N12,
    MT TYPE OF COLUMN F_TREPMT.MT,
    NT TYPE OF COLUMN F_TREPMT.NT)
AS
begin
-- summējam debeta AC13 (izdevumus)
-- uz F_TRepMT
    FOR SELECT
        gen_id(GEN_F_TREPMT_ID, 1) as ID,
        current_connection as SPID,
        :pad AS ad,
        T3.AC AS AC1,
        NULL AS AC2,
        F_Acp23.Name AS ACN1,
        NULL AS ACN2,
        M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,
        0.0 AS N1, 0.0 AS N2, 0.0 AS N3, 0.0 AS N4, 0.0 AS N5, 0.0 AS N6,
        0.0 AS N7, 0.0 AS N8, 0.0 AS N9, 0.0 AS N10, 0.0 AS N11, 0.0 AS N12,
        0.0 AS MT, 0.0 AS NT
        
    FROM
    (
        SELECT 
            AC,
            SUM(CASE WHEN MT = 1 THEN ADb ELSE 0.00 END) AS M1,
            SUM(CASE WHEN MT = 2 THEN ADb ELSE 0.00 END) AS M2,
            SUM(CASE WHEN MT = 3 THEN ADb ELSE 0.00 END) AS M3,
            SUM(CASE WHEN MT = 4 THEN ADb ELSE 0.00 END) AS M4,
            SUM(CASE WHEN MT = 5 THEN ADb ELSE 0.00 END) AS M5,
            SUM(CASE WHEN MT = 6 THEN ADb ELSE 0.00 END) AS M6,
            SUM(CASE WHEN MT = 7 THEN ADb ELSE 0.00 END) AS M7,
            SUM(CASE WHEN MT = 8 THEN ADb ELSE 0.00 END) AS M8,
            SUM(CASE WHEN MT = 9 THEN ADb ELSE 0.00 END) AS M9,
            SUM(CASE WHEN MT = 10 THEN ADb ELSE 0.00 END) AS M10,
            SUM(CASE WHEN MT = 11 THEN ADb ELSE 0.00 END) AS M11,
            SUM(CASE WHEN MT = 12 THEN ADb ELSE 0.00 END) AS M12

        FROM
        (
            SELECT AC, MT, SUM(SDb) AS ADb, SUM(SCr) AS ACr
            FROM
            (
                SELECT 
                    F_OPS.AC13 AS AC,
                    EXTRACT(MONTH FROM F_OPSd.Dete) AS MT,
                    F_OPS.Summ AS SDb,
                    0.00 AS SCr
                FROM
                    F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                WHERE
                    F_OPSd.Dete BETWEEN :sdt AND :edt AND
                    F_OPS.AC13 IS NOT NULL AND
                    F_OPS.AC13 NOT IN ('KA','BA','CN')

            ) AS T1

            GROUP BY T1.AC, T1.MT

        ) AS T2
        GROUP BY T2.AC
    ) AS T3

    INNER JOIN F_Acp23 ON F_Acp23.idx = T3.AC

    ORDER BY AC1

    into
        :id, :spid, :ad, :ac1, :ac2, :acn1, :acn2,
        :m1, :m2, :m3, :m4, :m5, :m6, :m7, :m8, :m9, :m10, :m11, :m12,
        :n1, :n2, :n3, :n4, :n5, :n6, :n7, :n8, :n9, :n10, :n11, :n12,
        :mt, :nt
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_NPMT_42 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN F_TREPMT.ID,
    SPID TYPE OF COLUMN F_TREPMT.SPID,
    AD TYPE OF COLUMN F_TREPMT.AD,
    AC1 TYPE OF COLUMN F_TREPMT.AC1,
    AC2 TYPE OF COLUMN F_TREPMT.AC2,
    ACN1 TYPE OF COLUMN F_TREPMT.ACN1,
    ACN2 TYPE OF COLUMN F_TREPMT.ACN2,
    M1 TYPE OF COLUMN F_TREPMT.M1,
    M2 TYPE OF COLUMN F_TREPMT.M2,
    M3 TYPE OF COLUMN F_TREPMT.M3,
    M4 TYPE OF COLUMN F_TREPMT.M4,
    M5 TYPE OF COLUMN F_TREPMT.M5,
    M6 TYPE OF COLUMN F_TREPMT.M6,
    M7 TYPE OF COLUMN F_TREPMT.M7,
    M8 TYPE OF COLUMN F_TREPMT.M8,
    M9 TYPE OF COLUMN F_TREPMT.M9,
    M10 TYPE OF COLUMN F_TREPMT.M10,
    M11 TYPE OF COLUMN F_TREPMT.M11,
    M12 TYPE OF COLUMN F_TREPMT.M12,
    N1 TYPE OF COLUMN F_TREPMT.N1,
    N2 TYPE OF COLUMN F_TREPMT.N2,
    N3 TYPE OF COLUMN F_TREPMT.N3,
    N4 TYPE OF COLUMN F_TREPMT.N4,
    N5 TYPE OF COLUMN F_TREPMT.N5,
    N6 TYPE OF COLUMN F_TREPMT.N6,
    N7 TYPE OF COLUMN F_TREPMT.N7,
    N8 TYPE OF COLUMN F_TREPMT.N8,
    N9 TYPE OF COLUMN F_TREPMT.N9,
    N10 TYPE OF COLUMN F_TREPMT.N10,
    N11 TYPE OF COLUMN F_TREPMT.N11,
    N12 TYPE OF COLUMN F_TREPMT.N12,
    MT TYPE OF COLUMN F_TREPMT.MT,
    NT TYPE OF COLUMN F_TREPMT.NT)
AS
begin
-- summējam debeta AC23 (ieņēmumi)
-- uz F_TRepMT
    FOR SELECT
        gen_id(GEN_F_TREPMT_ID, 1) as ID,
        current_connection as SPID,
        :pad AS ad,
        T3.AC AS AC1,
        NULL AS AC2,
        F_Acp23.Name AS ACN1,
        NULL AS ACN2,
        M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,
        0.0 AS N1, 0.0 AS N2, 0.0 AS N3, 0.0 AS N4, 0.0 AS N5, 0.0 AS N6,
        0.0 AS N7, 0.0 AS N8, 0.0 AS N9, 0.0 AS N10, 0.0 AS N11, 0.0 AS N12,
        0.0 AS MT, 0.0 AS NT
        
    FROM
    (
        SELECT 
            AC,
            SUM(CASE WHEN MT = 1 THEN ACr ELSE 0.00 END) AS M1,
            SUM(CASE WHEN MT = 2 THEN ACr ELSE 0.00 END) AS M2,
            SUM(CASE WHEN MT = 3 THEN ACr ELSE 0.00 END) AS M3,
            SUM(CASE WHEN MT = 4 THEN ACr ELSE 0.00 END) AS M4,
            SUM(CASE WHEN MT = 5 THEN ACr ELSE 0.00 END) AS M5,
            SUM(CASE WHEN MT = 6 THEN ACr ELSE 0.00 END) AS M6,
            SUM(CASE WHEN MT = 7 THEN ACr ELSE 0.00 END) AS M7,
            SUM(CASE WHEN MT = 8 THEN ACr ELSE 0.00 END) AS M8,
            SUM(CASE WHEN MT = 9 THEN ACr ELSE 0.00 END) AS M9,
            SUM(CASE WHEN MT = 10 THEN ACr ELSE 0.00 END) AS M10,
            SUM(CASE WHEN MT = 11 THEN ACr ELSE 0.00 END) AS M11,
            SUM(CASE WHEN MT = 12 THEN ACr ELSE 0.00 END) AS M12

        FROM
        (
            SELECT AC, MT, SUM(SDb) AS ADb, SUM(SCr) AS ACr
            FROM
            (
                SELECT 
                    F_OPS.AC23 AS AC,
                    EXTRACT(MONTH FROM F_OPSd.Dete) AS MT,
                    0.00 AS SDb,
                    F_OPS.Summ AS SCr

                FROM 
                    F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                WHERE
                    F_OPSd.Dete BETWEEN :sdt AND :edt AND
                    F_OPS.AC23 IS NOT NULL AND
                    F_OPS.AC23 NOT IN ('KA','BA','CN')

            ) AS T1

            GROUP BY T1.AC, T1.MT

        ) AS T2
        GROUP BY T2.AC
    ) AS T3

    LEFT JOIN F_Acp23 ON F_Acp23.idx = T3.AC

    ORDER BY AC1

    into
        :id, :spid, :ad, :ac1, :ac2, :acn1, :acn2,
        :m1, :m2, :m3, :m4, :m5, :m6, :m7, :m8, :m9, :m10, :m11, :m12,
        :n1, :n2, :n3, :n4, :n5, :n6, :n7, :n8, :n9, :n10, :n11, :n12,
        :mt, :nt
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_F_REP_NPMT_43 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN F_TREPMT.ID,
    SPID TYPE OF COLUMN F_TREPMT.SPID,
    AD TYPE OF COLUMN F_TREPMT.AD,
    AC1 TYPE OF COLUMN F_TREPMT.AC1,
    AC2 TYPE OF COLUMN F_TREPMT.AC2,
    ACN1 TYPE OF COLUMN F_TREPMT.ACN1,
    ACN2 TYPE OF COLUMN F_TREPMT.ACN2,
    M1 TYPE OF COLUMN F_TREPMT.M1,
    M2 TYPE OF COLUMN F_TREPMT.M2,
    M3 TYPE OF COLUMN F_TREPMT.M3,
    M4 TYPE OF COLUMN F_TREPMT.M4,
    M5 TYPE OF COLUMN F_TREPMT.M5,
    M6 TYPE OF COLUMN F_TREPMT.M6,
    M7 TYPE OF COLUMN F_TREPMT.M7,
    M8 TYPE OF COLUMN F_TREPMT.M8,
    M9 TYPE OF COLUMN F_TREPMT.M9,
    M10 TYPE OF COLUMN F_TREPMT.M10,
    M11 TYPE OF COLUMN F_TREPMT.M11,
    M12 TYPE OF COLUMN F_TREPMT.M12,
    N1 TYPE OF COLUMN F_TREPMT.N1,
    N2 TYPE OF COLUMN F_TREPMT.N2,
    N3 TYPE OF COLUMN F_TREPMT.N3,
    N4 TYPE OF COLUMN F_TREPMT.N4,
    N5 TYPE OF COLUMN F_TREPMT.N5,
    N6 TYPE OF COLUMN F_TREPMT.N6,
    N7 TYPE OF COLUMN F_TREPMT.N7,
    N8 TYPE OF COLUMN F_TREPMT.N8,
    N9 TYPE OF COLUMN F_TREPMT.N9,
    N10 TYPE OF COLUMN F_TREPMT.N10,
    N11 TYPE OF COLUMN F_TREPMT.N11,
    N12 TYPE OF COLUMN F_TREPMT.N12,
    MT TYPE OF COLUMN F_TREPMT.MT,
    NT TYPE OF COLUMN F_TREPMT.NT)
AS
begin
-- summējam naudas apgrozijumu pa mēnēšiem pēc 3. pazīmes
-- sākuma atlikumi (pirms sdt) būs iekš MT, NT
    FOR SELECT
        gen_id(GEN_F_TREPMT_ID, 1) as ID,
        current_connection as SPID,
        :pad AS ad,
        T3.AC AS AC1,
        NULL AS AC2,
        F_Acp23.Name AS ACN1,
        NULL AS ACN2,
        M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,
        N1,N2,N3,N4,N5,N6,N7,N8,N9,N10,N11,N12,
        MT, NT
    FROM
    (
        SELECT 
            AC,
            SUM(CASE WHEN MT = 0 THEN ADb ELSE 0.00 END) AS MT,
            SUM(CASE WHEN MT = 0 THEN ACr ELSE 0.00 END) AS NT,

            SUM(CASE WHEN MT = 1 THEN ADb ELSE 0.00 END) AS M1,
            SUM(CASE WHEN MT = 2 THEN ADb ELSE 0.00 END) AS M2,
            SUM(CASE WHEN MT = 3 THEN ADb ELSE 0.00 END) AS M3,
            SUM(CASE WHEN MT = 4 THEN ADb ELSE 0.00 END) AS M4,
            SUM(CASE WHEN MT = 5 THEN ADb ELSE 0.00 END) AS M5,
            SUM(CASE WHEN MT = 6 THEN ADb ELSE 0.00 END) AS M6,
            SUM(CASE WHEN MT = 7 THEN ADb ELSE 0.00 END) AS M7,
            SUM(CASE WHEN MT = 8 THEN ADb ELSE 0.00 END) AS M8,
            SUM(CASE WHEN MT = 9 THEN ADb ELSE 0.00 END) AS M9,
            SUM(CASE WHEN MT = 10 THEN ADb ELSE 0.00 END) AS M10,
            SUM(CASE WHEN MT = 11 THEN ADb ELSE 0.00 END) AS M11,
            SUM(CASE WHEN MT = 12 THEN ADb ELSE 0.00 END) AS M12,

            SUM(CASE WHEN MT = 1 THEN ACr ELSE 0.00 END) AS N1,
            SUM(CASE WHEN MT = 2 THEN ACr ELSE 0.00 END) AS N2,
            SUM(CASE WHEN MT = 3 THEN ACr ELSE 0.00 END) AS N3,
            SUM(CASE WHEN MT = 4 THEN ACr ELSE 0.00 END) AS N4,
            SUM(CASE WHEN MT = 5 THEN ACr ELSE 0.00 END) AS N5,
            SUM(CASE WHEN MT = 6 THEN ACr ELSE 0.00 END) AS N6,
            SUM(CASE WHEN MT = 7 THEN ACr ELSE 0.00 END) AS N7,
            SUM(CASE WHEN MT = 8 THEN ACr ELSE 0.00 END) AS N8,
            SUM(CASE WHEN MT = 9 THEN ACr ELSE 0.00 END) AS N9,
            SUM(CASE WHEN MT = 10 THEN ACr ELSE 0.00 END) AS N10,
            SUM(CASE WHEN MT = 11 THEN ACr ELSE 0.00 END) AS N11,
            SUM(CASE WHEN MT = 12 THEN ACr ELSE 0.00 END) AS N12

        FROM
        (
            SELECT AC, MT, SUM(SDb) AS ADb, SUM(SCr) AS ACr
            FROM
            (
                SELECT 
                    F_OPS.AC13 AS AC,
                    CASE
                        WHEN F_OPSd.Dete < :sdt THEN 0
                        ELSE EXTRACT(MONTH FROM F_OPSd.Dete) END AS MT,
                    F_OPS.Summ AS SDb,
                    0.00 AS SCr

                FROM 
                    F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                    INNER JOIN F_Acp23 ON F_OPS.AC13 = F_Acp23.idx

                WHERE 
                    F_OPSd.Dete <= :edt AND
                    F_OPS.AC13 IN ('KA','BA','CN')

                UNION ALL

                SELECT 
                    F_OPS.AC23 AS AC,
                    CASE
                        WHEN F_OPSd.Dete < :sdt THEN 0
                        ELSE EXTRACT(MONTH FROM F_OPSd.Dete) END AS MT,
                    0.00 AS SDb,
                    F_OPS.Summ AS SCr

                FROM 
                    F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                    INNER JOIN F_Acp23 ON F_OPS.AC23 = F_Acp23.idx

                WHERE 
                    F_OPSd.Dete <= :edt AND
                    F_OPS.AC23 IN ('KA','BA','CN')

                UNION ALL

                    SELECT
                        F_AcP21.id1 AS AC,
                        0 AS MT,
                        coalesce(F_Bal0.SummD, 0.00) AS SDb,
                        coalesce(F_Bal0.SummC, 0.00) AS SCr
                    FROM 
                        F_Bal0 JOIN F_AcP21 ON F_Bal0.AC11 = F_AcP21.AC
                    WHERE
                        F_AcP21.id1 IN ('KA','BA','CN')

            ) AS T1

            GROUP BY T1.AC, T1.MT

        ) AS T2

        GROUP BY T2.AC
    ) AS T3

    INNER JOIN F_Acp23 ON F_Acp23.idx = T3.AC

    ORDER BY AC1


    into
        :id, :spid, :ad, :ac1, :ac2, :acn1, :acn2,
        :m1, :m2, :m3, :m4, :m5, :m6, :m7, :m8, :m9, :m10, :m11, :m12,
        :n1, :n2, :n3, :n4, :n5, :n6, :n7, :n8, :n9, :n10, :n11, :n12,
        :mt, :nt
    do
    begin
     suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_NPMT_44 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID TYPE OF COLUMN F_TREPMT.ID,
    SPID TYPE OF COLUMN F_TREPMT.SPID,
    AD TYPE OF COLUMN F_TREPMT.AD,
    AC1 TYPE OF COLUMN F_TREPMT.AC1,
    AC2 TYPE OF COLUMN F_TREPMT.AC2,
    ACN1 TYPE OF COLUMN F_TREPMT.ACN1,
    ACN2 TYPE OF COLUMN F_TREPMT.ACN2,
    M1 TYPE OF COLUMN F_TREPMT.M1,
    M2 TYPE OF COLUMN F_TREPMT.M2,
    M3 TYPE OF COLUMN F_TREPMT.M3,
    M4 TYPE OF COLUMN F_TREPMT.M4,
    M5 TYPE OF COLUMN F_TREPMT.M5,
    M6 TYPE OF COLUMN F_TREPMT.M6,
    M7 TYPE OF COLUMN F_TREPMT.M7,
    M8 TYPE OF COLUMN F_TREPMT.M8,
    M9 TYPE OF COLUMN F_TREPMT.M9,
    M10 TYPE OF COLUMN F_TREPMT.M10,
    M11 TYPE OF COLUMN F_TREPMT.M11,
    M12 TYPE OF COLUMN F_TREPMT.M12,
    N1 TYPE OF COLUMN F_TREPMT.N1,
    N2 TYPE OF COLUMN F_TREPMT.N2,
    N3 TYPE OF COLUMN F_TREPMT.N3,
    N4 TYPE OF COLUMN F_TREPMT.N4,
    N5 TYPE OF COLUMN F_TREPMT.N5,
    N6 TYPE OF COLUMN F_TREPMT.N6,
    N7 TYPE OF COLUMN F_TREPMT.N7,
    N8 TYPE OF COLUMN F_TREPMT.N8,
    N9 TYPE OF COLUMN F_TREPMT.N9,
    N10 TYPE OF COLUMN F_TREPMT.N10,
    N11 TYPE OF COLUMN F_TREPMT.N11,
    N12 TYPE OF COLUMN F_TREPMT.N12,
    MT TYPE OF COLUMN F_TREPMT.MT,
    NT TYPE OF COLUMN F_TREPMT.NT)
AS
begin
    DELETE 
    FROM F_TRepMT
    WHERE F_TRepMT.spid = current_connection;
    
    INSERT INTO F_TRepMT(
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt)
    SELECT
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    FROM sp_f_rep_npmt_43(:sdt, :edt, 'A');

    INSERT INTO F_TRepMT(
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt)
    SELECT
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    FROM sp_f_rep_npmt_42(:sdt, :edt, 'B');
    
    INSERT INTO F_TRepMT(
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt)
    SELECT
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    FROM sp_f_rep_npmt_41(:sdt, :edt, 'C');

    INSERT INTO F_TRepMT(
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt)
    SELECT
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    FROM sp_f_rep_npmt_43(:sdt, :edt, 'D');

    FOR SELECT *
    FROM F_TRepMT
    WHERE F_TRepMT.spid = current_connection

    into
        :id, :spid, :ad, :ac1, :ac2, :acn1, :acn2,
        :m1, :m2, :m3, :m4, :m5, :m6, :m7, :m8, :m9, :m10, :m11, :m12,
        :n1, :n2, :n3, :n4, :n5, :n6, :n7, :n8, :n9, :n10, :n11, :n12,
        :mt, :nt
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_PERS_11 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN F_ROPS2A.ID,
    SPID TYPE OF COLUMN F_ROPS2A.SPID,
    AC TYPE OF COLUMN F_ROPS2A.AC,
    RAC TYPE OF COLUMN F_ROPS2A.RAC,
    NAME TYPE OF COLUMN F_ROPS2A.NAME,
    B0 TYPE OF COLUMN F_ROPS2A.B0,
    SDB TYPE OF COLUMN F_ROPS2A.SDB,
    SCR TYPE OF COLUMN F_ROPS2A.SCR,
    TDB TYPE OF COLUMN F_ROPS2A.TDB,
    TCR TYPE OF COLUMN F_ROPS2A.TCR,
    CLID TYPE OF COLUMN F_ROPS2A.CLID,
    NAME1 TYPE OF COLUMN F_ROPS2A.NAME1,
    REGNR TYPE OF COLUMN F_ROPS2A.REGNR,
    RNAME TYPE OF COLUMN F_ROPS2A.RNAME)
AS
begin
-- apgrozijums pēc 1.paz. un clid
    FOR SELECT
        gen_id(GEN_F_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        T2.AC AS AC,
        null as RAC,
        F_AcP21.Name AS Name,
        T2.ADb - T2.ACr as b0,
        T2.ADb AS SDb,
        T2.ACr AS SCr,
        T2.BDb AS TDb,
        T2.BCr AS TCr,
        T2.ClId AS Clid,
        F_Persons.Name AS Name1,
        F_Persons.regnr as regnr,
        null as rname
    FROM
    (
        SELECT AC, ClId, SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                F_OPS.AC11 AS AC,
                F_OPSd.ClId AS ClId,
                CASE
                    WHEN F_OPSd.Dete < :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END AS SDb,
                0.00 AS SCr,
                CASE
                    WHEN F_OPSd.Dete >= :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END AS TDb,
                0.00 AS TCr

            FROM 
                F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                INNER JOIN F_AcP21 ON F_OPS.AC11 = F_AcP21.AC
            WHERE 
                F_OPSd.Dete <= :edt AND 
                F_OPS.AC11 LIKE :pac AND
                F_AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR F_OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                F_OPS.AC21 AS AC,
                F_OPSd.ClId AS ClId,
                0.00 AS SDb,
                CASE
                    WHEN F_OPSd.Dete < :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END AS SCr,
                0.00 AS TDb,
                CASE
                    WHEN F_OPSd.Dete >= :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END AS TCr

            FROM 
                F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                INNER JOIN F_AcP21 ON F_OPS.AC21 = F_AcP21.AC
            WHERE 
                F_OPSd.Dete <= :edt AND 
                F_OPS.AC21 LIKE :pac AND
                F_AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR F_OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                F_Bal0.AC11 AS AC,
                F_Bal0.ClId AS ClId,
                F_Bal0.SummD AS SDb,
                F_Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr
            FROM 
                F_Bal0 INNER JOIN F_AcP21 ON F_Bal0.AC11 = F_AcP21.AC
            WHERE 
                F_Bal0.AC11 LIKE :pac AND
                F_AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR F_Bal0.ClId = :pclid)

        ) AS T1

        GROUP BY T1.AC, T1.Clid
    ) AS T2    

    INNER JOIN F_AcP21 ON F_AcP21.AC = T2.AC
    INNER JOIN F_Persons ON F_Persons.ClId = T2.Clid
    
    WHERE (ADb - ACr) <> 0.00 OR BDb <> 0.00 OR BCr <> 0.00
    ORDER BY AC, Clid

    into
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname
    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_F_REP_PERS_12 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN F_ROPS2A.ID,
    SPID TYPE OF COLUMN F_ROPS2A.SPID,
    AC TYPE OF COLUMN F_ROPS2A.AC,
    RAC TYPE OF COLUMN F_ROPS2A.RAC,
    NAME TYPE OF COLUMN F_ROPS2A.NAME,
    B0 TYPE OF COLUMN F_ROPS2A.B0,
    SDB TYPE OF COLUMN F_ROPS2A.SDB,
    SCR TYPE OF COLUMN F_ROPS2A.SCR,
    TDB TYPE OF COLUMN F_ROPS2A.TDB,
    TCR TYPE OF COLUMN F_ROPS2A.TCR,
    CLID TYPE OF COLUMN F_ROPS2A.CLID,
    NAME1 TYPE OF COLUMN F_ROPS2A.NAME1,
    REGNR TYPE OF COLUMN F_ROPS2A.REGNR,
    RNAME TYPE OF COLUMN F_ROPS2A.RNAME)
AS
begin
-- apgrozijums pēc clid
    FOR SELECT
        gen_id(GEN_F_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        null AS AC,
        null as RAC,
        null AS Name,
        T2.ADb - T2.ACr as b0,
        T2.ADb AS SDb,
        T2.ACr AS SCr,
        T2.BDb AS TDb,
        T2.BCr AS TCr,
        T2.ClId AS Clid,
        F_Persons.Name AS Name1,
        F_Persons.regnr as regnr,
        null as rname
    FROM
    (
        SELECT ClId, SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                F_OPSd.ClId AS ClId,
                CASE
                    WHEN F_OPSd.Dete < :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END AS SDb,
                0.00 AS SCr,
                CASE
                    WHEN F_OPSd.Dete >= :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END AS TDb,
                0.00 AS TCr

            FROM 
                F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                INNER JOIN F_AcP21 ON F_OPS.AC11 = F_AcP21.AC
            WHERE 
                F_OPSd.Dete <= :edt AND 
                F_OPS.AC11 LIKE :pac AND
                F_AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR F_OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                F_OPSd.ClId AS ClId,
                0.00 AS SDb,
                CASE
                    WHEN F_OPSd.Dete < :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END AS SCr,
                0.00 AS TDb,
                CASE
                    WHEN F_OPSd.Dete >= :sdt THEN F_OPS.Summ
                    ELSE 0.00
                END AS TCr

            FROM 
                F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                INNER JOIN F_AcP21 ON F_OPS.AC21 = F_AcP21.AC
            WHERE 
                F_OPSd.Dete <= :edt AND 
                F_OPS.AC21 LIKE :pac AND
                F_AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR F_OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                F_Bal0.ClId AS ClId,
                F_Bal0.SummD AS SDb,
                F_Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr
            FROM 
                F_Bal0 INNER JOIN F_AcP21 ON F_Bal0.AC11 = F_AcP21.AC
            WHERE 
                F_Bal0.AC11 LIKE :pac AND
                F_AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR F_Bal0.ClId = :pclid)

        ) AS T1

        GROUP BY T1.Clid
    ) AS T2    

    INNER JOIN F_Persons ON F_Persons.ClId = T2.Clid
    
    WHERE (ADb - ACr) <> 0.00 OR BDb <> 0.00 OR BCr <> 0.00
    ORDER BY Clid

    into
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname
    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_F_REP_PERS_13 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN F_TREPA1.ID,
    SPID TYPE OF COLUMN F_TREPA1.SPID,
    I1 TYPE OF COLUMN F_TREPA1.I1,
    NM TYPE OF COLUMN F_TREPA1.NM,
    DT TYPE OF COLUMN F_TREPA1.DT,
    ST TYPE OF COLUMN F_TREPA1.ST,
    NR TYPE OF COLUMN F_TREPA1.NR,
    S1 TYPE OF COLUMN F_TREPA1.S1,
    S2 TYPE OF COLUMN F_TREPA1.S2,
    S3 TYPE OF COLUMN F_TREPA1.S3,
    S4 TYPE OF COLUMN F_TREPA1.S4)
AS
begin
-- neapmaksātās pavadzīmess, kas izrakstītas pēc :sdt,
--        vai kur ir bijusi kustība pēc :edt
    FOR SELECT
        gen_id(GEN_F_TREPA1_ID, 1) as ID,
        current_connection as SPID,
        T2.ClId AS i1,
        F_Persons.Name AS nm,
        T2.dt AS dt,
        T2.DocSt AS st,
        T2.DocNr AS nr,
        T2.BDb AS s1,
        T2.BCr AS s2,
        0.0 AS s3, 
        0.0 AS s4
    FROM
    (
        SELECT ClId, COALESCE(MAX(dtx), MIN(dt)) AS dt, DocSt, DocNr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                F_OPSd.ClId AS ClId,
                F_OPSd.Dete AS dt,
                F_OPSd.DocSt AS DocSt,
                F_OPSd.DocNr AS DocNr,
                F_OPS.Summ AS TDb,
                0.00 AS TCr,
                iif(:pac starting '2', F_OPSd.Dete, null) as dtx

            FROM 
                F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                INNER JOIN F_AcP21 ON F_OPS.AC11 = F_AcP21.AC
            WHERE 
                F_OPS.AC11 LIKE :pac AND
                F_AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR F_OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                F_OPSd.ClId AS ClId,
                F_OPSd.Dete AS dt,
                F_OPSd.DocSt AS DocSt,
                F_OPSd.DocNr AS DocNr,
                0.00 AS TDb,
                F_OPS.Summ AS TCr,
                iif(:pac starting '5', F_OPSd.Dete, null) as dtx

            FROM 
                F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                INNER JOIN F_AcP21 ON F_OPS.AC21 = F_AcP21.AC
            WHERE 
                F_OPS.AC21 LIKE :pac AND
                F_AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR F_OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                F_DOCS0.ClId AS ClId,
                F_DOCS0.Dete AS dt,
                F_DOCS0.DocSt AS DocSt,
                F_DOCS0.DocNr AS DocNr,
                F_DOCS0.Summ AS TDb,
                0.00 AS TCr,
                iif(:pac starting '2', F_DOCS0.Dete, null) as dtx

            FROM 
                F_DOCS0
                INNER JOIN F_AcP21 ON F_DOCS0.AC = F_AcP21.AC
            WHERE 
                F_DOCS0.Summ > 0.0 AND
                F_DOCS0.AC LIKE :pac AND
                F_AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR F_DOCS0.ClId = :pclid)

            UNION ALL

            SELECT 
                F_DOCS0.ClId AS ClId,
                F_DOCS0.Dete AS dt,
                F_DOCS0.DocSt AS DocSt,
                F_DOCS0.DocNr AS DocNr,
                0.00 AS TDb,
                -F_DOCS0.Summ AS TcR,
                iif(:pac starting '5', F_DOCS0.Dete, null) as dtx

            FROM 
                F_DOCS0
                INNER JOIN F_AcP21 ON F_DOCS0.AC = F_AcP21.AC
            WHERE 
                F_DOCS0.Summ < 0.0 AND
                F_DOCS0.AC LIKE :pac AND
                F_AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR F_DOCS0.ClId = :pclid)

        ) AS T1

        GROUP BY T1.ClId, T1.DocSt, T1.DocNr
        HAVING MIN(T1.dt) >= :sdt OR MAX(T1.dt) >= :edt

    ) AS T2    
    
    INNER JOIN F_Persons ON F_Persons.ClId = T2.Clid
    
    WHERE BDb <> BCr
    ORDER BY i1, dt, nr

    into
        :id, :spid, :i1, :nm, :dt, :st, :nr,
        :s1, :s2, :s3, :s4
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_PERS_14 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN F_TREPA1.ID,
    SPID TYPE OF COLUMN F_TREPA1.SPID,
    I1 TYPE OF COLUMN F_TREPA1.I1,
    NM TYPE OF COLUMN F_TREPA1.NM,
    DT TYPE OF COLUMN F_TREPA1.DT,
    ST TYPE OF COLUMN F_TREPA1.ST,
    NR TYPE OF COLUMN F_TREPA1.NR,
    S1 TYPE OF COLUMN F_TREPA1.S1,
    S2 TYPE OF COLUMN F_TREPA1.S2,
    S3 TYPE OF COLUMN F_TREPA1.S3,
    S4 TYPE OF COLUMN F_TREPA1.S4)
AS
begin
-- pavadzīmes
    FOR SELECT
        gen_id(GEN_F_TREPA1_ID, 1) as ID,
        current_connection as SPID,
        T2.ClId AS i1,
        F_Persons.Name AS nm,
        T2.dt AS dt,
        T2.DocSt AS st,
        T2.DocNr AS nr,
        T2.BDb AS s1,
        T2.BCr AS s2,
        0.0 AS s3,
        0.0 AS s4
    FROM
    (
        SELECT ClId, COALESCE(MAX(dtx), MIN(dt)) as dt, DocSt, DocNr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                F_OPSd.ClId AS ClId,
                F_OPSd.Dete AS dt,
                F_OPSd.DocSt AS DocSt,
                F_OPSd.DocNr AS DocNr,
                F_OPS.Summ AS TDb,
                0.00 AS TCr,
                iif(:pac starting '2', F_OPSd.Dete, null) as dtx

            FROM 
                F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                INNER JOIN F_AcP21 ON F_OPS.AC11 = F_AcP21.AC
            WHERE 
                F_OPSd.Dete BETWEEN :sdt AND :edt AND 
                F_OPS.AC11 LIKE :pac AND
                F_AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR F_OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                F_OPSd.ClId AS ClId,
                F_OPSd.Dete AS dt,
                F_OPSd.DocSt AS DocSt,
                F_OPSd.DocNr AS DocNr,
                0.00 AS TDb,
                F_OPS.Summ AS TCr,
                iif(:pac starting '5', F_OPSd.Dete, null) as dtx

            FROM 
                F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                INNER JOIN F_AcP21 ON F_OPS.AC21 = F_AcP21.AC
            WHERE 
                F_OPSd.Dete BETWEEN :sdt AND :edt AND 
                F_OPS.AC21 LIKE :pac AND
                F_AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR F_OPSd.ClId = :pclid)

        ) AS T1

        GROUP BY T1.ClId, T1.DocSt, T1.DocNr

    ) AS T2    
    
    INNER JOIN F_Persons ON F_Persons.ClId = T2.Clid
    
    WHERE BDb <> 0.00 OR BCr <> 0.00
    ORDER BY i1, dt, nr


    into
        :id, :spid, :i1, :nm, :dt, :st, :nr,
        :s1, :s2, :s3, :s4
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_PERS_15 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN F_TREPA1.ID,
    SPID TYPE OF COLUMN F_TREPA1.SPID,
    I1 TYPE OF COLUMN F_TREPA1.I1,
    NM TYPE OF COLUMN F_TREPA1.NM,
    DT TYPE OF COLUMN F_TREPA1.DT,
    ST TYPE OF COLUMN F_TREPA1.ST,
    NR TYPE OF COLUMN F_TREPA1.NR,
    S1 TYPE OF COLUMN F_TREPA1.S1,
    S2 TYPE OF COLUMN F_TREPA1.S2,
    S3 TYPE OF COLUMN F_TREPA1.S3,
    S4 TYPE OF COLUMN F_TREPA1.S4)
AS
begin
-- pavadzīmes
    FOR SELECT
        gen_id(GEN_F_TREPA1_ID, 1) as ID,
        current_connection as SPID,
        T2.ClId AS i1,
        F_Persons.Name AS nm,
        T2.dt AS dt,
        T2.DocSt AS st,
        T2.DocNr AS nr,
        T2.BDb AS s1,
        T2.BCr AS s2,
        0.0 AS s3, 
        0.0 AS s4
    FROM
    (
        SELECT ClId, dt, DocSt, DocNr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                F_OPSd.ClId AS ClId,
                F_OPSd.Dete AS dt,
                F_OPSd.DocSt AS DocSt,
                F_OPSd.DocNr AS DocNr,
                F_OPS.Summ AS TDb,
                0.00 AS TCr

            FROM 
                F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                INNER JOIN F_AcP21 ON F_OPS.AC11 = F_AcP21.AC
            WHERE 
                F_OPSd.Dete BETWEEN :sdt AND :edt AND 
                F_OPS.AC11 LIKE :pac AND
                F_AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR F_OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                F_OPSd.ClId AS ClId,
                F_OPSd.Dete AS dt,
                F_OPSd.DocSt AS DocSt,
                F_OPSd.DocNr AS DocNr,
                0.00 AS TDb,
                F_OPS.Summ AS TCr

            FROM 
                F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                INNER JOIN F_AcP21 ON F_OPS.AC21 = F_AcP21.AC
            WHERE 
                F_OPSd.Dete BETWEEN :sdt AND :edt AND 
                F_OPS.AC21 LIKE :pac AND
                F_AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR F_OPSd.ClId = :pclid)

        ) AS T1

        GROUP BY T1.ClId, T1.dt, T1.DocSt, T1.DocNr

    ) AS T2    
    
    INNER JOIN F_Persons ON F_Persons.ClId = T2.Clid
    
    WHERE BDb <> 0.00 OR BCr <> 0.00
    ORDER BY i1, dt, nr

    into
        :id, :spid, :i1, :nm, :dt, :st, :nr,
        :s1, :s2, :s3, :s4
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_PERS_16 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN F_TREPA1.ID,
    SPID TYPE OF COLUMN F_TREPA1.SPID,
    I1 TYPE OF COLUMN F_TREPA1.I1,
    NM TYPE OF COLUMN F_TREPA1.NM,
    DT TYPE OF COLUMN F_TREPA1.DT,
    ST TYPE OF COLUMN F_TREPA1.ST,
    NR TYPE OF COLUMN F_TREPA1.NR,
    S1 TYPE OF COLUMN F_TREPA1.S1,
    S2 TYPE OF COLUMN F_TREPA1.S2,
    S3 TYPE OF COLUMN F_TREPA1.S3,
    S4 TYPE OF COLUMN F_TREPA1.S4)
AS
begin
-- neapmaksātās pavadzīmess no :sdt līdz :edt

    FOR SELECT
        gen_id(GEN_F_TREPA1_ID, 1) as ID,
        current_connection as SPID,
        T2.ClId AS i1,
        F_Persons.Name AS nm,
        T2.dt AS dt,
        T2.DocSt AS st,
        T2.DocNr AS nr,
        T2.BDb AS s1,
        T2.BCr AS s2,
        0.0 AS s3, 
        0.0 AS s4
    FROM
    (
        SELECT ClId, COALESCE(MAX(dtx), MIN(dt)) AS dt, DocSt, DocNr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                F_OPSd.ClId AS ClId,
                F_OPSd.Dete AS dt,
                F_OPSd.DocSt AS DocSt,
                F_OPSd.DocNr AS DocNr,
                F_OPS.Summ AS TDb,
                0.00 AS TCr,
                iif(:pac starting '2', F_OPSd.Dete, null) as dtx

            FROM 
                F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                INNER JOIN F_AcP21 ON F_OPS.AC11 = F_AcP21.AC
            WHERE 
                F_OPSD.dete BETWEEN :SDT AND :EDT AND
                F_OPS.AC11 LIKE :pac AND
                F_AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR F_OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                F_OPSd.ClId AS ClId,
                F_OPSd.Dete AS dt,
                F_OPSd.DocSt AS DocSt,
                F_OPSd.DocNr AS DocNr,
                0.00 AS TDb,
                F_OPS.Summ AS TCr,
                iif(:pac starting '5', F_OPSd.Dete, null) as dtx

            FROM 
                F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                INNER JOIN F_AcP21 ON F_OPS.AC21 = F_AcP21.AC
            WHERE 
                F_OPSD.dete BETWEEN :SDT AND :EDT AND
                F_OPS.AC21 LIKE :pac AND
                F_AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR F_OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                F_DOCS0.ClId AS ClId,
                F_DOCS0.Dete AS dt,
                F_DOCS0.DocSt AS DocSt,
                F_DOCS0.DocNr AS DocNr,
                F_DOCS0.Summ AS TDb,
                0.00 AS TCr,
                iif(:pac starting '2', F_DOCS0.Dete, null) as dtx

            FROM 
                F_DOCS0
                INNER JOIN F_AcP21 ON F_DOCS0.AC = F_AcP21.AC
            WHERE 
                F_DOCS0.Summ > 0.0 AND
                F_DOCS0.AC LIKE :pac AND
                F_AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR F_DOCS0.ClId = :pclid)

            UNION ALL

            SELECT 
                F_DOCS0.ClId AS ClId,
                F_DOCS0.Dete AS dt,
                F_DOCS0.DocSt AS DocSt,
                F_DOCS0.DocNr AS DocNr,
                0.00 AS TDb,
                -F_DOCS0.Summ AS TcR,
                iif(:pac starting '5', F_DOCS0.Dete, null) as dtx

            FROM 
                F_DOCS0
                INNER JOIN F_AcP21 ON F_DOCS0.AC = F_AcP21.AC
            WHERE 
                F_DOCS0.Summ < 0.0 AND
                F_DOCS0.AC LIKE :pac AND
                F_AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR F_DOCS0.ClId = :pclid)

        ) AS T1

        GROUP BY T1.ClId, T1.DocSt, T1.DocNr

    ) AS T2    
    
    INNER JOIN F_Persons ON F_Persons.ClId = T2.Clid
    
    WHERE BDb <> BCr
    ORDER BY i1, dt, nr

    into
        :id, :spid, :i1, :nm, :dt, :st, :nr,
        :s1, :s2, :s3, :s4
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_PVN_10 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID TYPE OF COLUMN F_ROPS2A.ID,
    SPID TYPE OF COLUMN F_ROPS2A.SPID,
    AC TYPE OF COLUMN F_ROPS2A.AC,
    RAC TYPE OF COLUMN F_ROPS2A.RAC,
    NAME TYPE OF COLUMN F_ROPS2A.NAME,
    B0 TYPE OF COLUMN F_ROPS2A.B0,
    SDB TYPE OF COLUMN F_ROPS2A.SDB,
    SCR TYPE OF COLUMN F_ROPS2A.SCR,
    TDB TYPE OF COLUMN F_ROPS2A.TDB,
    TCR TYPE OF COLUMN F_ROPS2A.TCR,
    CLID TYPE OF COLUMN F_ROPS2A.CLID,
    NAME1 TYPE OF COLUMN F_ROPS2A.NAME1,
    REGNR TYPE OF COLUMN F_ROPS2A.REGNR,
    RNAME TYPE OF COLUMN F_ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_F_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        T2.AC AS AC,
        null as RAC,
        F_AcP25.Name AS Name,
        0.0 as b0,
        0.0 AS SDb,
        0.0 AS SCr,
        T2.BDb AS TDb,
        T2.BCr AS TCr,
        null AS Clid,
        null AS Name1,
        null as regnr,
        null as rname
    FROM
    (
        SELECT AC, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                F_OPS.AC15 AS AC,
                F_OPS.Summ AS TDb,
                0.00 AS TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE F_OPSd.Dete BETWEEN :sdt AND :edt AND F_OPS.AC15 IS NOT NULL

            UNION ALL

            SELECT 
                F_OPS.AC25 AS AC,
                0.00 AS TDb,
                F_OPS.Summ AS TCr

            FROM F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
            WHERE F_OPSd.Dete BETWEEN :sdt AND :edt AND F_OPS.AC25 IS NOT NULL
        
        ) AS T1
        GROUP BY T1.AC

    ) AS T2    
    LEFT JOIN F_Acp25 ON F_Acp25.idx = T2.AC
    
    ORDER BY AC

    into
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname
    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_F_REP_PVN_21 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    DID TYPE OF COLUMN F_TTEMP_PVN1.DID,
    CLID TYPE OF COLUMN F_TTEMP_PVN1.CLID,
    DOCTYP1 TYPE OF COLUMN F_TTEMP_PVN1.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN F_TTEMP_PVN1.DOCTYP2,
    DOCTYPC TYPE OF COLUMN F_TTEMP_PVN1.DOCTYPC,
    RAC5 TYPE OF COLUMN F_TTEMP_PVN1.RAC5,
    SUMM TYPE OF COLUMN F_TTEMP_PVN1.SUMM,
    PVN TYPE OF COLUMN F_TTEMP_PVN1.PVN,
    SUMMC TYPE OF COLUMN F_TTEMP_PVN1.SUMMC,
    CUR TYPE OF COLUMN F_TTEMP_PVN1.CUR)
AS
begin
-- PVN piel 1.1 - izdevumiem
    FOR SELECT
        did,
        clid,
        null AS doctyp1,
        doctyp2,
        doctypc,
        rac5,
        summ,
        pvn,
        0.0 AS summc,
        null AS cur
    FROM
    (
        SELECT 
            T2.did,
            T2.ClId,
            T2.DocTyp2,
            T2.DocTypC,
            T2.RAC5,
            CASE
                WHEN t2.PVND <> 0.00
                THEN t2.SummD
                ELSE -t2.SummC
                END AS Summ,
            CASE
                WHEN t2.PVND <> 0.00
                THEN t2.PVND
                ELSE -t2.PVNC
                END AS PVN
        FROM
        (
            SELECT 
                T1.did,
                MAX(T1.ClId) AS ClId,
                T1.DocTyp2 AS DocTyp2,
                T1.DocTypC AS DocTypC,
                MAX(T1.RAC5) AS RAC5,
                SUM(T1.SummD) AS SummD,
                SUM(T1.PVND) AS PVND,
                SUM(T1.SummC) AS SummC,
                SUM(T1.PVNC) AS PVNC
            FROM
            (
                SELECT 
                    F_OPSd.id AS did, 
                    F_OPSd.ClId AS ClId,
                    F_AcPVN.pz1 AS DocTyp2,
                    F_AcPVN.pz4 AS DocTypC,
                    F_OPS.AC15 AS RAC5,
                    0.00 AS SummD,
                    F_OPS.Summ AS PVND,
                    0.00 AS SummC,
                    0.00 AS PVNC
                FROM
                    F_OPSd INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                    INNER JOIN F_AcPVN ON F_OPS.AC15 = F_AcPVN.id
                WHERE
                    (F_OPSd.Dete BETWEEN :psd AND :ped) AND
                    F_AcPVN.pz3 IN ('4','5')


                UNION ALL


                SELECT 
                    F_OPSd.id AS did, 
                    F_OPSd.ClId AS ClId,
                    F_AcPVN.pz1 AS DocTyp2,
                    F_AcPVN.pz4 AS DocTypC,
                    F_OPS.AC15 AS RAC5,
                    F_OPS.Summ AS SummD,
                    0.00 AS PVND,
                    0.00 AS SummC,
                    0.00 AS PVNC
                FROM
                    F_OPSd INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                    LEFT JOIN F_AcPVN ON F_OPS.AC15 = F_AcPVN.id
                WHERE
                    (F_OPSd.Dete BETWEEN :psd AND :ped) AND
                     F_AcPVN.pz3 IN ('8')


                UNION ALL


                SELECT
                    T1A.did AS did,
                    MAX(T1A.ClId) AS ClId,
                    MAX(T1A.DocTyp2) AS DocTyp2,
                    MAX(T1A.DocTypC) AS DocTypC,
                    MAX(T1A.RAC5) AS RAC5,
                    SUM(T1B.Summ) AS SummD,
                    0.00 AS PVND,
                    0.00 AS SummC,
                    0.00 AS PVNC
                FROM
                    (SELECT
                        F_OPSd.id AS did, 
                        MAX(F_OPSd.ClId) AS ClId,
                        MAX(F_AcPVN.pz1) AS DocTyp2,
                        MAX(F_AcPVN.pz4) AS DocTypC,
                        MAX(F_OPS.AC15) AS RAC5
                    FROM
                        F_OPSd INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                        INNER JOIN F_AcPVN ON F_OPS.AC15 = F_AcPVN.id
                    WHERE
                        (F_OPSd.Dete BETWEEN :psd AND :ped) AND
                        F_AcPVN.pz3 IN ('4')
                    GROUP BY F_OPSd.id
                    ) AS T1A
                    INNER JOIN F_OPS AS T1B ON T1A.did = T1B.DocId
                WHERE
                    T1B.AC15 IS NULL
                GROUP BY T1A.did

            
                UNION ALL


                -- ATGRIEZTĀ PRECE
                SELECT 
                    F_OPSd.id AS did, 
                    F_OPSd.ClId AS ClId,
                    F_AcPVN.pz1 AS DocTyp2,
                    F_AcPVN.pz4 AS DocTypC,
                    F_OPS.AC25 AS RAC5,
                    0.00 AS SummD,
                    0.00 AS PVND,
                    0.00 AS SummC,
                    F_OPS.Summ AS PVNC
                FROM
                    F_OPSd INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                    INNER JOIN F_AcPVN ON F_OPS.AC25 = F_AcPVN.id
                WHERE
                    (F_OPSd.Dete BETWEEN :psd AND :ped) AND
                    F_AcPVN.pz3 IN ('4','5')

                UNION ALL

                SELECT 
                    F_OPSd.id AS did, 
                    F_OPSd.ClId AS ClId,
                    F_AcPVN.pz1 AS DocTyp2,
                    F_AcPVN.pz4 AS DocTypC,
                    F_OPS.AC25 AS RAC5,
                    0.00 AS SummD,
                    0.00 AS PVND,
                    F_OPS.Summ AS SummC,
                    0.00 AS PVNC
                FROM
                    F_OPSd INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                    LEFT JOIN F_AcPVN ON F_OPS.AC25 = F_AcPVN.id
                WHERE
                    (F_OPSd.Dete BETWEEN :psd AND :ped) AND
                     F_AcPVN.pz3 IN ('8')


                UNION ALL


                SELECT
                    T1A.did AS did,
                    MAX(T1A.ClId) AS ClId,
                    MAX(T1A.DocTyp2) AS DocTyp2,
                    MAX(T1A.DocTypC) AS DocTypC,
                    MAX(T1A.RAC5) AS RAC5,
                    0.00 AS SummD,
                    0.00 AS PVND,
                    SUM(T1B.Summ) AS SummC,
                    0.00 AS PVNC
                FROM
                    (SELECT
                        F_OPSd.id AS did, 
                        MAX(F_OPSd.ClId) AS ClId,
                        MAX(F_AcPVN.pz1) AS DocTyp2,
                        MAX(F_AcPVN.pz4) AS DocTypC,
                        MAX(F_OPS.AC25) AS RAC5
                    FROM
                        F_OPSd INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                        INNER JOIN F_AcPVN ON F_OPS.AC25 = F_AcPVN.id
                    WHERE
                        (F_OPSd.Dete BETWEEN :psd AND :ped) AND
                        F_AcPVN.pz3 IN ('4')
                    GROUP BY F_OPSd.id
                    ) AS T1A
                    INNER JOIN F_OPS AS T1B ON T1A.did = T1B.DocId
                WHERE
                    T1B.AC25 IS NULL
                GROUP BY T1A.did


                UNION ALL
                --ATGRIEZTA PIEGADATA PRECE
                SELECT 
                    F_OPSd.id AS did, 
                    F_OPSd.ClId AS ClId,
                    'A' AS DocTyp2,
                    F_AcPVN.pz4 AS DocTypC,
                    F_OPS.AC15 AS RAC5,
                    0.00 AS SummD,
                    F_OPS.Summ AS PVND,
                    0.00 AS SummC,
                    0.00 AS PVNC
                FROM
                    F_OPSd INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                    INNER JOIN F_AcPVN ON F_OPS.AC15 = F_AcPVN.id
                WHERE
                    (F_OPSd.Dete BETWEEN :psd AND :ped) AND
                    F_AcPVN.pz3 IS NOT NULL AND 
                    F_AcPVN.pz3 IN ('2') AND
                    F_AcPVN.pz1 IS NOT NULL AND
                    F_AcPVN.pz1 IN ('41', '42')
    
                UNION ALL
    
                SELECT 
                    F_OPSd.id AS did, 
                    F_OPSd.ClId AS ClId,
                    'A' AS DocTyp2,
                    F_AcPVN.pz4 AS DocTypC,
                    F_OPS.AC15 AS RAC5,
                    F_OPS.Summ AS SummD,
                    0.00 AS PVND,
                    0.00 AS SummC,
                    0.00 AS PVNC
                FROM
                    F_OPSd INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                    LEFT JOIN F_AcPVN ON F_OPS.AC15 = F_AcPVN.id
                WHERE
                    F_OPSd.Dete BETWEEN :psd AND :ped AND
                    F_AcPVN.pz3 IS NOT NULL AND 
                    F_AcPVN.pz3 IN ('1') AND
                    F_AcPVN.pz1 IS NOT NULL AND
                    F_AcPVN.pz1 IN ('41', '42')


            ) AS T1
            GROUP BY T1.did, T1.DocTyp2, T1.DocTypC
        ) AS T2
    ) AS T3
        
    WHERE 
        T3.Summ <> 0.00 AND
        T3.DocTyp2 IS NOT NULL

    into
        :did, :clid, :doctyp1, :doctyp2, :doctypc,
        :rac5, :summ, :pvn, :summc, :cur
    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_F_REP_PVN_22 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    ID TYPE OF COLUMN F_ROPS1A.ID,
    SPID TYPE OF COLUMN F_ROPS1A.SPID,
    DID TYPE OF COLUMN F_ROPS1A.DID,
    DETE TYPE OF COLUMN F_ROPS1A.DETE,
    NRX TYPE OF COLUMN F_ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN F_ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN F_ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN F_ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN F_ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN F_ROPS1A.DOCNR,
    CLID TYPE OF COLUMN F_ROPS1A.CLID,
    CLID2 TYPE OF COLUMN F_ROPS1A.CLID2,
    NAME TYPE OF COLUMN F_ROPS1A.NAME,
    NAME2 TYPE OF COLUMN F_ROPS1A.NAME2,
    REGNR TYPE OF COLUMN F_ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN F_ROPS1A.REGNR2,
    B0 TYPE OF COLUMN F_ROPS1A.B0,
    DESCR TYPE OF COLUMN F_ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN F_ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN F_ROPS1A.AC1,
    AC2 TYPE OF COLUMN F_ROPS1A.AC2,
    SAC1 TYPE OF COLUMN F_ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN F_ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN F_ROPS1A.SUMMC,
    CUR TYPE OF COLUMN F_ROPS1A.CUR,
    SUMM TYPE OF COLUMN F_ROPS1A.SUMM,
    PVN TYPE OF COLUMN F_ROPS1A.PVN,
    RAC TYPE OF COLUMN F_ROPS1A.RAC,
    SDB TYPE OF COLUMN F_ROPS1A.SDB,
    SCR TYPE OF COLUMN F_ROPS1A.SCR,
    RAC2 TYPE OF COLUMN F_ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN F_ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN F_ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN F_ROPS1A.RAC5,
    QV TYPE OF COLUMN F_ROPS1A.QV,
    ZNR TYPE OF COLUMN F_ROPS1A.ZNR)
AS
begin
-- PVN piel 1.1 - izdevumiem
    
    DELETE FROM f_ttemp_pvn1 WHERE Did IS NOT NULL;

    INSERT INTO f_ttemp_pvn1(
        did, clid, doctyp1, doctyp2, doctypc,
        rac5, summ, pvn, summc, cur)
    SELECT
        did, clid, doctyp1, doctyp2, doctypc,
        rac5, summ, pvn, summc, cur
    FROM SP_F_REP_PVN_21(:PSD, :PED, :RG1, :RG2);


    UPDATE f_ttemp_pvn1
    SET f_ttemp_pvn1.summdoc =
        (
            SELECT SUM(ST2.summ)
            FROM
                F_OPSD AS DT1
                INNER JOIN F_OPSD AS DT2 ON
                    (DT1.id = f_ttemp_pvn1.did AND
                     DT1.DETE = DT2.DETE AND
                     DT1.CLID = DT2.CLID AND
                     DT1.DOCTYP = DT2.DOCTYP AND
                     DT1.DOCNR = DT2.DOCNR)
                INNER JOIN f_ttemp_pvn1 AS ST2 ON ST2.did = DT2.id
        )
    WHERE EXISTS(
            SELECT ID
            FROM F_OPSD AS DW1
            WHERE
                DW1.id = f_ttemp_pvn1.did AND
                DW1.CLID IS NOT NULL AND
                DW1.DOCTYP IS NOT NULL AND
                DW1.DOCNR IS NOT NULL);


    UPDATE f_ttemp_pvn1
    SET f_ttemp_pvn1.summdoc = f_ttemp_pvn1.summ
    WHERE NOT EXISTS(
            SELECT ID
            FROM F_OPSD AS DW1
            WHERE
                DW1.id = f_ttemp_pvn1.did AND
                DW1.CLID IS NOT NULL AND
                DW1.DOCTYP IS NOT NULL AND
                DW1.DOCNR IS NOT NULL);



    INSERT INTO f_ttemp_pvn2(clid)
    SELECT TT1.ClId
    FROM f_ttemp_pvn1 AS TT1
    WHERE 
        TT1.ClId IS NOT NULL AND
        ABS(TT1.SummDoc) < :rg1 AND
        TT1.DocTypC = 0
    GROUP BY TT1.ClId
    HAVING SUM(ABS(TT1.Summ)) < :rg1;


    FOR SELECT
        gen_id(GEN_F_ROPS1A_ID, 1) as ID,
        current_connection as SPID,
        T4.did,
        CASE
            WHEN F_OPSd.DT2 IS NULL
            THEN F_OPSd.Dete
            ELSE F_OPSd.DT2
            END AS Dete,
        null AS nrx,
        null AS DocTyp,
        F_DocTyp.pvnpaz AS DocTyp1,
        T4.DocTyp2 AS DocTyp2,
        F_OPSd.DocSt,
        F_OPSd.DocNr,
        F_OPSd.clid AS clid,
        null AS clid2,
        F_Persons.Name AS Name,
        null AS Name2,
        F_Persons.PVNRegNr AS RegNr,
        null AS RegNr2,
        0.0 AS b0,
        null AS descr,
        null AS descr2,
        null AS AC1,
        null AS AC2,
        null AS SAC1,
        null AS SAC2,
        0.0 AS SummC,
        'EUR' AS Cur,
        T4.Summ AS Summ,
        T4.PVN AS PVN,
        null AS RAC,
        0.0 AS SDb,
        0.0 AS SCr,
        null AS RAC2,
        null AS RAC3,
        null AS RAC4,
        null AS RAC5,
        0.0 AS QV,
        F_OPSd.znr AS ZNR

    FROM
    (
        SELECT
            T3.did,
            T3.ClId,
            T3.DocTyp2,
            SUM(T3.Summ) AS Summ,
            SUM(T3.PVN) AS PVN
        FROM
        (    
            SELECT
                -1 AS did,
                NULL AS ClId,
                'T' AS DocTyp2,
                T2.Summ AS Summ,
                T2.PVN AS PVN

            FROM F_TTEMP_PVN1 AS T2 LEFT JOIN F_TTEMP_PVN2 AS T21 ON T2.ClId = T21.ClId
            WHERE 
                ((ABS(T2.SummDoc) < :rg1 AND
                T2.DocTypC = 0 AND
                (T2.ClId IS NOT NULL AND T21.ClId IS NOT NULL)))
                OR
                (T2.ClId IS NULL)

            UNION ALL

            SELECT
                -1 AS did,
                T2.ClId AS ClId,
                'V' AS DocTyp2,
                T2.Summ AS Summ,
                T2.PVN AS PVN

            FROM F_TTEMP_PVN1 AS T2 LEFT JOIN F_TTEMP_PVN2 AS T21 ON T2.ClId = T21.ClId
            WHERE 
                ABS(T2.SummDoc) < :rg1 AND
                T2.DocTypC = 0 AND
                (T2.ClId IS NOT NULL AND T21.ClId IS NULL)
            
            UNION ALL

            SELECT
                T2.did AS did,
                T2.ClId AS ClId,
                T2.DocTyp2 AS DocTyp2,
                T2.Summ AS Summ,
                T2.PVN AS PVN

            FROM F_TTEMP_PVN1 AS T2 LEFT JOIN F_TTEMP_PVN2 AS T21 ON T2.ClId = T21.ClId
            WHERE 
                T2.ClId IS NOT NULL AND
                (ABS(T2.SummDoc) >= :rg1 OR
                T2.DocTypC = 1)

        ) AS T3
        GROUP BY T3.did, T3.ClId, T3.DocTyp2

    ) AS T4 

        LEFT JOIN F_OPSd ON T4.did = F_OPSd.id
        LEFT JOIN F_DocTyp ON F_OPSd.DocTyp = F_DocTyp.id
        LEFT JOIN F_Persons ON T4.ClId = F_Persons.ClId

    ORDER BY F_OPSd.Dete


    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_PVN_31 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    DID TYPE OF COLUMN F_TTEMP_PVN1.DID,
    CLID TYPE OF COLUMN F_TTEMP_PVN1.CLID,
    DOCTYP1 TYPE OF COLUMN F_TTEMP_PVN1.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN F_TTEMP_PVN1.DOCTYP2,
    DOCTYPC TYPE OF COLUMN F_TTEMP_PVN1.DOCTYPC,
    RAC5 TYPE OF COLUMN F_TTEMP_PVN1.RAC5,
    SUMM TYPE OF COLUMN F_TTEMP_PVN1.SUMM,
    PVN TYPE OF COLUMN F_TTEMP_PVN1.PVN,
    SUMMC TYPE OF COLUMN F_TTEMP_PVN1.SUMMC,
    CUR TYPE OF COLUMN F_TTEMP_PVN1.CUR)
AS
begin
-- PVN 1.3. pielikums     (ieņēmumi)
    FOR SELECT
        did,
        T2.Clid,
        CASE
            WHEN Summ > :rg1 AND
                (F_DocTyp.pvnpaz IS NULL OR
                    T2.ClId IS NULL OR
                    F_Persons.TP3 = 'Nav') THEN 'X'
            ELSE F_DocTyp.pvnpaz
        END AS DocTyp1,
        DocTyp2, 
        DocTypC, 
        RAC5,
        Summ, 
        PVN,
        0.0 AS summc,
        null AS cur
    FROM
    (
        SELECT 
            T1.did,
            MAX(T1.ClId) AS ClId,
            MAX(T1.DocTyp1) AS DocTyp1,
            MAX(T1.DocTyp2) AS DocTyp2,
            MAX(T1.DocTypC) AS DocTypC,
            MAX(T1.RAC5) AS RAC5,
            SUM(T1.SummC - T1.SummD) AS Summ,
            SUM(T1.PVNC - T1.PVND) AS PVN
        FROM
        (
            SELECT 
                F_OPSd.id AS did, 
                F_OPSd.ClId AS ClId,
                F_OPSd.DocTyp AS DocTyp1,
                F_AcPVN.pz1 AS DocTyp2,
                F_AcPVN.pz4 AS DocTypC,
                F_OPS.AC25 AS RAC5,
                0.00 AS SummD,
                0.00 AS PVND,
                0.00 AS SummC,
                F_OPS.Summ AS PVNC
            FROM
                F_OPSd INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                INNER JOIN F_AcPVN ON F_OPS.AC25 = F_AcPVN.id
            WHERE
                (F_OPSd.Dete BETWEEN :psd AND :ped) AND
                F_AcPVN.pz3 IS NOT NULL AND 
                F_AcPVN.pz3 IN ('2') 

            UNION ALL

            SELECT 
                F_OPSd.id AS did, 
                F_OPSd.ClId AS ClId,
                F_OPSd.DocTyp AS DocTyp1,
                F_AcPVN.pz1 AS DocTyp2,
                F_AcPVN.pz4 AS DocTypC,
                F_OPS.AC25 AS RAC5,
                0.00 AS SummD,
                0.00 AS PVND,
                F_OPS.Summ AS SummC,
                0.00 AS PVNC
            FROM
                F_OPSd INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                LEFT JOIN F_AcPVN ON F_OPS.AC25 = F_AcPVN.id
            WHERE
                F_OPSd.Dete BETWEEN :psd AND :ped AND
                F_AcPVN.pz3 IS NOT NULL AND 
                F_AcPVN.pz3 IN ('1') 

            UNION ALL

            --ATGRIEZTA PRECE
            SELECT 
                F_OPSd.id AS did, 
                F_OPSd.ClId AS ClId,
                F_OPSd.DocTyp AS DocTyp1,
                F_AcPVN.pz1 AS DocTyp2,
                F_AcPVN.pz4 AS DocTypC,
                F_OPS.AC15 AS RAC5,
                0.00 AS SummD,
                F_OPS.Summ AS PVND,
                0.00 AS SummC,
                0.00 AS PVNC
            FROM
                F_OPSd INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                INNER JOIN F_AcPVN ON F_OPS.AC15 = F_AcPVN.id
            WHERE
                (F_OPSd.Dete BETWEEN :psd AND :ped) AND
                F_AcPVN.pz3 IS NOT NULL AND 
                F_AcPVN.pz3 IN ('2') AND
                F_AcPVN.pz1 IS NOT NULL AND
                F_AcPVN.pz1 NOT IN ('41', '42')

            UNION ALL

            SELECT 
                F_OPSd.id AS did, 
                F_OPSd.ClId AS ClId,
                F_OPSd.DocTyp AS DocTyp1,
                F_AcPVN.pz1 AS DocTyp2,
                F_AcPVN.pz4 AS DocTypC,
                F_OPS.AC15 AS RAC5,
                F_OPS.Summ AS SummD,
                0.00 AS PVND,
                0.00 AS SummC,
                0.00 AS PVNC
            FROM
                F_OPSd INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                LEFT JOIN F_AcPVN ON F_OPS.AC15 = F_AcPVN.id
            WHERE
                F_OPSd.Dete BETWEEN :psd AND :ped AND
                F_AcPVN.pz3 IS NOT NULL AND 
                F_AcPVN.pz3 IN ('1') AND
                F_AcPVN.pz1 IS NOT NULL AND
                F_AcPVN.pz1 NOT IN ('41', '42')



        ) AS T1

        GROUP BY T1.did

    ) AS T2
        LEFT JOIN F_Persons ON T2.ClId = F_Persons.clid
        LEFT JOIN F_DocTyp ON T2.DocTyp1 = F_DocTyp.id

    WHERE 
        T2.Summ <> 0.00 AND
        T2.DocTyp2 IS NOT NULL

    into
        :did, :clid, :doctyp1, :doctyp2, :doctypc,
        :rac5, :summ, :pvn, :summc, :cur
    do
    begin
        suspend;
    end


end^


ALTER PROCEDURE SP_F_REP_PVN_32 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    ID TYPE OF COLUMN F_ROPS1A.ID,
    SPID TYPE OF COLUMN F_ROPS1A.SPID,
    DID TYPE OF COLUMN F_ROPS1A.DID,
    DETE TYPE OF COLUMN F_ROPS1A.DETE,
    NRX TYPE OF COLUMN F_ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN F_ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN F_ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN F_ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN F_ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN F_ROPS1A.DOCNR,
    CLID TYPE OF COLUMN F_ROPS1A.CLID,
    CLID2 TYPE OF COLUMN F_ROPS1A.CLID2,
    NAME TYPE OF COLUMN F_ROPS1A.NAME,
    NAME2 TYPE OF COLUMN F_ROPS1A.NAME2,
    REGNR TYPE OF COLUMN F_ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN F_ROPS1A.REGNR2,
    B0 TYPE OF COLUMN F_ROPS1A.B0,
    DESCR TYPE OF COLUMN F_ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN F_ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN F_ROPS1A.AC1,
    AC2 TYPE OF COLUMN F_ROPS1A.AC2,
    SAC1 TYPE OF COLUMN F_ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN F_ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN F_ROPS1A.SUMMC,
    CUR TYPE OF COLUMN F_ROPS1A.CUR,
    SUMM TYPE OF COLUMN F_ROPS1A.SUMM,
    PVN TYPE OF COLUMN F_ROPS1A.PVN,
    RAC TYPE OF COLUMN F_ROPS1A.RAC,
    SDB TYPE OF COLUMN F_ROPS1A.SDB,
    SCR TYPE OF COLUMN F_ROPS1A.SCR,
    RAC2 TYPE OF COLUMN F_ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN F_ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN F_ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN F_ROPS1A.RAC5,
    QV TYPE OF COLUMN F_ROPS1A.QV,
    ZNR TYPE OF COLUMN F_ROPS1A.ZNR)
AS
begin
-- PVN 3. pielikums     (ieņēmumi)

    
    DELETE FROM f_ttemp_pvn1 WHERE Did IS NOT NULL;

    INSERT INTO f_ttemp_pvn1(
        did, clid, doctyp1, doctyp2, doctypc,
        rac5, summ, pvn, summc, cur)
    SELECT
        did, clid, doctyp1, doctyp2, doctypc,
        rac5, summ, pvn, summc, cur
    FROM SP_F_REP_PVN_31(:PSD, :PED, :RG1, :RG2);


    INSERT INTO f_ttemp_pvn2(clid)
    SELECT TT1.ClId
    FROM f_ttemp_pvn1 AS TT1
    WHERE 
        TT1.ClId IS NOT NULL AND
        ABS(TT1.Summ) < :rg1 AND
        TT1.DocTypC = 0
    GROUP BY TT1.ClId
    HAVING SUM(ABS(TT1.Summ)) < :rg1;


    FOR SELECT
        gen_id(GEN_F_ROPS1A_ID, 1) as ID,
        current_connection as SPID,
        T4.did,
        CASE
            WHEN F_OPSd.DT2 IS NULL
            THEN F_OPSd.Dete
            ELSE F_OPSd.DT2
            END AS Dete,
        null AS nrx,
        null AS DocTyp,
        T4.DocTyp1 AS DocTyp1,
        T4.DocTyp2 AS DocTyp2,
        F_OPSd.DocSt,
        F_OPSd.DocNr,
        F_OPSd.clid AS clid,
        null AS clid2,
        F_Persons.Name AS Name,
        null AS Name2,
        F_Persons.PVNRegNr AS RegNr,
        null AS RegNr2,
        0.0 AS b0,
        null AS descr,
        null AS descr2,
        null AS AC1,
        null AS AC2,
        null AS SAC1,
        null AS SAC2,
        0.0 AS SummC,
        'EUR' AS Cur,
        T4.Summ AS Summ,
        T4.PVN AS PVN,
        null AS RAC,
        0.0 AS SDb,
        0.0 AS SCr,
        null AS RAC2,
        null AS RAC3,
        null AS RAC4,
        null AS RAC5,
        0.0 AS QV,
        F_OPSd.znr AS ZNR
    
    FROM
    (
        SELECT
            T3.did,
            T3.ClId,
            T3.DocTyp1,
            T3.DocTyp2,
            SUM(T3.Summ) AS Summ,
            SUM(T3.PVN) AS PVN
        FROM
        (    
            SELECT
                -1 AS did,
                NULL AS ClId,
                'X' AS DocTyp1,
                T2.DocTyp2 AS DocTyp2,
                T2.Summ AS Summ,
                T2.PVN AS PVN

            FROM F_TTEMP_PVN1 AS T2
            WHERE 
                T2.DocTyp1 = 'X'

            UNION ALL

            SELECT
                -1 AS did,
                NULL AS ClId,
                'T' AS DocTyp1,
                T2.DocTyp2 AS DocTyp2,
                T2.Summ AS Summ,
                T2.PVN AS PVN

            FROM F_TTEMP_PVN1 AS T2 LEFT JOIN F_TTEMP_PVN2 AS T21 ON T2.ClId = T21.ClId
            WHERE 
                (
                    ABS(T2.Summ) < :rg1 AND 
                    T2.DocTypC = 0 AND
                    T21.ClId IS NOT NULL AND
                    T2.DocTyp1 <> 'X'
                ) OR (
                    T2.ClId IS NULL AND
                    T2.DocTyp1 <> 'X'
                )

            UNION ALL

            SELECT
                -1 AS did,
                T2.ClId AS ClId,
                'V' AS DocTyp1,
                T2.DocTyp2 AS DocTyp2,
                T2.Summ AS Summ,
                T2.PVN AS PVN

            FROM F_TTEMP_PVN1 AS T2 LEFT JOIN F_TTEMP_PVN2 AS T21 ON T2.ClId = T21.ClId
            WHERE 
                ABS(T2.Summ) < :rg1 AND 
                T2.DocTypC = 0 AND
                T2.ClId IS NOT NULL AND
                T21.ClId IS NULL
            
            UNION ALL

            SELECT
                T2.did AS did,
                T2.ClId AS ClId,
                T2.DocTyp1 AS DocTyp1,
                T2.DocTyp2 AS DocTyp2,
                T2.Summ AS Summ,
                T2.PVN AS PVN

            FROM F_TTEMP_PVN1 AS T2 LEFT JOIN F_TTEMP_PVN2 AS T21 ON T2.ClId = T21.ClId
            WHERE 
                (
                    ABS(T2.Summ) >= :rg1 OR
                    T2.DocTypC = 1
                ) AND
                    T2.DocTyp1 <> 'X' AND
                    T2.ClId IS NOT NULL

        ) AS T3
        GROUP BY T3.did, T3.ClId, T3.DocTyp1, T3.DocTyp2

    ) AS T4 

        LEFT JOIN F_OPSd ON T4.did = F_OPSd.id
        LEFT JOIN F_Persons ON T4.ClId = F_Persons.ClId

    ORDER BY F_OPSd.Dete


    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_PVN_41 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    ID TYPE OF COLUMN F_ROPS1A.ID,
    SPID TYPE OF COLUMN F_ROPS1A.SPID,
    DID TYPE OF COLUMN F_ROPS1A.DID,
    DETE TYPE OF COLUMN F_ROPS1A.DETE,
    NRX TYPE OF COLUMN F_ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN F_ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN F_ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN F_ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN F_ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN F_ROPS1A.DOCNR,
    CLID TYPE OF COLUMN F_ROPS1A.CLID,
    CLID2 TYPE OF COLUMN F_ROPS1A.CLID2,
    NAME TYPE OF COLUMN F_ROPS1A.NAME,
    NAME2 TYPE OF COLUMN F_ROPS1A.NAME2,
    REGNR TYPE OF COLUMN F_ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN F_ROPS1A.REGNR2,
    B0 TYPE OF COLUMN F_ROPS1A.B0,
    DESCR TYPE OF COLUMN F_ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN F_ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN F_ROPS1A.AC1,
    AC2 TYPE OF COLUMN F_ROPS1A.AC2,
    SAC1 TYPE OF COLUMN F_ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN F_ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN F_ROPS1A.SUMMC,
    CUR TYPE OF COLUMN F_ROPS1A.CUR,
    SUMM TYPE OF COLUMN F_ROPS1A.SUMM,
    PVN TYPE OF COLUMN F_ROPS1A.PVN,
    RAC TYPE OF COLUMN F_ROPS1A.RAC,
    SDB TYPE OF COLUMN F_ROPS1A.SDB,
    SCR TYPE OF COLUMN F_ROPS1A.SCR,
    RAC2 TYPE OF COLUMN F_ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN F_ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN F_ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN F_ROPS1A.RAC5,
    QV TYPE OF COLUMN F_ROPS1A.QV,
    ZNR TYPE OF COLUMN F_ROPS1A.ZNR)
AS
begin
-- PVN2 uz ES piegādātā prece vai pakalpojumi (ieņēmumi)
    FOR SELECT
        gen_id(GEN_F_ROPS1A_ID, 1) as ID,
        current_connection as SPID,
        did,
        CASE
            WHEN F_OPSd.DT2 IS NULL
            THEN F_OPSd.Dete
            ELSE F_OPSd.DT2
            END AS Dete,
        null AS nrx,
        null AS DocTyp,
        F_DocTyp.pvnpaz AS DocTyp1,
        T2.DocTyp2, 
        F_OPSd.DocSt,
        F_OPSd.DocNr,
        F_OPSd.clid AS clid,
        null AS clid2,
        F_Persons.Name AS Name,
        null AS Name2,
        F_Persons.PVNRegNr AS RegNr,
        null AS RegNr2,
        0.0 AS b0,
        null AS descr,
        null AS descr2,
        null AS AC1,
        null AS AC2,
        null AS SAC1,
        null AS SAC2,
        0.0 AS SummC,
        'EUR' AS Cur,
        T2.Summ AS Summ,  
        T2.PVN AS PVN,
        null AS RAC,
        0.0 AS SDb,
        0.0 AS SCr,
        null AS RAC2,
        null AS RAC3,
        null AS RAC4,
        null AS RAC5,
        0.0 AS QV,
        F_OPSd.znr AS ZNR

    FROM
    (
        SELECT 
            T1.did,
            T1.ClId,
            T1.DocTyp1,
            MAX(T1.DocTyp2) AS DocTyp2,
            MAX(T1.RAC5) AS RAC5,
            SUM(T1.Summ) AS Summ,
            SUM(T1.PVN) AS PVN
        FROM
        (
            SELECT 
                F_OPSd.id AS did, 
                F_OPSd.ClId AS ClId,
                F_OPSd.DocTyp AS DocTyp1,
                F_AcPVN.pz1 AS DocTyp2,
                F_OPS.AC25 AS RAC5,
                F_OPS.Summ AS Summ,
                0.00 AS PVN
            FROM
                F_OPSd INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                LEFT JOIN F_AcPVN ON F_OPS.AC25 = F_AcPVN.id
            WHERE
                F_OPSd.Dete BETWEEN :psd AND :ped AND
                F_AcPVN.pz3 IN ('71', '72') 

        ) AS T1

        GROUP BY T1.did, T1.ClId, T1.DocTyp1

    ) AS T2
        INNER JOIN F_OPSd ON T2.did = F_OPSd.id
        LEFT JOIN F_DocTyp ON T2.DocTyp1 = F_DocTyp.id
        LEFT JOIN F_Persons ON T2.ClId = F_Persons.ClId

    WHERE 
        T2.Summ <> 0.00 AND
        T2.DocTyp2 IS NOT NULL

    ORDER BY F_OPSd.Dete

    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_PVN_42 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    ID TYPE OF COLUMN F_ROPS1A.ID,
    SPID TYPE OF COLUMN F_ROPS1A.SPID,
    DID TYPE OF COLUMN F_ROPS1A.DID,
    DETE TYPE OF COLUMN F_ROPS1A.DETE,
    NRX TYPE OF COLUMN F_ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN F_ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN F_ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN F_ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN F_ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN F_ROPS1A.DOCNR,
    CLID TYPE OF COLUMN F_ROPS1A.CLID,
    CLID2 TYPE OF COLUMN F_ROPS1A.CLID2,
    NAME TYPE OF COLUMN F_ROPS1A.NAME,
    NAME2 TYPE OF COLUMN F_ROPS1A.NAME2,
    REGNR TYPE OF COLUMN F_ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN F_ROPS1A.REGNR2,
    B0 TYPE OF COLUMN F_ROPS1A.B0,
    DESCR TYPE OF COLUMN F_ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN F_ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN F_ROPS1A.AC1,
    AC2 TYPE OF COLUMN F_ROPS1A.AC2,
    SAC1 TYPE OF COLUMN F_ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN F_ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN F_ROPS1A.SUMMC,
    CUR TYPE OF COLUMN F_ROPS1A.CUR,
    SUMM TYPE OF COLUMN F_ROPS1A.SUMM,
    PVN TYPE OF COLUMN F_ROPS1A.PVN,
    RAC TYPE OF COLUMN F_ROPS1A.RAC,
    SDB TYPE OF COLUMN F_ROPS1A.SDB,
    SCR TYPE OF COLUMN F_ROPS1A.SCR,
    RAC2 TYPE OF COLUMN F_ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN F_ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN F_ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN F_ROPS1A.RAC5,
    QV TYPE OF COLUMN F_ROPS1A.QV,
    ZNR TYPE OF COLUMN F_ROPS1A.ZNR)
AS
begin
-- PVN2 uz ES piegādātā prece vai pakalpojumi (ieņēmumi)
    FOR SELECT
        gen_id(GEN_F_ROPS1A_ID, 1) as ID,
        current_connection as SPID,
        null,
        null AS Dete,
        null AS nrx,
        null AS DocTyp,
        null AS DocTyp1,
        T2.DocTyp2, 
        null AS DocSt,
        null AS DocNr,
        null AS clid,
        null AS clid2,
        F_Persons.Name AS Name,
        null AS Name2,
        F_Persons.PVNRegNr AS RegNr,
        null AS RegNr2,
        0.0 AS b0,
        null AS descr,
        null AS descr2,
        null AS AC1,
        null AS AC2,
        null AS SAC1,
        null AS SAC2,
        0.0 AS SummC,
        'EUR' AS Cur,
        T2.Summ AS Summ,
        T2.PVN AS PVN,
        null AS RAC,
        0.0 AS SDb,
        0.0 AS SCr,
        null AS RAC2,
        null AS RAC3,
        null AS RAC4,
        null AS RAC5,
        0.0 AS QV,
        null AS ZNR

    FROM
    (
        SELECT 
            T1.ClId,
            T1.DocTyp2,
            SUM(T1.Summ) AS Summ,
            SUM(T1.PVN) AS PVN
        FROM
        (
            SELECT 
                F_OPSd.id AS did, 
                F_OPSd.ClId AS ClId,
                F_OPSd.DocTyp AS DocTyp1,
                F_AcPVN.pz1 AS DocTyp2,
                F_OPS.AC25 AS RAC5,
                F_OPS.Summ AS Summ,
                0.00 AS PVN
            FROM
                F_OPSd INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                LEFT JOIN F_AcPVN ON F_OPS.AC25 = F_AcPVN.id
            WHERE
                F_OPSd.Dete BETWEEN :psd AND :ped AND
                F_AcPVN.pz3 IN ('71', '72') 

        ) AS T1

        GROUP BY T1.ClId, T1.DocTyp2

    ) AS T2
        LEFT JOIN F_Persons ON T2.ClId = F_Persons.ClId

    WHERE 
        T2.Summ <> 0.00 AND
        T2.DocTyp2 IS NOT NULL


    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_PVN_51 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    DID TYPE OF COLUMN F_TTEMP_PVN1.DID,
    CLID TYPE OF COLUMN F_TTEMP_PVN1.CLID,
    DOCTYP1 TYPE OF COLUMN F_TTEMP_PVN1.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN F_TTEMP_PVN1.DOCTYP2,
    DOCTYPC TYPE OF COLUMN F_TTEMP_PVN1.DOCTYPC,
    RAC5 TYPE OF COLUMN F_TTEMP_PVN1.RAC5,
    SUMM TYPE OF COLUMN F_TTEMP_PVN1.SUMM,
    PVN TYPE OF COLUMN F_TTEMP_PVN1.PVN,
    SUMMC TYPE OF COLUMN F_TTEMP_PVN1.SUMMC,
    CUR TYPE OF COLUMN F_TTEMP_PVN1.CUR)
AS
begin
-- PVN piel 1.2 - no ES saņemtās preces, pakalpojumi
    FOR SELECT
        did,
        clid,
        null AS doctyp1,
        doctyp2,
        null AS doctypc,
        rac5,
        summ,
        pvn,
        summc,
        curr AS CUR
    FROM
    (
        SELECT 
            T2.did,
            T2.ClId,
            T2.DocTyp2,
            T2.RAC5,
            T2.SummD AS Summ,
            T2.PVND AS PVN,
            T2.SummC,
            T2.Curr
        FROM
        (
            SELECT 
                T1.did,
                MAX(T1.ClId) AS ClId,
                MAX(T1.DocTyp2) AS DocTyp2,
                MAX(T1.RAC5) AS RAC5,
                SUM(T1.SummD) AS SummD,
                SUM(T1.PVND) AS PVND,
                SUM(T1.SummC) AS SummC,
                MAX(T1.Curr) AS Curr
            FROM
            (
                SELECT 
                    F_OPSd.id AS did, 
                    F_OPSd.ClId AS ClId,
                    F_AcPVN.pz1 AS DocTyp2,
                    F_OPS.AC15 AS RAC5,
                    0.00 AS SummD,
                    -F_OPS.Summ AS PVND,
                    0.00 AS SummC,
                    '' AS Curr
                FROM
                    F_OPSd INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                    INNER JOIN F_AcPVN ON F_OPS.AC15 = F_AcPVN.id
                WHERE
                    (F_OPSd.Dete BETWEEN :psd AND :ped) AND
                    F_AcPVN.pz3 IS NOT NULL AND 
                    F_AcPVN.pz3 IN ('13') 

                UNION ALL

                SELECT 
                    F_OPSd.id AS did, 
                    F_OPSd.ClId AS ClId,
                    F_AcPVN.pz1 AS DocTyp2,
                    F_OPS.AC15 AS RAC5,
                    -F_OPS.Summ AS SummD,
                    0.00 AS PVND,
                    -F_OPS.SummC AS SummC,
                    F_OPS.Cur AS Curr
                FROM
                    F_OPSd INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                    LEFT JOIN F_AcPVN ON F_OPS.AC15 = F_AcPVN.id
                WHERE
                    (F_OPSd.Dete BETWEEN :psd AND :ped) AND
                    F_AcPVN.pz3 IS NOT NULL AND 
                    F_AcPVN.pz3 IN ('12') 

                UNION ALL
            
                -- ATGRIEZTĀ PRECE 
                SELECT 
                    F_OPSd.id AS did, 
                    F_OPSd.ClId AS ClId,
                    F_AcPVN.pz1 AS DocTyp2,
                    F_OPS.AC25 AS RAC5,
                    0.00 AS SummD,
                    F_OPS.Summ AS PVND,
                    0.00 AS SummC,
                    '' AS Curr
                FROM
                    F_OPSd INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                    INNER JOIN F_AcPVN ON F_OPS.AC25 = F_AcPVN.id
                WHERE
                    (F_OPSd.Dete BETWEEN :psd AND :ped) AND
                    F_AcPVN.pz3 IS NOT NULL AND 
                    F_AcPVN.pz3 IN ('13') 

                UNION ALL

                SELECT 
                    F_OPSd.id AS did, 
                    F_OPSd.ClId AS ClId,
                    F_AcPVN.pz1 AS DocTyp2,
                    F_OPS.AC25 AS RAC5,
                    F_OPS.Summ AS SummD,
                    0.00 AS PVND,
                    F_OPS.Summ AS SummC,
                    F_OPS.Cur AS Curr
                FROM
                    F_OPSd INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                    LEFT JOIN F_AcPVN ON F_OPS.AC25 = F_AcPVN.id
                WHERE
                    (F_OPSd.Dete BETWEEN :psd AND :ped) AND
                    F_AcPVN.pz3 IS NOT NULL AND 
                    F_AcPVN.pz3 IN ('12') 


            ) AS T1
            GROUP BY T1.did
        ) AS T2
    ) AS T3
        
    WHERE 
        T3.Summ <> 0.00 AND
        T3.DocTyp2 IS NOT NULL

    into
        :did, :clid, :doctyp1, :doctyp2, :doctypc,
        :rac5, :summ, :pvn, :summc, :cur
    do
    begin
        suspend;
    end



end^


ALTER PROCEDURE SP_F_REP_PVN_52 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    ID TYPE OF COLUMN F_ROPS1A.ID,
    SPID TYPE OF COLUMN F_ROPS1A.SPID,
    DID TYPE OF COLUMN F_ROPS1A.DID,
    DETE TYPE OF COLUMN F_ROPS1A.DETE,
    NRX TYPE OF COLUMN F_ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN F_ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN F_ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN F_ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN F_ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN F_ROPS1A.DOCNR,
    CLID TYPE OF COLUMN F_ROPS1A.CLID,
    CLID2 TYPE OF COLUMN F_ROPS1A.CLID2,
    NAME TYPE OF COLUMN F_ROPS1A.NAME,
    NAME2 TYPE OF COLUMN F_ROPS1A.NAME2,
    REGNR TYPE OF COLUMN F_ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN F_ROPS1A.REGNR2,
    B0 TYPE OF COLUMN F_ROPS1A.B0,
    DESCR TYPE OF COLUMN F_ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN F_ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN F_ROPS1A.AC1,
    AC2 TYPE OF COLUMN F_ROPS1A.AC2,
    SAC1 TYPE OF COLUMN F_ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN F_ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN F_ROPS1A.SUMMC,
    CUR TYPE OF COLUMN F_ROPS1A.CUR,
    SUMM TYPE OF COLUMN F_ROPS1A.SUMM,
    PVN TYPE OF COLUMN F_ROPS1A.PVN,
    RAC TYPE OF COLUMN F_ROPS1A.RAC,
    SDB TYPE OF COLUMN F_ROPS1A.SDB,
    SCR TYPE OF COLUMN F_ROPS1A.SCR,
    RAC2 TYPE OF COLUMN F_ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN F_ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN F_ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN F_ROPS1A.RAC5,
    QV TYPE OF COLUMN F_ROPS1A.QV,
    ZNR TYPE OF COLUMN F_ROPS1A.ZNR)
AS
begin
-- PVN piel 1.2 - no ES saņemtās preces, pakalpojumi
    
    DELETE FROM f_ttemp_pvn1 WHERE Did IS NOT NULL;

    INSERT INTO f_ttemp_pvn1(
        did, clid, doctyp1, doctyp2, doctypc,
        rac5, summ, pvn, summc, cur)
    SELECT
        did, clid, doctyp1, doctyp2, doctypc,
        rac5, summ, pvn, summc, cur
    FROM SP_F_REP_PVN_51(:PSD, :PED, :RG1, :RG2);

    FOR SELECT
        gen_id(GEN_F_ROPS1A_ID, 1) as ID,
        current_connection as SPID,
        T4.did,
        CASE
            WHEN F_OPSd.DT2 IS NULL
            THEN F_OPSd.Dete
            ELSE F_OPSd.DT2
            END AS Dete,
        null AS nrx,
        null AS DocTyp,
        F_DocTyp.pvnpaz AS DocTyp1,
        T4.DocTyp2 AS DocTyp2,
        F_OPSd.DocSt,
        F_OPSd.DocNr,
        F_OPSd.clid AS clid,
        null AS clid2,
        F_Persons.Name AS Name,
        null AS Name2,
        F_Persons.PVNRegNr AS RegNr,
        null AS RegNr2,
        0.0 AS b0,
        null AS descr,
        null AS descr2,
        null AS AC1,
        null AS AC2,
        null AS SAC1,
        null AS SAC2,
        T4.SummC AS SummC,
        T4.Curr AS Cur,
        T4.Summ AS Summ,
        T4.PVN AS PVN,
        null AS RAC,
        0.0 AS SDb,
        0.0 AS SCr,
        null AS RAC2,
        null AS RAC3,
        null AS RAC4,
        null AS RAC5,
        0.0 AS QV,
        F_OPSd.znr AS ZNR

    FROM
    (
        SELECT
            T2.did AS did,
            T2.ClId AS ClId,
            T2.DocTyp2 AS DocTyp2,
            T2.Summ AS Summ,
            T2.PVN AS PVN,
            T2.SummC AS SummC,
            T2.Cur AS Curr

        FROM f_ttemp_pvn1 AS T2

    ) AS T4 

        LEFT JOIN F_OPSd ON T4.did = F_OPSd.id
        LEFT JOIN F_DocTyp ON F_OPSd.DocTyp = F_DocTyp.id
        LEFT JOIN F_Persons ON T4.ClId = F_Persons.ClId

    ORDER BY F_OPSd.Dete


    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_PVN_CHECK_01 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    LIKME MONEY)
RETURNS (
    ID TYPE OF COLUMN F_ROPS1A.ID,
    SPID TYPE OF COLUMN F_ROPS1A.SPID,
    DID TYPE OF COLUMN F_ROPS1A.DID,
    DETE TYPE OF COLUMN F_ROPS1A.DETE,
    NRX TYPE OF COLUMN F_ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN F_ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN F_ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN F_ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN F_ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN F_ROPS1A.DOCNR,
    CLID TYPE OF COLUMN F_ROPS1A.CLID,
    CLID2 TYPE OF COLUMN F_ROPS1A.CLID2,
    NAME TYPE OF COLUMN F_ROPS1A.NAME,
    NAME2 TYPE OF COLUMN F_ROPS1A.NAME2,
    REGNR TYPE OF COLUMN F_ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN F_ROPS1A.REGNR2,
    B0 TYPE OF COLUMN F_ROPS1A.B0,
    DESCR TYPE OF COLUMN F_ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN F_ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN F_ROPS1A.AC1,
    AC2 TYPE OF COLUMN F_ROPS1A.AC2,
    SAC1 TYPE OF COLUMN F_ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN F_ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN F_ROPS1A.SUMMC,
    CUR TYPE OF COLUMN F_ROPS1A.CUR,
    SUMM TYPE OF COLUMN F_ROPS1A.SUMM,
    PVN TYPE OF COLUMN F_ROPS1A.PVN,
    RAC TYPE OF COLUMN F_ROPS1A.RAC,
    SDB TYPE OF COLUMN F_ROPS1A.SDB,
    SCR TYPE OF COLUMN F_ROPS1A.SCR,
    RAC2 TYPE OF COLUMN F_ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN F_ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN F_ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN F_ROPS1A.RAC5,
    QV TYPE OF COLUMN F_ROPS1A.QV,
    ZNR TYPE OF COLUMN F_ROPS1A.ZNR)
AS
begin
-- PVN summu kontrole izdevumiem
    
    FOR SELECT
        gen_id(GEN_F_ROPS1A_ID, 1) as ID,
        current_connection as SPID,
        T4.did,
        F_OPSd.Dete AS Dete,
        null AS nrx,
        null AS DocTyp,
        F_DocTyp.pvnpaz AS DocTyp1,
        T4.DocTyp2 AS DocTyp2,
        F_OPSd.DocSt,
        F_OPSd.DocNr,
        F_OPSd.clid AS clid,
        null AS clid2,
        F_Persons.Name AS Name,
        null AS Name2,
        F_Persons.PVNRegNr AS RegNr,
        null AS RegNr2,
        0.0 AS b0,
        null AS descr,
        null AS descr2,
        null AS AC1,
        null AS AC2,
        null AS SAC1,
        null AS SAC2,
        0.0 AS SummC,
        'EUR' AS Cur,
        T4.Summ AS Summ,
        T4.PVN AS PVN,
        null AS RAC,
        0.0 AS SDb,
        0.0 AS SCr,
        null AS RAC2,
        null AS RAC3,
        null AS RAC4,
        null AS RAC5,
        0.0 AS QV,
        F_OPSd.znr AS ZNR

    FROM
    (
        SELECT
            did, clid, doctyp1, doctyp2, doctypc,
            rac5, summ, pvn, summc, cur
        FROM SP_F_REP_PVN_21(:PSD, :PED, 0.0, 0.0)
        WHERE ABS(ABS(summ * :LIKME) - ABS(pvn)) >= :RG1

    ) AS T4 

        LEFT JOIN F_OPSd ON T4.did = F_OPSd.id
        LEFT JOIN F_DocTyp ON F_OPSd.DocTyp = F_DocTyp.id
        LEFT JOIN F_Persons ON T4.ClId = F_Persons.ClId

    ORDER BY F_OPSd.Dete


    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_PVN_CHECK_02 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    LIKME MONEY)
RETURNS (
    ID TYPE OF COLUMN F_ROPS1A.ID,
    SPID TYPE OF COLUMN F_ROPS1A.SPID,
    DID TYPE OF COLUMN F_ROPS1A.DID,
    DETE TYPE OF COLUMN F_ROPS1A.DETE,
    NRX TYPE OF COLUMN F_ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN F_ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN F_ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN F_ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN F_ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN F_ROPS1A.DOCNR,
    CLID TYPE OF COLUMN F_ROPS1A.CLID,
    CLID2 TYPE OF COLUMN F_ROPS1A.CLID2,
    NAME TYPE OF COLUMN F_ROPS1A.NAME,
    NAME2 TYPE OF COLUMN F_ROPS1A.NAME2,
    REGNR TYPE OF COLUMN F_ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN F_ROPS1A.REGNR2,
    B0 TYPE OF COLUMN F_ROPS1A.B0,
    DESCR TYPE OF COLUMN F_ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN F_ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN F_ROPS1A.AC1,
    AC2 TYPE OF COLUMN F_ROPS1A.AC2,
    SAC1 TYPE OF COLUMN F_ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN F_ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN F_ROPS1A.SUMMC,
    CUR TYPE OF COLUMN F_ROPS1A.CUR,
    SUMM TYPE OF COLUMN F_ROPS1A.SUMM,
    PVN TYPE OF COLUMN F_ROPS1A.PVN,
    RAC TYPE OF COLUMN F_ROPS1A.RAC,
    SDB TYPE OF COLUMN F_ROPS1A.SDB,
    SCR TYPE OF COLUMN F_ROPS1A.SCR,
    RAC2 TYPE OF COLUMN F_ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN F_ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN F_ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN F_ROPS1A.RAC5,
    QV TYPE OF COLUMN F_ROPS1A.QV,
    ZNR TYPE OF COLUMN F_ROPS1A.ZNR)
AS
begin
-- PVN summu kontrole ienemumiem
    
    FOR SELECT
        gen_id(GEN_F_ROPS1A_ID, 1) as ID,
        current_connection as SPID,
        T4.did,
        F_OPSd.Dete AS Dete,
        null AS nrx,
        null AS DocTyp,
        F_DocTyp.pvnpaz AS DocTyp1,
        T4.DocTyp2 AS DocTyp2,
        F_OPSd.DocSt,
        F_OPSd.DocNr,
        F_OPSd.clid AS clid,
        null AS clid2,
        F_Persons.Name AS Name,
        null AS Name2,
        F_Persons.PVNRegNr AS RegNr,
        null AS RegNr2,
        0.0 AS b0,
        null AS descr,
        null AS descr2,
        null AS AC1,
        null AS AC2,
        null AS SAC1,
        null AS SAC2,
        0.0 AS SummC,
        'EUR' AS Cur,
        T4.Summ AS Summ,
        T4.PVN AS PVN,
        null AS RAC,
        0.0 AS SDb,
        0.0 AS SCr,
        null AS RAC2,
        null AS RAC3,
        null AS RAC4,
        null AS RAC5,
        0.0 AS QV,
        F_OPSd.znr AS ZNR

    FROM
    (
        SELECT
            did, clid, doctyp1, doctyp2, doctypc,
            rac5, summ, pvn, summc, cur
        FROM SP_F_REP_PVN_31(:PSD, :PED, 0.0, 0.0)
        WHERE ABS(ABS(summ * :LIKME) - ABS(pvn)) >= :RG1

    ) AS T4 

        LEFT JOIN F_OPSd ON T4.did = F_OPSd.id
        LEFT JOIN F_DocTyp ON F_OPSd.DocTyp = F_DocTyp.id
        LEFT JOIN F_Persons ON T4.ClId = F_Persons.ClId

    ORDER BY F_OPSd.Dete


    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_PVNZ_01 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID TYPE OF COLUMN F_TREPPVNZ1.ID,
    SPID TYPE OF COLUMN F_TREPPVNZ1.SPID,
    DID TYPE OF COLUMN F_TREPPVNZ1.DID,
    RID TYPE OF COLUMN F_TREPPVNZ1.RID,
    DETE TYPE OF COLUMN F_TREPPVNZ1.DETE,
    NRX TYPE OF COLUMN F_TREPPVNZ1.NRX,
    DOCTYP TYPE OF COLUMN F_TREPPVNZ1.DOCTYP,
    DOCST TYPE OF COLUMN F_TREPPVNZ1.DOCST,
    DOCNR TYPE OF COLUMN F_TREPPVNZ1.DOCNR,
    DOCSTR TYPE OF COLUMN F_TREPPVNZ1.DOCSTR,
    CLID TYPE OF COLUMN F_TREPPVNZ1.CLID,
    NAME TYPE OF COLUMN F_TREPPVNZ1.NAME,
    REGNR TYPE OF COLUMN F_TREPPVNZ1.REGNR,
    DESCR TYPE OF COLUMN F_TREPPVNZ1.DESCR,
    AA TYPE OF COLUMN F_TREPPVNZ1.AA,
    A8 TYPE OF COLUMN F_TREPPVNZ1.A8,
    A9 TYPE OF COLUMN F_TREPPVNZ1.A9,
    A10 TYPE OF COLUMN F_TREPPVNZ1.A10,
    A11 TYPE OF COLUMN F_TREPPVNZ1.A11,
    A12 TYPE OF COLUMN F_TREPPVNZ1.A12,
    A13 TYPE OF COLUMN F_TREPPVNZ1.A13,
    A14 TYPE OF COLUMN F_TREPPVNZ1.A14,
    A15 TYPE OF COLUMN F_TREPPVNZ1.A15,
    A16 TYPE OF COLUMN F_TREPPVNZ1.A16,
    A17 TYPE OF COLUMN F_TREPPVNZ1.A17,
    A18 TYPE OF COLUMN F_TREPPVNZ1.A18,
    A19 TYPE OF COLUMN F_TREPPVNZ1.A19,
    A20 TYPE OF COLUMN F_TREPPVNZ1.A20,
    A21 TYPE OF COLUMN F_TREPPVNZ1.A21,
    A22 TYPE OF COLUMN F_TREPPVNZ1.A22,
    A23 TYPE OF COLUMN F_TREPPVNZ1.A23,
    A24 TYPE OF COLUMN F_TREPPVNZ1.A24,
    A25 TYPE OF COLUMN F_TREPPVNZ1.A25,
    A26 TYPE OF COLUMN F_TREPPVNZ1.A26,
    A27 TYPE OF COLUMN F_TREPPVNZ1.A27,
    A28 TYPE OF COLUMN F_TREPPVNZ1.A28,
    A29 TYPE OF COLUMN F_TREPPVNZ1.A29,
    A30 TYPE OF COLUMN F_TREPPVNZ1.A30,
    A31 TYPE OF COLUMN F_TREPPVNZ1.A31)
AS
declare variable a23a TYPE OF COLUMN F_TREPPVNZ1.A23;
    declare variable xrid integer;
    declare variable xdt2 date;
begin
  xrid = 1;

  for select
        gen_id(GEN_F_TREPDARZ1_ID, 1) AS id,
        current_connection AS spid,
        TD1.ID AS did,
        0 AS rid,
        MAX(TD1.Dete) AS Dete,
        MAX(TD1.ZNR) AS NrX,
        MAX(F_DocTyp.id1) AS DocTyp,
        MAX(TD1.DocSt) AS DocSt,
        MAX(TD1.DocNr) AS DocNr,
        NULL AS docstr,
        MAX(TD1.clid) AS clid,
        MAX(F_Persons.name) AS Name,
        MAX(F_Persons.pvnregnr) AS RegNr,
        MAX(TD1.descr) AS Descr,
        0 AS aa,

        SUM(
            CASE WHEN TP11.PZ2 = 8 THEN -TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 8 THEN TO1.Summ ELSE 0.00 END
            ) AS A8,
        SUM(
            CASE WHEN TP11.PZ2 = 9 THEN -TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 9 THEN TO1.Summ ELSE 0.00 END
            ) AS A9,
        SUM(
            CASE WHEN (TP11.PZ2 >= 100) AND (TP11.PZ2 < 110) THEN -TO1.Summ ELSE 0.00 END +
            CASE WHEN (TP12.PZ2 >= 100) AND (TP12.PZ2 < 110) THEN TO1.Summ ELSE 0.00 END
            ) AS A10,

        MAX(
            CASE WHEN (TP11.PZ2 >= 100) AND (TP11.PZ2 < 110)
            THEN TP11.PZ1
            ELSE
                CASE WHEN (TP12.PZ2 >= 100) AND (TP12.PZ2 < 110) THEN TP12.PZ1 ELSE NULL END
            END
            ) AS A11,

        SUM(
            CASE WHEN TP11.PZ2 = 12 THEN -TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 12 THEN TO1.Summ ELSE 0.00 END
            ) AS A12,

        SUM(
            CASE WHEN TP11.PZ2 = 13 THEN -TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 13 THEN TO1.Summ ELSE 0.00 END
            ) AS A13,

        SUM(
            CASE WHEN TP11.PZ2 = 14 THEN -TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 14 THEN TO1.Summ ELSE 0.00 END
            ) AS A14,

        SUM(
            CASE WHEN TP11.PZ2 = 15 THEN -TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 15 THEN TO1.Summ ELSE 0.00 END
            ) AS A15,
        SUM(
            CASE WHEN TP11.PZ2 = 16 THEN -TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 16 THEN TO1.Summ ELSE 0.00 END +

            CASE WHEN TP11.PZ2 = 201 THEN TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 201 THEN -TO1.Summ ELSE 0.00 END
            ) AS A16,
        SUM(
            CASE WHEN TP11.PZ2 = 17 THEN -TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 17 THEN TO1.Summ ELSE 0.00 END
            ) AS A17,
        SUM(
            CASE WHEN TP11.PZ2 = 18 THEN -TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 18 THEN TO1.Summ ELSE 0.00 END
            ) AS A18,
        SUM(
            CASE WHEN TP11.PZ2 = 19 THEN -TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 19 THEN TO1.Summ ELSE 0.00 END
            ) AS A19,
        SUM(
            CASE WHEN TP11.PZ2 = 20 THEN -TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 20 THEN TO1.Summ ELSE 0.00 END
            ) AS A20,
    
        0 AS a21,

        SUM(
            CASE WHEN TP11.PZ2 = 22 THEN TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 22 THEN -TO1.Summ ELSE 0.00 END
            ) AS A22,
        SUM(
            CASE WHEN TP11.PZ2 = 23 THEN TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 23 THEN -TO1.Summ ELSE 0.00 END
            ) AS A23,


        SUM(
            CASE WHEN TO1.AC15 IS NULL AND TO1.AC25 IS NULL THEN TO1.Summ ELSE 0.00 END
            ) AS A23a,

        SUM(
            CASE WHEN TP11.PZ2 = 24 THEN TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 24 THEN -TO1.Summ ELSE 0.00 END
            ) AS A24,
        SUM(
            CASE WHEN TP11.PZ2 = 25 THEN TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 25 THEN -TO1.Summ ELSE 0.00 END
            ) AS A25,
        SUM(
            CASE WHEN TP11.PZ2 = 26 THEN TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 26 THEN -TO1.Summ ELSE 0.00 END
            ) AS A26,
        SUM(
            CASE WHEN TP11.PZ2 = 27 THEN TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 27 THEN -TO1.Summ ELSE 0.00 END +

            CASE WHEN TP11.PZ2 = 201 THEN TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 201 THEN -TO1.Summ ELSE 0.00 END

            ) AS A27,
        SUM(
            CASE WHEN TP11.PZ2 = 28 THEN TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 28 THEN -TO1.Summ ELSE 0.00 END
            ) AS A28,
        SUM(
            CASE WHEN TP11.PZ2 = 29 THEN TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 29 THEN -TO1.Summ ELSE 0.00 END
            ) AS A29,
        SUM(
            CASE WHEN TP11.PZ2 = 30 THEN TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 30 THEN -TO1.Summ ELSE 0.00 END
            ) AS A30,

        0 AS a31,

        MAX(TD1.DT2) AS DT2

    FROM
        F_OPSd AS TD1
        JOIN F_OPS AS TO1 ON TD1.id = TO1.DocId
        LEFT JOIN f_persons ON TD1.clid = F_Persons.clid
        LEFT JOIN f_doctyp ON TD1.doctyp = f_doctyp.id
        LEFT JOIN F_ACPVN AS TP11 ON TO1.AC15 = TP11.ID
        LEFT JOIN F_ACPVN AS TP12 ON TO1.AC25 = TP12.ID
    WHERE
        TD1.Dete BETWEEN :sdt AND :edt AND
        EXISTS
        (
            SELECT TO2.ID
            FROM
                F_OPS AS TO2
                LEFT JOIN F_ACPVN AS TP21 ON TO2.AC15 = TP21.ID
                LEFT JOIN F_ACPVN AS TP22 ON TO2.AC25 = TP22.ID
            WHERE
                (TO2.docid = TD1.ID) AND
                (
                    (TP21.ID IS NOT NULL) AND (TP21.PZ2 <> 0) OR
                    (TP22.ID IS NOT NULL) AND (TP22.PZ2 <> 0)
                )
        )

    GROUP BY DID
    ORDER BY Dete, did

    into :id,
        :spid,
        :did,
        :rid,
        :dete,
        :nrx,
        :doctyp,
        :docst,
        :docnr,
        :docstr,
        :clid,
        :name,
        :regnr,
        :descr,
        :aa,
        :a8,
        :a9,
        :a10,
        :a11,
        :a12,
        :a13,
        :a14,
        :a15,
        :a16,
        :a17,
        :a18,
        :a19,
        :a20,
        :a21,
        :a22,
        :a23,
        :a23a,
        :a24,
        :a25,
        :a26,
        :a27,
        :a28,
        :a29,
        :a30,
        :a31,
        :xdt2
  do
  begin
    rid = xrid;
    xrid = xrid + 1;

    docstr = DocTyp;

    if (docst is not null)
    then
        if (docstr is null)
        then docstr = docst;
        else docstr = docstr || ' ' || docst;

    if (docnr is not null)
    then
        if (docstr is null)
        then docstr = docnr;
        else docstr = docstr || ' ' ||  docnr;

    if (xdt2 is not null)
    then
        if (docstr is null)
        then docstr = xdt2;
        else docstr = docstr || ', ' ||  xdt2;


    if (a27 > 0.0) then
    begin
        a23 = a23 + a23a;
    end
    else
    begin
        a23 = a23 - a23a;
    end

    a21 = a8 + a9 + a10 + a12 + a13 + a14 +
            a15 + a16 + a17 + a18 + a19 + a20;

    a31 = a22 + a23 + a24 + a25 + a26 + a27 +
            a28 + a29 + a30;

    suspend;
  end
end^


ALTER PROCEDURE SP_F_REP_SKAIDRA_01 (
    SDT DATE,
    EDT DATE,
    PSUMM NUMERIC(14,5),
    PPERTYP VARCHAR(5))
RETURNS (
    ID TYPE OF COLUMN F_ROPS1A.ID,
    SPID TYPE OF COLUMN F_ROPS1A.SPID,
    DID TYPE OF COLUMN F_ROPS1A.DID,
    DETE TYPE OF COLUMN F_ROPS1A.DETE,
    NRX TYPE OF COLUMN F_ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN F_ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN F_ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN F_ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN F_ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN F_ROPS1A.DOCNR,
    CLID TYPE OF COLUMN F_ROPS1A.CLID,
    CLID2 TYPE OF COLUMN F_ROPS1A.CLID2,
    NAME TYPE OF COLUMN F_ROPS1A.NAME,
    NAME2 TYPE OF COLUMN F_ROPS1A.NAME2,
    REGNR TYPE OF COLUMN F_ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN F_ROPS1A.REGNR2,
    B0 TYPE OF COLUMN F_ROPS1A.B0,
    DESCR TYPE OF COLUMN F_ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN F_ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN F_ROPS1A.AC1,
    AC2 TYPE OF COLUMN F_ROPS1A.AC2,
    SAC1 TYPE OF COLUMN F_ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN F_ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN F_ROPS1A.SUMMC,
    CUR TYPE OF COLUMN F_ROPS1A.CUR,
    SUMM TYPE OF COLUMN F_ROPS1A.SUMM,
    PVN TYPE OF COLUMN F_ROPS1A.PVN,
    RAC TYPE OF COLUMN F_ROPS1A.RAC,
    SDB TYPE OF COLUMN F_ROPS1A.SDB,
    SCR TYPE OF COLUMN F_ROPS1A.SCR,
    RAC2 TYPE OF COLUMN F_ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN F_ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN F_ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN F_ROPS1A.RAC5,
    QV TYPE OF COLUMN F_ROPS1A.QV,
    ZNR TYPE OF COLUMN F_ROPS1A.ZNR)
AS
begin
    FOR SELECT
        gen_id(GEN_F_ROPS1A_ID, 1) as ID,
        current_connection as SPID,
        0 as did,
        null AS Dete,
        null AS nrx,
        null AS DocTyp,
        null AS DocTyp1,
        null AS DocTyp2,
        null AS DocSt,
        null AS DocNr,
        T2.clid AS clid,
        null AS clid2,
        F_Persons.Name AS Name,
        null AS Name2,
        F_Persons.RegNr AS RegNr,
        null AS RegNr2,
        0.0 AS b0,
        null AS descr,
        null AS descr2,
        null AS AC1,
        null AS AC2,
        null AS SAC1,
        null AS SAC2,
        0.0 AS SummC,
        'EUR' AS Cur,
        0.0 AS Summ,
        0.0 AS PVN,
        null AS RAC,
        T2.ADb AS SDb,
        T2.ACr AS SCr,
        null AS RAC2,
        null AS RAC3,
        null AS RAC4,
        null AS RAC5,
        0.0 AS QV,
        0.0 AS ZNR

    FROM
    (
        SELECT ClId, SUM(SDb) AS ADb, SUM(SCr) AS ACr
        FROM
        (
            SELECT 
                F_OPSd.ClId AS ClId,
                F_OPS.Summ AS SDb,
                0.00 AS SCr

            FROM 
                F_OPSd INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                INNER JOIN F_Persons ON F_OPSd.ClId = F_Persons.ClId
                INNER JOIN F_AcP21 ON F_OPS.AC11 = F_AcP21.AC
            WHERE 
                F_OPSd.Dete BETWEEN :sdt AND :edt AND
                F_Persons.TP2 = :ppertyp AND
                F_AcP21.id1 IN ('KA','CN')

            UNION ALL

            SELECT 
                F_OPSd.ClId AS ClId,
                0.00 AS SDb,
                F_OPS.Summ AS SCr

            FROM 
                F_OPSd INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                INNER JOIN F_Persons ON F_OPSd.ClId = F_Persons.ClId
                INNER JOIN F_AcP21 ON F_OPS.AC21 = F_AcP21.AC
            WHERE 
                F_OPSd.Dete BETWEEN :sdt AND :edt AND
                F_Persons.TP2 = :ppertyp AND
                F_AcP21.id1 IN ('KA','CN')

        ) AS T1
        GROUP BY ClId

    ) AS T2    
    LEFT JOIN F_Persons ON T2.ClId = F_Persons.ClId

    WHERE 
        (ABS(T2.ADb) + ABS(T2.ACr)) >= :psumm
    ORDER BY ClId

    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_REP_SKAIDRA_02 (
    SDT DATE,
    EDT DATE,
    PSUMM NUMERIC(14,5),
    PPERTYP VARCHAR(5))
RETURNS (
    ID TYPE OF COLUMN F_ROPS1A.ID,
    SPID TYPE OF COLUMN F_ROPS1A.SPID,
    DID TYPE OF COLUMN F_ROPS1A.DID,
    DETE TYPE OF COLUMN F_ROPS1A.DETE,
    NRX TYPE OF COLUMN F_ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN F_ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN F_ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN F_ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN F_ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN F_ROPS1A.DOCNR,
    CLID TYPE OF COLUMN F_ROPS1A.CLID,
    CLID2 TYPE OF COLUMN F_ROPS1A.CLID2,
    NAME TYPE OF COLUMN F_ROPS1A.NAME,
    NAME2 TYPE OF COLUMN F_ROPS1A.NAME2,
    REGNR TYPE OF COLUMN F_ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN F_ROPS1A.REGNR2,
    B0 TYPE OF COLUMN F_ROPS1A.B0,
    DESCR TYPE OF COLUMN F_ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN F_ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN F_ROPS1A.AC1,
    AC2 TYPE OF COLUMN F_ROPS1A.AC2,
    SAC1 TYPE OF COLUMN F_ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN F_ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN F_ROPS1A.SUMMC,
    CUR TYPE OF COLUMN F_ROPS1A.CUR,
    SUMM TYPE OF COLUMN F_ROPS1A.SUMM,
    PVN TYPE OF COLUMN F_ROPS1A.PVN,
    RAC TYPE OF COLUMN F_ROPS1A.RAC,
    SDB TYPE OF COLUMN F_ROPS1A.SDB,
    SCR TYPE OF COLUMN F_ROPS1A.SCR,
    RAC2 TYPE OF COLUMN F_ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN F_ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN F_ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN F_ROPS1A.RAC5,
    QV TYPE OF COLUMN F_ROPS1A.QV,
    ZNR TYPE OF COLUMN F_ROPS1A.ZNR)
AS
begin
--Skaidras naudas darijumi FP
    FOR SELECT
        gen_id(GEN_F_ROPS1A_ID, 1) as ID,
        current_connection as SPID,
        0 as did,
        null AS Dete,
        null AS nrx,
        null AS DocTyp,
        null AS DocTyp1,
        null AS DocTyp2,
        null AS DocSt,
        null AS DocNr,
        T2.clid AS clid,
        null AS clid2,
        F_Persons.Name AS Name,
        null AS Name2,
        F_Persons.RegNr AS RegNr,
        null AS RegNr2,
        0.0 AS b0,
        null AS descr,
        null AS descr2,
        null AS AC1,
        null AS AC2,
        null AS SAC1,
        null AS SAC2,
        0.0 AS SummC,
        'EUR' AS Cur,
        0.0 AS Summ,
        0.0 AS PVN,
        null AS RAC,
        T2.ADb AS SDb,
        T2.ACr AS SCr,
        null AS RAC2,
        null AS RAC3,
        null AS RAC4,
        null AS RAC5,
        0.0 AS QV,
        0.0 AS ZNR
    FROM
    (
        SELECT ClId, SUM(ADb) AS ADb, SUM(ACr) AS ACr
        FROM
        (
            SELECT did, ClId, SUM(SDb) AS ADb, SUM(SCr) AS ACr
            FROM
            (
                SELECT 
                    F_OPSd.id AS did,
                    F_OPSd.ClId AS ClId,
                    F_OPS.Summ AS SDb,
                    0.00 AS SCr

                FROM 
                    F_OPSd INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                    INNER JOIN F_Persons ON F_OPSd.ClId = F_Persons.ClId
                    INNER JOIN F_AcP21 ON F_OPS.AC11 = F_AcP21.AC
                WHERE 
                    F_OPSd.Dete BETWEEN :sdt AND :edt AND
                    F_Persons.TP2 = :ppertyp AND
                    F_AcP21.id1 IN ('KA','CN')

                UNION ALL

                SELECT 
                    F_OPSd.id AS did,
                    F_OPSd.ClId AS ClId,
                    0.00 AS SDb,
                    F_OPS.Summ AS SCr

                FROM 
                    F_OPSd INNER JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
                    INNER JOIN F_Persons ON F_OPSd.ClId = F_Persons.ClId
                    INNER JOIN F_AcP21 ON F_OPS.AC21 = F_AcP21.AC
                WHERE 
                    F_OPSd.Dete BETWEEN :sdt AND :edt AND
                    F_Persons.TP2 = :ppertyp AND
                    F_AcP21.id1 IN ('KA','CN')

            ) AS T1
            GROUP BY did, ClId
        ) AS T12

        WHERE (ABS(T12.ACr) + ABS(T12.ADb)) >= :psumm
        GROUP BY ClId

    ) AS T2    
    LEFT JOIN F_Persons ON T2.ClId = F_Persons.ClId

    ORDER BY ClId
    

    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_F_RESET_YEAR_GEN
AS
declare variable I INT;
declare variable s varchar(100);
begin
    i = 0;
    WHILE(i<33) do
    begin
        s = cast(i as varchar(3));
        if (i < 10) then s = '0' || s;
        s = 'ALTER SEQUENCE F_YEAR' || s ||  ' RESTART WITH 0;';
        if ((i <> 4) and (i <> 5)) then
        EXECUTE STATEMENT s;
        i = i + 1;
    end
end^


ALTER PROCEDURE SP_F_SET_KIEONR (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PNR INTEGER)
AS
declare variable ID INT;
    declare variable Nr2 INT;
begin
    Nr2 = pnr;
    FOR SELECT
        id
    FROM F_OPSd
    WHERE
        EXISTS
        (
            SELECT NULL
            FROM F_OPS
            WHERE 
                F_OPSd.id = F_OPS.DocId AND
                F_OPS.AC11 = :pac
        ) AND
        F_OPSd.Dete BETWEEN :sdt AND :edt

    ORDER BY Dete, id

    INTO :ID
    DO
    BEGIN

        UPDATE F_OPSd
        SET NrX = :Nr2
        WHERE F_OPSd.id = :ID;

        nr2 = nr2 + 1;
    END
end^


ALTER PROCEDURE SP_F_SET_KIZONR (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PNR INTEGER)
AS
declare variable ID INT;
    declare variable Nr2 INT;
begin
    Nr2 = pnr;
    FOR SELECT
        id
    FROM F_OPSd
    WHERE
        EXISTS
        (
            SELECT NULL
            FROM F_OPS
            WHERE 
                F_OPSd.id = F_OPS.DocId AND
                F_OPS.AC21 = :pac
        ) AND
        F_OPSd.Dete BETWEEN :sdt AND :edt

    ORDER BY Dete, id

    INTO :ID
    DO
    BEGIN

        UPDATE F_OPSd
        SET NrX = :Nr2
        WHERE F_OPSd.id = :ID;

        nr2 = nr2 + 1;
    END
end^


ALTER PROCEDURE SP_F_SET_USERNAME (
    USERNAME VARCHAR(15))
AS
begin
    rdb$set_context('USER_SESSION', 'UserName', :username);
end^


ALTER PROCEDURE SP_F_VWOPS_FILTER_AND (
    PDATE1 DATE,
    PDATE2 DATE,
    PTEXT VARCHAR(50),
    PCLID VARCHAR(15),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PDOCGR VARCHAR(10))
RETURNS (
    ID TYPE OF COLUMN F_OPS.ID,
    DOCID TYPE OF COLUMN F_OPS.DOCID,
    DETE TYPE OF COLUMN F_OPSD.DETE,
    NRX TYPE OF COLUMN F_OPSD.NRX,
    ZNR TYPE OF COLUMN F_OPSD.ZNR,
    DOCTYP TYPE OF COLUMN F_OPSD.DOCTYP,
    DOCST TYPE OF COLUMN F_OPSD.DOCST,
    DOCNR TYPE OF COLUMN F_OPSD.DOCNR,
    DOCTYP2 TYPE OF COLUMN F_DOCTYP.ID1,
    CLID TYPE OF COLUMN F_OPSD.CLID,
    NAME TYPE OF COLUMN F_PERSONS.NAME,
    REGNR TYPE OF COLUMN F_PERSONS.REGNR,
    PVNREGNR TYPE OF COLUMN F_PERSONS.PVNREGNR,
    CLID2 TYPE OF COLUMN F_OPSD.CLID2,
    NAME2 TYPE OF COLUMN F_PERSONS.NAME,
    REGNR2 TYPE OF COLUMN F_PERSONS.REGNR,
    DESCR TYPE OF COLUMN F_OPSD.DESCR,
    AC11 TYPE OF COLUMN F_OPS.AC11,
    AC12 TYPE OF COLUMN F_OPS.AC12,
    AC13 TYPE OF COLUMN F_OPS.AC13,
    AC14 TYPE OF COLUMN F_OPS.AC14,
    AC15 TYPE OF COLUMN F_OPS.AC15,
    AC21 TYPE OF COLUMN F_OPS.AC21,
    AC22 TYPE OF COLUMN F_OPS.AC22,
    AC23 TYPE OF COLUMN F_OPS.AC23,
    AC24 TYPE OF COLUMN F_OPS.AC24,
    AC25 TYPE OF COLUMN F_OPS.AC25,
    SUMMC TYPE OF COLUMN F_OPS.SUMMC,
    CUR TYPE OF COLUMN F_OPS.CUR,
    SUMM TYPE OF COLUMN F_OPS.SUMM,
    QV TYPE OF COLUMN F_OPS.QV,
    DESCR2 TYPE OF COLUMN F_OPS.DESCR)
AS
begin

    for select
        f_ops.id,
        f_ops.docid,
        f_opsd.DETE,
        f_opsd.nrx,
        f_opsd.znr,
        f_opsd.doctyp,
        f_opsd.docst,
        f_opsd.docnr,
        F_DOCTYP.id1 as DOCTYP2,
        f_opsd.clid,
        f_persons.name,
        f_persons.regnr,
        f_persons.pvnregnr,
        f_opsd.clid2,
        F_Persons2.name as NAME2,
        F_Persons2.regnr AS regnr2,
        f_opsd.descr,

        f_ops.ac11,
        f_ops.ac12,
        f_ops.ac13,
        f_ops.ac14,
        f_ops.ac15,
        f_ops.ac21,
        f_ops.ac22,
        f_ops.ac23,
        f_ops.ac24,
        f_ops.ac25,
        f_ops.summc,
        f_ops.cur,
        f_ops.summ,
        f_ops.qv,
        f_ops.descr AS descr2

    FROM
        F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
        LEFT JOIN F_DocTyp ON F_OPSd.DocTyp = F_DocTyp.id
        LEFT JOIN F_Persons ON F_OPSd.ClId = F_Persons.ClId
        LEFT JOIN F_Persons AS F_Persons2 ON F_OPSd.ClId2 = F_Persons2.ClId

    WHERE
        (:pdate1 IS NULL OR f_opsd.DETE >= :pdate1) AND
        (:pdate2 IS NULL OR f_opsd.DETE <= :pdate2) AND
        (:pclid IS NULL OR f_opsd.ClId = :pclid OR ClId2 = :pclid) AND
        (:ptext IS NULL OR F_OPSd.Descr LIKE :ptext) AND
        (
            :PDOCGR IS NULL OR EXISTS(
                SELECT DTA.ID
                FROM f_doctypb AS DTB inner join f_doctypa AS DTA on DTB.ida = DTA.id
                WHERE DTB.ID = F_OPSD.doctyp AND DTA.ID = :PDOCGR
            )
        )
        AND
        (
            (:pac11 IS NULL OR F_OPS.AC11 LIKE :pac11) AND
            (:pac12 IS NULL OR F_OPS.AC12 LIKE :pac12) AND
            (:pac13 IS NULL OR F_OPS.AC13 LIKE :pac13) AND
            (:pac14 IS NULL OR F_OPS.AC14 LIKE :pac14) AND
            (:pac15 IS NULL OR F_OPS.AC15 LIKE :pac15)
        )
        AND
        (
            (:pac21 IS NULL OR F_OPS.AC21 LIKE :pac21) AND
            (:pac22 IS NULL OR F_OPS.AC22 LIKE :pac22) AND
            (:pac23 IS NULL OR F_OPS.AC23 LIKE :pac23) AND
            (:pac24 IS NULL OR F_OPS.AC24 LIKE :pac24) AND
            (:pac25 IS NULL OR F_OPS.AC25 LIKE :pac25)
        )
        ORDER BY DETE, f_opsd.id, f_ops.id
        into
            :ID, :docid, :DETE, :nrx, :znr,
            :doctyp, :docst, :docnr, :doctyp2,
            :clid, :name, :regnr, :pvnregnr, 
            :clid2, :name2, :regnr2,
            :descr,
            :ac11, :ac12, :ac13, :ac14, :ac15,
            :ac21, :ac22, :ac23, :ac24, :ac25,
            :summc, :cur, :summ, :qv, :descr2
        do
        begin
            suspend;
        end
end^


ALTER PROCEDURE SP_F_VWOPS_FILTER_OR (
    PDATE1 DATE,
    PDATE2 DATE,
    PTEXT VARCHAR(50),
    PCLID VARCHAR(15),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PDOCGR VARCHAR(10))
RETURNS (
    ID TYPE OF COLUMN F_OPS.ID,
    DOCID TYPE OF COLUMN F_OPS.DOCID,
    DETE TYPE OF COLUMN F_OPSD.DETE,
    NRX TYPE OF COLUMN F_OPSD.NRX,
    ZNR TYPE OF COLUMN F_OPSD.ZNR,
    DOCTYP TYPE OF COLUMN F_OPSD.DOCTYP,
    DOCST TYPE OF COLUMN F_OPSD.DOCST,
    DOCNR TYPE OF COLUMN F_OPSD.DOCNR,
    DOCTYP2 TYPE OF COLUMN F_DOCTYP.ID1,
    CLID TYPE OF COLUMN F_OPSD.CLID,
    NAME TYPE OF COLUMN F_PERSONS.NAME,
    REGNR TYPE OF COLUMN F_PERSONS.REGNR,
    PVNREGNR TYPE OF COLUMN F_PERSONS.PVNREGNR,
    CLID2 TYPE OF COLUMN F_OPSD.CLID2,
    NAME2 TYPE OF COLUMN F_PERSONS.NAME,
    REGNR2 TYPE OF COLUMN F_PERSONS.REGNR,
    DESCR TYPE OF COLUMN F_OPSD.DESCR,
    AC11 TYPE OF COLUMN F_OPS.AC11,
    AC12 TYPE OF COLUMN F_OPS.AC12,
    AC13 TYPE OF COLUMN F_OPS.AC13,
    AC14 TYPE OF COLUMN F_OPS.AC14,
    AC15 TYPE OF COLUMN F_OPS.AC15,
    AC21 TYPE OF COLUMN F_OPS.AC21,
    AC22 TYPE OF COLUMN F_OPS.AC22,
    AC23 TYPE OF COLUMN F_OPS.AC23,
    AC24 TYPE OF COLUMN F_OPS.AC24,
    AC25 TYPE OF COLUMN F_OPS.AC25,
    SUMMC TYPE OF COLUMN F_OPS.SUMMC,
    CUR TYPE OF COLUMN F_OPS.CUR,
    SUMM TYPE OF COLUMN F_OPS.SUMM,
    QV TYPE OF COLUMN F_OPS.QV,
    DESCR2 TYPE OF COLUMN F_OPS.DESCR)
AS
begin

    for select
        f_ops.id,
        f_ops.docid,
        f_opsd.DETE,
        f_opsd.nrx,
        f_opsd.znr,
        f_opsd.doctyp,
        f_opsd.docst,
        f_opsd.docnr,
        f_doctyp.id1 as doctyp2,
        f_opsd.clid,
        f_persons.name,
        f_persons.regnr,
        f_persons.pvnregnr,
        f_opsd.clid2,
        F_Persons2.name as NAME2,
        F_Persons2.regnr AS regnr2,
        f_opsd.descr,

        f_ops.ac11,
        f_ops.ac12,
        f_ops.ac13,
        f_ops.ac14,
        f_ops.ac15,
        f_ops.ac21,
        f_ops.ac22,
        f_ops.ac23,
        f_ops.ac24,
        f_ops.ac25,
        f_ops.summc,
        f_ops.cur,
        f_ops.summ,
        f_ops.qv,
        f_ops.descr AS descr2

    FROM
        F_OPSd JOIN F_OPS ON F_OPSd.id = F_OPS.DocId
        LEFT JOIN F_DocTyp ON F_OPSd.DocTyp = F_DocTyp.id
        LEFT JOIN F_Persons ON F_OPSd.ClId = F_Persons.ClId
        LEFT JOIN F_Persons AS F_Persons2 ON F_OPSd.ClId2 = F_Persons2.ClId

    WHERE
        (:pdate1 IS NULL OR f_opsd.DETE >= :pdate1) AND
        (:pdate2 IS NULL OR f_opsd.DETE <= :pdate2) AND
        (:pclid IS NULL OR f_opsd.ClId = :pclid OR ClId2 = :pclid) AND
        (:ptext IS NULL OR F_OPSd.Descr LIKE :ptext) AND
        (
            :PDOCGR IS NULL OR EXISTS(
                SELECT DTA.ID
                FROM f_doctypb AS DTB inner join f_doctypa AS DTA on DTB.ida = DTA.id
                WHERE DTB.ID = F_OPSD.doctyp AND DTA.ID = :PDOCGR
            )
        ) AND
        (
            (
                (:pac11 IS NULL OR F_OPS.AC11 LIKE :pac11) AND
                (:pac12 IS NULL OR F_OPS.AC12 LIKE :pac12) AND
                (:pac13 IS NULL OR F_OPS.AC13 LIKE :pac13) AND
                (:pac14 IS NULL OR F_OPS.AC14 LIKE :pac14) AND
                (:pac15 IS NULL OR F_OPS.AC15 LIKE :pac15)
            )
            OR
            (
                (:pac21 IS NULL OR F_OPS.AC21 LIKE :pac21) AND
                (:pac22 IS NULL OR F_OPS.AC22 LIKE :pac22) AND
                (:pac23 IS NULL OR F_OPS.AC23 LIKE :pac23) AND
                (:pac24 IS NULL OR F_OPS.AC24 LIKE :pac24) AND
                (:pac25 IS NULL OR F_OPS.AC25 LIKE :pac25)
            )
        )
        ORDER BY DETE, f_opsd.id, f_ops.id
        into
            :ID, :docid, :DETE, :nrx, :znr,
            :doctyp, :docst, :docnr, :doctyp2,
            :clid, :name, :regnr, :pvnregnr,
            :clid2, :name2, :regnr2,
            :descr,
            :ac11, :ac12, :ac13, :ac14, :ac15,
            :ac21, :ac22, :ac23, :ac24, :ac25,
            :summc, :cur, :summ, :qv, :descr2
        do
        begin
            suspend;
        end
end^


ALTER PROCEDURE SP_F_ZDT_OPS_SET (
    ID INTEGER,
    ZDT TIMESTAMP)
AS
begin
    update f_ops
    set zdt = :zdt
    where id = :id;
end^


ALTER PROCEDURE SP_F_ZDT_OPSD_SET (
    ID INTEGER,
    ZDT TIMESTAMP)
AS
begin
    update f_opsd
    set zdt = :zdt
    where id = :id;
end^


ALTER PROCEDURE SP_GEN_PARAMS_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_params_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_CALC_DOC_AMOUNTS (
    PIDDOC INTEGER,
    PISREVERSED INTEGER)
AS
declare vtrackstockout integer;
    declare vtrackstockin integer;
    declare vamountindoc damount;
    declare vamountinstore damount;
    declare viditem integer;
    declare vidrow integer;
    declare vidstoreout integer;
    declare vidstorein integer;
    declare vtemp integer;
    declare vdoctp integer;
    declare vdt date;
    declare vtp integer;
    declare vlastsaledate date;
begin
    select
        D1.dt, 
        D1.tp,
        D1.idstoreout,
        D1.idstorein,
        STPout.trackstock as trout,
        STPin.trackstock as trin
    from m_docs as D1
    join m_stores as STout on D1.id = :piddoc and
        STout.id = D1.idstoreout
    join m_stores as STin on STin.id = D1.idstorein
    join m_storetype as STPout on STPout.id = STout.tp
    join m_storetype as STPin on STPin.id = STin.tp
    into :vdt, :vdoctp, :vidstoreout, :vidstorein,
        :vtrackstockout, :vtrackstockin;
    
    if ((vtrackstockout = 0) and (vtrackstockin = 0)) then exit;

    if (pisreversed = 1) then
    begin
        vtemp = vidstoreout;
        vidstoreout = vidstorein;
        vidstorein = vtemp;

        vtemp = vtrackstockout;
        vtrackstockout = vtrackstockin;
        vtrackstockin = vtemp;
    end

    for select
        R1.id, R1.iditem, R1.amount, D1.tp
    from m_docs as D1
    join m_rows as R1 on D1.id = :piddoc and
        D1.id = R1.iddoc
    join m_items as IT1 on IT1.id = R1.iditem and
        IT1.isservice = 0
    into :vidrow, :viditem, :vamountindoc, :vtp
    do
    begin
        if (vtp in (5, 7)) then
        begin
            if (vamountindoc >= 0) then
                exception ex_failure 'Amount must be negative for ' || :vidrow;
        end else
        begin
            if (vamountindoc <= 0) then
                exception ex_failure 'Amount cant be < 0 for ' || :vidrow;
        end

        select amountinstore, lastsaledate
        from m_items
        where id = :viditem
        into :vamountinstore, :vlastsaledate;

        if (vtrackstockout = 1) then
        begin
            if (vtrackstockin = 0) then
            begin
                if (vamountinstore < vamountindoc) then
                    exception ex_failure 'Not enough amount in stock '
                        || 'item:[' || :viditem || ']';

                if (vdoctp = 3) then
                    if ((vlastsaledate is null) or (vlastsaledate < vdt))
                    then vlastsaledate = vdt;

                update m_items
                set amountinstore = amountinstore - :vamountindoc
                where id = :viditem;
            end

            select amount
            from m_items_per_store
            where iditem = :viditem and idstore = :vidstoreout
            into :vamountinstore;

            vamountinstore = coalesce(vamountinstore, 0) - vamountindoc;

            if (vamountinstore < 0) then
                exception ex_failure 'Not enough amount in stock '
                    || 'item:[' || :viditem || ']'
                    || 'store:[' || :vidstoreout || ']';
        
            update or insert into m_items_per_store
            values (:viditem, :vidstoreout, :vamountinstore);
        end

        if (vtrackstockin = 1) then
        begin
            if (vtrackstockout = 0) then
            begin
                update m_items
                set amountinstore = amountinstore + :vamountindoc
                where id = :viditem;
            end

            select amount
            from m_items_per_store
            where iditem = :viditem and idstore = :vidstorein
            into :vamountinstore;

            vamountinstore = coalesce(vamountinstore, 0) + vamountindoc;

            update or insert into m_items_per_store
            values (:viditem, :vidstorein, :vamountinstore);
        end

    end

end^


ALTER PROCEDURE SP_M_CLEARDATA
AS
begin
    delete from m_links;
    delete from m_items_per_store;
    update m_rows set idcredrow = null;
    update m_docs set idcreddoc = null;
    delete from m_rows;
    delete from m_docs;
    update m_items set
        m_items.lastbuyprice = 0,
        m_items.amountinstore = 0,
        m_items.lastsaledate = null,
        m_items.lastbuydate = null;
end^


ALTER PROCEDURE SP_M_CURRENTSTOCK_01 (
    PIDITEM INTEGER)
RETURNS (
    IDITEM INTEGER,
    IDSTORE INTEGER,
    AMOUNT DAMOUNT)
AS
begin
    for select iditem, idstore, amount
    from m_items_per_store
    where iditem = :piditem and amount > 0
    into :iditem, :idstore, :amount
    do
      suspend;
end^


ALTER PROCEDURE SP_M_CURRENTSTOCK_02 (
    PIDSTORE INTEGER)
RETURNS (
    IDITEM INTEGER,
    IDSTORE INTEGER,
    AMOUNT DAMOUNT)
AS
begin
    for select iditem, idstore, amount
    from m_items_per_store
    where idstore = :pidstore and amount > 0
    into :iditem, :idstore, :amount
    do
      suspend;
end^


ALTER PROCEDURE SP_M_DEL_FINDOC (
    PIDDOCM INTEGER)
AS
BEGIN
  EXIT;
END^


ALTER PROCEDURE SP_M_FILTER_DOCS_01 (
    PDT1 DATE,
    PDT2 DATE,
    PTP INTEGER,
    PSTATE INTEGER,
    PIDSTOREOUT INTEGER,
    PIDSTOREIN INTEGER,
    PIDSTOREOUTORIN INTEGER)
RETURNS (
    ID TYPE OF COLUMN M_DOCS.ID,
    DT TYPE OF COLUMN M_DOCS.DT,
    SR TYPE OF COLUMN M_DOCS.SR,
    NR TYPE OF COLUMN M_DOCS.NR,
    TP TYPE OF COLUMN M_DOCS.TP,
    PVNTYPE TYPE OF COLUMN M_DOCS.PVNTYPE,
    STATE TYPE OF COLUMN M_DOCS.STATE,
    IDSTOREIN TYPE OF COLUMN M_DOCS.IDSTOREIN,
    IDSTOREOUT TYPE OF COLUMN M_DOCS.IDSTOREOUT,
    IDCREDDOC TYPE OF COLUMN M_DOCS.IDCREDDOC,
    CREDDOCDT TYPE OF COLUMN M_DOCS.CREDDOCDT,
    SUMM TYPE OF COLUMN M_DOCS.SUMM,
    IDSEQ TYPE OF COLUMN M_DOCS.IDSEQ,
    ACCIN TYPE OF COLUMN M_DOCS.ACCIN,
    ACCOUT TYPE OF COLUMN M_DOCS.ACCOUT,
    CREDDOCSR TYPE OF COLUMN M_DOCS.CREDDOCSR,
    CREDDOCNR TYPE OF COLUMN M_DOCS.CREDDOCNR,
    IDCARRIER TYPE OF COLUMN M_DOCS.IDCARRIER,
    IDADDRESSOUT TYPE OF COLUMN M_DOCS.IDADDRESSOUT,
    IDADDRESSIN TYPE OF COLUMN M_DOCS.IDADDRESSIN,
    IDVEHICLE TYPE OF COLUMN M_DOCS.IDVEHICLE,
    IDTRANSACTIONTYPE TYPE OF COLUMN M_DOCS.IDTRANSACTIONTYPE,
    IDPAYMENTTYPE TYPE OF COLUMN M_DOCS.IDPAYMENTTYPE,
    IDDRIVER TYPE OF COLUMN M_DOCS.IDDRIVER,
    ACCOUNTINGTP TYPE OF COLUMN M_DOCS.ACCOUNTINGTP,
    ACCTP1 TYPE OF COLUMN M_DOCS.ACCTP1,
    ACCTP2 TYPE OF COLUMN M_DOCS.ACCTP2,
    WEVATPAYER TYPE OF COLUMN M_DOCS.WEVATPAYER,
    DUEDATE TYPE OF COLUMN M_DOCS.DUEDATE)
AS
begin
    for select
         id,
         dt,
         sr,
         nr,
         tp,
         pvntype,
         state,
         idstorein,
         idstoreout,
         idcreddoc,
         creddocdt,
         summ,
         idseq,
         accin,
         accout,
         creddocsr,
         creddocnr,
         idcarrier,
         idaddressout,
         idaddressin,
         idvehicle,
         idtransactiontype,
         idpaymenttype,
         iddriver,
         accountingtp,
         acctp1,
         acctp2,
         wevatpayer,
         duedate
      from m_docs
      where (:pdt1 is null or dt >= :pdt1) and
          (:pdt2 is null or dt <= :pdt2) and
          (:ptp is null or tp = :ptp) and
          (:pstate is null or state = :pstate) and
          (
            (:pidstoreoutorin is null and
                (:pidstoreout is null or idstoreout = :pidstoreout) and
                (:pidstorein is null or idstorein = :pidstorein)
            ) or
            (:pidstoreoutorin is not null and
                (idstoreout = :pidstoreoutorin or
                idstorein = :pidstoreoutorin)
            )
          )
      order by dt, idseq, id
      into :id,
           :dt,
           :sr,
           :nr,
           :tp,
           :pvntype,
           :state,
           :idstorein,
           :idstoreout,
           :idcreddoc,
           :creddocdt,
           :summ,
           :idseq,
           :accin,
           :accout,
           :creddocsr,
           :creddocnr,
           :idcarrier,
           :idaddressout,
           :idaddressin,
           :idvehicle,
           :idtransactiontype,
           :idpaymenttype,
           :iddriver,
           :accountingtp,
           :acctp1,
           :acctp2,
           :wevatpayer,
           :duedate
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_M_FILTER_DOCS_02 (
    PIDDOC INTEGER)
RETURNS (
    ID TYPE OF COLUMN M_DOCS.ID,
    DT TYPE OF COLUMN M_DOCS.DT,
    SR TYPE OF COLUMN M_DOCS.SR,
    NR TYPE OF COLUMN M_DOCS.NR,
    TP TYPE OF COLUMN M_DOCS.TP,
    PVNTYPE TYPE OF COLUMN M_DOCS.PVNTYPE,
    STATE TYPE OF COLUMN M_DOCS.STATE,
    IDSTOREIN TYPE OF COLUMN M_DOCS.IDSTOREIN,
    IDSTOREOUT TYPE OF COLUMN M_DOCS.IDSTOREOUT,
    IDCREDDOC TYPE OF COLUMN M_DOCS.IDCREDDOC,
    CREDDOCDT TYPE OF COLUMN M_DOCS.CREDDOCDT,
    SUMM TYPE OF COLUMN M_DOCS.SUMM,
    IDSEQ TYPE OF COLUMN M_DOCS.IDSEQ,
    ACCIN TYPE OF COLUMN M_DOCS.ACCIN,
    ACCOUT TYPE OF COLUMN M_DOCS.ACCOUT,
    CREDDOCSR TYPE OF COLUMN M_DOCS.CREDDOCSR,
    CREDDOCNR TYPE OF COLUMN M_DOCS.CREDDOCNR,
    IDCARRIER TYPE OF COLUMN M_DOCS.IDCARRIER,
    IDADDRESSOUT TYPE OF COLUMN M_DOCS.IDADDRESSOUT,
    IDADDRESSIN TYPE OF COLUMN M_DOCS.IDADDRESSIN,
    IDVEHICLE TYPE OF COLUMN M_DOCS.IDVEHICLE,
    IDTRANSACTIONTYPE TYPE OF COLUMN M_DOCS.IDTRANSACTIONTYPE,
    IDPAYMENTTYPE TYPE OF COLUMN M_DOCS.IDPAYMENTTYPE,
    IDDRIVER TYPE OF COLUMN M_DOCS.IDDRIVER,
    ACCOUNTINGTP TYPE OF COLUMN M_DOCS.ACCOUNTINGTP,
    ACCTP1 TYPE OF COLUMN M_DOCS.ACCTP1,
    ACCTP2 TYPE OF COLUMN M_DOCS.ACCTP2,
    WEVATPAYER TYPE OF COLUMN M_DOCS.WEVATPAYER,
    DUEDATE TYPE OF COLUMN M_DOCS.DUEDATE)
AS
begin
    for select
         id,
         dt,
         sr,
         nr,
         tp,
         pvntype,
         state,
         idstorein,
         idstoreout,
         idcreddoc,
         creddocdt,
         summ,
         idseq,
         accin,
         accout,
         creddocsr,
         creddocnr,
         idcarrier,
         idaddressout,
         idaddressin,
         idvehicle,
         idtransactiontype,
         idpaymenttype,
         iddriver,
         accountingtp,
         acctp1,
         acctp2,
         wevatpayer,
         duedate
      from m_docs
      where id = :piddoc
      order by dt, idseq, id
      into :id,
           :dt,
           :sr,
           :nr,
           :tp,
           :pvntype,
           :state,
           :idstorein,
           :idstoreout,
           :idcreddoc,
           :creddocdt,
           :summ,
           :idseq,
           :accin,
           :accout,
           :creddocsr,
           :creddocnr,
           :idcarrier,
           :idaddressout,
           :idaddressin,
           :idvehicle,
           :idtransactiontype,
           :idpaymenttype,
           :iddriver,
           :accountingtp,
           :acctp1,
           :acctp2,
           :wevatpayer,
           :duedate
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_M_FILTER_INVDOCS_1 (
    PDT1 DATE,
    PDT2 DATE,
    PSTATE INTEGER,
    PIDSTORE INTEGER)
RETURNS (
    ID TYPE OF COLUMN M_INV_DOCS.ID,
    DT TYPE OF COLUMN M_INV_DOCS.DT,
    NR TYPE OF COLUMN M_INV_DOCS.NR,
    STATE TYPE OF COLUMN M_INV_DOCS.STATE,
    IDSTORE TYPE OF COLUMN M_INV_DOCS.IDSTORE,
    PERSONS TYPE OF COLUMN M_INV_DOCS.PERSONS)
AS
begin
    for select
         id,
         dt,
         nr,
         state,
         idstore,
         persons
      from m_inv_docs
      where (:pdt1 is null or dt >= :pdt1) and
          (:pdt2 is null or dt <= :pdt2) and
          (:pstate is null or state = :pstate) and
          (:pidstore is null or idstore = :pidstore)
      order by dt, nr, id
      into :id,
           :dt,
           :nr,
           :state,
           :idstore,
           :persons
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_M_FILTER_INVROWS_1 (
    PIDDOC INTEGER)
RETURNS (
    ID TYPE OF COLUMN M_INV_ROWS.ID,
    IDDOC TYPE OF COLUMN M_INV_ROWS.IDDOC,
    IDITEM TYPE OF COLUMN M_INV_ROWS.IDITEM,
    IDUNITS TYPE OF COLUMN M_INV_ROWS.IDUNITS,
    AM_COUNTED_1 TYPE OF COLUMN M_INV_ROWS.AM_COUNTED_1,
    AM_COUNTED_2 TYPE OF COLUMN M_INV_ROWS.AM_COUNTED_2,
    AM_CALC TYPE OF COLUMN M_INV_ROWS.AM_CALC,
    AM_DIFF TYPE OF COLUMN M_INV_ROWS.AM_DIFF)
AS
begin
    for select
        id,
        iddoc,
        iditem,
        idunits,
        am_counted_1,
        am_counted_2,
        am_calc,
        am_diff
      from m_inv_rows
      where iddoc = :piddoc
      order by id
      into
        :id,
        :iddoc,
        :iditem,
        :idunits,
        :am_counted_1,
        :am_counted_2,
        :am_calc,
        :am_diff
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_M_FILTER_ITEMS_01 (
    PIDDOC INTEGER)
RETURNS (
    ID TYPE OF COLUMN M_ITEMS.ID,
    BARCODE TYPE OF COLUMN M_ITEMS.BARCODE,
    NAME TYPE OF COLUMN M_ITEMS.NAME,
    CAT TYPE OF COLUMN M_ITEMS.CAT,
    UNITS TYPE OF COLUMN M_ITEMS.UNITS,
    STORE1 TYPE OF COLUMN M_ITEMS.STORE1,
    PVNRATE TYPE OF COLUMN M_ITEMS.PVNRATE,
    ISSERVICE TYPE OF COLUMN M_ITEMS.ISSERVICE,
    ISPRODUCED TYPE OF COLUMN M_ITEMS.ISPRODUCED,
    SELLPRICE TYPE OF COLUMN M_ITEMS.SELLPRICE,
    BUYPRICE TYPE OF COLUMN M_ITEMS.BUYPRICE,
    PRODCOST TYPE OF COLUMN M_ITEMS.PRODCOST,
    LASTBUYPRICE TYPE OF COLUMN M_ITEMS.LASTBUYPRICE,
    AMOUNTINSTORE TYPE OF COLUMN M_ITEMS.AMOUNTINSTORE,
    LASTSALEDATE TYPE OF COLUMN M_ITEMS.LASTSALEDATE,
    LASTBUYDATE TYPE OF COLUMN M_ITEMS.LASTBUYDATE)
AS
begin
    for select
        m_items.id,
        m_items.barcode,
        m_items.name,
        m_items.cat,
        m_items.units,
        m_items.store1,
        m_items.pvnrate,
        m_items.isservice,
        m_items.isproduced,
        m_items.sellprice,
        m_items.buyprice,
        m_items.prodcost,
        m_items.lastbuyprice,
        m_items.amountinstore,
        m_items.lastsaledate,
        m_items.lastbuydate
    from m_items
    join m_rows on m_rows.iddoc = :piddoc
    into
        :id,
        :barcode,
        :name,
        :cat,
        :units,
        :store1,
        :pvnrate,
        :isservice,
        :isproduced,
        :sellprice,
        :buyprice,
        :prodcost,
        :lastbuyprice,
        :amountinstore,
        :lastsaledate,
        :lastbuydate
    do
        begin
    suspend;
end
end^


ALTER PROCEDURE SP_M_FILTER_ITEMS_PER_STORE_01 (
    PIDDOC INTEGER)
RETURNS (
    IDITEM TYPE OF COLUMN M_ITEMS_PER_STORE.IDITEM,
    IDSTORE TYPE OF COLUMN M_ITEMS_PER_STORE.IDSTORE,
    AMOUNT TYPE OF COLUMN M_ITEMS_PER_STORE.AMOUNT)
AS
begin
    for select
        m_items_per_store.iditem,
        m_items_per_store.idstore,
        m_items_per_store.amount
    from m_items_per_store
    join m_rows on m_rows.iddoc = :piddoc and
        m_rows.iditem = m_items_per_store.iditem
    into
        :iditem,
        :idstore,
        :amount
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_M_FILTER_ROWS_01 (
    PIDDOC INTEGER)
RETURNS (
    ID TYPE OF COLUMN M_ROWS.ID,
    IDDOC TYPE OF COLUMN M_ROWS.IDDOC,
    IDITEM TYPE OF COLUMN M_ROWS.IDITEM,
    IDPVNRATE TYPE OF COLUMN M_ROWS.IDPVNRATE,
    UNITS TYPE OF COLUMN M_ROWS.UNITS,
    IDCREDROW TYPE OF COLUMN M_ROWS.IDCREDROW,
    AMOUNT TYPE OF COLUMN M_ROWS.AMOUNT,
    DISCOUNT TYPE OF COLUMN M_ROWS.DISCOUNT,
    PRICE0 TYPE OF COLUMN M_ROWS.PRICE0,
    PRICE TYPE OF COLUMN M_ROWS.PRICE,
    BUYPRICE TYPE OF COLUMN M_ROWS.BUYPRICE,
    OLDPRICE TYPE OF COLUMN M_ROWS.OLDPRICE,
    TOLDPRICE TYPE OF COLUMN M_ROWS.TOLDPRICE,
    TPRICE TYPE OF COLUMN M_ROWS.TPRICE,
    TBUYPRICE TYPE OF COLUMN M_ROWS.TBUYPRICE,
    IDSEQ TYPE OF COLUMN M_ROWS.IDSEQ,
    ACC6 TYPE OF COLUMN M_ROWS.ACC6,
    ACC7 TYPE OF COLUMN M_ROWS.ACC7)
AS
begin
    for select
        id,
        iddoc,
        iditem,
        idpvnrate,
        units,
        idcredrow,
        amount,
        discount,
        price0,
        price,
        buyprice,
        oldprice,
        toldprice,
        tprice,
        tbuyprice,
        idseq,
        acc6,
        acc7
    from m_rows
    where iddoc = :piddoc
    order by idseq, id
    into
        :id,
        :iddoc,
        :iditem,
        :idpvnrate,
        :units,
        :idcredrow,
        :amount,
        :discount,
        :price0,
        :price,
        :buyprice,
        :oldprice,
        :toldprice,
        :tprice,
        :tbuyprice,
        :idseq,
        :acc6,
        :acc7
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_M_GEN_ADDRESSSES_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_addressses_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_AUX_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_aux_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_BANKACCOUNTS_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_banks_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_BANKS_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_banks_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_CONTACTS_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_contacts_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_COUNTRIES_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_countries_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_DISC_LISTS_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_disc_lists_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_DISC_LISTS_P_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_disc_lists_p_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_DISC_LISTS_R_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_disc_lists_r_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_DOCS_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_docs_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_DOCSEQ
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_docseq, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_DOCSEQ2 (
    CT INTEGER)
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_docseq, CT);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_DOCTYPES_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_doctypes_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_INV_DOCS_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_inv_docs_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_INV_ROWS_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_inv_rows_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_ITEMS_CAT_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_items_cat_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_ITEMS_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_items_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_PAYMENTTYPE_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_paymenttype_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_PRICE_LISTS_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_price_lists_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_PRICE_LISTS_P_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_price_lists_p_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_PRICE_LISTS_R_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_price_lists_r_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_PVNRATES_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_pvnrates_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_PVNRATES2_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_pvnrates2_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_PVNTEXTS_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_pvntexts_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_ROWS_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_rows_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_STORES_CAT_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_stores_cat_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_STORES_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_stores_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_STORETYPE_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_storetype_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_TRANSACTIONTYPE_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_transactiontype_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_UNITS_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_units_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GEN_VEHICLES_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_m_vehicles_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_M_GETCOUNTSFOREVENTS (
    PTP INTEGER,
    PID INTEGER)
RETURNS (
    RCOUNT INTEGER)
AS
begin
    /*PTP
        1 - fullrecalc
        2 - full doc recalc
    */
    if (ptp = 1) then
    begin
        for select count(id)
        from m_rows
        into :rcount
        do
        begin
            suspend;
            exit;
        end
    end

    if (ptp = 2) then
    begin
        for select count(id)
        from m_rows
        join (
            select distinct iditem
            from m_rows
            where iddoc = :pid
        ) as T1 on T1.iditem = m_rows.iditem
        into :rcount
        do
        begin
            suspend;
            exit;
        end
    end

    rcount = 0;
    suspend;
end^


ALTER PROCEDURE SP_M_ITEMMOVEMENT_01 (
    PIDITEM INTEGER,
    PDATE1 DATE,
    PDATE2 DATE)
RETURNS (
    GTP INTEGER,
    DT DATE,
    SR TYPE OF COLUMN M_DOCS.SR,
    NR TYPE OF COLUMN M_DOCS.NR,
    TP TYPE OF COLUMN M_DOCS.TP,
    IDSTOREOUT INTEGER,
    IDSTOREIN INTEGER,
    AMOUNT DAMOUNT)
AS
begin
    gtp = 0;
    for select * from
    (
        with tracked_stores as (
            select m_stores.id
            from m_stores
            join m_storetype on m_storetype.id = m_stores.tp and
                m_storetype.trackstock = 1)
        select
            T2.idstore as idstorein,
            T2.amount as amount
        from
        (
            select idstore, sum(amount) as amount
            from
            (
                select
                    m_docs.idstorein as idstore, m_rows.amount
                from m_docs
                join m_rows on m_docs.id = m_rows.iddoc and
                    m_rows.iditem = :piditem and
                    m_docs.dt < :pdate1
                join tracked_stores on tracked_stores.id = m_docs.idstorein
            
                union all
            
                select
                    m_docs.idstoreout as idstore, -m_rows.amount as amount
                from m_docs
                join m_rows on m_docs.id = m_rows.iddoc and
                    m_rows.iditem = :piditem and
                    m_docs.dt < :pdate1
                join tracked_stores on tracked_stores.id = m_docs.idstoreout
            ) as T1
            group by T1.idstore
        ) as T2
        join m_stores on m_stores.id = T2.idstore
        where amount <> 0
        order by m_stores.code
    )
    into :idstorein, :amount
    do
    begin
        tp = -1;
        suspend;
    end
    gtp = 1;
    for select
        m_docs.dt, m_docs.sr, m_docs.nr, m_docs.tp,
        m_docs.idstoreout, m_docs.idstorein,
        m_rows.amount
    from m_docs
    join m_rows on m_docs.id = m_rows.iddoc and m_rows.iditem = :piditem
    where dt between :pdate1 and :pdate2
    order by m_docs.dt, m_rows.idseq, m_rows.id
    into :dt, :sr, :nr, :tp, :idstoreout, :idstorein, :amount
    do
      suspend;

end^


ALTER PROCEDURE SP_M_MAKELINKS_01A (
    PIDROW INTEGER,
    PSTARTDATE DATE)
RETURNS (
    RESULT VARCHAR(300))
AS
declare variable viditem integer;
    declare variable vamounttolink damount;
    declare variable vamountlinked damount;
    declare variable vdt date;
    declare variable vidrow integer;
    declare variable vamounttotal damount;
    declare variable vamountused damount;
    declare variable vgotamount damount;
    declare variable vbuyprice dpricex;
    declare variable vtotalbuyprice dpricex;
begin
    -- realizacija pircejam
    select m_rows.iditem, m_docs.dt, m_rows.amount
    from m_rows
    join m_docs on m_rows.id = :pidrow and m_docs.id = m_rows.iddoc
    into :viditem, :vdt, :vamounttolink;

    /* shouldnt be necessary
    delete
    from m_links
    where id2 = :pidrow;*/

    vgotamount = 0;
    vtotalbuyprice = 0;

    for select
        R1.id,
        R1.amount as amountotal,
        R1.buyprice
    from m_rows as R1
    join m_docs as D1 on
        R1.iditem = :viditem and
        R1.isgone = 0 and
        D1.id = R1.iddoc and
        D1.state in (2, 3) and
        D1.dt <= :vdt
    join m_doctypes on D1.tp = m_doctypes.id and
        m_doctypes.optype = 1
    order by D1.dt, R1.idseq
    into :vidrow, :vamounttotal, :vbuyprice
    do
    begin
        select sum(m_links.amount) as amountused
        from m_links
        where id1 = :vidrow
        into :vamountused;

        vamountused = coalesce(vamountused, 0);
        vamountlinked = minvalue(vamounttolink - vgotamount, vamounttotal - vamountused);

        if (vamountlinked > 0) then
        begin
            vgotamount = vgotamount + vamountlinked;

            insert into m_links (id1, id2, iditem, amount)
            values (:vidrow, :pidrow, :viditem, :vamountlinked);
            
            vbuyprice = vbuyprice * vamountlinked;
            vtotalbuyprice = vtotalbuyprice + vbuyprice;
    
            if (vgotamount >= vamounttolink) then leave;
        end
    end

    if (vgotamount < vamounttolink) then
    begin
        result = 'FAILURE';
        exception ex_failure 'Not enough amount in stock '
            || 'item:[' || :viditem || ']';
    end

    vtotalbuyprice = round(vtotalbuyprice, 2);
    vbuyprice = round(vtotalbuyprice / vamounttolink, 6);

    update m_rows
    set buyprice = :vbuyprice,
        tbuyprice = :vtotalbuyprice
    where id = :pidrow and
        (buyprice <> :vbuyprice or
        tbuyprice <> :vtotalbuyprice);

    result = 'OK';
    suspend;
end^


ALTER PROCEDURE SP_M_MAKELINKS_01B (
    PIDDOC INTEGER,
    PNEWDOCSTATE INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
declare variable vidrow integer;
begin
    execute procedure SP_M_CALC_DOC_AMOUNTS(PIDDOC, 0);

    for select m_rows.id
    from m_docs
    join m_rows on m_docs.id = :piddoc and m_docs.id = m_rows.iddoc
    join m_items on m_items.id = m_rows.iditem and
        m_items.isservice = 0
    order by m_rows.idseq, m_rows.id
    into :vidrow
    do
    begin
        execute procedure SP_M_MAKELINKS_01A (:vidrow, null)
        returning_values :result;
    end

    update m_rows
    set idseq = gen_id(gen_m_docseq, 1)
    where iddoc = :piddoc
    order by idseq, id;


    update m_docs
    set
        idseq = gen_id(gen_m_docseq, 1),
        state = :pnewdocstate
    where id = :piddoc;

    result = 'OK';
    suspend;
end^


ALTER PROCEDURE SP_M_MAKELINKS_02A (
    PIDROW INTEGER)
RETURNS (
    BUYPRICE DPRICEX,
    TBUYPRICE DPRICEX,
    RESULT VARCHAR(300))
AS
declare variable viditem integer;
    declare variable vidstore integer;
    declare variable vamounttolink damount;
    declare variable vamountinstore damount;
    declare variable vamountlinked damount;
    declare variable vdt date;
    declare variable vidrow integer;
    declare variable vamounttotal damount;
    declare variable vamountused damount;
    declare variable vgotamount damount;
    declare variable vbuyprice dpricex;
    declare variable vtotalbuyprice dpricex;
begin
    -- realizacija pircejam - testi un cenas
    select m_rows.iditem, m_docs.dt, m_rows.amount, m_docs.idstoreout
    from m_rows
    join m_docs on m_rows.id = :pidrow and m_docs.id = m_rows.iddoc
    into :viditem, :vdt, :vamounttolink, :vidstore;

    buyprice = 0;
    tbuyprice = 0;

    if (vamounttolink <= 0) then
    begin
        result = 'Amount cant be < 0 for ' || :pidrow;
        suspend;
        exit;
    end

    select amountinstore
    from m_items
    where id = :viditem
    into :vamountinstore;

    if (vamountinstore < vamounttolink) then
    begin
        result = 'Not enough amount in stock item:[' || :viditem || ']';
        suspend;
        exit;
    end

    select amount
    from m_items_per_store
    where iditem = :viditem and idstore = :vidstore
    into :vamountinstore;

    vamountinstore = coalesce(:vamountinstore, 0) - :vamounttolink;

    if (vamountinstore < 0) then
    begin
        result = 'Not enough amount in stock '
            || 'item:[' || :viditem || ']'
            || 'store:[' || :vidstore || ']';
        suspend;
        exit;
    end

    vgotamount = 0;
    vtotalbuyprice = 0;

    for select
        R1.id,
        R1.amount as amountotal,
        R1.buyprice
    from m_rows as R1
    join m_docs as D1 on
        R1.iditem = :viditem and
        R1.isgone = 0 and
        D1.id = R1.iddoc and
        D1.state in (2, 3) and
        D1.dt <= :vdt
    join m_doctypes on D1.tp = m_doctypes.id and
        m_doctypes.optype = 1
    order by D1.dt, R1.idseq
    into :vidrow, :vamounttotal, :vbuyprice
    do
    begin
        select sum(m_links.amount) as amountused
        from m_links
        where id1 = :vidrow
        into :vamountused;

        vamountused = coalesce(vamountused, 0);
        vamountlinked = minvalue(vamounttolink - vgotamount, vamounttotal - vamountused);

        if (vamountlinked > 0) then
        begin
            vgotamount = vgotamount + vamountlinked;

            vbuyprice = vbuyprice * vamountlinked;
            vtotalbuyprice = vtotalbuyprice + vbuyprice;
    
            if (vgotamount >= vamounttolink) then leave;
        end
    end

    if (vgotamount < vamounttolink) then
    begin
        result = 'Not enough amount in stock item:[' || :viditem || ']';
        suspend;
        exit;
    end

    tbuyprice = round(vtotalbuyprice, 2);
    buyprice = round(tbuyprice / vamounttolink, 6);
    result = 'OK';

    suspend;
end^


ALTER PROCEDURE SP_M_MAKELINKS_02B (
    PIDDOC INTEGER)
RETURNS (
    IDROW INTEGER,
    BUYPRICE DPRICEX,
    TBUYPRICE DPRICEX,
    RESULT VARCHAR(300))
AS
begin
    -- realizacija pircejam - testi un cenas
    for select m_rows.id
    from m_docs
    join m_rows on m_docs.id = :piddoc and m_docs.id = m_rows.iddoc
    join m_items on m_items.id = m_rows.iditem and
        m_items.isservice = 0
    order by m_rows.idseq, m_rows.id
    into :idrow
    do
    begin
        execute procedure SP_M_MAKELINKS_02a (:idrow)
        returning_values :buyprice, :tbuyprice, :result;

        suspend;
    end
end^


ALTER PROCEDURE SP_M_MAKELINKS_11 (
    PIDDOC INTEGER,
    PNEWDOCSTATE INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
declare variable vidrow integer;
begin
    -- sanemts no piegadataja
    execute procedure SP_M_CALC_DOC_AMOUNTS(piddoc, 0);

    update m_rows
    set
        idseq = gen_id(gen_m_docseq, 1),
        buyprice = price,
        tbuyprice = tprice
    where iddoc = :piddoc
    order by idseq, id;

    update m_docs
    set
        idseq = gen_id(gen_m_docseq, 1),
        state = :pnewdocstate
    where id = :piddoc;

    result = 'OK';
    suspend;
end^


ALTER PROCEDURE SP_M_MAKELINKS_12 (
    PIDDOC INTEGER)
RETURNS (
    IDITEM INTEGER,
    LASTBUYPRICE DPRICEX)
AS
declare variable vdt date;
begin
    -- pēdējās iepirkuma cenas

    select m_docs.dt
    from m_docs
    where id = :piddoc
    into :vdt;
    
    for select R1.iditem
    from m_rows as R1
    join m_docs as D1 on D1.id = :piddoc and
        D1.id = R1.iddoc
    into :iditem
    do
    begin

        lastbuyprice = null;

        select first 1 R1.buyprice
        from m_rows as R1
        join m_docs as D1 on R1.iditem = :iditem and
            D1.id = R1.iddoc and
            D1.tp = 1 and
            D1.state in (2, 3) and
            D1.dt <= :vdt
        order by D1.dt desc, R1.idseq desc
        into :lastbuyprice;

        lastbuyprice = coalesce(lastbuyprice, 0);

        suspend;
    end

end^


ALTER PROCEDURE SP_M_MAKELINKS_13 (
    PIDDOC INTEGER,
    PNEWDOCSTATE INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
declare variable vdt date;
    declare variable vidrow integer;
    declare variable viditem integer;
    declare variable vlastbuyprice dpricex;
    declare variable vtprice dpricex;
    declare variable vamount damount;
begin
    -- pierakstīšana - saņemšana ar pēdējām iepirkuma cenām

    execute procedure SP_M_CALC_DOC_AMOUNTS(piddoc, 0);

    select m_docs.dt
    from m_docs
    where id = :piddoc
    into :vdt;
    
    for select R1.id, R1.iditem, R1.amount
    from m_rows as R1
    join m_docs as D1 on D1.id = :piddoc and
        D1.id = R1.iddoc
    into :vidrow, :viditem, :vamount
    do
    begin

        vlastbuyprice = null;

        select first 1 R1.buyprice
        from m_rows as R1
        join m_docs as D1 on R1.iditem = :viditem and
            D1.id = R1.iddoc and
            D1.tp = 1 and
            D1.state in (2, 3) and
            D1.dt <= :vdt
        order by D1.dt desc, R1.idseq desc
        into :vlastbuyprice;

        vlastbuyprice = coalesce(vlastbuyprice, 0);
        vtprice = round(vlastbuyprice * vamount, 2);

        update m_rows
        set
            idseq = gen_id(gen_m_docseq, 1),
            price0 = :vlastbuyprice,
            price = :vlastbuyprice,
            tprice = :vtprice,
            buyprice = :vlastbuyprice,
            tbuyprice = :vtprice
        where id = :vidrow
        order by idseq, id;

    end

    update m_docs
    set
        idseq = gen_id(gen_m_docseq, 1),
        state = :pnewdocstate
    where id = :piddoc;

    RESULT = 'OK';
    suspend;
end^


ALTER PROCEDURE SP_M_MAKELINKS_14A (
    PIDDOC INTEGER)
RETURNS (
    IDITEM INTEGER,
    PRODCOST DPRICEX)
AS
begin
    -- ražošanas pašizmaksa no ITEMS tabulas

    for select R1.iditem, I1.prodcost
    from m_rows as R1
    join m_docs as D1 on D1.id = :piddoc and
        D1.id = R1.iddoc
    join m_items as I1 on I1.id = R1.iditem
    into :iditem, :prodcost
    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_M_MAKELINKS_14B (
    PIDDOC INTEGER,
    PNEWDOCSTATE INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
declare variable vidrow integer;
    declare variable vprodcost dpricex;
    declare variable vtprice dpricex;
    declare variable vamount damount;
begin
    -- saražots - cenas = raž.pašizmaksa no ITEMS

    execute procedure SP_M_CALC_DOC_AMOUNTS(piddoc, 0);

    for select R1.id, R1.amount, I1.prodcost
    from m_rows as R1
    join m_docs as D1 on D1.id = :piddoc and
        D1.id = R1.iddoc
    join m_items as I1 on I1.id = R1.iditem
    into :vidrow, :vamount, :vprodcost
    do
    begin

        vtprice = round(vprodcost * vamount, 2);

        update m_rows
        set
            idseq = gen_id(gen_m_docseq, 1),
            price0 = :vprodcost,
            price = :vprodcost,
            tprice = :vtprice,
            buyprice = :vprodcost,
            tbuyprice = :vtprice
        where id = :vidrow
        order by idseq, id;

    end

    update m_docs
    set
        idseq = gen_id(gen_m_docseq, 1),
        state = :pnewdocstate
    where id = :piddoc;

    RESULT = 'OK';
    suspend;
end^


ALTER PROCEDURE SP_M_MAKELINKS_21A (
    PIDROW INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
declare variable viditem integer;
    declare variable vidstorein integer;
    declare variable vamounttolink damount;
    declare variable vamountlinked damount;
    declare variable vdt date;
    declare variable vidrow integer;
    declare variable vamounttotal damount;
    declare variable vamountused damount;
    declare variable vgotamount damount;
    declare variable vbuyprice dpricex;
    declare variable vtotalbuyprice dpricex;
begin
    -- atgriezts piegadatajam
    select
        m_rows.iditem, m_docs.dt, m_rows.amount,
        m_docs.idstorein
    from m_rows
    join m_docs on m_rows.id = :pidrow and m_docs.id = m_rows.iddoc
    into :viditem, :vdt, :vamounttolink, :vidstorein;

    /*
    delete
    from m_links
    where id2 = :pidrow;*/

    vgotamount = 0;
    vtotalbuyprice = 0;

    for select
        R1.id,
        R1.buyprice,
        R1.amount as amountotal
    from m_rows as R1
    join m_docs as D1 on
        R1.iditem = :viditem and
        R1.isgone = 0 and
        D1.idstoreout = :vidstorein and
        D1.id = R1.iddoc and
        D1.dt <= :vdt and
        D1.state in (2, 3) and
        D1.tp = 2
    order by D1.dt desc, R1.idseq desc, R1.id desc
    into :vidrow, :vbuyprice, :vamounttotal
    do
    begin
        select sum(m_links.amount) as amountused
        from m_links
        where id1 = :vidrow
        into :vamountused;

        vamountused = coalesce(vamountused, 0);
        vamountlinked = minvalue(vamounttolink - vgotamount, vamounttotal - vamountused);

        if (vamountlinked > 0) then
        begin
            vgotamount = vgotamount + vamountlinked;

            insert into m_links (id1, id2, iditem, amount)
            values (:vidrow, :pidrow, :viditem, :vamountlinked);
            
            vtotalbuyprice = vtotalbuyprice + vbuyprice * vamountlinked;
    
            if (vgotamount >= vamounttolink) then leave;
        end
    end

    if (vgotamount < vamounttolink) then
    begin
        result = 'FAILURE';
        exception ex_failure
            'Not enough amount recieved from supplier to return for '
            || 'item:[' || :viditem || ']';
    end

    vtotalbuyprice = round(vtotalbuyprice, 2);

    update m_rows
    set
        buyprice = round(:vtotalbuyprice / :vamounttolink, 6),
        tbuyprice = :vtotalbuyprice
    where id = :pidrow;

    result = 'OK';
    suspend;
end^


ALTER PROCEDURE SP_M_MAKELINKS_21B (
    PIDDOC INTEGER,
    PNEWDOCSTATE INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
declare variable vidrow integer;
begin
    -- atgriezts piegadatajam
    execute procedure SP_M_CALC_DOC_AMOUNTS(PIDDOC, 0);

    for select m_rows.id
    from m_docs
    join m_rows on m_docs.id = :piddoc and m_docs.id = m_rows.iddoc
    join m_items on m_items.id = m_rows.iditem and
        m_items.isservice = 0
    order by m_rows.idseq, m_rows.id
    into :vidrow
    do
    begin
        execute procedure SP_M_MAKELINKS_21A (:vidrow)
        returning_values :result;
    end

    update m_rows
    set idseq = gen_id(gen_m_docseq, 1)
    where iddoc = :piddoc
    order by idseq, id;

    update m_docs
    set
        idseq = gen_id(gen_m_docseq, 1),
        state = :pnewdocstate
    where id = :piddoc;

    result = 'OK';
    suspend;
end^


ALTER PROCEDURE SP_M_MAKELINKS_22A (
    PIDROW INTEGER)
RETURNS (
    BUYPRICE DPRICEX,
    TBUYPRICE MONEY,
    RESULT VARCHAR(300))
AS
declare variable viditem integer;
    declare variable vidstorein integer;
    declare variable vidstoreout integer;
    declare variable vamounttolink damount;
    declare variable vamountinstore damount;
    declare variable vdt date;
    declare variable vidrow integer;
    declare variable vamounttotal damount;
    declare variable vamountused damount;
    declare variable vgotamount damount;
    declare variable vamountlinked damount;
    declare variable vbuyprice dpricex;
    declare variable vtotalbuyprice dpricex;
begin
    -- atgriezts piegadatajam - testi un cenas
    select
        m_rows.iditem, m_docs.dt, m_rows.amount,
        m_docs.idstorein, m_docs.idstoreout
    from m_rows
    join m_docs on m_rows.id = :pidrow and m_docs.id = m_rows.iddoc
    into :viditem, :vdt, :vamounttolink, :vidstorein, :vidstoreout;

    if (vamounttolink <= 0) then
    begin
        result = 'Amount cant be < 0 for ' || :pidrow;
        suspend;
        exit;
    end

    buyprice = 0;
    tbuyprice = 0;

    select t1.amountinstore
    from m_items as t1
    where t1.id = :viditem
    into :vamountinstore;

    if (vamountinstore < vamounttolink) then
    begin
        result = 'Not enough amount recieved from supplier to return for '
            || 'item:[' || :viditem || ']';
        suspend;
        exit;
    end

    select t1.amount
    from m_items_per_store as t1
    where t1.iditem = :viditem and t1.idstore = :vidstoreout
    into :vamountinstore;

    vamountinstore = coalesce(:vamountinstore, 0) - :vamounttolink;

    if (vamountinstore < 0) then
    begin
        result = 'Not enough amount recieved from supplier to return for '
            || 'item:[' || :viditem || '] '
            || 'store:[' || :vidstoreout || ']';
        suspend;
        exit;
    end

    vgotamount = 0;
    vtotalbuyprice = 0;

    for select
        R1.id,
        R1.buyprice,
        R1.amount as amountotal
    from m_rows as R1
    join m_docs as D1 on
        R1.iditem = :viditem and
        R1.isgone = 0 and
        D1.idstoreout = :vidstorein and
        D1.id = R1.iddoc and
        D1.dt <= :vdt and
        D1.state in (2, 3) and
        D1.tp = 2
    order by D1.dt desc, R1.idseq desc, R1.id desc
    into :vidrow, :vbuyprice, :vamounttotal
    do
    begin
        select sum(m_links.amount) as amountused
        from m_links
        where id1 = :vidrow
        into :vamountused;

        vamountused = coalesce(vamountused, 0);
        vamountlinked = minvalue(vamounttolink - vgotamount, vamounttotal - vamountused);

        if (vamountlinked > 0) then
        begin
            vgotamount = vgotamount + vamountlinked;
            vtotalbuyprice = vtotalbuyprice + vbuyprice * vamountlinked;
            if (vgotamount >= vamounttolink) then leave;
        end
    end

    if (vgotamount < vamounttolink) then
    begin
        result = 'Not enough amount recieved from supplier to return for '
            || 'item:[' || :viditem || ']';
        suspend;
        exit;
    end

    tbuyprice = round(vtotalbuyprice, 2);
    buyprice = round(tbuyprice / vamounttolink, 6);
    result = 'OK';

    suspend;
end^


ALTER PROCEDURE SP_M_MAKELINKS_22B (
    PIDDOC INTEGER)
RETURNS (
    IDROW INTEGER,
    BUYPRICE DPRICEX,
    TBUYPRICE MONEY,
    RESULT VARCHAR(300))
AS
begin
    -- atgriezts piegadatajam - testi un cenas
    for select m_rows.id
    from m_docs
    join m_rows on m_docs.id = :piddoc and m_docs.id = m_rows.iddoc
    join m_items on m_items.id = m_rows.iditem and
        m_items.isservice = 0
    order by m_rows.idseq, m_rows.id
    into :idrow
    do
    begin
        execute procedure SP_M_MAKELINKS_22a (:idrow)
        returning_values :buyprice, :tbuyprice, :result;

        suspend;
    end
end^


ALTER PROCEDURE SP_M_MAKELINKS_23A (
    PIDROW INTEGER)
RETURNS (
    CREDDOCID INTEGER,
    CREDROWID INTEGER,
    IDITEM INTEGER,
    AMOUNT DAMOUNT,
    BUYPRICE DPRICEX,
    TBUYPRICE MONEY)
AS
declare variable vidstorein integer;
    declare variable vidstoreout integer;
    declare variable vamounttolink damount;
    declare variable vamountinstore damount;
    declare variable vamountlinked damount;
    declare variable vdt date;
    declare variable vidrow integer;
    declare variable vamounttotal damount;
    declare variable vamountused damount;
    declare variable vgotamount damount;
    declare variable visservices integer;
begin
    -- atgriezts piegadatajam - atlasam linkus
    select
        m_rows.iditem, m_docs.dt, m_rows.amount,
        m_docs.idstorein, m_docs.idstoreout, m_items.isservice
    from m_rows
    join m_docs on m_rows.id = :pidrow and m_docs.id = m_rows.iddoc
    join m_items on m_items.id = m_rows.iditem
    into :iditem, :vdt, :vamounttolink, :vidstorein, :vidstoreout, :visservices;

    if (visservices = 1) then exit;

    vgotamount = 0;

    for select
        D1.id as iddoc,
        R1.id as idrow,
        R1.buyprice,
        R1.amount as amountotal
    from m_rows as R1
    join m_docs as D1 on
        R1.iditem = :iditem and
        R1.isgone = 0 and
        D1.idstoreout = :vidstorein and
        D1.id = R1.iddoc and
        D1.dt <= :vdt and
        D1.state in (2, 3) and
        D1.tp = 2
    order by D1.dt desc, R1.idseq desc, R1.id desc
    into :creddocid, :credrowid, :buyprice, :vamounttotal
    do
    begin
        select sum(m_links.amount) as amountused
        from m_links
        where id1 = :vidrow
        into :vamountused;

        vamountused = coalesce(vamountused, 0);
        vamountlinked = minvalue(vamounttolink - vgotamount, vamounttotal - vamountused);

        if (vamountlinked > 0) then
        begin
            vgotamount = vgotamount + vamountlinked;

            amount = vamountlinked;
            tbuyprice = round(buyprice * vamountlinked, 2);
            
            suspend;
            if (vgotamount >= vamounttolink) then exit;
        end
    end

end^


ALTER PROCEDURE SP_M_MAKELINKS_23B (
    PIDDOC INTEGER)
RETURNS (
    IDROW INTEGER,
    CREDDOCID INTEGER,
    CREDROWID INTEGER,
    IDITEM INTEGER,
    AMOUNT DAMOUNT,
    BUYPRICE DPRICEX,
    TBUYPRICE MONEY,
    CREDDOCDT DATE,
    CREDDOCSR TYPE OF COLUMN M_DOCS.SR,
    CREDDOCNR TYPE OF COLUMN M_DOCS.NR)
AS
begin
    -- atgriezts piegadatajam - atlasam linkus
    for select m_rows.id
    from m_docs
    join m_rows on m_docs.id = :piddoc and m_docs.id = m_rows.iddoc
    join m_items on m_items.id = m_rows.iditem and
        m_items.isservice = 0
    order by m_rows.idseq, m_rows.id
    into :idrow
    do
    begin
        for select
            t1.creddocid, t1.credrowid, t1.iditem,
            t1.amount, t1.buyprice, t1.tbuyprice,
            m_docs.dt, m_docs.sr, m_docs.nr
        from SP_M_MAKELINKS_23A(:idrow) as t1
        join m_docs on m_docs.id = t1.creddocid
        into
            :creddocid, :credrowid, :iditem,
            :amount, :buyprice, :tbuyprice,
            :creddocdt, :creddocsr, :creddocnr

        do suspend;
    end
end^


ALTER PROCEDURE SP_M_MAKELINKS_31A (
    PIDROW INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
declare variable viditem integer;
    declare variable vidstoreout integer;
    declare variable vidstorein integer;
    declare variable vamounttolink damount;
    declare variable vamountlinked damount;
    declare variable vamountlinked2 damount;
    declare variable vdt date;
    declare variable vidrow integer;
    declare variable vidrow2 integer;
    declare variable vamounttotal integer;
    declare variable vamountused integer;
    declare variable vgotamount damount;
    declare variable vsellprice dpricex;
    declare variable vselltotalprice dpricex;
    declare variable vbuyprice dpricex;
    declare variable vbuytotalprice dpricex;
begin
    -- atgriezts no pirceja
    select
        m_rows.iditem, m_docs.dt, m_rows.amount,
        m_docs.idstoreout, m_docs.idstorein
    from m_rows
    join m_docs on m_rows.id = :pidrow and m_docs.id = m_rows.iddoc
    into :viditem, :vdt, :vamounttolink, :vidstoreout, :vidstorein;

    if (vamounttolink >= 0) then
        exception ex_failure 'Amount must be negative '
                || 'item:[' || :viditem || ']';

    vamounttolink = -vamounttolink;

    /*delete
    from m_links
    where id2 = :pidrow;*/


    vgotamount = 0;
    vselltotalprice = 0;
    vbuytotalprice = 0;

    for select
        R1.id,
        R1.price,
        R1.buyprice,
        R1.amount as amountotal
    from m_rows as R1
    join m_docs as D1 on
        R1.iditem = :viditem and
        D1.idstorein = :vidstorein and
        D1.id = R1.iddoc and
        D1.dt <= :vdt and
        D1.state in (2, 3) and
        D1.tp = 3
    order by D1.dt desc, R1.idseq desc
    into :vidrow, :vsellprice, :vbuyprice, :vamounttotal
    do
    begin
        vamountlinked2 = 0;

        for select id1, sum(amount)
        from m_links
        where id2 = :vidrow
        group by id1
        order by id1
        into :vidrow2, :vamountused
        do
        begin
            vamountused = coalesce(vamountused, 0);
            vamountlinked = minvalue(vamounttolink - vgotamount, vamountused);
    
            if (vamountlinked > 0) then
            begin
                vgotamount = vgotamount + vamountlinked;
                vamountlinked2 = vamountlinked2 + vamountlinked;

                insert into m_links
                values (:vidrow2, :pidrow, :viditem, -:vamountlinked);
                
                update m_rows
                set isgone = 0
                where id = :vidrow2 and isgone = 1;

                vselltotalprice = vselltotalprice + vsellprice * vamountlinked;
                vbuytotalprice = vbuytotalprice + vbuyprice * vamountlinked;
                        
                if (vgotamount >= vamounttolink) then leave;
            end
        end

        if (vamountlinked2 > 0) then
        begin
            insert into m_links
            values (:vidrow, :pidrow, :viditem, :vamountlinked2);
        end
    end

    if (vgotamount < vamounttolink) then
    begin
        result = 'FAILURE';
        exception ex_failure
            'Not enough amount sent to buyer to return for '
            || 'item:[' || :viditem || ']';
    end

    vselltotalprice = round(vselltotalprice, 2);
    vsellprice = round(vselltotalprice / vamounttolink, 6);
    vbuytotalprice = round(vbuytotalprice, 2);
    vbuyprice = round(vbuytotalprice / vamounttolink, 6);

    update m_rows
    set 
        oldprice = :vsellprice,
        toldprice = :vselltotalprice,
        buyprice = -:vbuyprice,
        tbuyprice = -:vbuytotalprice
    where id = :pidrow;

    result = 'OK';
    suspend;
end^


ALTER PROCEDURE SP_M_MAKELINKS_31B (
    PIDDOC INTEGER,
    PNEWDOCSTATE INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
declare variable vidrow integer;
begin
    -- atgriezts pircejam
    execute procedure SP_M_CALC_DOC_AMOUNTS(PIDDOC, 0);

    for select m_rows.id
    from m_docs
    join m_rows on m_docs.id = :piddoc and m_docs.id = m_rows.iddoc
    join m_items on m_items.id = m_rows.iditem and
        m_items.isservice = 0
    order by m_rows.idseq, m_rows.id
    into :vidrow
    do
    begin
        execute procedure SP_M_MAKELINKS_31A (:vidrow)
        returning_values :result;
    end

    update m_rows
    set idseq = gen_id(gen_m_docseq, 1)
    where iddoc = :piddoc
    order by idseq, id;

    update m_docs
    set
        idseq = gen_id(gen_m_docseq, 1),
        state = :pnewdocstate
    where id = :piddoc;

    result = 'OK';
    suspend;
end^


ALTER PROCEDURE SP_M_MAKELINKS_32A (
    PIDROW INTEGER)
RETURNS (
    CREDDOCID INTEGER,
    CREDROWID INTEGER,
    IDITEM INTEGER,
    AMOUNT DAMOUNT,
    PRICE DPRICEX,
    TPRICE MONEY)
AS
declare variable vidstorein integer;
    declare variable vidstoreout integer;
    declare variable vamounttolink damount;
    declare variable vamountinstore damount;
    declare variable vdt date;
    declare variable vidrow integer;
    declare variable vidrow2 integer;
    declare variable vamounttotal damount;
    declare variable vamountused damount;
    declare variable vgotamount damount;
    declare variable vamountlinked damount;
    declare variable visservices integer;
begin
    -- atgriezts no pirceja - atlasam linkus
    select
        m_rows.iditem, m_docs.dt, m_rows.amount,
        m_docs.idstorein, m_docs.idstoreout
    from m_rows
    join m_docs on m_rows.id = :pidrow and m_docs.id = m_rows.iddoc
    into :iditem, :vdt, :vamounttolink, :vidstorein, :vidstoreout;

    if (vamounttolink >= 0) then exit;

    vamounttolink = -vamounttolink;

    vgotamount = 0;

    for select
        D1.id as iddoc,
        R1.id as idrow,
        R1.price,
        R1.amount as amountotal
    from m_rows as R1
    join m_docs as D1 on
        R1.iditem = :iditem and
        D1.idstorein = :vidstorein and
        D1.id = R1.iddoc and
        D1.dt <= :vdt and
        D1.state in (2, 3) and
        D1.tp = 3
    order by D1.dt desc, R1.idseq desc, R1.id desc
    into :creddocid, :credrowid, :price, :vamounttotal
    do
    begin
        for select id1, sum(amount)
        from m_links
        where id2 = :vidrow
        group by id1
        order by id1
        into :vidrow2, :vamountused
        do
        begin
            vamountused = coalesce(vamountused, 0);
            vamountlinked = minvalue(vamounttolink - vgotamount, vamountused);
    
            if (vamountlinked > 0) then
            begin
                vgotamount = vgotamount + vamountlinked;
    
                amount = vamountlinked;
                tprice = round(price * vamountlinked, 2);
                
                suspend;
                if (vgotamount >= vamounttolink) then exit;
            end
        end
    end

    if (vgotamount < vamounttolink) then exit;
        --exception ex_failure
        --    'Not enough amount sent to buyer to return for '
        --    || 'item:[' || :viditem || ']';

end^


ALTER PROCEDURE SP_M_MAKELINKS_32B (
    PIDDOC INTEGER)
RETURNS (
    IDROW INTEGER,
    CREDDOCID INTEGER,
    CREDROWID INTEGER,
    IDITEM INTEGER,
    AMOUNT DAMOUNT,
    PRICE DPRICEX,
    TPRICE MONEY,
    CREDDOCDT DATE,
    CREDDOCSR TYPE OF COLUMN M_DOCS.SR,
    CREDDOCNR TYPE OF COLUMN M_DOCS.NR)
AS
begin
    -- atgriezts no pirceja - atlasam linkus
    for select m_rows.id
    from m_docs
    join m_rows on m_docs.id = :piddoc and m_docs.id = m_rows.iddoc
    join m_items on m_items.id = m_rows.iditem and
        m_items.isservice = 0
    order by m_rows.idseq, m_rows.id
    into :idrow
    do
    begin
        for select
            t1.creddocid, t1.credrowid, t1.iditem,
            t1.amount, t1.price, t1.tprice,
            m_docs.dt, m_docs.sr, m_docs.nr
        from SP_M_MAKELINKS_32A(:idrow) as t1
        join m_docs on m_docs.id = t1.creddocid
        into
            :creddocid, :credrowid, :iditem,
            :amount, :price, :tprice,
            :creddocdt, :creddocsr, :creddocnr

        do suspend;
    end
end^


ALTER PROCEDURE SP_M_MAKELINKS_33A (
    PIDROW INTEGER)
RETURNS (
    SELLPRICE DPRICEX,
    SELLTOTALPRICE DPRICEX,
    BUYPRICE DPRICEX,
    BUYTOTALPRICE DPRICEX,
    RESULT VARCHAR(300))
AS
declare variable viditem integer;
    declare variable viditem2 integer;
    declare variable vidstorein integer;
    declare variable vidstoreout integer;
    declare variable vamounttolink damount;
    declare variable vamountinstore damount;
    declare variable vdt date;
    declare variable vidrow integer;
    declare variable vamounttotal integer;
    declare variable vamountused integer;
    declare variable vgotamount damount;
    declare variable vamountlinked damount;
    declare variable vsellprice dpricex;
    declare variable vselltotalprice dpricex;
    declare variable vbuyprice dpricex;
    declare variable vbuytotalprice dpricex;
begin
    -- atgriezts no pirceja - testi un cenas
    select
        m_rows.iditem, m_docs.dt, m_rows.amount,
        m_docs.idstorein, m_docs.idstoreout
    from m_rows
    join m_docs on m_rows.id = :pidrow and m_docs.id = m_rows.iddoc
    into :viditem, :vdt, :vamounttolink, :vidstorein, :vidstoreout;

    if (vamounttolink >= 0) then
    begin
        result = 'Amount must be negative for item:[' || :viditem || ']';
        suspend;
        exit;
    end

    vamounttolink = -vamounttolink;

    vgotamount = 0;
    selltotalprice = 0;
    buytotalprice = 0;

    for select
        R1.id,
        R1.price,
        R1.buyprice,
        R1.amount as amountotal
    from m_rows as R1
    join m_docs as D1 on
        R1.iditem = :viditem and
        D1.idstorein = :vidstorein and
        D1.id = R1.iddoc and
        D1.dt <= :vdt and
        D1.state in (2, 3) and
        D1.tp = 3
    order by D1.dt desc, R1.idseq desc
    into :vidrow, :vsellprice, :vbuyprice, :vamounttotal
    do
    begin
        select sum(m_links.amount) as amountused
        from m_links
        where id1 = :vidrow
        into :vamountused;

        vamountused = coalesce(vamountused, 0);
        vamountlinked = minvalue(vamounttolink - vgotamount, vamounttotal - vamountused);

        if (vamountlinked > 0) then
        begin
            vgotamount = vgotamount + vamountlinked;

            selltotalprice = selltotalprice + vsellprice * vamountlinked;
            buytotalprice = buytotalprice + vbuyprice * vamountlinked;
                    
            if (vgotamount >= vamounttolink) then leave;
        end
    end

    if (vgotamount < vamounttolink) then
    begin
        result = 'Not enough amount sent to buyer to return for ' || :viditem;
        suspend;
        exit;
    end

    selltotalprice = round(selltotalprice, 2);
    sellprice = round(selltotalprice / vamounttolink, 6);
    buytotalprice = round(buytotalprice, 2);
    buyprice = round(buytotalprice / vamounttolink, 6);
    result = 'OK';

    suspend;
end^


ALTER PROCEDURE SP_M_MAKELINKS_33B (
    PIDDOC INTEGER)
RETURNS (
    IDROW INTEGER,
    SELLPRICE DPRICEX,
    SELLTOTALPRICE DPRICEX,
    BUYPRICE DPRICEX,
    BUYTOTALPRICE DPRICEX,
    RESULT VARCHAR(300))
AS
begin
    -- atgriezts no pircēja - tsti un cenas
    for select m_rows.id
    from m_docs
    join m_rows on m_docs.id = :piddoc and m_docs.id = m_rows.iddoc
    join m_items on m_items.id = m_rows.iditem and
        m_items.isservice = 0
    order by m_rows.idseq, m_rows.id
    into :idrow
    do
    begin
        execute procedure SP_M_MAKELINKS_33a (:idrow)
        returning_values :sellprice, :selltotalprice,
            :buyprice, :buytotalprice, :result;

        suspend;
    end
end^


ALTER PROCEDURE SP_M_MAKELINKS_41 (
    PIDDOC INTEGER,
    PNEWDOCSTATE INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
declare variable vidrow integer;
begin
    -- iekšēja pārvietošana
    execute procedure SP_M_CALC_DOC_AMOUNTS(PIDDOC, 0);

    update m_docs
    set
        idseq = gen_id(gen_m_docseq, 1),
        state = :pnewdocstate
    where id = :piddoc;

    update m_rows
    set idseq = gen_id(gen_m_docseq, 1)
    where iddoc = :piddoc
    order by idseq, id;

    result = 'OK';
    suspend;
end^


ALTER PROCEDURE SP_M_MAKELINKS_51A (
    PIDROW INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
declare variable vidrow2 integer;
    declare variable viditem integer;
    declare variable vamounttolink damount;
    declare variable vamountincredit damount;
    declare variable vamountsold damount;
    declare variable vamountlinked damount;
    declare variable vamountused integer;
    declare variable vgotamount damount;
    declare variable vidcredrow integer;
    declare variable voldsellprice dpricex;
    declare variable vbuyprice dpricex;
    declare variable vdt date;
    declare variable vdt2 date;
begin
    -- realizacijas kreditrekins
    select
        m_rows.iditem, m_rows.amount, m_rows.idcredrow, m_docs.dt
    from m_rows
    join m_docs on m_rows.id = :pidrow and m_docs.id = m_rows.iddoc
    into :viditem, :vamounttolink, :vidcredrow, :vdt;
    
    if (vamounttolink >= 0) then
        exception ex_failure 'Amount must be negative for '
                || 'item:[' || :viditem || ']';

    vamounttolink = -vamounttolink;

    select R1.amount, R1.price, R1.buyprice, D1.dt
    from m_rows as R1
    join m_docs as D1 on D1.id = R1.iddoc
    where R1.id = :vidcredrow
    into :vamountsold, :voldsellprice, :vbuyprice, :vdt2;

    if (vamountsold is null) then
        exception ex_failure 'Credit row not found';

    if (vamounttolink > vamountsold) then
        exception ex_failure 'Credited amount greater than sale '
            || 'item:[' || :viditem || ']';

    if (vdt < vdt2) then
        exception ex_failure 'Creditdoc date older than original doc';

    select sum(R1.amount)
    from m_rows as R1
    join m_docs as D1 on D1.id = R1.iddoc and 
        R1.idcredrow = :vidcredrow and
        D1.state in (2,3)
    into :vamountincredit;

    vamountincredit = -coalesce(vamountincredit, 0);

    if (vamountincredit + vamounttolink > vamountsold) then
        exception ex_failure 'Credited amount greater than sale '
            || 'item:[' || :viditem || ']';

    select sum(amount)
    from m_links
    where id1 = :vidcredrow
    into :vamountlinked;

    if (vamountlinked + vamounttolink > vamountsold) then
        exception ex_failure 'Used amount greater than sale item:[' || :viditem || ']';

    update or insert into m_links (id1, id2, iditem, amount)
    values (:vidcredrow, :pidrow, :viditem, :vamounttolink);

    update m_rows
    set
        price = :voldsellprice,
        tprice = round(amount * :voldsellprice, 2),
        oldprice = :voldsellprice,
        toldprice = round(amount * :voldsellprice, 2),
        buyprice = :vbuyprice,
        tbuyprice = round(amount * :vbuyprice, 2)
    where id = :pidrow;


    vgotamount = 0;

    for select id1, sum(amount)
    from m_links
    where id2 = :vidcredrow
    group by id1
    order by id1
    into :vidrow2, :vamountused
    do
    begin
        vamountused = coalesce(vamountused, 0);
        vamountlinked = minvalue(vamounttolink - vgotamount, vamountused);

        if (vamountlinked > 0) then
        begin
            vgotamount = vgotamount + vamountlinked;

            insert into m_links
            values (:vidrow2, :pidrow, :viditem, -:vamountlinked);

            update m_rows
            set isgone = 0
            where id = :vidrow2 and isgone = 1;
    
            if (vgotamount >= vamounttolink) then leave;
        end
    end

    if (vgotamount < vamounttolink) then
    begin
        result = 'FAILURE';
        exception ex_failure
            'Not enough amount sent to buyer to return for '
            || 'item:[' || :viditem || ']';
    end


    result = 'OK';
    suspend;
end^


ALTER PROCEDURE SP_M_MAKELINKS_51B (
    PIDDOC INTEGER,
    PNEWDOCSTATE INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
declare variable vidirow integer;
begin
    execute procedure SP_M_CALC_DOC_AMOUNTS(PIDDOC, 0);

    for select m_rows.id
    from m_docs
    join m_rows on m_docs.id = :piddoc and m_docs.id = m_rows.iddoc
    join m_items on m_items.id = m_rows.iditem and
        m_items.isservice = 0
    order by m_rows.idseq, m_rows.id
    into :vidirow
    do
    begin
        execute procedure SP_M_MAKELINKS_51A (:vidirow)
        returning_values :result;
    end

    update m_docs
    set
        idseq = gen_id(gen_m_docseq, 1),
        state = :pnewdocstate
    where id = :piddoc;

    update m_rows
    set idseq = gen_id(gen_m_docseq, 1)
    where iddoc = :piddoc
    order by idseq, id;

    result = 'OK';
    suspend;
end^


ALTER PROCEDURE SP_M_MAKELINKS_52 (
    PIDDOC INTEGER)
RETURNS (
    RIDROW INTEGER,
    RESULT VARCHAR(300))
AS
declare variable viditem integer;
    declare variable vamounttolink damount;
    declare variable vamountincredit damount;
    declare variable vamountsold damount;
    declare variable vamountlinked damount;
    declare variable vidrow integer;
    declare variable vidcreddoc integer;
    declare variable vidcredrow integer;
begin
    -- realizacijas kreditrekins - tests
    for select
        m_rows.iditem, m_rows.amount,
        m_docs.idcreddoc, m_rows.idcredrow, m_rows.id
    from m_rows
    join m_docs on m_docs.id = :piddoc and m_docs.id = m_rows.iddoc
    join m_items on m_items.id = m_rows.iditem and
        m_items.isservice = 0
    order by m_rows.idseq, m_rows.id
    into :viditem, :vamounttolink, :vidcreddoc, :vidcredrow, :ridrow
    do
    begin

        select R1.amount
        from m_rows as R1
        where R1.id = :vidcredrow
        into :vamountsold;
    
        if (vamounttolink >= 0) then
        begin
            result = 'Amount mus be negative for item:[' || :viditem || ']';
            suspend;
            exit;
        end

        vamounttolink = -vamounttolink;

        if (vamounttolink > vamountsold) then
        begin
            result = 'Credited amount greater than sale '
                || 'item:[' || :viditem || ']';
            suspend;
            exit;
        end
    
        select sum(R1.amount)
        from m_rows as R1
        join m_docs as D1 on D1.id = R1.iddoc and 
            R1.idcredrow = :vidcredrow and
            D1.state in (2,3)
        into :vamountincredit;
    
        vamountincredit = -coalesce(vamountincredit, 0);

        if ((vamountincredit + vamounttolink) > vamountsold) then
        begin
            result = 'Credited amount greater than sale '
                || 'item:[' || :viditem || ']';
            suspend;
            exit;
        end

        select sum(amount)
        from m_links
        where id1 = :vidcredrow
        into :vamountlinked;
    
        if (vamountlinked + vamounttolink > vamountsold) then
            exception ex_failure 'Used amount greater than sale item:[' || :viditem || ']';


    end

end^


ALTER PROCEDURE SP_M_MAKELINKS_61A (
    PIDROW INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
declare variable viditem integer;
    declare variable vamounttolink damount;
    declare variable vamountincredit damount;
    declare variable vamountreceived damount;
    declare variable vamountlinked damount;
    declare variable vidcredrow integer;
    declare variable vbuyprice dpricex;
    declare variable vdt date;
    declare variable vdt2 date;
begin
    -- piegadataja kreditrekins
    select
        m_rows.iditem, m_rows.amount, m_rows.idcredrow, m_docs.dt
    from m_rows
    join m_docs on m_rows.id = :pidrow and m_docs.id = m_rows.iddoc
    into :viditem, :vamounttolink, :vidcredrow, :vdt;
    
    select R1.amount, R1.price, D1.dt
    from m_rows as R1
    join m_docs as D1 on D1.id = R1.iddoc
    where R1.id = :vidcredrow
    into :vamountreceived, :vbuyprice, :vdt2;

    if (vamountreceived is null) then
        exception ex_failure 'Credit row not found';

    select sum(R1.amount)
    from m_rows as R1
    join m_docs as D1 on D1.id = R1.iddoc and 
        R1.idcredrow = :vidcredrow and
        D1.state in (2,3)
    into :vamountincredit;

    vamountincredit = coalesce(vamountincredit, 0);

    if (vamountincredit + vamounttolink > vamountreceived) then
        exception ex_failure 'Credited amount greater than received for item:[' || :viditem || ']';

    select sum(amount)
    from m_links
    where id1 = :vidcredrow and iditem = :viditem
    into :vamountlinked;

    vamountlinked = coalesce(vamountlinked, 0);

    if (vamountlinked + vamounttolink > vamountreceived) then
        exception ex_failure 'Used amount greater than received for item:[' || :viditem || ']';

    if (vdt < vdt2) then
        exception ex_failure 'Creditdoc date older than original doc';

    update or insert into m_links (id1, id2, iditem, amount)
    values (:vidcredrow, :pidrow, :viditem, :vamounttolink);
    
    update m_rows
    set
        buyprice = :vbuyprice,
        tbuyprice = round(amount * :vbuyprice, 2)
    where id = :pidrow;

    result = 'OK';
    suspend;
end^


ALTER PROCEDURE SP_M_MAKELINKS_61B (
    PIDDOC INTEGER,
    PNEWDOCSTATE INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
declare variable vidirow integer;
begin
    execute procedure SP_M_CALC_DOC_AMOUNTS(PIDDOC, 0);

    for select m_rows.id
    from m_docs
    join m_rows on m_docs.id = :piddoc and m_docs.id = m_rows.iddoc
    join m_items on m_items.id = m_rows.iditem and
        m_items.isservice = 0
    order by m_rows.idseq, m_rows.id
    into :vidirow
    do
    begin
        execute procedure SP_M_MAKELINKS_61A (:vidirow)
        returning_values :result;
    end

    update m_docs
    set
        idseq = gen_id(gen_m_docseq, 1),
        state = :pnewdocstate
    where id = :piddoc;

    update m_rows
    set idseq = gen_id(gen_m_docseq, 1)
    where iddoc = :piddoc
    order by idseq, id;

    result = 'OK';
    suspend;
end^


ALTER PROCEDURE SP_M_MAKELINKS_62 (
    PIDDOC INTEGER)
RETURNS (
    RIDROW INTEGER,
    RESULT VARCHAR(300))
AS
declare variable viditem integer;
    declare variable vidstore integer;
    declare variable vamounttolink damount;
    declare variable vamountinstore damount;
    declare variable vamountincredit damount;
    declare variable vamountreceived damount;
    declare variable vdt date;
    declare variable vidrow integer;
    declare variable vidcreddoc integer;
    declare variable vidcredrow integer;
begin
    -- piegades kreditrekins - tests
    for select
        m_rows.iditem, m_docs.dt, m_rows.amount, m_docs.idstorein,
        m_docs.idcreddoc, m_rows.idcredrow, m_rows.id
    from m_rows
    join m_docs on m_docs.id = :piddoc and m_docs.id = m_rows.iddoc
    join m_items on m_items.id = m_rows.iditem and
        m_items.isservice = 0
    order by m_rows.idseq, m_rows.id
    into :viditem, :vdt, :vamounttolink, :vidstore,
        :vidcreddoc, :vidcredrow, :ridrow
    do
    begin

        if (vamounttolink <= 0) then
        begin
            result = 'Amount cant be < 0 ' || :ridrow;
            suspend;
            exit;
        end

        select amountinstore
        from m_items
        where id = :viditem
        into :vamountinstore;
    
        if (vamountinstore < vamounttolink) then
        begin
            result = 'Not enough amount in stock for item:[' || :viditem || ']';
            suspend;
            exit;
        end
    
        select amount
        from m_items_per_store
        where iditem = :viditem and idstore = :vidstore
        into :vamountinstore;
    
        vamountinstore = coalesce(:vamountinstore, 0) - :vamounttolink;
    
        if (vamountinstore < 0) then
        begin
            result = 'Not enough amount in stock for item:[' || :viditem || ']';
            suspend;
            exit;
        end

        select R1.amount
        from m_rows as R1
        where R1.id = :vidcredrow
        into :vamountreceived;
    
        if (vamounttolink > vamountreceived) then
        begin
            result = 'Credited amount greater than received for item:[' || :viditem || ']';
            suspend;
            exit;
        end
    
        select sum(R1.amount)
        from m_rows as R1
        join m_docs as D1 on D1.id = R1.iddoc and 
            R1.idcredrow = :vidcredrow and
            D1.state in (2,3)
        into :vamountincredit;
    
        vamountincredit = coalesce(vamountincredit, 0);

        if ((vamountincredit + vamounttolink) > vamountreceived) then
        begin
            result = 'Credited amount greater than received for item:[' || :viditem || ']';
            suspend;
        end

    end

end^


ALTER PROCEDURE SP_M_RECALC_ROWSISGONE_1
RETURNS (
    RET INTEGER)
AS
declare vid integer;
    declare vtotalamount damount;
    declare vusedamount damount;
    declare visgone integer;
begin
    for select
        R1.id,
        min(R1.amount) as totalamount,
        sum(L1.amount) as usedamount
    from m_rows as R1
    join m_links as L1 on R1.id = L1.id1
    group by R1.id
    into :vid, :vtotalamount, :vusedamount
    do begin
        visgone = iif(vusedamount < vtotalamount, 0, 1);
        update m_rows
        set isgone = :visgone
        where id = :vid and isgone <> :visgone;
    end

    for select
        R1.id
    from m_rows as R1
    left join m_links as L1 on R1.id = L1.id1
    where isgone = 1 and L1.id1 is null
    into :vid
    do begin
        update m_rows
        set isgone = 0
        where id = :vid;
    end

    ret = 1;
    suspend;
end^


ALTER PROCEDURE SP_M_RECALC_ROWSISGONE_2 (
    PIDDOC INTEGER)
AS
declare vid integer;
    declare vtotalamount damount;
    declare vusedamount damount;
    declare visgone integer;
begin
    for select
        R1.id,
        min(R1.amount) as totalamount,
        sum(L1.amount) as usedamount
    from m_rows as R1
    join (
        select distinct iditem
        from m_rows
        where iddoc = :piddoc
    ) as IT1
        on R1.iditem = IT1.iditem
    join m_links as L1 on R1.id = L1.id1
    group by R1.id
    into :vid, :vtotalamount, :vusedamount
    do begin
        visgone = iif(vusedamount < vtotalamount, 0, 1);
        update m_rows
        set isgone = :visgone
        where id = :vid and isgone <> :visgone;
    end

    for select
        R1.id
    from m_rows as R1
    join (
        select distinct iditem
        from m_rows
        where iddoc = :piddoc
    ) as IT1
        on R1.iditem = IT1.iditem
    left join m_links as L1 on R1.id = L1.id1
    where isgone = 1 and L1.id1 is null
    into :vid
    do begin
        update m_rows
        set isgone = 0
        where id = :vid;
    end

end^


ALTER PROCEDURE SP_M_RECALCAMOUNTS_1
RETURNS (
    RET INTEGER)
AS
declare viditem integer;
    declare vidstore integer;
    declare vamount damount;
begin
    update m_items_per_store
    set amount = 0
    where amount <> 0;

    for select
        T2.iditem,
        T2.idstore,
        T2.amount
    from
    (
        select
            T1.iditem,
            T1.idstore,
            sum(T1.amount) as amount
        from
        (
            select
                R1.iditem,
                D1.idstorein as idstore,
                R1.amount
            from m_rows as R1
            join m_docs as D1 on D1.id = R1.iddoc and
                D1.state in (2, 3)
            join m_stores on m_stores.id = D1.idstorein
            join m_storetype on m_storetype.id = m_stores.tp and
                m_storetype.trackstock = 1
        
            union all
        
            select
                R1.iditem,
                D1.idstoreout as idstore,
                -R1.amount
            from m_rows as R1
            join m_docs as D1 on D1.id = R1.iddoc and
                D1.state in (2, 3)
            join m_stores on m_stores.id = D1.idstoreout
            join m_storetype on m_storetype.id = m_stores.tp and
                m_storetype.trackstock = 1

        ) as T1
        group by T1.iditem, T1.idstore
    ) as T2
    join m_items on m_items.id = T2.iditem and
        m_items.isservice = 0
    into :viditem, :vidstore, :vamount
    do
    begin
        if (vamount < 0) then
            exception ex_failure 'Not enough amount in stock for store '
                || 'item:[' || :viditem || ']'
                || 'store:[' || :vidstore || ']';

        if (vamount > 0) then
        begin
            update or insert into m_items_per_store (iditem, idstore, amount)
            values (:viditem, :vidstore, :vamount)
            matching (iditem, idstore);
        end
    end

    for select iditem, amount
    from (
        select iditem, sum(amount) as amount
        from m_items_per_store
        group by iditem
    ) as T1
    join m_items on m_items.id = T1.iditem and
        m_items.amountinstore <> T1.amount
    into :viditem, :vamount do
    begin
        update m_items
        set amountinstore = :vamount
        where id = :viditem and amountinstore <> :vamount;
    end

    ret = 1;
    suspend;
end^


ALTER PROCEDURE SP_M_RECALCAMOUNTS_2 (
    PIDDOC INTEGER)
RETURNS (
    RET INTEGER)
AS
declare viditem integer;
    declare vidstore integer;
    declare vamount damount;
begin
    update m_items_per_store as T1
    set amount = 0
    where amount <> 0 and
        exists (
            select iditem
            from m_rows
            where iddoc = :piddoc and
                iditem = T1.iditem);

    for select
        T2.iditem,
        T2.idstore,
        T2.amount
    from
    (
        select
            T1.iditem,
            T1.idstore,
            sum(T1.amount) as amount
        from
        (
            select
                R1.iditem,
                D1.idstorein as idstore,
                R1.amount
            from m_rows as R1
            join (
                select distinct iditem
                from m_rows
                where iddoc = :piddoc
            ) as IT1
                on R1.iditem = IT1.iditem
            join m_docs as D1 on D1.id = R1.iddoc and
                D1.state in (2, 3)
            join m_stores on m_stores.id = D1.idstorein
            join m_storetype on m_storetype.id = m_stores.tp and
                m_storetype.trackstock = 1

            union all
        
            select
                R1.iditem,
                D1.idstoreout as idstore,
                -R1.amount
            from m_rows as R1
            join (
                select distinct iditem
                from m_rows
                where iddoc = :piddoc
            ) as IT1
                on R1.iditem = IT1.iditem
            join m_docs as D1 on D1.id = R1.iddoc and
                D1.state in (2, 3)
            join m_stores on m_stores.id = D1.idstoreout
            join m_storetype on m_storetype.id = m_stores.tp and
                m_storetype.trackstock = 1

        ) as T1
        group by T1.iditem, T1.idstore
    ) as T2
    join m_items on m_items.id = T2.iditem and
        m_items.isservice = 0
    into :viditem, :vidstore, :vamount
    do
    begin
        if (vamount < 0) then
            exception ex_failure 'Not enough amount in stock for store '
                || 'item:[' || :viditem || ']'
                || 'store:[' || :vidstore || ']';

        if (vamount > 0) then
        begin
            update or insert into m_items_per_store (iditem, idstore, amount)
            values (:viditem, :vidstore, :vamount)
            matching (iditem, idstore);
        end
    end

    for select iditem, amount
    from (
        with IT1 as (
            select distinct iditem
            from m_rows
            where iddoc = :piddoc)
        select T1.iditem, sum(T1.amount) as amount
        from m_items_per_store as T1
        join IT1 on IT1.iditem = T1.iditem
        group by T1.iditem
    ) as T2
    join m_items on m_items.id = T2.iditem and
        m_items.amountinstore <> T2.amount
    into :viditem, :vamount do
    begin
        update m_items
        set amountinstore = :vamount
        where id = :viditem and amountinstore <> :vamount;
    end

    ret = 1;
    suspend;
end^


ALTER PROCEDURE SP_M_RECALCITEM_01A (
    PSTARTDATE DATE,
    PPROGRESSTEP INTEGER)
RETURNS (
    RET INTEGER)
AS
declare vret damount;


    declare vcuriditem integer;

    declare vidrow1 integer;
    declare viditem1 integer;
    declare vtam1 damount;
    declare vdt1 date;
    declare vprice1 dpricex;
    declare vtp1 integer;

    declare vidrow2 integer;
    declare viditem2 integer;
    declare vtam2 damount;
    declare vdt2 date;
    declare vprice2 dpricex;

    declare vidrow3 integer;
    declare vtam3 damount;

    declare avidrow1 integer;
    declare avidrow2 integer;
    declare vdoctp integer;

    declare vamused damount;
    declare vamleft1 damount;
    declare vamleft2 damount;
    declare vtotalprice dpricex;

    declare vprogress integer;
    declare veventmessage varchar(20);

    declare CUR1 cursor for
    (
        select
            R1.id,
            R1.iditem,
            R1.amount as amountotal,
            D1.dt,
            R1.buyprice,
            D1.tp
        from m_rows as R1
        join m_docs as D1 on
            D1.id = R1.iddoc and
            D1.state in (2, 3)
        join m_doctypes on D1.tp = m_doctypes.id and
            (m_doctypes.optype = 1 or
            D1.tp in (5, 7))
        join m_items on m_items.id = R1.iditem and
            m_items.isservice = 0

        order by R1.iditem, D1.dt, R1.idseq, R1.id
    );

    declare CUR2 cursor for
    (
        select
            R1.id,
            R1.iditem,
            D1.dt, 
            D1.tp,
            R1.amount as amountotal
        from m_rows as R1
        join m_docs as D1 on
            D1.id = R1.iddoc and
            D1.state in (2, 3) and
            ((:pstartdate is null) or (D1.dt >= :pstartdate))
        join m_doctypes on D1.tp = m_doctypes.id and
            m_doctypes.optype = 2
        join m_items on m_items.id = R1.iditem and
            m_items.isservice = 0
        order by R1.iditem, dt, R1.idseq, R1.id
    );

    declare CUR3 cursor for
    (
        select
            R1.id,
            R1.iditem,
            R1.amount as amountotal,
            -L1.amount as amountreturned,
            D1.dt,
            R1.buyprice,
            D1.tp
        from m_links as L1
        join m_rows as R1 on
            L1.id2 = :vidrow3 and
            --L1.amount < 0 and -- we have links with amount > 0 to original sale doc
                                -- or rely on optype = 1
            R1.id = L1.id1
        join m_docs as D1 on
            D1.id = R1.iddoc and
            D1.state in (2, 3)
        join m_doctypes on D1.tp = m_doctypes.id and
            m_doctypes.optype = 1
        join m_items on m_items.id = R1.iditem and
            m_items.isservice = 0

        order by R1.iditem, D1.dt, R1.idseq, R1.id
    );
begin
    veventmessage = 'Progress_' || current_connection;
    vprogress = 0;

    execute procedure sp_m_recalcamounts_1
    returning_values ret;

    if (pprogresstep > 0) then
        IN AUTONOMOUS TRANSACTION DO
            post_event veventmessage;

    if (pstartdate is null) then
    begin
        delete from m_links;
    end else
    begin
        for select m_links.id1, m_links.id2
        from m_links
        join m_rows as R2
            on R2.id = m_links.id2
        join m_docs as D2
            on D2.id = R2.iddoc and
                D2.dt >= :pstartdate
        into :vidrow1, :vidrow2
        do begin
            delete from m_links
            where id1 = :vidrow1 and id2 = :vidrow2;
        end
    end

    if (pprogresstep > 0) then
        IN AUTONOMOUS TRANSACTION DO
            post_event veventmessage;

    merge into m_rows
    using (
        select m_docs.id
        from m_docs
        join m_doctypes on m_doctypes.id = m_docs.tp and
            m_doctypes.optype = 1
        ) as T1
    on T1.id = m_rows.iddoc and
        (buyprice <> price or
        tbuyprice <> tprice)
    when matched then
    update set buyprice = price, tbuyprice = tprice;

    vamleft1 = 0;
    vamleft2 = 0;
    vtotalprice = 0;

    vcuriditem = null;

    open cur1;
    open cur2;

    vidrow1 = null;
    vidrow3 = null;

    while(1=1) do
    begin
        if (vamleft2 = 0) then
        begin
            while(1=1) do
            begin
                vprogress = vprogress + 1;
                if ((pprogresstep > 0) and (vprogress >= pprogresstep)) then
                begin
                    IN AUTONOMOUS TRANSACTION DO
                        post_event veventmessage;
                    vprogress = 0;
                end

                fetch cur2
                into :vidrow2, :viditem2, :vdt2, :vdoctp, :vtam2;
                if (row_count = 0) then leave;
                
                if ((vcuriditem is null) or (vcuriditem < viditem2)) then
                begin
                    vcuriditem = viditem2;
                    vamleft1 = 0;
                end

                vtotalprice = 0;
                vamleft2 = 0;
                vret = 0;
                if (vdoctp in (3, 10)) then
                begin
                    vamleft2 = vtam2;
                    leave;
                end
                else if (vdoctp = 4) then
                    execute procedure sp_m_recalcitem_04 (:vidrow2, :vidrow1)
                    returning_values :vret;
                else if (vdoctp = 5) then
                    execute procedure sp_m_recalcitem_05 (:vidrow2, :vidrow1)
                    returning_values :vret;
                else if (vdoctp = 6) then
                    execute procedure sp_m_recalcitem_06 (:vidrow2, :vidrow1)
                    returning_values :vret;
                else if (vdoctp = 7) then
                    execute procedure sp_m_recalcitem_07 (:vidrow2, :vidrow1)
                    returning_values :vret;

                if (vidrow1 is not null) then
                    vamleft1 = vamleft1 - vret;
            end
            if (row_count = 0) then leave;
        end

        if (vamleft1 = 0) then
        begin
            while(1=1) do
            begin
                vprogress = vprogress + 1;
                if ((pprogresstep > 0) and (vprogress >= pprogresstep)) then
                begin
                    IN AUTONOMOUS TRANSACTION DO
                        post_event veventmessage;
                    vprogress = 0;
                end
                
                if (vidrow3 is null) then
                begin

                    fetch cur1
                    into :vidrow1, :viditem1, :vtam1, :vdt1, :vprice1, :vtp1;

                    if ((row_count = 0) or (viditem1 > vcuriditem)) then leave;
    
                    if (vtp1 in (5,7)) then
                    begin

                        vidrow3 = vidrow1;
                        open cur3;

                    end else
                    begin

                        if (viditem1 = vcuriditem) then
                        begin
                            select sum(m_links.amount) as amountused
                            from m_links
                            where m_links.id1 = :vidrow1
                                --and m_links.amount > 0
                            into :vamused;
                            vamused = coalesce(vamused, 0);
            
                            vamleft1 = vtam1 - vamused;
                            if (vamleft1 > 0) then leave;
                        end

                    end

                end else
                begin

                    fetch cur3
                    into :vidrow1, :viditem1, :vtam1, :vtam3, :vdt1, :vprice1, :vtp1;

                    if (row_count = 0) then
                    begin

                        vidrow3 = null;
                        close cur3;

                    end else
                    begin

                        select sum(m_links.amount) as amountused
                        from m_links
                        where m_links.id1 = :vidrow1
                        into :vamused;
                        vamused = coalesce(vamused, 0);
        
                        if (vamused < vtam1) then
                        begin
                            vamleft1 = vtam1 - vamused;

                            -- maybe cant give more then vtam3, or we loose some row1
                            -- a bit incorrect, but we cant do it right anyway
                            -- vamleft1 = minvalue(vtam1 - vamused, vtam3);
                            leave;
                        end
                    end

                end

            end

            if ((row_count = 0) or (vdt1 > vdt2) or
                (viditem1 > vcuriditem)) then
            begin
                close cur1;
                close cur2;
                if (vidrow3 is not null) then
                    close cur3;
                exception ex_failure 'Not enough amount in stock '
                    || 'item:[' || :vcuriditem || ']';
            end

        end
        
        if (vamleft1 < 0) then
            exception ex_failure 'Bad code: vamleft1 < 0';

        vamused = minvalue(vamleft1, vamleft2);

        if (vamused > 0) then
        begin
            vamleft1 = vamleft1 - vamused;
            vamleft2 = vamleft2 - vamused;

            vtotalprice = vtotalprice + vamused * vprice1;

            if ((avidrow1 = vidrow1) and (avidrow2 = vidrow2)) then
            begin
                close cur1;
                close cur2;
                exception ex_failure 'Bad code';
            end
    
            insert into m_links (id1, id2, iditem, amount)
            values (:vidrow1, :vidrow2, :vcuriditem, :vamused);

            if (vidrow3 is not null) then
            begin

                update m_links as L1
                set L1.amount = L1.amount + :vamused
                where L1.id1 = :vidrow3 and L1.id2 = :vidrow2;

                if (row_count = 0) then
                    insert into m_links (id1, id2, iditem, amount)
                    values (:vidrow3, :vidrow2, :vcuriditem, :vamused);

            end

            avidrow1 = vidrow1;
            avidrow2 = vidrow2;

            if (vamleft2 = 0) then
            begin
                vtotalprice = round(vtotalprice, 2);
                vprice2 = round(vtotalprice / vtam2, 6);

                update m_rows
                set buyprice = :vprice2,
                    tbuyprice = :vtotalprice
                    --idseq = gen_id(gen_m_docseq, 1)
                where id = :vidrow2 and
                    (buyprice <> :vprice2 or
                    tbuyprice <> :vtotalprice);
            end

        end

    end
    close cur1;
    close cur2;

    execute procedure SP_M_RECALC_ROWSISGONE_1
    returning_values ret;

    ret = 1;
    suspend;
end^


ALTER PROCEDURE SP_M_RECALCITEM_01A_1 (
    PSTARTDATE DATE,
    PPROGRESSTEP INTEGER)
RETURNS (
    RET INTEGER)
AS
declare vret damount;

    declare vcuriditem integer;
    declare viditem1 integer;
    declare viditem2 integer;

    declare vidrow1 integer;
    declare vidrow2 integer;
    declare avidrow1 integer;
    declare avidrow2 integer;
    declare vdoctp integer;
    declare vdt1 date;
    declare vdt2 date;

    declare vamused damount;
    declare vtam1 damount;
    declare vtam2 damount;
    declare vamleft1 damount;
    declare vamleft2 damount;
    declare vprice dpricex;
    declare vprice2 dpricex;
    declare vtotalprice dpricex;

    declare vprogress integer;
    declare veventmessage varchar(20);

    declare CUR1 cursor for
    (
        select
            R1.id,
            R1.iditem,
            R1.amount as amountotal,
            D1.dt,
            R1.buyprice
        from m_rows as R1
        join m_docs as D1 on
            D1.id = R1.iddoc and
            D1.state in (2, 3)
        join m_doctypes on D1.tp = m_doctypes.id and
            m_doctypes.optype = 1
        join m_items on m_items.id = R1.iditem and
            m_items.isservice = 0

        order by R1.iditem, D1.dt, R1.idseq, R1.id
    );

    declare CUR2 cursor for
    (
        select
            R1.id,
            R1.iditem,
            D1.dt, 
            D1.tp,
            R1.amount as amountotal
        from m_rows as R1
        join m_docs as D1 on
            D1.id = R1.iddoc and
            D1.state in (2, 3) and
            ((:pstartdate is null) or (D1.dt >= :pstartdate))
        join m_doctypes on D1.tp = m_doctypes.id and
            (m_doctypes.optype = 2 or
               D1.tp in (5, 7))
        join m_items on m_items.id = R1.iditem and
            m_items.isservice = 0
        order by R1.iditem, dt, R1.idseq, R1.id
    );
begin
    veventmessage = 'Progress_' || current_connection;
    vprogress = 0;

    execute procedure sp_m_recalcamounts_1
    returning_values ret;

    if (pprogresstep > 0) then
        IN AUTONOMOUS TRANSACTION DO
            post_event veventmessage;

    if (pstartdate is null) then
    begin
        delete from m_links;
    end else
    begin
        for select m_links.id1, m_links.id2
        from m_links
        join m_rows as R2
            on R2.id = m_links.id2
        join m_docs as D2
            on D2.id = R2.iddoc and
                D2.dt >= :pstartdate
        into :vidrow1, :vidrow2
        do begin
            delete from m_links
            where id1 = :vidrow1 and id2 = :vidrow2;
        end
    end

    if (pprogresstep > 0) then
        IN AUTONOMOUS TRANSACTION DO
            post_event veventmessage;

    merge into m_rows
    using (
        select m_docs.id
        from m_docs
        join m_doctypes on m_doctypes.id = m_docs.tp and
            m_doctypes.optype = 1
        ) as T1
    on T1.id = m_rows.iddoc and
        (buyprice <> price or
        tbuyprice <> tprice)
    when matched then
    update set buyprice = price, tbuyprice = tprice;

    vamleft1 = 0;
    vamleft2 = 0;
    vtotalprice = 0;

    vcuriditem = null;

    open cur1;
    open cur2;

    vidrow1 = null;

    while(1=1) do
    begin
        if (vamleft2 = 0) then
        begin
            while(1=1) do
            begin
                vprogress = vprogress + 1;
                if ((pprogresstep > 0) and (vprogress >= pprogresstep)) then
                begin
                    IN AUTONOMOUS TRANSACTION DO
                        post_event veventmessage;
                    vprogress = 0;
                end

                fetch cur2
                into :vidrow2, :viditem2, :vdt2, :vdoctp, :vtam2;
                if (row_count = 0) then leave;
                
                if ((vcuriditem is null) or (vcuriditem < viditem2)) then
                begin
                    vcuriditem = viditem2;
                    vamleft1 = 0;
                end

                vtotalprice = 0;
                vamleft2 = 0;
                vret = 0;
                if (vdoctp in (3, 10)) then
                begin
                    vamleft2 = vtam2;
                    leave;
                end
                else if (vdoctp = 4) then
                    execute procedure sp_m_recalcitem_04 (:vidrow2, :vidrow1)
                    returning_values :vret;
                else if (vdoctp = 5) then
                    execute procedure sp_m_recalcitem_05 (:vidrow2, :vidrow1)
                    returning_values :vret;
                else if (vdoctp = 6) then
                    execute procedure sp_m_recalcitem_06 (:vidrow2, :vidrow1)
                    returning_values :vret;
                else if (vdoctp = 7) then
                    execute procedure sp_m_recalcitem_07 (:vidrow2, :vidrow1)
                    returning_values :vret;

                if (vidrow1 is not null) then
                    vamleft1 = vamleft1 - vret;
            end
            if (row_count = 0) then leave;
        end

        if (vamleft1 = 0) then
        begin
            while(1=1) do
            begin
                vprogress = vprogress + 1;
                if ((pprogresstep > 0) and (vprogress >= pprogresstep)) then
                begin
                    IN AUTONOMOUS TRANSACTION DO
                        post_event veventmessage;
                    vprogress = 0;
                end

                fetch cur1
                into :vidrow1, :viditem1, :vtam1, :vdt1, :vprice;

                if ((row_count = 0) or (viditem1 > vcuriditem)) then leave;

                if (viditem1 = vcuriditem) then
                begin
                    select sum(m_links.amount) as amountused
                    from m_links
                    where m_links.id1 = :vidrow1
                    into :vamused;
                    vamused = coalesce(vamused, 0);
    
                    if (vamused < vtam1) then leave;
                end
            end

            if ((row_count = 0) or (vdt1 > vdt2) or
                (viditem1 > vcuriditem)) then
            begin
                close cur1;
                close cur2;
                exception ex_failure 'Not enough amount in stock '
                    || 'item:[' || :vcuriditem || ']';
            end

            vamleft1 = vtam1 - vamused;
        end
        
        vamused = minvalue(vamleft1, vamleft2);

        if (vamused > 0) then
        begin
            vamleft1 = vamleft1 - vamused;
            vamleft2 = vamleft2 - vamused;

            vtotalprice = vtotalprice + vamused * vprice;

            if ((avidrow1 = vidrow1) and (avidrow2 = vidrow2)) then
            begin
                close cur1;
                close cur2;
                exception ex_failure 'Bad code';
            end
    
            insert into m_links (id1, id2, iditem, amount)
            values (:vidrow1, :vidrow2, :vcuriditem, :vamused);

            avidrow1 = vidrow1;
            avidrow2 = vidrow2;

            if (vamleft2 = 0) then
            begin
                vtotalprice = round(vtotalprice, 2);
                vprice2 = round(vtotalprice / vtam2, 6);

                update m_rows
                set buyprice = :vprice2,
                    tbuyprice = :vtotalprice
                    --idseq = gen_id(gen_m_docseq, 1)
                where id = :vidrow2 and
                    (buyprice <> :vprice2 or
                    tbuyprice <> :vtotalprice);
            end

        end

    end
    close cur1;
    close cur2;

    execute procedure SP_M_RECALC_ROWSISGONE_1
    returning_values ret;

    ret = 1;
    suspend;
end^


ALTER PROCEDURE SP_M_RECALCITEM_01B (
    PSTARTDATE DATE,
    PPROGRESSTEP INTEGER)
RETURNS (
    RET INTEGER)
AS
declare vret damount;

    declare vcuriditem integer;
    declare viditem1 integer;
    declare viditem2 integer;

    declare vidrow1 integer;
    declare vidrow2 integer;
    declare avidrow1 integer;
    declare avidrow2 integer;
    declare vdoctp integer;
    declare vdt1 date;
    declare vdt2 date;

    declare vamused damount;
    declare vtam1 damount;
    declare vtam2 damount;
    declare vamleft1 damount;
    declare vamleft2 damount;
    declare vprice dpricex;
    declare vprice2 dpricex;
    declare vtotalprice dpricex;

    declare vprogress integer;
    declare veventmessage varchar(20);

    declare CUR1 cursor for
    (
        select
            R1.id,
            R1.iditem,
            R1.amount as amountotal,
            D1.dt,
            R1.buyprice
        from m_rows as R1
        join m_docs as D1 on
            D1.id = R1.iddoc and
            D1.state in (2, 3) and
            R1.isgone = 0
        join m_doctypes on D1.tp = m_doctypes.id and
            m_doctypes.optype = 1
        join m_items on m_items.id = R1.iditem and
            m_items.isservice = 0
        order by R1.iditem, D1.dt, R1.idseq, R1.id
    );

    declare CUR2 cursor for
    (
        select
            R1.id,
            R1.iditem,
            D1.dt, 
            D1.tp,
            R1.amount as amountotal
        from m_rows as R1
        join m_docs as D1 on
            D1.id = R1.iddoc and
            D1.state in (2, 3) and
            ((:pstartdate is null) or (D1.dt >= :pstartdate))
        join m_doctypes on D1.tp = m_doctypes.id and
            (m_doctypes.optype = 2 or
               D1.tp in (5, 7))
        join m_items on m_items.id = R1.iditem and
            m_items.isservice = 0
        order by R1.iditem, dt, R1.idseq, R1.id
    );
begin
    -- with isgone
    veventmessage = 'Progress_' || current_connection;
    vprogress = 0;

    execute procedure sp_m_recalcamounts_1
    returning_values ret;

    if (pprogresstep > 0) then
        IN AUTONOMOUS TRANSACTION DO
            post_event veventmessage;

    if (pstartdate is null) then
    begin
        delete from m_links;

        update m_rows
        set isgone = 0
        where isgone = 1;
    end else
    begin
        for select distinct R1.id
        from m_links
        join m_rows as R2
            on R2.id = m_links.id2
        join m_rows as R1
            on R1.id = m_links.id1 and
                R1.isgone = 1
        join m_docs as D2
            on D2.id = R2.iddoc and
                D2.dt >= :pstartdate
        into :vidrow1
        do begin
            update m_rows
            set isgone = 0
            where id = :vidrow1;
        end

        for select m_links.id1, m_links.id2
        from m_links
        join m_rows as R2
            on R2.id = m_links.id2
        join m_docs as D2
            on D2.id = R2.iddoc and
                D2.dt >= :pstartdate
        into :vidrow1, :vidrow2
        do begin
            delete from m_links
            where id1 = :vidrow1 and id2 = :vidrow2;
        end
    end

    if (pprogresstep > 0) then
        IN AUTONOMOUS TRANSACTION DO
            post_event veventmessage;

    merge into m_rows
    using (
        select m_docs.id
        from m_docs
        join m_doctypes on m_doctypes.id = m_docs.tp and
            m_doctypes.optype = 1
        ) as T1
    on T1.id = m_rows.iddoc and
        (buyprice <> price or
        tbuyprice <> tprice)
    when matched then
    update set buyprice = price, tbuyprice = tprice;

    vamleft1 = 0;
    vamleft2 = 0;
    vtotalprice = 0;

    vcuriditem = null;

    open cur1;
    open cur2;

    vidrow1 = null;

    while(1=1) do
    begin
        if (vamleft2 = 0) then
        begin
            while(1=1) do
            begin
                vprogress = vprogress + 1;
                if ((pprogresstep > 0) and (vprogress >= pprogresstep)) then
                begin
                    IN AUTONOMOUS TRANSACTION DO
                        post_event veventmessage;
                    vprogress = 0;
                end

                fetch cur2
                into :vidrow2, :viditem2, :vdt2, :vdoctp, :vtam2;
                if (row_count = 0) then leave;
                
                if ((vcuriditem is null) or (vcuriditem < viditem2)) then
                begin
                    vcuriditem = viditem2;
                    vamleft1 = 0;
                end

                vtotalprice = 0;
                vamleft2 = 0;
                vret = 0;
                if (vdoctp in (3, 10)) then
                begin
                    vamleft2 = vtam2;
                    leave;
                end
                else if (vdoctp = 4) then
                    execute procedure sp_m_recalcitem_04 (:vidrow2, :vidrow1)
                    returning_values :vret;
                else if (vdoctp = 5) then
                    execute procedure sp_m_recalcitem_05 (:vidrow2, :vidrow1)
                    returning_values :vret;
                else if (vdoctp = 6) then
                    execute procedure sp_m_recalcitem_06 (:vidrow2, :vidrow1)
                    returning_values :vret;
                else if (vdoctp = 7) then
                    execute procedure sp_m_recalcitem_07 (:vidrow2, :vidrow1)
                    returning_values :vret;

                if (vidrow1 is not null) then
                    vamleft1 = vamleft1 - vret;
            end
            if (row_count = 0) then leave;
        end

        if (vamleft1 = 0) then
        begin
            while(1=1) do
            begin
                vprogress = vprogress + 1;
                if ((pprogresstep > 0) and (vprogress >= pprogresstep)) then
                begin
                    IN AUTONOMOUS TRANSACTION DO
                        post_event veventmessage;
                    vprogress = 0;
                end

                fetch cur1
                into :vidrow1, :viditem1, :vtam1, :vdt1, :vprice;

                if ((row_count = 0) or (viditem1 > vcuriditem)) then leave;

                if (viditem1 = vcuriditem) then
                begin
                    select sum(m_links.amount) as amountused
                    from m_links
                    where m_links.id1 = :vidrow1
                    into :vamused;
                    vamused = coalesce(vamused, 0);
    
                    if (vamused < vtam1) then leave;
                end
            end

            if ((row_count = 0) or (vdt1 > vdt2) or
                (viditem1 > vcuriditem)) then
            begin
                close cur1;
                close cur2;
                exception ex_failure 'Not enough amount in stock '
                    || 'item:[' || :vcuriditem || ']';
            end

            vamleft1 = vtam1 - vamused;
        end
        
        vamused = minvalue(vamleft1, vamleft2);

        if (vamused > 0) then
        begin
            vamleft1 = vamleft1 - vamused;
            vamleft2 = vamleft2 - vamused;

            vtotalprice = vtotalprice + vamused * vprice;

            if ((avidrow1 = vidrow1) and (avidrow2 = vidrow2)) then
            begin
                close cur1;
                close cur2;
                exception ex_failure 'Bad code';
            end
    
            insert into m_links (id1, id2, iditem, amount)
            values (:vidrow1, :vidrow2, :vcuriditem, :vamused);

            avidrow1 = vidrow1;
            avidrow2 = vidrow2;

            if (vamleft2 = 0) then
            begin
                vtotalprice = round(vtotalprice, 2);
                vprice2 = round(vtotalprice / vtam2, 6);

                update m_rows
                set buyprice = :vprice2,
                    tbuyprice = :vtotalprice
                    --idseq = gen_id(gen_m_docseq, 1)
                where id = :vidrow2 and
                    (buyprice <> :vprice2 or
                    tbuyprice <> :vtotalprice);
            end

        end

    end
    close cur1;
    close cur2;

    execute procedure SP_M_RECALC_ROWSISGONE_1
    returning_values ret;

    ret = 1;
    suspend;
end^


ALTER PROCEDURE SP_M_RECALCITEM_01C (
    PIDDOC INTEGER,
    PNEWDOCSTATE INTEGER,
    PPROGRESSTEP INTEGER)
RETURNS (
    RET INTEGER)
AS
declare vret damount;
    declare vstartdate date;
    declare vcuriditem integer;

    declare vidrow1 integer;
    declare viditem1 integer;
    declare vtam1 damount;
    declare vdt1 date;
    declare vprice1 dpricex;
    declare vtp1 integer;

    declare vidrow2 integer;
    declare viditem2 integer;
    declare vtam2 damount;
    declare vdt2 date;
    declare vprice2 dpricex;

    declare vidrow3 integer;
    declare vtam3 damount;

    declare avidrow1 integer;
    declare avidrow2 integer;
    declare vdoctp integer;

    declare vamused damount;
    declare vamleft1 damount;
    declare vamleft2 damount;
    declare vtotalprice dpricex;

    declare vprogress integer;
    declare veventmessage varchar(20);

    declare CUR1 cursor for
    (
        with IT1 as (
            select distinct iditem
            from m_rows
            where iddoc = :piddoc)
        select
            R1.id,
            R1.iditem,
            R1.amount as amountotal,
            D1.dt,
            R1.buyprice,
            D1.tp
        from m_rows as R1
        join IT1 on IT1.iditem = R1.iditem
        join m_docs as D1 on
            D1.id = R1.iddoc and
            D1.state in (2, 3) and
            R1.isgone = 0
        join m_doctypes on D1.tp = m_doctypes.id and
            (m_doctypes.optype = 1 or
            D1.tp in (5, 7))
        join m_items on m_items.id = R1.iditem and
            m_items.isservice = 0
        order by R1.iditem, D1.dt, R1.idseq, R1.id
    );

    declare CUR2 cursor for
    (
        with IT1 as (
            select distinct iditem
            from m_rows
            where iddoc = :piddoc)
        select
            R1.id,
            R1.iditem,
            D1.dt, 
            D1.tp,
            R1.amount as amountotal
        from m_rows as R1
        join IT1 on IT1.iditem = R1.iditem
        join m_docs as D1 on
            D1.id = R1.iddoc and
            D1.state in (2, 3) and
            ((:vstartdate is null) or (D1.dt >= :vstartdate))
        join m_doctypes on D1.tp = m_doctypes.id and
            m_doctypes.optype = 2
        join m_items on m_items.id = R1.iditem and
            m_items.isservice = 0
        order by R1.iditem, dt, R1.idseq, R1.id
    );

    declare CUR3 cursor for
    (
        select
            R1.id,
            R1.iditem,
            R1.amount as amountotal,
            -L1.amount as amountreturned,
            D1.dt,
            R1.buyprice,
            D1.tp
        from m_links as L1
        join m_rows as R1 on
            L1.id2 = :vidrow3 and
            R1.id = L1.id1
        join m_docs as D1 on
            D1.id = R1.iddoc and
            D1.state in (2, 3)
        join m_doctypes on D1.tp = m_doctypes.id and
            m_doctypes.optype = 1
        join m_items on m_items.id = R1.iditem and
            m_items.isservice = 0

        order by R1.iditem, D1.dt, R1.idseq, R1.id
    );
begin
    -- recalc items in doc - with isgone
    veventmessage = 'Progress_' || current_connection;
    vprogress = 0;
    
    select dt from m_docs where id = :piddoc
    into :vstartdate;

    if (vstartdate is null) then
        exception ex_failure 'Bad piddoc';

    update m_rows
    set idseq = gen_id(gen_m_docseq, 1)
    where iddoc = :piddoc
    order by idseq, id;


    update m_docs
    set
        idseq = gen_id(gen_m_docseq, 1),
        state = :pnewdocstate
    where id = :piddoc;

    execute procedure SP_M_DEL_FINDOC(:piddoc);

    execute procedure sp_m_recalcamounts_2(:piddoc)
    returning_values ret;

    if (pprogresstep > 0) then
        IN AUTONOMOUS TRANSACTION DO
            post_event veventmessage;

    for select distinct R1.id
    from m_links
    join m_rows as R2
        on R2.id = m_links.id2
    join (
        select distinct iditem
        from m_rows
        where iddoc = :piddoc
    ) as IT1
        on R2.iditem = IT1.iditem
    join m_rows as R1
        on R1.id = m_links.id1 and
            R1.isgone = 1
    join m_docs as D2
        on D2.id = R2.iddoc and
            D2.dt >= :vstartdate
    into :vidrow1
    do begin
        update m_rows
        set isgone = 0
        where id = :vidrow1;
    end

    for select m_links.id1, m_links.id2
    from m_links
    join m_rows as R2
        on R2.id = m_links.id2
    join (
        select distinct iditem
        from m_rows
        where iddoc = :piddoc
    ) as IT1
        on R2.iditem = IT1.iditem
    join m_docs as D2
        on D2.id = R2.iddoc and
            D2.dt >= :vstartdate
    into :vidrow1, :vidrow2
    do begin
        delete from m_links
        where id1 = :vidrow1 and id2 = :vidrow2;
    end


    if (pprogresstep > 0) then
        IN AUTONOMOUS TRANSACTION DO
            post_event veventmessage;


    merge into m_rows
    using (
        select R1.id
        from m_rows as R1
        join m_docs as D1 on D1.id = R1.iddoc
        join m_doctypes on m_doctypes.id = D1.tp and
            m_doctypes.optype = 1
        join (
            select distinct iditem
            from m_rows
            where iddoc = :piddoc
        ) as IT1 on IT1.iditem = R1.iditem
    ) as T1
    on T1.id = m_rows.id and
        (buyprice <> price or
        tbuyprice <> tprice)
    when matched then
    update set buyprice = price, tbuyprice = tprice;




    vamleft1 = 0;
    vamleft2 = 0;
    vtotalprice = 0;

    vcuriditem = null;

    open cur1;
    open cur2;

    vidrow1 = null;
    vidrow3 = null;

    while(1=1) do
    begin
        if (vamleft2 = 0) then
        begin
            while(1=1) do
            begin
                vprogress = vprogress + 1;
                if ((pprogresstep > 0) and (vprogress >= pprogresstep)) then
                begin
                    IN AUTONOMOUS TRANSACTION DO
                        post_event veventmessage;
                    vprogress = 0;
                end

                fetch cur2
                into :vidrow2, :viditem2, :vdt2, :vdoctp, :vtam2;
                if (row_count = 0) then leave;
                
                if ((vcuriditem is null) or (vcuriditem < viditem2)) then
                begin
                    vcuriditem = viditem2;
                    vamleft1 = 0;
                end

                vtotalprice = 0;
                vamleft2 = 0;
                vret = 0;
                if (vdoctp in (3, 10)) then
                begin
                    vamleft2 = vtam2;
                    leave;
                end
                else if (vdoctp = 4) then
                    execute procedure sp_m_recalcitem_04 (:vidrow2, :vidrow1)
                    returning_values :vret;
                else if (vdoctp = 5) then
                    execute procedure sp_m_recalcitem_05 (:vidrow2, :vidrow1)
                    returning_values :vret;
                else if (vdoctp = 6) then
                    execute procedure sp_m_recalcitem_06 (:vidrow2, :vidrow1)
                    returning_values :vret;
                else if (vdoctp = 7) then
                    execute procedure sp_m_recalcitem_07 (:vidrow2, :vidrow1)
                    returning_values :vret;

                if (vidrow1 is not null) then
                    vamleft1 = vamleft1 - vret;
            end
            if (row_count = 0) then leave;
        end

        if (vamleft1 = 0) then
        begin
            while(1=1) do
            begin
                vprogress = vprogress + 1;
                if ((pprogresstep > 0) and (vprogress >= pprogresstep)) then
                begin
                    IN AUTONOMOUS TRANSACTION DO
                        post_event veventmessage;
                    vprogress = 0;
                end

                if (vidrow3 is null) then
                begin
    
                    fetch cur1
                    into :vidrow1, :viditem1, :vtam1, :vdt1, :vprice1, :vtp1;
    
                    if ((row_count = 0) or (viditem1 > vcuriditem)) then leave;
    
                    if (vtp1 in (5,7)) then
                    begin

                        vidrow3 = vidrow1;
                        open cur3;

                    end else
                    begin
    
                        if (viditem1 = vcuriditem) then
                        begin
                            select sum(m_links.amount) as amountused
                            from m_links
                            where m_links.id1 = :vidrow1
                            into :vamused;
                            vamused = coalesce(vamused, 0);
            
                            vamleft1 = vtam1 - vamused;
                            if (vamleft1 > 0) then leave;
                        end

                    end

                end else
                begin

                    fetch cur3
                    into :vidrow1, :viditem1, :vtam1, :vtam3, :vdt1, :vprice1, :vtp1;

                    if (row_count = 0) then
                    begin

                        vidrow3 = null;
                        close cur3;

                    end else
                    begin

                        select sum(m_links.amount) as amountused
                        from m_links
                        where m_links.id1 = :vidrow1
                        into :vamused;
                        vamused = coalesce(vamused, 0);
        
                        if (vamused < vtam1) then
                        begin
                            vamleft1 = vtam1 - vamused;

                            -- maybe cant give more then vtam3, or we loose some row1
                            -- a bit incorrect, but we cant do it right anyway
                            -- vamleft1 = minvalue(vtam1 - vamused, vtam3);
                            leave;
                        end
                    end

                end

            end

            if ((row_count = 0) or (vdt1 > vdt2) or
                (viditem1 > vcuriditem)) then
            begin
                close cur1;
                close cur2;
                if (vidrow3 is not null) then
                    close cur3;
                exception ex_failure 'Not enough amount in stock '
                    || 'item:[' || :vcuriditem || ']';
            end

        end

        if (vamleft1 < 0) then
            exception ex_failure 'Bad code: vamleft1 < 0';
        
        vamused = minvalue(vamleft1, vamleft2);

        if (vamused > 0) then
        begin
            vamleft1 = vamleft1 - vamused;
            vamleft2 = vamleft2 - vamused;

            vtotalprice = vtotalprice + vamused * vprice1;

            if ((avidrow1 = vidrow1) and (avidrow2 = vidrow2)) then
            begin
                close cur1;
                close cur2;
                exception ex_failure 'Bad code';
            end
    
            insert into m_links (id1, id2, iditem, amount)
            values (:vidrow1, :vidrow2, :vcuriditem, :vamused);

            if (vidrow3 is not null) then
            begin

                update m_links as L1
                set L1.amount = L1.amount + :vamused
                where L1.id1 = :vidrow3 and L1.id2 = :vidrow2;

                if (row_count = 0) then
                    insert into m_links (id1, id2, iditem, amount)
                    values (:vidrow3, :vidrow2, :vcuriditem, :vamused);

            end

            avidrow1 = vidrow1;
            avidrow2 = vidrow2;

            if (vamleft2 = 0) then
            begin
                vtotalprice = round(vtotalprice, 2);
                vprice2 = round(vtotalprice / vtam2, 6);

                update m_rows
                set buyprice = :vprice2,
                    tbuyprice = :vtotalprice
                    --idseq = gen_id(gen_m_docseq, 1)
                where id = :vidrow2 and
                    (buyprice <> :vprice2 or
                    tbuyprice <> :vtotalprice);
            end

        end

    end
    close cur1;
    close cur2;

    execute procedure SP_M_RECALC_ROWSISGONE_2(:piddoc);

    ret = 1;
    suspend;
end^


ALTER PROCEDURE SP_M_RECALCITEM_01C_1 (
    PIDDOC INTEGER,
    PNEWDOCSTATE INTEGER,
    PPROGRESSTEP INTEGER)
RETURNS (
    RET INTEGER)
AS
declare vret damount;
    declare vstartdate date;
    declare vcuriditem integer;
    declare viditem1 integer;
    declare viditem2 integer;

    declare vidrow1 integer;
    declare vidrow2 integer;
    declare avidrow1 integer;
    declare avidrow2 integer;
    declare vdoctp integer;
    declare vdt1 date;
    declare vdt2 date;

    declare vamused damount;
    declare vtam1 damount;
    declare vtam2 damount;
    declare vamleft1 damount;
    declare vamleft2 damount;
    declare vprice dpricex;
    declare vprice2 dpricex;
    declare vtotalprice dpricex;

    declare vprogress integer;
    declare veventmessage varchar(20);

    declare CUR1 cursor for
    (
        with IT1 as (
            select distinct iditem
            from m_rows
            where iddoc = :piddoc)
        select
            R1.id,
            R1.iditem,
            R1.amount as amountotal,
            D1.dt,
            R1.buyprice
        from m_rows as R1
        join IT1 on IT1.iditem = R1.iditem
        join m_docs as D1 on
            D1.id = R1.iddoc and
            D1.state in (2, 3) and
            R1.isgone = 0
        join m_doctypes on D1.tp = m_doctypes.id and
            m_doctypes.optype = 1
        join m_items on m_items.id = R1.iditem and
            m_items.isservice = 0
        order by R1.iditem, D1.dt, R1.idseq, R1.id
    );

    declare CUR2 cursor for
    (
        with IT1 as (
            select distinct iditem
            from m_rows
            where iddoc = :piddoc)
        select
            R1.id,
            R1.iditem,
            D1.dt, 
            D1.tp,
            R1.amount as amountotal
        from m_rows as R1
        join IT1 on IT1.iditem = R1.iditem
        join m_docs as D1 on
            D1.id = R1.iddoc and
            D1.state in (2, 3) and
            ((:vstartdate is null) or (D1.dt >= :vstartdate))
        join m_doctypes on D1.tp = m_doctypes.id and
            (m_doctypes.optype = 2 or
               D1.tp in (5, 7))
        join m_items on m_items.id = R1.iditem and
            m_items.isservice = 0
        order by R1.iditem, dt, R1.idseq, R1.id
    );
begin
    -- recalc items in doc - with isgone
    veventmessage = 'Progress_' || current_connection;
    vprogress = 0;
    
    select dt from m_docs where id = :piddoc
    into :vstartdate;

    if (vstartdate is null) then
        exception ex_failure 'Bad piddoc';

    update m_rows
    set idseq = gen_id(gen_m_docseq, 1)
    where iddoc = :piddoc
    order by idseq, id;


    update m_docs
    set
        idseq = gen_id(gen_m_docseq, 1),
        state = :pnewdocstate
    where id = :piddoc;

    execute procedure SP_M_DEL_FINDOC(:piddoc);

    execute procedure sp_m_recalcamounts_2(:piddoc)
    returning_values ret;

    if (pprogresstep > 0) then
        IN AUTONOMOUS TRANSACTION DO
            post_event veventmessage;

    for select distinct R1.id
    from m_links
    join m_rows as R2
        on R2.id = m_links.id2
    join (
        select distinct iditem
        from m_rows
        where iddoc = :piddoc
    ) as IT1
        on R2.iditem = IT1.iditem
    join m_rows as R1
        on R1.id = m_links.id1 and
            R1.isgone = 1
    join m_docs as D2
        on D2.id = R2.iddoc and
            D2.dt >= :vstartdate
    into :vidrow1
    do begin
        update m_rows
        set isgone = 0
        where id = :vidrow1;
    end

    for select m_links.id1, m_links.id2
    from m_links
    join m_rows as R2
        on R2.id = m_links.id2
    join (
        select distinct iditem
        from m_rows
        where iddoc = :piddoc
    ) as IT1
        on R2.iditem = IT1.iditem
    join m_docs as D2
        on D2.id = R2.iddoc and
            D2.dt >= :vstartdate
    into :vidrow1, :vidrow2
    do begin
        delete from m_links
        where id1 = :vidrow1 and id2 = :vidrow2;
    end


    if (pprogresstep > 0) then
        IN AUTONOMOUS TRANSACTION DO
            post_event veventmessage;


    merge into m_rows
    using (
        select R1.id
        from m_rows as R1
        join m_docs as D1 on D1.id = R1.iddoc
        join m_doctypes on m_doctypes.id = D1.tp and
            m_doctypes.optype = 1
        join (
            select distinct iditem
            from m_rows
            where iddoc = :piddoc
        ) as IT1 on IT1.iditem = R1.iditem
    ) as T1
    on T1.id = m_rows.id and
        (buyprice <> price or
        tbuyprice <> tprice)
    when matched then
    update set buyprice = price, tbuyprice = tprice;




    vamleft1 = 0;
    vamleft2 = 0;
    vtotalprice = 0;

    vcuriditem = null;

    open cur1;
    open cur2;

    vidrow1 = null;

    while(1=1) do
    begin
        if (vamleft2 = 0) then
        begin
            while(1=1) do
            begin
                vprogress = vprogress + 1;
                if ((pprogresstep > 0) and (vprogress >= pprogresstep)) then
                begin
                    IN AUTONOMOUS TRANSACTION DO
                        post_event veventmessage;
                    vprogress = 0;
                end

                fetch cur2
                into :vidrow2, :viditem2, :vdt2, :vdoctp, :vtam2;
                if (row_count = 0) then leave;
                
                if ((vcuriditem is null) or (vcuriditem < viditem2)) then
                begin
                    vcuriditem = viditem2;
                    vamleft1 = 0;
                end

                vtotalprice = 0;
                vamleft2 = 0;
                vret = 0;
                if (vdoctp in (3, 10)) then
                begin
                    vamleft2 = vtam2;
                    leave;
                end
                else if (vdoctp = 4) then
                    execute procedure sp_m_recalcitem_04 (:vidrow2, :vidrow1)
                    returning_values :vret;
                else if (vdoctp = 5) then
                    execute procedure sp_m_recalcitem_05 (:vidrow2, :vidrow1)
                    returning_values :vret;
                else if (vdoctp = 6) then
                    execute procedure sp_m_recalcitem_06 (:vidrow2, :vidrow1)
                    returning_values :vret;
                else if (vdoctp = 7) then
                    execute procedure sp_m_recalcitem_07 (:vidrow2, :vidrow1)
                    returning_values :vret;

                if (vidrow1 is not null) then
                    vamleft1 = vamleft1 - vret;
            end
            if (row_count = 0) then leave;
        end

        if (vamleft1 = 0) then
        begin
            while(1=1) do
            begin
                vprogress = vprogress + 1;
                if ((pprogresstep > 0) and (vprogress >= pprogresstep)) then
                begin
                    IN AUTONOMOUS TRANSACTION DO
                        post_event veventmessage;
                    vprogress = 0;
                end

                fetch cur1
                into :vidrow1, :viditem1, :vtam1, :vdt1, :vprice;

                if ((row_count = 0) or (viditem1 > vcuriditem)) then leave;

                if (viditem1 = vcuriditem) then
                begin
                    select sum(m_links.amount) as amountused
                    from m_links
                    where m_links.id1 = :vidrow1
                    into :vamused;
                    vamused = coalesce(vamused, 0);
    
                    if (vamused < vtam1) then leave;
                end
            end

            if ((row_count = 0) or (vdt1 > vdt2) or
                (viditem1 > vcuriditem)) then
            begin
                close cur1;
                close cur2;
                exception ex_failure 'Not enough amount in stock '
                    || 'item:[' || :vcuriditem || ']';
            end

            vamleft1 = vtam1 - vamused;
        end
        
        vamused = minvalue(vamleft1, vamleft2);

        if (vamused > 0) then
        begin
            vamleft1 = vamleft1 - vamused;
            vamleft2 = vamleft2 - vamused;

            vtotalprice = vtotalprice + vamused * vprice;

            if ((avidrow1 = vidrow1) and (avidrow2 = vidrow2)) then
            begin
                close cur1;
                close cur2;
                exception ex_failure 'Bad code';
            end
    
            insert into m_links (id1, id2, iditem, amount)
            values (:vidrow1, :vidrow2, :vcuriditem, :vamused);

            avidrow1 = vidrow1;
            avidrow2 = vidrow2;

            if (vamleft2 = 0) then
            begin
                vtotalprice = round(vtotalprice, 2);
                vprice2 = round(vtotalprice / vtam2, 6);

                update m_rows
                set buyprice = :vprice2,
                    tbuyprice = :vtotalprice
                    --idseq = gen_id(gen_m_docseq, 1)
                where id = :vidrow2 and
                    (buyprice <> :vprice2 or
                    tbuyprice <> :vtotalprice);
            end

        end

    end
    close cur1;
    close cur2;

    execute procedure SP_M_RECALC_ROWSISGONE_2(:piddoc);

    ret = 1;
    suspend;
end^


ALTER PROCEDURE SP_M_RECALCITEM_04 (
    PIDROW INTEGER,
    PCURIDROW1 INTEGER)
RETURNS (
    RCURAMOUNTUSED DAMOUNT)
AS
declare variable viditem integer;
    declare variable vidstorein integer;
    declare variable vidstoreout integer;
    declare variable vamounttolink damount;
    declare variable vamountinstore damount;
    declare variable vdt date;
    declare variable vidrow integer;
    declare variable vamounttotal damount;
    declare variable vamountused damount;
    declare variable vgotamount damount;
    declare variable vamountlinked damount;
    declare variable vprice dpricex;
    declare variable vtotalprice dpricex;
begin
    -- atgriezts piegadatajam
    select
        m_rows.iditem, m_docs.dt, m_rows.amount,
        m_docs.idstorein, m_docs.idstoreout
    from m_rows
    join m_docs on m_rows.id = :pidrow and m_docs.id = m_rows.iddoc
    into :viditem, :vdt, :vamounttolink, :vidstorein, :vidstoreout;

    rcuramountused = 0;
    vgotamount = 0;
    vtotalprice = 0;

    for select
        R1.id,
        R1.price,
        R1.amount as amountotal
    from m_rows as R1
    join m_docs as D1 on
        R1.iditem = :viditem and
        R1.isgone = 0 and
        D1.idstoreout = :vidstorein and
        D1.id = R1.iddoc and
        D1.dt <= :vdt and
        D1.state in (2, 3) and
        D1.tp = 1
    order by D1.dt desc, R1.idseq desc
    into :vidrow, :vprice, :vamounttotal
    do
    begin
        select sum(m_links.amount) as amountused
        from m_links
        where id1 = :vidrow
        into :vamountused;
        vamountused = coalesce(vamountused, 0);

        vamountlinked = minvalue(vamounttolink - vgotamount, vamounttotal - vamountused);

        if (vamountlinked > 0) then
        begin
            vgotamount = vgotamount + vamountlinked;
    
            insert into m_links (id1, id2, iditem, amount)
            values (:vidrow, :pidrow, :viditem, :vamountlinked);
            
            if ((pcuridrow1 is not null) and (vidrow = pcuridrow1)) then
            begin
                rcuramountused = vamountlinked;
            end

            vtotalprice = vtotalprice + vprice * vamountlinked;
    
            if (vgotamount >= vamounttolink) then leave;
        end
    end

    if (vgotamount < vamounttolink) then
    begin
        exception ex_failure 'Not enough amount recieved from supplier to return for '
            || 'item:[' || :viditem || ']';
    end

    vtotalprice = round(vtotalprice, 2);
    vprice = round(:vtotalprice / :vamounttolink, 4);

    update m_rows
    set
        buyprice = :vprice,
        tbuyprice = :vtotalprice
    where id = :pidrow and
        (buyprice <> :vprice or
        tbuyprice <> :vtotalprice);

    suspend;
end^


ALTER PROCEDURE SP_M_RECALCITEM_05 (
    PIDROW INTEGER,
    PCURIDROW1 INTEGER)
RETURNS (
    RCURAMOUNTUSED INTEGER)
AS
declare variable viditem integer;
    declare variable vidstorein integer;
    declare variable vidstoreout integer;
    declare variable vamounttolink damount;
    declare variable vamountinstore damount;
    declare variable vdt date;
    declare variable vidrow integer;
    declare variable vidrow2 integer;
    declare variable vamounttotal integer;
    declare variable vamountused integer;
    declare variable vgotamount damount;
    declare variable vamountlinked damount;
    declare variable vamountlinked2 damount;
    declare variable vsellprice dpricex;
    declare variable vselltotalprice dpricex;
    declare variable vbuyprice dpricex;
    declare variable vbuytotalprice dpricex;
begin
    -- atgriezts no pirceja
    select
        m_rows.iditem, m_docs.dt, m_rows.amount,
        m_docs.idstorein, m_docs.idstoreout
    from m_rows
    join m_docs on m_rows.id = :pidrow and m_docs.id = m_rows.iddoc
    into :viditem, :vdt, :vamounttolink, :vidstorein, :vidstoreout;

    if (vamounttolink >= 0) then
        exception ex_failure 'Amount must be negative '
                || 'item:[' || :viditem || ']';

    vamounttolink = -vamounttolink;

    rcuramountused = 0;
    vgotamount = 0;
    vselltotalprice = 0;
    vbuytotalprice = 0;

    for select
        R1.id,
        R1.price,
        R1.buyprice,
        R1.amount as amountotal
    from m_rows as R1
    join m_docs as D1 on
        R1.iditem = :viditem and
        D1.idstorein = :vidstorein and
        D1.id = R1.iddoc and
        D1.dt <= :vdt and
        D1.state in (2, 3) and
        D1.tp = 3
    order by D1.dt desc, R1.idseq desc
    into :vidrow, :vsellprice, :vbuyprice, :vamounttotal
    do
    begin
        vamountlinked2 = 0;

        for select id1, sum(amount)
        from m_links
        where id2 = :vidrow
        group by id1
        order by id1
        into :vidrow2, :vamountused
        do
        begin
            vamountused = coalesce(vamountused, 0);
            vamountlinked = minvalue(vamounttolink - vgotamount, vamountused);
    
            if (vamountlinked > 0) then
            begin
                vgotamount = vgotamount + vamountlinked;
                vamountlinked2 = vamountlinked2 + vamountlinked;

                if ((pcuridrow1 is not null) and (vidrow2 = pcuridrow1)) then
                    rcuramountused = rcuramountused - vamountlinked;

                insert into m_links
                values (:vidrow2, :pidrow, :viditem, -:vamountlinked);
                
                if (vgotamount >= vamounttolink) then leave;
            end
        end

        if (vamountlinked2 > 0) then
        begin
            vselltotalprice = vselltotalprice + vsellprice * vamountlinked2;
            vbuytotalprice = vbuytotalprice + vbuyprice * vamountlinked2;

            insert into m_links
            values (:vidrow, :pidrow, :viditem, :vamountlinked2);
        end

    end

    if (vgotamount < vamounttolink) then
    begin
        exception ex_failure
            'Not enough amount sent to buyer to return for '
            || 'item:[' || :viditem || ']';
    end

    vselltotalprice = round(vselltotalprice, 2);
    vsellprice = round(vselltotalprice / vamounttolink, 6);
    vbuytotalprice = round(vbuytotalprice, 2);
    vbuyprice = round(vbuytotalprice / vamounttolink, 6);

    update m_rows
    set 
        oldprice = :vsellprice,
        toldprice = :vselltotalprice,
        buyprice = :vbuyprice,
        tbuyprice = :vbuytotalprice
    where id = :pidrow and
        (oldprice <> :vsellprice or
        toldprice <> :vselltotalprice or
        buyprice <> :vbuyprice or
        tbuyprice <> :vbuytotalprice);

    suspend;
end^


ALTER PROCEDURE SP_M_RECALCITEM_06 (
    PIDROW INTEGER,
    PCURIDROW1 INTEGER)
RETURNS (
    RCURAMOUNTUSED INTEGER)
AS
declare variable viditem integer;
    declare variable vamounttolink damount;
    declare variable vamountincredit damount;
    declare variable vamountreceived damount;
    declare variable vamountlinked damount;
    declare variable vdt date;
    declare variable vdt2 date;
    declare variable vidcreddoc integer;
    declare variable vidcredrow integer;
    declare variable vbuyprice dpricex;
    declare variable vtbuyprice dpricex;
begin
    -- piegadataja kreditrekins
    rcuramountused = 0;

    select
        m_rows.iditem, m_docs.dt, m_rows.amount,
        m_docs.idcreddoc, m_rows.idcredrow
    from m_rows
    join m_docs on m_rows.id = :pidrow and m_docs.id = m_rows.iddoc
    into :viditem, :vdt, :vamounttolink,
        :vidcreddoc, :vidcredrow;
    
    select R1.amount, D1.dt
    from m_rows as R1
    join m_docs as D1 on D1.id = R1.iddoc
    where R1.id = :vidcredrow
    into :vamountreceived, :vdt2;

    if (vamounttolink < 0) then
        exception ex_failure 'Amount cant be < 0 ' || :pidrow;

    if (vamounttolink > vamountreceived) then
        exception ex_failure 'Credited amount greater than reveived for item:[' || :viditem || ']';

    if (vdt < vdt2) then
        exception ex_failure 'Creditdoc date older than original doc';

    select sum(R1.amount)
    from m_rows as R1
    join m_docs as D1 on D1.id = R1.iddoc and 
        R1.idcredrow = :vidcredrow and
        D1.state in (2,3)
    into :vamountincredit;
    
    vamountincredit = coalesce(vamountincredit, 0);

    if (vamountincredit > vamountreceived) then
        exception ex_failure 'Credited amount greater than received for item:[' || :viditem || ']';

    update or insert into m_links (id1, id2, iditem, amount)
    values (:vidcredrow, :pidrow, :viditem, :vamounttolink);
    
    select sum(amount)
    from m_links
    where id1 = :vidcredrow and iditem = :viditem
    into :vamountlinked;

    vamountlinked = coalesce(vamountlinked, 0);

    if (vamountlinked > vamountreceived) then
        exception ex_failure 'Used amount greater than received for item:[' || :viditem || ']';

    if ((pcuridrow1 is not null) and (vidcredrow = pcuridrow1)) then
    begin
        rcuramountused = vamounttolink;
    end

    select m_rows.price, m_docs.dt
    from m_rows join m_docs on m_docs.id = m_rows.iddoc
    where m_rows.id = :vidcredrow
    into :vbuyprice, :vdt2;

    vtbuyprice = round(vamounttolink * vbuyprice, 2);

    update m_rows
    set
        buyprice = :vbuyprice,
        tbuyprice = :vtbuyprice
    where id = :pidrow and
        (buyprice <> :vbuyprice or
        tbuyprice <> :vtbuyprice);

    suspend;
end^


ALTER PROCEDURE SP_M_RECALCITEM_07 (
    PIDROW INTEGER,
    PCURIDROW1 INTEGER)
RETURNS (
    RCURAMOUNTUSED INTEGER)
AS
declare variable vidrow integer;
    declare variable viditem integer;
    declare variable vamounttolink damount;
    declare variable vamountincredit damount;
    declare variable vamountsold damount;
    declare variable vamountlinked damount;
    declare variable vgotamount damount;
    declare variable vamountused damount;
    declare variable vdt date;
    declare variable vdt2 date;
    declare variable vidcreddoc integer;
    declare variable vidcredrow integer;
    declare variable vsellprice dpricex;
    declare variable vbuyprice dpricex;
    declare variable vtsellprice dpricex;
    declare variable vtbuyprice dpricex;
begin
    -- realizacijas kreditrekins
    rcuramountused = 0;

    select
        m_rows.iditem, m_docs.dt, m_rows.amount,
        m_docs.idcreddoc, m_rows.idcredrow
    from m_rows
    join m_docs on m_rows.id = :pidrow and m_docs.id = m_rows.iddoc
    into :viditem, :vdt, :vamounttolink,
        :vidcreddoc, :vidcredrow;
    
    select R1.amount, D1.dt, R1.price, R1.buyprice
    from m_rows as R1
    join m_docs as D1 on D1.id = R1.iddoc
    where R1.id = :vidcredrow
    into :vamountsold, :vdt2, :vsellprice, :vbuyprice;


    if (vamounttolink >= 0) then
        exception ex_failure 'Amount must be negative ' || :pidrow;

    vamounttolink = -vamounttolink;

    if (vamounttolink > vamountsold) then
        exception ex_failure 'Credited amount greater than sale '
            || 'item:[' || :viditem || ']';

    if (vdt < vdt2) then
        exception ex_failure 'Creditdoc date older than original doc';

    select sum(R1.amount)
    from m_rows as R1
    join m_docs as D1 on D1.id = R1.iddoc and 
        R1.idcredrow = :vidcredrow and
        D1.state in (2,3)
    into :vamountincredit;

    vamountincredit = coalesce(vamountincredit, 0);

    if (vamountincredit > vamountsold) then
        exception ex_failure 'Credited amount greater than sold '
            || 'item:[' || :viditem || ']';

    update or insert into m_links (id1, id2, iditem, amount)
    values (:vidcredrow, :pidrow, :viditem, :vamounttolink);
    
    select sum(amount)
    from m_links
    where id1 = :vidcredrow and iditem = :viditem
    into :vamountlinked;

    vamountlinked = coalesce(vamountlinked, 0);

    if (vamountlinked > vamountsold) then
        exception ex_failure 'Used amount greater than sale item:[' || :viditem || ']';


    vgotamount = 0;

    for select id1, sum(amount)
    from m_links
    where id2 = :vidcredrow
    group by id1
    order by id1
    into :vidrow, :vamountused
    do
    begin
        vamountused = coalesce(vamountused, 0);
        vamountlinked = minvalue(vamounttolink - vgotamount, vamountused);

        if (vamountlinked > 0) then
        begin
            vgotamount = vgotamount + vamountlinked;

            if ((pcuridrow1 is not null) and (vidrow = pcuridrow1)) then
                rcuramountused = rcuramountused - vamounttolink;

            insert into m_links
            values (:vidrow, :pidrow, :viditem, -:vamountlinked);
    
            if (vgotamount >= vamounttolink) then leave;
        end
    end

    if (vgotamount < vamounttolink) then
    begin
        exception ex_failure
            'Not enough amount sent to buyer to return for '
            || 'item:[' || :viditem || ']';
    end

    vtsellprice = round(vamounttolink * vsellprice, 2);
    vtbuyprice = round(vamounttolink * vbuyprice, 2);

    update m_rows
    set
        oldprice = :vsellprice,
        toldprice = :vtsellprice,
        buyprice = :vbuyprice,
        tbuyprice = :vtbuyprice
    where id = :pidrow and
        (oldprice <> :vsellprice or
        toldprice <> :vtsellprice or
        buyprice <> :vbuyprice or
        tbuyprice <> :vtbuyprice);

    suspend;
end^


ALTER PROCEDURE SP_M_RECALCLASTDATES_1
AS
declare viditem integer;
    declare vdt date;
begin
    for select m_items.id, T1.dt
    from m_items
    left join
    (
        select m_rows.iditem, max(m_docs.dt) as dt
        from m_rows 
        join m_links on m_links.id2 = m_rows.id
        join m_docs on m_docs.id = m_rows.iddoc
        group by m_rows.iditem
    ) as t1 on T1.iditem = m_items.id
    where m_items.isservice = 0
    into :viditem, :vdt
    do
    begin
        update m_items
        set lastsaledate = :vdt
        where id = :viditem and
            ((lastsaledate is null and :vdt is not null) or
            (lastsaledate is not null and :vdt is null) or
            (lastsaledate <> :vdt));
    end
end^


ALTER PROCEDURE SP_M_REMOVELINKS_01 (
    PIDDOC INTEGER,
    PNEWDOCSTATE INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
declare variable vidrow integer;
    declare variable viditem integer;
    declare variable vidrow2 integer;
begin
    for select m_rows.id, m_rows.iditem
    from m_docs
    join m_rows on m_docs.id = :piddoc and m_docs.id = m_rows.iddoc
    join m_items on m_items.id = m_rows.iditem and
        m_items.isservice = 0
    order by m_rows.idseq, m_rows.id
    into :vidrow, :viditem
    do
    begin
        if (exists(
            select first 1 id1
            from m_links
            where id1 = :vidrow))
        then
            exception ex_failure 'Items in row used in other doc '
                || 'item:[' || viditem || '] '
                || 'idrow:[' || vidrow || ']';
            
        for select m_rows.id
        from m_links
        join m_rows on m_links.id2 = :vidrow and
            m_rows.id = m_links.id1 and
            m_rows.isgone = 1
        into :vidrow2
        do
        begin
            update m_rows
            set isgone = 0
            where id = :vidrow2;
        end

        delete from m_links
        where id2 = :vidrow;
    end

    update m_rows
    set idseq = gen_id(gen_m_docseq, 1)
    where iddoc = :piddoc
    order by idseq, id;

    update m_docs
    set
        idseq = gen_id(gen_m_docseq, 1),
        state = :pnewdocstate
    where id = :piddoc;

    execute procedure SP_M_CALC_DOC_AMOUNTS(PIDDOC, 1);

    execute procedure SP_M_DEL_FINDOC(:piddoc);

    result = 'OK';
    suspend;
end^


ALTER PROCEDURE SP_M_REP_COSTACC_1 (
    PDT1 DATE,
    PDT2 DATE)
RETURNS (
    TP INTEGER,
    ACC1 TYPE OF COLUMN M_DOCS.ACCIN,
    ACC2 TYPE OF COLUMN M_DOCS.ACCIN,
    COST MONEY)
AS
begin
    for select tp, acc1, acc2, tbuyprice
    from
    (
        select
            D1.tp,
            R1.acc7 as acc1,
            D1.accout as acc2,
            sum(R1.tbuyprice) as tbuyprice
        from m_docs as D1
        join m_rows as R1 on D1.id = R1.iddoc and
            D1.dt between :pdt1 and :pdt2 and
            D1.tp in (3,5,7,10,14) and
            D1.state in (2,3) and
            D1.acctp2 = 1
        join m_stores as S1 on S1.id = D1.idstorein
        join m_storetype as ST1 on ST1.id = S1.tp and
            ST1.trackstock = 0
        join m_stores as S2 on S2.id = D1.idstoreout
        join m_storetype as ST2 on ST2.id = S2.tp and
            ST2.trackstock = 1
        join m_items on m_items.id = R1.iditem and
            m_items.isservice = 0
        group by D1.tp, R1.acc7, D1.accout
    ) as T1
    order by tp
    into :tp, :acc1, :acc2, :cost
    do
    begin
        if (tp in (5,7)) then
            cost = -cost;
        suspend;
    end
end^


ALTER PROCEDURE SP_M_REP_COSTACC_2 (
    PDT1 DATE,
    PDT2 DATE)
RETURNS (
    ID TYPE OF COLUMN M_DOCS.ID,
    DT TYPE OF COLUMN M_DOCS.DT,
    SR TYPE OF COLUMN M_DOCS.SR,
    NR TYPE OF COLUMN M_DOCS.NR,
    TP TYPE OF COLUMN M_DOCS.TP,
    IDSTOREOUT TYPE OF COLUMN M_DOCS.IDSTOREOUT,
    IDSTOREIN TYPE OF COLUMN M_DOCS.IDSTOREIN,
    ACC1 TYPE OF COLUMN M_DOCS.ACCIN,
    ACC2 TYPE OF COLUMN M_DOCS.ACCIN,
    COST MONEY)
AS
begin
    for select
        id,
        dt,
        sr,
        nr,
        tp,
        idstoreout,
        idstorein,
        acc1,
        acc2,
        tbuyprice
    from
    (
        select
            D1.id,
            min(D1.dt) as dt,
            min(D1.sr) as sr,
            min(D1.nr) as nr,
            min(D1.tp) as tp,
            min(D1.idstoreout) as idstoreout,
            min(D1.idstorein) as idstorein,
            R1.acc7 as acc1,
            D1.accout as acc2,
            sum(R1.tbuyprice) as tbuyprice
        from m_docs as D1
        join m_rows as R1 on D1.id = R1.iddoc and
            D1.dt between :pdt1 and :pdt2 and
            D1.tp in (3,5,7) and
            D1.state in (2,3) and
            D1.acctp2 = 1
        join m_stores as S1 on S1.id = D1.idstorein
        join m_storetype as ST1 on ST1.id = S1.tp and
            ST1.trackstock = 0
        join m_stores as S2 on S2.id = D1.idstoreout
        join m_storetype as ST2 on ST2.id = S2.tp and
            ST2.trackstock = 1
        join m_items on m_items.id = R1.iditem and
            m_items.isservice = 0
        group by D1.id, R1.acc7, D1.accout
    ) as T1
    order by dt
    into :id, :dt, :sr, :nr, :tp, :idstoreout, :idstorein, :acc1, :acc2, :cost
    do
    begin
        if (tp in (5,7)) then
            cost = -cost;
        suspend;
    end
end^


ALTER PROCEDURE SP_M_REP_ITEMLINKS_1 (
    PIDITEM INTEGER,
    PDT1 DATE,
    PDT2 DATE)
RETURNS (
    AIDD TYPE OF COLUMN M_ROWS.ID,
    AIDR TYPE OF COLUMN M_DOCS.ID,
    ADT TYPE OF COLUMN M_DOCS.DT,
    ASR TYPE OF COLUMN M_DOCS.SR,
    ANR TYPE OF COLUMN M_DOCS.NR,
    ATP TYPE OF COLUMN M_DOCS.TP,
    AIDSTOREIN TYPE OF COLUMN M_DOCS.IDSTOREIN,
    AIDSTOREOUT TYPE OF COLUMN M_DOCS.IDSTOREOUT,
    AAMOUNT TYPE OF COLUMN M_ROWS.AMOUNT,
    ABUYPRICE TYPE OF COLUMN M_ROWS.BUYPRICE,
    BIDD TYPE OF COLUMN M_ROWS.ID,
    BIDR TYPE OF COLUMN M_DOCS.ID,
    BDT TYPE OF COLUMN M_DOCS.DT,
    BSR TYPE OF COLUMN M_DOCS.SR,
    BNR TYPE OF COLUMN M_DOCS.NR,
    BTP TYPE OF COLUMN M_DOCS.TP,
    BIDSTOREIN TYPE OF COLUMN M_DOCS.IDSTOREIN,
    BIDSTOREOUT TYPE OF COLUMN M_DOCS.IDSTOREOUT,
    BAMOUNT TYPE OF COLUMN M_ROWS.AMOUNT,
    BBUYPRICE TYPE OF COLUMN M_ROWS.BUYPRICE,
    AMOUNTLINKED TYPE OF COLUMN M_ROWS.AMOUNT)
AS
declare vaidseq integer;
    declare vbidseq integer;
begin
    for select *
    from
    (
        select
            left_part.idd as aidd,
            left_part.idr as aidr,
            left_part.idseq as aidseq,
            left_part.dt as adt,
            left_part.sr as asr,
            left_part.nr as anr,
            left_part.tp as atp,
            left_part.idstorein as aidstorein,
            left_part.idstoreout as aidstoreout,
            left_part.amount as aamount,
            left_part.buyprice as abuyprice,
    
            right_part.idd as bidd,
            right_part.idr as bidr,
            right_part.idseq as bidseq,
            right_part.dt as bdt,
            right_part.sr as bsr,
            right_part.nr as bnr,
            right_part.tp as btp,
            right_part.idstorein as bidstorein,
            right_part.idstoreout as bidstoreout,
            right_part.amount as bamount,
            right_part.buyprice as bbuyprice,
    
            left_part.amountlinked
        from
        (
            select
                L1.id2 as id2,
                D1.id as idd,
                R1.id as idr,
                D1.idseq,
                D1.dt,
                D1.sr,
                D1.nr,
                D1.tp,
                D1.idstorein,
                D1.idstoreout,
                R1.amount,
                R1.buyprice,
                L1.amount as amountlinked
            from m_rows as R1
            join m_docs as D1 on R1.iditem = :piditem and
                D1.id = R1.iddoc and
                D1.state in (2,3)
            join m_doctypes as DT1 on DT1.id = D1.tp and
                DT1.optype = 1
            left join m_links as L1 on L1.id1 = R1.id
        ) as left_part
    
        left join
    
        (
            select
                D1.id as idd,
                R1.id as idr,
                D1.idseq,
                D1.dt,
                D1.sr,
                D1.nr,
                D1.tp,
                D1.idstorein,
                D1.idstoreout,
                R1.amount,
                R1.buyprice
            from m_rows as R1
            join m_docs as D1 on R1.iditem = :piditem and
                D1.id = R1.iddoc and
                D1.state in (2,3)
            join m_doctypes as DT1 on DT1.id = D1.tp and
                DT1.optype = 2
        ) as right_part on left_part.id2 = right_part.idr
        where (left_part.dt between :pdt1 and :pdt2 or
            right_part.dt between :pdt1 and :pdt2)
    
        union all

        select
            null as aidd,
            null as aidr,
            null as aidseq,
            null as adt,
            null as asr,
            null as anr,
            null as atp,
            null as aidstorein,
            null as aidstoreout,
            null as aamount,
            null as abuyprice,

            D1.id as bidd,
            R1.id as bidr,
            D1.idseq as bidseq,
            D1.dt as bdt,
            D1.sr as bsr,
            D1.nr as bnr,
            D1.tp as btp,
            D1.idstorein as bidstorein,
            D1.idstoreout as bidstoreout,
            R1.amount as bamount,
            R1.buyprice as bbuyprice,

            null as amountlinked

        from m_rows as R1
        join m_docs as D1 on R1.iditem = :piditem and
            D1.id = R1.iddoc and
            D1.state in (2,3)
        join m_doctypes as DT1 on DT1.id = D1.tp and
            DT1.optype = 2
        left join m_links as L1 on L1.id2 = R1.id
        where L1.id1 is null and
            D1.dt between :pdt1 and :pdt2
    )
    order by adt, aidseq, bdt, bidseq
    into
        :aidd,
        :aidr,
        :vaidseq,
        :adt,
        :asr,
        :anr,
        :atp,
        :aidstorein,
        :aidstoreout,
        :aamount,
        :abuyprice,

        :bidd,
        :bidr,
        :vbidseq,
        :bdt,
        :bsr,
        :bnr,
        :btp,
        :bidstorein,
        :bidstoreout,
        :bamount,
        :bbuyprice,

        :amountlinked

    do
    suspend;
end^


ALTER PROCEDURE SP_M_REP_ITEMSAMOUNTS_1 (
    PDT1 DATE,
    PDT2 DATE,
    PCAT INTEGER)
RETURNS (
    IDITEM INTEGER,
    TP INTEGER,
    AMOUNT DAMOUNT)
AS
declare viditem integer;
    declare vtp integer;
    declare vamount damount;

    declare vlastiditem integer;
    declare vamountatend damount;
begin
    vlastiditem = null;
    vamountatend = 0;

    for select iditem, tp, amount
    from
    (
        select T1.iditem, -1 as tp, sum(T1.amount) as amount
        from
        (
            select R1.iditem, 0 as tp, R1.amount
            from m_docs as D1
            join m_rows as R1 on D1.id = R1.iddoc and
                D1.dt < :pdt1 and
                D1.state in (2,3)
            join m_stores as S1 on S1.id = D1.idstorein
            join m_storetype as ST1 on ST1.id = S1.tp and
                ST1.trackstock = 1
            join m_stores as S2 on S2.id = D1.idstoreout
            join m_storetype as ST2 on ST2.id = S2.tp and
                ST2.trackstock = 0
            
            union all
        
            select R1.iditem, 0 as tp, -R1.amount
            from m_docs as D1
            join m_rows as R1 on D1.id = R1.iddoc and
                D1.dt < :pdt1 and
                D1.state in (2,3)
            join m_stores as S1 on S1.id = D1.idstorein
            join m_storetype as ST1 on ST1.id = S1.tp and
                ST1.trackstock = 0
            join m_stores as S2 on S2.id = D1.idstoreout
            join m_storetype as ST2 on ST2.id = S2.tp and
                ST2.trackstock = 1
        ) as T1
        group by T1.iditem
    
        union all
    
        select R1.iditem, D1.tp, sum(R1.amount) as amount
        from m_docs as D1
        join m_rows as R1 on D1.id = R1.iddoc and
            D1.dt between :pdt1 and :pdt2 and
            D1.state in (2,3)
        join m_stores as S1 on S1.id = D1.idstorein
        join m_storetype as ST1 on ST1.id = S1.tp and
            ST1.trackstock = 1
        join m_stores as S2 on S2.id = D1.idstoreout
        join m_storetype as ST2 on ST2.id = S2.tp and
            ST2.trackstock = 0
        group by R1.iditem, D1.tp
    
        union all
    
        select R1.iditem, D1.tp, -sum(R1.amount) as amount
        from m_docs as D1
        join m_rows as R1 on D1.id = R1.iddoc and
            D1.dt between :pdt1 and :pdt2 and
            D1.state in (2,3)
        join m_stores as S1 on S1.id = D1.idstorein
        join m_storetype as ST1 on ST1.id = S1.tp and
            ST1.trackstock = 0
        join m_stores as S2 on S2.id = D1.idstoreout
        join m_storetype as ST2 on ST2.id = S2.tp and
            ST2.trackstock = 1
        group by R1.iditem, D1.tp
    ) as T2
    join m_items on m_items.id = T2.iditem and
        m_items.isservice = 0 and
        (:pcat is null or m_items.cat = :pcat)
    order by iditem, tp
    into :viditem, :vtp, :vamount
    do
    begin
        if (vlastiditem is null) then vlastiditem = viditem;
        if (vlastiditem <> viditem) then
        begin
            iditem = vlastiditem;
            tp = 100;
            amount = vamountatend;
            suspend;

            vlastiditem = viditem;
            vamountatend = 0;
        end

        vamountatend = vamountatend + vamount;

        iditem = viditem;
        tp = vtp;
        amount = vamount;
        suspend;
    end

    if (vlastiditem is not null) then
    begin
        iditem = vlastiditem;
        tp = 100;
        amount = vamountatend;
        suspend;
    end

end^


ALTER PROCEDURE SP_M_REP_ITEMSAMOUNTS_2 (
    PDT1 DATE,
    PDT2 DATE,
    PCAT INTEGER)
RETURNS (
    IDITEM INTEGER,
    TP INTEGER,
    AMOUNT DAMOUNT,
    TBUYPRICE MONEY)
AS
declare viditem integer;
    declare vtp integer;
    declare vamount damount;
    declare vbuyprice money;

    declare vlastiditem integer;
    declare vamountatend damount;
    declare vbuypriceatend money;
begin
    vlastiditem = null;
    vamountatend = 0;
    vbuypriceatend = 0;

    for select iditem, tp, amount, tbuyprice
    from
    (
        select
            T1.iditem,
            -1 as tp,
            sum(T1.amount) as amount,
            sum(T1.tbuyprice) as tbuyprice
        from
        (
            select R1.iditem, 0 as tp, R1.amount, R1.tbuyprice
            from m_docs as D1
            join m_rows as R1 on D1.id = R1.iddoc and
                D1.dt < :pdt1 and
                D1.state in (2,3)
            join m_stores as S1 on S1.id = D1.idstorein
            join m_storetype as ST1 on ST1.id = S1.tp and
                ST1.trackstock = 1
            join m_stores as S2 on S2.id = D1.idstoreout
            join m_storetype as ST2 on ST2.id = S2.tp and
                ST2.trackstock = 0
            
            union all
        
            select R1.iditem, 0 as tp, -R1.amount, -R1.tbuyprice
            from m_docs as D1
            join m_rows as R1 on D1.id = R1.iddoc and
                D1.dt < :pdt1 and
                D1.state in (2,3)
            join m_stores as S1 on S1.id = D1.idstorein
            join m_storetype as ST1 on ST1.id = S1.tp and
                ST1.trackstock = 0
            join m_stores as S2 on S2.id = D1.idstoreout
            join m_storetype as ST2 on ST2.id = S2.tp and
                ST2.trackstock = 1
        ) as T1
        group by T1.iditem
    
        union all
    
        select
            R1.iditem,
            D1.tp,
            sum(R1.amount) as amount,
            sum(R1.tbuyprice) as tbuyprice
        from m_docs as D1
        join m_rows as R1 on D1.id = R1.iddoc and
            D1.dt between :pdt1 and :pdt2 and
            D1.state in (2,3)
        join m_stores as S1 on S1.id = D1.idstorein
        join m_storetype as ST1 on ST1.id = S1.tp and
            ST1.trackstock = 1
        join m_stores as S2 on S2.id = D1.idstoreout
        join m_storetype as ST2 on ST2.id = S2.tp and
            ST2.trackstock = 0
        group by R1.iditem, D1.tp
    
        union all
    
        select
            R1.iditem,
            D1.tp,
            -sum(R1.amount) as amount,
            -sum(R1.tbuyprice) as tbuyprice
        from m_docs as D1
        join m_rows as R1 on D1.id = R1.iddoc and
            D1.dt between :pdt1 and :pdt2 and
            D1.state in (2,3)
        join m_stores as S1 on S1.id = D1.idstorein
        join m_storetype as ST1 on ST1.id = S1.tp and
            ST1.trackstock = 0
        join m_stores as S2 on S2.id = D1.idstoreout
        join m_storetype as ST2 on ST2.id = S2.tp and
            ST2.trackstock = 1
        group by R1.iditem, D1.tp
    ) as T2
    join m_items on m_items.id = T2.iditem and
        m_items.isservice = 0 and
        (:pcat is null or m_items.cat = :pcat)
    order by iditem, tp
    into :viditem, :vtp, :vamount, :vbuyprice
    do
    begin
        if (vlastiditem is null) then vlastiditem = viditem;
        if (vlastiditem <> viditem) then
        begin
            iditem = vlastiditem;
            tp = 100;
            amount = vamountatend;
            tbuyprice = vbuypriceatend;
            suspend;

            vlastiditem = viditem;
            vamountatend = 0;
            vbuypriceatend = 0;
        end
        vamountatend = vamountatend + vamount;
        vbuypriceatend = vbuypriceatend + vbuyprice;

        iditem = viditem;
        tp = vtp;
        amount = vamount;
        tbuyprice = vbuyprice;
        suspend;
    end

    if (vlastiditem is not null) then
    begin
        iditem = vlastiditem;
        tp = 100;
        amount = vamountatend;
        tbuyprice = vbuypriceatend;
        suspend;
    end

end^


ALTER PROCEDURE SP_M_REP_ITEMSAMOUNTS_3 (
    PDT1 DATE,
    PDT2 DATE,
    PCAT INTEGER)
RETURNS (
    IDITEM INTEGER,
    TP INTEGER,
    AMOUNT DAMOUNT,
    TSELLPRICE MONEY,
    TBUYPRICE MONEY,
    ITEMPRICE DPRICEX)
AS
declare viditem integer;
    declare vtp integer;
    declare vamount damount;
    declare vbuyprice money;
    declare vprice money;

    declare vlastiditem integer;
    declare vamountatend damount;
    declare vsellpriceatend money;
    declare vbuypriceatend money;
begin
    vlastiditem = null;
    vamountatend = 0;
    vsellpriceatend = 0;
    vbuypriceatend = 0;

    for select
        iditem,
        tp,
        amount,
        tprice,
        tbuyprice,
        m_items.sellprice
    from
    (
        select
            T1.iditem,
            -1 as tp,
            sum(T1.amount) as amount,
            0 as tprice,
            sum(T1.tbuyprice) as tbuyprice
        from
        (
            select R1.iditem, R1.amount, R1.tbuyprice
            from m_docs as D1
            join m_rows as R1 on D1.id = R1.iddoc and
                D1.dt < :pdt1 and
                D1.state in (2,3)
            join m_stores as S1 on S1.id = D1.idstorein
            join m_storetype as ST1 on ST1.id = S1.tp and
                ST1.trackstock = 1
            join m_stores as S2 on S2.id = D1.idstoreout
            join m_storetype as ST2 on ST2.id = S2.tp and
                ST2.trackstock = 0
            
            union all
        
            select R1.iditem, -R1.amount, -R1.tbuyprice
            from m_docs as D1
            join m_rows as R1 on D1.id = R1.iddoc and
                D1.dt < :pdt1 and
                D1.state in (2,3)
            join m_stores as S1 on S1.id = D1.idstorein
            join m_storetype as ST1 on ST1.id = S1.tp and
                ST1.trackstock = 0
            join m_stores as S2 on S2.id = D1.idstoreout
            join m_storetype as ST2 on ST2.id = S2.tp and
                ST2.trackstock = 1
        ) as T1
        group by T1.iditem
    
        union all
    
        select
            R1.iditem,
            D1.tp,
            sum(R1.amount) as amount,
            sum(R1.tprice) as tprice,
            sum(R1.tbuyprice) as tbuyprice
        from m_docs as D1
        join m_rows as R1 on D1.id = R1.iddoc and
            D1.dt between :pdt1 and :pdt2 and
            D1.state in (2,3)
        join m_stores as S1 on S1.id = D1.idstorein
        join m_storetype as ST1 on ST1.id = S1.tp and
            ST1.trackstock = 1
        join m_stores as S2 on S2.id = D1.idstoreout
        join m_storetype as ST2 on ST2.id = S2.tp and
            ST2.trackstock = 0
        group by R1.iditem, D1.tp
    
        union all
    
        select
            R1.iditem,
            D1.tp,
            -sum(R1.amount) as amount,
            -sum(R1.tprice) as tprice,
            -sum(R1.tbuyprice) as tbuyprice
        from m_docs as D1
        join m_rows as R1 on D1.id = R1.iddoc and
            D1.dt between :pdt1 and :pdt2 and
            D1.state in (2,3)
        join m_stores as S1 on S1.id = D1.idstorein
        join m_storetype as ST1 on ST1.id = S1.tp and
            ST1.trackstock = 0
        join m_stores as S2 on S2.id = D1.idstoreout
        join m_storetype as ST2 on ST2.id = S2.tp and
            ST2.trackstock = 1
        group by R1.iditem, D1.tp
    ) as T2
    join m_items on m_items.id = T2.iditem and
        m_items.isservice = 0 and
        (:pcat is null or m_items.cat = :pcat)
    order by iditem, tp
    into :viditem, :vtp, :vamount, :vprice, :vbuyprice, :itemprice
    do
    begin
        if (vlastiditem is null) then vlastiditem = viditem;
        if (vlastiditem <> viditem) then
        begin
            iditem = vlastiditem;
            tp = 100;
            amount = vamountatend;
            tsellprice = vsellpriceatend;
            tbuyprice = vbuypriceatend;
            suspend;

            vlastiditem = viditem;
            vamountatend = 0;
            vsellpriceatend = 0;
            vbuypriceatend = 0;
        end
        vamountatend = vamountatend + vamount;
        vsellpriceatend = vsellpriceatend + vprice;
        vbuypriceatend = vbuypriceatend + vbuyprice;

        iditem = viditem;
        tp = vtp;
        amount = vamount;
        tsellprice = vprice;
        tbuyprice = vbuyprice;
        suspend;
    end

    if (vlastiditem is not null) then
    begin
        iditem = vlastiditem;
        tp = 100;
        amount = vamountatend;
        tsellprice = vsellpriceatend;
        tbuyprice = vbuypriceatend;
     suspend;
    end

end^


ALTER PROCEDURE SP_M_REP_ITEMSAMOUNTS_4 (
    PDT1 DATE,
    PDT2 DATE,
    PCAT INTEGER)
RETURNS (
    IDSTORE INTEGER,
    TP INTEGER,
    AMOUNT DAMOUNT,
    TSELLPRICE MONEY,
    TBUYPRICE MONEY)
AS
declare vidstore integer;
    declare vtp integer;
    declare vamount damount;
    declare vbuyprice money;
    declare vprice money;

    declare vlastidstore integer;
    declare vamountatend damount;
    declare vsellpriceatend money;
    declare vbuypriceatend money;
begin
    vlastidstore = null;
    vamountatend = 0;
    vsellpriceatend = 0;
    vbuypriceatend = 0;

    for select
        idstore,
        tp,
        sum(amount) as amount,
        sum(tprice) as tprice,
        sum(tbuyprice) as tbuyprice
    from
    (
        select
            T1.iditem,
            T1.idstore,
            -1 as tp,
            sum(T1.amount) as amount,
            0 as tprice,
            sum(T1.tbuyprice) as tbuyprice
        from
        (
            select
                R1.iditem,
                D1.idstoreout as idstore,
                R1.amount,
                R1.tbuyprice
            from m_docs as D1
            join m_rows as R1 on D1.id = R1.iddoc and
                D1.dt < :pdt1 and
                D1.state in (2,3)
            join m_stores as S1 on S1.id = D1.idstorein
            join m_storetype as ST1 on ST1.id = S1.tp and
                ST1.trackstock = 1
            join m_stores as S2 on S2.id = D1.idstoreout
            join m_storetype as ST2 on ST2.id = S2.tp and
                ST2.trackstock = 0
            
            union all
        
            select
                R1.iditem,
                D2.idstoreout as idstore,
                -L1.amount,
                -round(L1.amount * R2.buyprice,2) as tbuyprice
            from m_docs as D1
            join m_rows as R1 on D1.id = R1.iddoc and
                D1.dt < :pdt1 and
                D1.state in (2,3)
            join m_stores as S1 on S1.id = D1.idstorein
            join m_storetype as ST1 on ST1.id = S1.tp and
                ST1.trackstock = 0
            join m_stores as S2 on S2.id = D1.idstoreout
            join m_storetype as ST2 on ST2.id = S2.tp and
                ST2.trackstock = 1
            join m_links as L1 on L1.id2 = R1.id
            join m_rows as R2 on R2.id = L1.id1
            join m_docs as D2 on D2.id = R2.iddoc
        ) as T1
        group by T1.iditem, T1.idstore
    
        union all
    
        select
            R1.iditem, 
            D1.idstoreout as idstore,
            D1.tp,
            sum(R1.amount) as amount,
            sum(R1.tprice) as tprice,
            sum(R1.tbuyprice) as tbuyprice
        from m_docs as D1
        join m_rows as R1 on D1.id = R1.iddoc and
            D1.dt between :pdt1 and :pdt2 and
            D1.state in (2,3)
        join m_stores as S1 on S1.id = D1.idstorein
        join m_storetype as ST1 on ST1.id = S1.tp and
            ST1.trackstock = 1
        join m_stores as S2 on S2.id = D1.idstoreout
        join m_storetype as ST2 on ST2.id = S2.tp and
            ST2.trackstock = 0
        group by R1.iditem, D1.idstoreout, D1.tp
    
        union all
    
        select
            R1.iditem, 
            D2.idstoreout as idstore,
            D1.tp,
            -sum(L1.amount) as amount,
            -sum(round(L1.amount * R1.price,2)) as tprice,
            -sum(round(L1.amount * R2.buyprice,2)) as tbuyprice
        from m_docs as D1
        join m_rows as R1 on D1.id = R1.iddoc and
            D1.dt between :pdt1 and :pdt2 and
            D1.state in (2,3)
        join m_stores as S1 on S1.id = D1.idstorein
        join m_storetype as ST1 on ST1.id = S1.tp and
            ST1.trackstock = 0
        join m_stores as S2 on S2.id = D1.idstoreout
        join m_storetype as ST2 on ST2.id = S2.tp and
            ST2.trackstock = 1
        join m_links as L1 on L1.id2 = R1.id
        join m_rows as R2 on R2.id = L1.id1
        join m_docs as D2 on D2.id = R2.iddoc
        join m_stores as S3 on S3.id = D2.idstoreout
        join m_storetype as ST3 on ST3.id = S3.tp and
            ST3.trackstock = 0

        group by R1.iditem, D2.idstoreout, D1.tp

    ) as T2
    join m_items on m_items.id = T2.iditem and
        m_items.isservice = 0 and
        (:pcat is null or m_items.cat = :pcat)
    group by idstore, tp
    order by idstore, tp
    into :vidstore, :vtp, :vamount, :vprice, :vbuyprice
    do
    begin
        if (vlastidstore is null) then vlastidstore = vidstore;
        if (vlastidstore <> vidstore) then
        begin
            idstore = vlastidstore;
            tp = 100;
            amount = vamountatend;
            tsellprice = vsellpriceatend;
            tbuyprice = vbuypriceatend;
            suspend;

            vlastidstore = vidstore;
            vamountatend = 0;
            vsellpriceatend = 0;
            vbuypriceatend = 0;
        end
        vamountatend = vamountatend + vamount;
        vsellpriceatend = vsellpriceatend + vprice;
        vbuypriceatend = vbuypriceatend + vbuyprice;

        idstore = vidstore;
        tp = vtp;
        amount = vamount;
        tsellprice = vprice;
        tbuyprice = vbuyprice;
        suspend;
    end

    if (vlastidstore is not null) then
    begin
        idstore = vlastidstore;
        tp = 100;
        amount = vamountatend;
        tsellprice = vsellpriceatend;
        tbuyprice = vbuypriceatend;
     suspend;
    end

end^


ALTER PROCEDURE SP_M_REP_ITEMSAMOUNTS_5 (
    PDT1 DATE,
    PDT2 DATE,
    PCAT INTEGER)
RETURNS (
    IDCAT INTEGER,
    TP INTEGER,
    AMOUNT DAMOUNT,
    TSELLPRICE MONEY,
    TBUYPRICE MONEY)
AS
declare vidcat integer;
    declare vtp integer;
    declare vamount damount;
    declare vbuyprice money;
    declare vprice money;

    declare vlastidcat integer;
    declare vamountatend damount;
    declare vsellpriceatend money;
    declare vbuypriceatend money;
begin
    vlastidcat = null;
    vamountatend = 0;
    vsellpriceatend = 0;
    vbuypriceatend = 0;

    for select
        m_items.cat as idcat,
        tp,
        sum(amount) as amount,
        sum(tprice) as tprice,
        sum(tbuyprice) as tbuyprice
    from
    (
        select
            T1.iditem,
            -1 as tp,
            sum(T1.amount) as amount,
            0 as tprice,
            sum(T1.tbuyprice) as tbuyprice
        from
        (
            select R1.iditem, R1.amount, R1.tbuyprice
            from m_docs as D1
            join m_rows as R1 on D1.id = R1.iddoc and
                D1.dt < :pdt1 and
                D1.state in (2,3)
            join m_stores as S1 on S1.id = D1.idstorein
            join m_storetype as ST1 on ST1.id = S1.tp and
                ST1.trackstock = 1
            join m_stores as S2 on S2.id = D1.idstoreout
            join m_storetype as ST2 on ST2.id = S2.tp and
                ST2.trackstock = 0
            
            union all
        
            select R1.iditem, -R1.amount, -R1.tbuyprice
            from m_docs as D1
            join m_rows as R1 on D1.id = R1.iddoc and
                D1.dt < :pdt1 and
                D1.state in (2,3)
            join m_stores as S1 on S1.id = D1.idstorein
            join m_storetype as ST1 on ST1.id = S1.tp and
                ST1.trackstock = 0
            join m_stores as S2 on S2.id = D1.idstoreout
            join m_storetype as ST2 on ST2.id = S2.tp and
                ST2.trackstock = 1
        ) as T1
        group by T1.iditem
    
        union all
    
        select
            R1.iditem,
            D1.tp,
            sum(R1.amount) as amount,
            sum(R1.tprice) as tprice,
            sum(R1.tbuyprice) as tbuyprice
        from m_docs as D1
        join m_rows as R1 on D1.id = R1.iddoc and
            D1.dt between :pdt1 and :pdt2 and
            D1.state in (2,3)
        join m_stores as S1 on S1.id = D1.idstorein
        join m_storetype as ST1 on ST1.id = S1.tp and
            ST1.trackstock = 1
        join m_stores as S2 on S2.id = D1.idstoreout
        join m_storetype as ST2 on ST2.id = S2.tp and
            ST2.trackstock = 0
        group by R1.iditem, D1.tp
    
        union all
    
        select
            R1.iditem,
            D1.tp,
            -sum(R1.amount) as amount,
            -sum(R1.tprice) as tprice,
            -sum(R1.tbuyprice) as tbuyprice
        from m_docs as D1
        join m_rows as R1 on D1.id = R1.iddoc and
            D1.dt between :pdt1 and :pdt2 and
            D1.state in (2,3)
        join m_stores as S1 on S1.id = D1.idstorein
        join m_storetype as ST1 on ST1.id = S1.tp and
            ST1.trackstock = 0
        join m_stores as S2 on S2.id = D1.idstoreout
        join m_storetype as ST2 on ST2.id = S2.tp and
            ST2.trackstock = 1
        group by R1.iditem, D1.tp
    ) as T2
    join m_items on m_items.id = T2.iditem and
        m_items.isservice = 0 and
        (:pcat is null or m_items.cat = :pcat)
    group by m_items.cat, T2.tp
    order by idcat, tp
    into :vidcat, :vtp, :vamount, :vprice, :vbuyprice
    do
    begin
        if (vlastidcat is null) then vlastidcat = vidcat;
        if (vlastidcat <> vidcat) then
        begin
            idcat = vlastidcat;
            tp = 100;
            amount = vamountatend;
            tsellprice = vsellpriceatend;
            tbuyprice = vbuypriceatend;
            suspend;

            vlastidcat = vidcat;
            vamountatend = 0;
            vsellpriceatend = 0;
            vbuypriceatend = 0;
        end
        vamountatend = vamountatend + vamount;
        vsellpriceatend = vsellpriceatend + vprice;
        vbuypriceatend = vbuypriceatend + vbuyprice;

        idcat = vidcat;
        tp = vtp;
        amount = vamount;
        tsellprice = vprice;
        tbuyprice = vbuyprice;
        suspend;
    end

    if (vlastidcat is not null) then
    begin
        idcat = vlastidcat;
        tp = 100;
        amount = vamountatend;
        tsellprice = vsellpriceatend;
        tbuyprice = vbuypriceatend;
     suspend;
    end

end^


ALTER PROCEDURE SP_M_REP_ITEMSAMOUNTS_6 (
    PDT1 DATE,
    PDT2 DATE,
    PCAT INTEGER,
    PIDSTORE INTEGER)
RETURNS (
    IDITEM INTEGER,
    TP INTEGER,
    AMOUNT DAMOUNT,
    TSELLPRICE MONEY,
    TBUYPRICE MONEY,
    ITEMPRICE DPRICEX)
AS
declare viditem integer;
    declare vtp integer;
    declare vamount damount;
    declare vbuyprice money;
    declare vprice money;

    declare vlastiditem integer;
    declare vamountatend damount;
    declare vsellpriceatend money;
    declare vbuypriceatend money;
begin
    vlastiditem = null;
    vamountatend = 0;
    vsellpriceatend = 0;
    vbuypriceatend = 0;

    for select
        iditem,
        tp,
        sum(amount) as amount,
        sum(tprice) as tprice,
        sum(tbuyprice) as tbuyprice,
        min(m_items.sellprice) as itemprice
    from
    (
        select
            T1.iditem,
            -1 as tp,
            sum(T1.amount) as amount,
            0 as tprice,
            sum(T1.tbuyprice) as tbuyprice
        from
        (
            select
                R1.iditem,
                R1.amount,
                R1.tbuyprice
            from m_docs as D1
            join m_rows as R1 on D1.id = R1.iddoc and
                D1.dt < :pdt1 and
                D1.state in (2,3) and
                (:pidstore is null or :pidstore = D1.idstoreout)
            join m_stores as S1 on S1.id = D1.idstorein
            join m_storetype as ST1 on ST1.id = S1.tp and
                ST1.trackstock = 1
            join m_stores as S2 on S2.id = D1.idstoreout
            join m_storetype as ST2 on ST2.id = S2.tp and
                ST2.trackstock = 0
            
            union all
        
            select
                R1.iditem,
                -L1.amount,
                -round(L1.amount * R2.buyprice,2) as tbuyprice
            from m_docs as D1
            join m_rows as R1 on D1.id = R1.iddoc and
                D1.dt < :pdt1 and
                D1.state in (2,3)
            join m_stores as S1 on S1.id = D1.idstorein
            join m_storetype as ST1 on ST1.id = S1.tp and
                ST1.trackstock = 0
            join m_stores as S2 on S2.id = D1.idstoreout
            join m_storetype as ST2 on ST2.id = S2.tp and
                ST2.trackstock = 1
            join m_links as L1 on L1.id2 = R1.id
            join m_rows as R2 on R2.id = L1.id1
            join m_docs as D2 on D2.id = R2.iddoc and
                (:pidstore is null or :pidstore = D2.idstoreout)
        ) as T1
        group by T1.iditem
    
        union all
    
        select
            R1.iditem, 
            D1.tp,
            sum(R1.amount) as amount,
            sum(R1.tprice) as tprice,
            sum(R1.tbuyprice) as tbuyprice
        from m_docs as D1
        join m_rows as R1 on D1.id = R1.iddoc and
            D1.dt between :pdt1 and :pdt2 and
            D1.state in (2,3) and
                (:pidstore is null or :pidstore = D1.idstoreout)
        join m_stores as S1 on S1.id = D1.idstorein
        join m_storetype as ST1 on ST1.id = S1.tp and
            ST1.trackstock = 1
        join m_stores as S2 on S2.id = D1.idstoreout
        join m_storetype as ST2 on ST2.id = S2.tp and
            ST2.trackstock = 0
        group by R1.iditem, D1.tp
    
        union all
    
        select
            R1.iditem, 
            D1.tp,
            -sum(L1.amount) as amount,
            -sum(round(L1.amount * R1.price,2)) as tprice,
            -sum(round(L1.amount * R2.buyprice,2)) as tbuyprice

        from m_docs as D1
        join m_rows as R1 on D1.id = R1.iddoc and
            D1.dt between :pdt1 and :pdt2 and
            D1.state in (2,3)
        join m_stores as S1 on S1.id = D1.idstorein
        join m_storetype as ST1 on ST1.id = S1.tp and
            ST1.trackstock = 0
        join m_stores as S2 on S2.id = D1.idstoreout
        join m_storetype as ST2 on ST2.id = S2.tp and
            ST2.trackstock = 1
        join m_links as L1 on L1.id2 = R1.id
        join m_rows as R2 on R2.id = L1.id1
        join m_docs as D2 on D2.id = R2.iddoc and
            (:pidstore is null or :pidstore = D2.idstoreout)

        group by R1.iditem, D1.tp

    ) as T2
    join m_items on m_items.id = T2.iditem and
        m_items.isservice = 0 and
        (:pcat is null or m_items.cat = :pcat)
    group by iditem, tp
    order by iditem, tp
    into :viditem, :vtp, :vamount, :vprice, :vbuyprice, :itemprice
    do
    begin
        if (vlastiditem is null) then vlastiditem = viditem;
        if (vlastiditem <> viditem) then
        begin
            iditem = vlastiditem;
            tp = 100;
            amount = vamountatend;
            tsellprice = vsellpriceatend;
            tbuyprice = vbuypriceatend;
            suspend;

            vlastiditem = viditem;
            vamountatend = 0;
            vsellpriceatend = 0;
            vbuypriceatend = 0;
        end
        vamountatend = vamountatend + vamount;
        vsellpriceatend = vsellpriceatend + vprice;
        vbuypriceatend = vbuypriceatend + vbuyprice;

        iditem = viditem;
        tp = vtp;
        amount = vamount;
        tsellprice = vprice;
        tbuyprice = vbuyprice;
        suspend;
    end

    if (vlastiditem is not null) then
    begin
        iditem = vlastiditem;
        tp = 100;
        amount = vamountatend;
        tsellprice = vsellpriceatend;
        tbuyprice = vbuypriceatend;
     suspend;
    end

end^


ALTER PROCEDURE SP_M_REP_ITEMSINSTORE_1 (
    PIDSTORE INTEGER)
RETURNS (
    IDITEM INTEGER,
    ITEMCODE TYPE OF COLUMN M_ITEMS.BARCODE,
    AMOUNT DAMOUNT)
AS
begin

    for select iditem, amount, m_items.barcode
    from
    (
        select T1.iditem, sum(T1.amount) as amount
        from
        (
            select R1.iditem, R1.amount
            from m_docs as D1
            join m_rows as R1 on D1.id = R1.iddoc and
                D1.state in (2,3) and
                D1.idstorein = :pidstore

            union all
        
            select R1.iditem, -R1.amount
            from m_docs as D1
            join m_rows as R1 on D1.id = R1.iddoc and
                D1.state in (2,3) and
                D1.idstoreout = :pidstore

        ) as T1
        group by T1.iditem
    ) as T2
    join m_items on m_items.id = T2.iditem and
        m_items.isservice = 0
    where T2.amount <> 0
    order by iditem
    into :iditem, :amount, :itemcode
    do
        suspend;

end^


ALTER PROCEDURE SP_P_GEN_CAT1_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_p_cat1_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_P_GEN_CATD_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_p_catd_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_P_GEN_CATT_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_p_catt_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_P_GEN_DEPARTMENTS_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_p_departments_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_P_GEN_EVENTS_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_p_events_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_P_GEN_ITEMS_EVENTS_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_p_items_events_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_P_GEN_ITEMS_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_p_items_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_P_GEN_PLACES_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_p_places_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_P_GEN_TAXDEPRECYEAR_ID
RETURNS (
    ID INTEGER)
AS
begin
  id = gen_id(gen_p_taxdeprecyear_id, 1);
  suspend;
end^


ALTER PROCEDURE SP_PARAMS (
    USERNAME VARCHAR(20))
RETURNS (
    ID TYPE OF COLUMN PARAMS.ID,
    PNAME TYPE OF COLUMN PARAMS.PNAME,
    PVALUE TYPE OF COLUMN PARAMS.PVALUE,
    USR TYPE OF COLUMN PARAMS.USR)
AS
begin
    FOR SELECT id, pname, pvalue, usr
    FROM PARAMS
    WHERE PARAMS.Usr = 'SYSTEM' OR PARAMS.Usr = :username
    ORDER BY PARAMS.PName
    INTO :id, :pname, :pvalue, :usr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_SET_USERNAME (
    USERNAME VARCHAR(15))
AS
begin
    rdb$set_context('USER_SESSION', 'UserName', :username);
end^


ALTER PROCEDURE SP_SYS_CHECK_USER (
    PUSR TYPE OF COLUMN USERS.NM,
    PPSW TYPE OF COLUMN USERS.PSW)
RETURNS (
    RET VARCHAR(1))
AS
declare variable varnm type of column users.nm;
begin
    select users.nm, users.tp
    from users
    where users.nm = :pusr and
        ((:ppsw is null and users.psw is null) or
        (:ppsw = users.psw))
    into :varnm, :ret;
    if (varnm is null) then ret = 'X';
    suspend;
end^


ALTER PROCEDURE SP_X_CLEAR_A
AS
begin

    delete from A_TIMESHEET;
    delete from A_TIMESHEET_LISTS_R;
    delete from A_TIMESHEET_LISTS;
    delete from A_TIMESHEET_TEMPL_R;
    delete from A_TIMESHEET_TEMPL;
    delete from A_TIMEPLAN_LIST;
    delete from A_SALARY_PLUSMINUS;
    delete from A_SALARY_SHEETS_R_HIST;
    delete from A_SALARY_SHEETS_R;
    delete from A_SALARY_SHEETS;
    delete from A_SALARY_SHEET_TEMPL_R;
    delete from A_SALARY_SHEET_TEMPL;
    delete from A_PIECEWORK;
    delete from A_PIECEWORK_CATALOG;
    delete from A_PIECEWORK_CATSTRUCT;
    delete from A_PAYLISTS_R;
    delete from A_PAYLISTS;
    delete from A_PAYLIST_TEMPL_R;
    delete from A_PAYLIST_TEMPL;
    delete from A_PASTDATA_2;
    delete from A_PASTDATA;
    delete from A_FP_PAYLISTS_R;
    delete from A_FP_PAYLISTS;
    delete from A_UNTAXED_MIN;
    delete from A_EVENTS;
    delete from A_PERSONS_R;
    delete from A_POSITIONS_PLUSMINUS;
    delete from A_PLUSMINUS_FROM;
    delete from A_POSITIONS_R;
    delete from A_POSITIONS;
    delete from A_PERSONS;
    delete from A_PERSONS_FIZ;
    delete from A_PLUSMINUS_TYPES;
    delete from A_REPORT_CODES;
    delete from A_RATES;
    delete from A_INCOME_CODES;
    delete from A_HOLIDAYS;
    delete from A_EVENT_TYPES2;
    delete from A_EVENT_TYPES;
    delete from A_DEPARTMENTS;
    delete from A_BANKS;

end^


ALTER PROCEDURE SP_X_CLEAR_F
AS
begin

    delete from F_LOPS;
    delete from F_LOPSD;
    delete from F_OPS;
    delete from F_OPSD;
    delete from F_DOCS0;
    delete from F_BAL0;
    delete from F_DOCTYPB;
    delete from F_DOCTYPA;
    delete from F_DOCTYP;
    delete from F_PERSONS;
    delete from F_PERSONTYP;
    delete from F_CURRENCY;
    delete from F_BANKS;
    delete from F_BALA3;
    delete from F_BALA2;
    delete from F_BALA1;
    delete from F_ACPLAN;
    delete from F_ACP6;
    delete from F_ACP25A;
    delete from F_ACP25;
    delete from F_ACPVN;
    delete from F_ACP24;
    delete from F_ACP23;
    delete from F_ACP22;
    delete from F_ACP211;
    delete from F_ACP21;
    delete from F_ACP1;

end^


ALTER PROCEDURE SP_X_CLEAR_P
AS
begin

    delete from P_TAXDEPRECYEAR;
    delete from P_ITEMS_EVENTS;
    delete from P_ITEMS;
    delete from P_EVENTS;
    delete from P_DEPARTMENTS;
    delete from P_PLACES;
    delete from P_CAT1;
    delete from P_CATT;
    delete from P_CATD;

end^


ALTER PROCEDURE SP_X_GENIDS_A
AS
declare variable maxid integer;
    declare variable curid integer;
    declare variable newid integer;
begin

    select max(id) from A_BANKS into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_BANKS_ID, 0);
    newid = gen_id(GEN_A_BANKS_ID, maxid - curid);
    
    select max(id) from A_EVENT_TYPES into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_EVENT_TYPES_ID, 0);
    newid = gen_id(GEN_A_EVENT_TYPES_ID, maxid - curid);
    
    select max(id) from A_EVENT_TYPES2 into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_EVENT_TYPES2_ID, 0);
    newid = gen_id(GEN_A_EVENT_TYPES2_ID, maxid - curid);
    
    select max(id) from A_EVENTS into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_EVENTS_ID, 0);
    newid = gen_id(GEN_A_EVENTS_ID, maxid - curid);
    
    select max(id) from A_FP_PAYLISTS into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_FP_PAYLISTS_ID, 0);
    newid = gen_id(GEN_A_FP_PAYLISTS_ID, maxid - curid);
    
    select max(id) from A_FP_PAYLISTS_R into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_FP_PAYLISTS_R_ID, 0);
    newid = gen_id(GEN_A_FP_PAYLISTS_R_ID, maxid - curid);
    
    select max(id) from A_PASTDATA_2 into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_PASTDATA_2_ID, 0);
    newid = gen_id(GEN_A_PASTDATA_2_ID, maxid - curid);
    
    select max(id) from A_PASTDATA into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_PASTDATA_ID, 0);
    newid = gen_id(GEN_A_PASTDATA_ID, maxid - curid);
    
    select max(id) from A_PAYLIST_TEMPL into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_PAYLIST_TEMPL_ID, 0);
    newid = gen_id(GEN_A_PAYLIST_TEMPL_ID, maxid - curid);
    
    select max(id) from A_PAYLIST_TEMPL_R into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_PAYLIST_TEMPL_R_ID, 0);
    newid = gen_id(GEN_A_PAYLIST_TEMPL_R_ID, maxid - curid);
    
    select max(id) from A_PAYLISTS into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_PAYLISTS_ID, 0);
    newid = gen_id(GEN_A_PAYLISTS_ID, maxid - curid);
    
    select max(id) from A_PAYLISTS_R into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_PAYLISTS_R_ID, 0);
    newid = gen_id(GEN_A_PAYLISTS_R_ID, maxid - curid);
    
    select max(id) from A_PERSONS_FIZ into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_PERSONS_FIZ_ID, 0);
    newid = gen_id(GEN_A_PERSONS_FIZ_ID, maxid - curid);
    
    select max(id) from A_PERSONS into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_PERSONS_ID, 0);
    newid = gen_id(GEN_A_PERSONS_ID, maxid - curid);
    
    select max(id) from A_PERSONS_R into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_PERSONS_R_ID, 0);
    newid = gen_id(GEN_A_PERSONS_R_ID, maxid - curid);
    
    select max(id) from A_PIECEWORK_CATALOG into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_PIECEWORK_CATALOG_ID, 0);
    newid = gen_id(GEN_A_PIECEWORK_CATALOG_ID, maxid - curid);
    
    select max(id) from A_PIECEWORK_CATSTRUCT into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_PIECEWORK_CATSTRUCT_ID, 0);
    newid = gen_id(GEN_A_PIECEWORK_CATSTRUCT_ID, maxid - curid);
    
    select max(id) from A_PIECEWORK into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_PIECEWORK_ID, 0);
    newid = gen_id(GEN_A_PIECEWORK_ID, maxid - curid);
    
    select max(id) from A_PLUSMINUS_FROM into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_PLUSMINUS_FROM_ID, 0);
    newid = gen_id(GEN_A_PLUSMINUS_FROM_ID, maxid - curid);
    
    select max(id) from A_PLUSMINUS_TYPES into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_PLUSMINUS_TYPES_ID, 0);
    newid = gen_id(GEN_A_PLUSMINUS_TYPES_ID, maxid - curid);
    
    select max(id) from A_POSITIONS into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_POSITIONS_ID, 0);
    newid = gen_id(GEN_A_POSITIONS_ID, maxid - curid);
    
    select max(id) from A_POSITIONS_PLUSMINUS into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_POSITIONS_PLUSMINUS_ID, 0);
    newid = gen_id(GEN_A_POSITIONS_PLUSMINUS_ID, maxid - curid);
    
    select max(id) from A_POSITIONS_R into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_POSITIONS_R_ID, 0);
    newid = gen_id(GEN_A_POSITIONS_R_ID, maxid - curid);
    
    select max(id) from A_RATES into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_RATES_ID, 0);
    newid = gen_id(GEN_A_RATES_ID, maxid - curid);
    
    select max(id) from A_REPORT_CODES into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_REPORT_CODES_ID, 0);
    newid = gen_id(GEN_A_REPORT_CODES_ID, maxid - curid);
    
    select max(id) from A_SALARY_PLUSMINUS into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_SALARY_PLUSMINUS_ID, 0);
    newid = gen_id(GEN_A_SALARY_PLUSMINUS_ID, maxid - curid);
    
    select max(id) from A_SALARY_SHEET_TEMPL into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_SALARY_SHEET_TEMPL_ID, 0);
    newid = gen_id(GEN_A_SALARY_SHEET_TEMPL_ID, maxid - curid);
    
    select max(id) from A_SALARY_SHEET_TEMPL_R into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_SALARY_SHEET_TEMPL_R_ID, 0);
    newid = gen_id(GEN_A_SALARY_SHEET_TEMPL_R_ID, maxid - curid);
    
    select max(id) from A_SALARY_SHEETS into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_SALARY_SHEETS_ID, 0);
    newid = gen_id(GEN_A_SALARY_SHEETS_ID, maxid - curid);
    
    select max(id) from A_SALARY_SHEETS_R_HIST into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_SALARY_SHEETS_R_HIST_ID, 0);
    newid = gen_id(GEN_A_SALARY_SHEETS_R_HIST_ID, maxid - curid);
    
    select max(id) from A_SALARY_SHEETS_R into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_SALARY_SHEETS_R_ID, 0);
    newid = gen_id(GEN_A_SALARY_SHEETS_R_ID, maxid - curid);
    
    select max(id) from A_TIMEPLAN_LIST into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_TIMEPLAN_LIST_ID, 0);
    newid = gen_id(GEN_A_TIMEPLAN_LIST_ID, maxid - curid);
    
    select max(id) from A_TIMESHEET into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_TIMESHEET_ID, 0);
    newid = gen_id(GEN_A_TIMESHEET_ID, maxid - curid);
    
    select max(id) from A_TIMESHEET_LISTS into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_TIMESHEET_LISTS_ID, 0);
    newid = gen_id(GEN_A_TIMESHEET_LISTS_ID, maxid - curid);
    
    select max(id) from A_TIMESHEET_LISTS_R into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_TIMESHEET_LISTS_R_ID, 0);
    newid = gen_id(GEN_A_TIMESHEET_LISTS_R_ID, maxid - curid);
    
    select max(id) from A_TIMESHEET_TEMPL into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_TIMESHEET_TEMPL_ID, 0);
    newid = gen_id(GEN_A_TIMESHEET_TEMPL_ID, maxid - curid);
    
    select max(id) from A_TIMESHEET_TEMPL_R into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_TIMESHEET_TEMPL_R_ID, 0);
    newid = gen_id(GEN_A_TIMESHEET_TEMPL_R_ID, maxid - curid);
    
    select max(id) from A_UNTAXED_MIN into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_A_UNTAXED_MIN_ID, 0);
    newid = gen_id(GEN_A_UNTAXED_MIN_ID, maxid - curid);

end^


ALTER PROCEDURE SP_X_GENIDS_F
AS
declare variable maxid integer;
    declare variable curid integer;
    declare variable newid integer;
    declare variable yr integer;
begin

    select max(id) from F_BAL0 into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_F_BAL0_ID, 0);
    newid = gen_id(GEN_F_BAL0_ID, maxid - curid);
    
    select max(id) from F_BALA2 into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_F_BALA2_ID, 0);
    newid = gen_id(GEN_F_BALA2_ID, maxid - curid);
    
    select max(id) from F_BALA21 into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_F_BALA21_ID, 0);
    newid = gen_id(GEN_F_BALA21_ID, maxid - curid);
    
    select max(id) from F_BALA3 into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_F_BALA3_ID, 0);
    newid = gen_id(GEN_F_BALA3_ID, maxid - curid);
    
    select max(id) from F_DOCS0 into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_F_DOCS0_ID, 0);
    newid = gen_id(GEN_F_DOCS0_ID, maxid - curid);
    
    select max(id) from F_LOGX into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_F_LOGX_ID, 0);
    newid = gen_id(GEN_F_LOGX_ID, maxid - curid);
    
    select max(idl) from F_LOPS into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_F_LOPS_IDL, 0);
    newid = gen_id(GEN_F_LOPS_IDL, maxid - curid);
    
    select max(idl) from F_LOPSD into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_F_LOPSD_IDL, 0);
    newid = gen_id(GEN_F_LOPSD_IDL, maxid - curid);
    
    select max(id) from F_LXOP into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_F_LXOP_ID, 0);
    newid = gen_id(GEN_F_LXOP_ID, maxid - curid);
    
    select max(id) from F_OPS into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_F_OPS_ID, 0);
    newid = gen_id(GEN_F_OPS_ID, maxid - curid);
    
    select max(id) from F_OPSD into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_F_OPSD_ID, 0);
    newid = gen_id(GEN_F_OPSD_ID, maxid - curid);
    
    select max(id) from F_PERSONTYP into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_F_PERSONTYP_ID, 0);
    newid = gen_id(GEN_F_PERSONTYP_ID, maxid - curid);

    yr = 2010;
    while(yr<2041)do
    begin
        select max(znr) from f_opsd
        where extract(year from f_opsd.dete) = :yr
        into :maxid;

        maxid = coalesce(maxid, 0);

        execute procedure sp_f_opsd_getnextnrforyeara_k(yr, 0)
        returning_values :curid;

        execute procedure sp_f_opsd_getnextnrforyeara_k(yr, maxid - curid)
        returning_values :newid;

        yr = yr + 1;
    end

end^


ALTER PROCEDURE SP_X_GENIDS_P
AS
declare variable maxid integer;
    declare variable curid integer;
    declare variable newid integer;
begin

    select max(id) from P_CAT1 into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_P_CAT1_ID, 0);
    newid = gen_id(GEN_P_CAT1_ID, maxid - curid);
    
    select max(id) from P_CATD into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_P_CATD_ID, 0);
    newid = gen_id(GEN_P_CATD_ID, maxid - curid);
    
    select max(id) from P_CATT into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_P_CATT_ID, 0);
    newid = gen_id(GEN_P_CATT_ID, maxid - curid);
    
    select max(id) from P_DEPARTMENTS into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_P_DEPARTMENTS_ID, 0);
    newid = gen_id(GEN_P_DEPARTMENTS_ID, maxid - curid);
    
    select max(id) from P_EVENTS into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_P_EVENTS_ID, 0);
    newid = gen_id(GEN_P_EVENTS_ID, maxid - curid);
    
    select max(id) from P_ITEMS_EVENTS into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_P_ITEMS_EVENTS_ID, 0);
    newid = gen_id(GEN_P_ITEMS_EVENTS_ID, maxid - curid);
    
    select max(id) from P_ITEMS into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_P_ITEMS_ID, 0);
    newid = gen_id(GEN_P_ITEMS_ID, maxid - curid);
    
    select max(id) from P_PLACES into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_P_PLACES_ID, 0);
    newid = gen_id(GEN_P_PLACES_ID, maxid - curid);
    
    select max(id) from P_TAXDEPRECYEAR into :maxid;
    maxid = coalesce(maxid, 0);
    curid = gen_id(GEN_P_TAXDEPRECYEAR_ID, 0);
    newid = gen_id(GEN_P_TAXDEPRECYEAR_ID, maxid - curid);

end^



SET TERM ; ^



/******************************************************************************/
/***                                 Roles                                  ***/
/******************************************************************************/

CREATE ROLE USERS;


/******************************************************************************/
/***                              Descriptions                              ***/
/******************************************************************************/



/******************************************************************************/
/***                          Fields descriptions                           ***/
/******************************************************************************/

DESCRIBE FIELD TP2 TABLE A_EVENT_TYPES
'1 - pieņemts,
2 - atlaists';



/******************************************************************************/
/***                               Privileges                               ***/
/******************************************************************************/


/* Privileges of users */
GRANT DEFAULT RDB$ADMIN TO USER "ADMIN" WITH ADMIN OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_ZDT_OPSD_SET TO USER ADMINS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_ZDT_OPS_SET TO USER ADMINS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_SYS_CHECK_USER TO USER ADMINS WITH GRANT OPTION;
GRANT DEFAULT RDB$ADMIN TO USER ADMINS WITH ADMIN OPTION;
GRANT ALL ON A_BANKS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_DEPARTMENTS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_EVENTS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_EVENT_TYPES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_EVENT_TYPES2 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_FP_PAYLISTS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_FP_PAYLISTS_R TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_HOLIDAYS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_INCOME_CODES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_PASTDATA TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_PASTDATA_2 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_PAYLISTS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_PAYLISTS_R TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_PAYLIST_TEMPL TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_PAYLIST_TEMPL_R TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_PERSONS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_PERSONS_FIZ TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_PERSONS_R TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_PIECEWORK TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_PIECEWORK_CATALOG TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_PIECEWORK_CATSTRUCT TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_PLUSMINUS_FROM TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_PLUSMINUS_TYPES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_POSITIONS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_POSITIONS_PLUSMINUS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_POSITIONS_R TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_PROFESSIONS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_RATES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_REPORT_CODES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_SALARY_PLUSMINUS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_SALARY_SHEETS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_SALARY_SHEETS_R TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_SALARY_SHEETS_R_HIST TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_SALARY_SHEET_TEMPL TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_SALARY_SHEET_TEMPL_R TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_TEMP_REP_INKP TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_TEMP_REP_PDT TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_TERITORIAL_CODES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_TIMEPLAN_LIST TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_TIMESHEET TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_TIMESHEET_LISTS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_TIMESHEET_LISTS_R TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_TIMESHEET_TEMPL TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_TIMESHEET_TEMPL_R TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON A_UNTAXED_MIN TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_ACP1 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_ACP21 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_ACP211 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_ACP22 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_ACP23 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_ACP24 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_ACP25 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_ACP25A TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_ACP6 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_ACPLAN TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_ACPVN TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_BAL0 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_BALA1 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_BALA2 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_BALA21 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_BALA3 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_BANKS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_CURRENCY TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_DOCS0 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_DOCTYP TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_DOCTYPA TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_DOCTYPB TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_LOGX TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_LOPS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_LOPSD TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_LXOP TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_OPS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_OPSD TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_OPSD_YEAR_SEQ TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_PERSONS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_PERSONTYP TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_ROPS1A TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_ROPS2A TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_ROPS2B TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_ROPS3A TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_TABLE1 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_TREM TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_TREPA1 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_TREPAPAN TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_TREPDARZ1 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_TREPDARZ2 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_TREPDOCS1 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_TREPDOCS2 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_TREPDOCSS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_TREPMT TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_TREPOPS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_TREPOPSD TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_TREPPVNZ1 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_TREPUDOCS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_TTEMP_BALA21 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_TTEMP_BALAC TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_TTEMP_BALMT1 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_TTEMP_BALMT2 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_TTEMP_DIFF2 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_TTEMP_PVN1 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_TTEMP_PVN2 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_TUDOCLISTS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_TUDOCS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_TUPDFIELDS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_TUPVN1 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON F_VW_OPS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON MON$ATTACHMENTS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON MON$CALL_STACK TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON MON$CONTEXT_VARIABLES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON MON$DATABASE TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON MON$IO_STATS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON MON$MEMORY_USAGE TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON MON$RECORD_STATS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON MON$STATEMENTS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON MON$TABLE_STATS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON MON$TRANSACTIONS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_ACCOUNTS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_ACCOUNTTYPE TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_ADDRESSSES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_BANKACCOUNTS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_BANKS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_CONTACTS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_COUNTRIES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_DISC_LISTS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_DISC_LISTS_P TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_DISC_LISTS_R TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_DOCS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_DOCTYPES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_INV_DOCS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_INV_ROWS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_ITEMS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_ITEMS_CAT TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_ITEMS_PER_STORE TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_LINKS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_PAYMENTTYPE TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_PRICE_LISTS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_PRICE_LISTS_P TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_PRICE_LISTS_R TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_PVNRATES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_PVNRATES2 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_PVNTEXTS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_PVNTYPE TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_ROWS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_STORES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_STORES_CAT TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_STORETYPE TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_TRANSACTIONTYPE TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_UNITS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON M_VEHICLES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON PARAMS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON P_CAT1 TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON P_CATD TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON P_CATT TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON P_DEPARTMENTS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON P_EVENTS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON P_ITEMS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON P_ITEMS_EVENTS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON P_PLACES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON P_TAXDEPRECYEAR TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$AUTH_MAPPING TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$BACKUP_HISTORY TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$CHARACTER_SETS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$CHECK_CONSTRAINTS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$COLLATIONS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$CONFIG TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$DATABASE TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$DB_CREATORS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$DEPENDENCIES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$EXCEPTIONS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$FIELDS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$FIELD_DIMENSIONS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$FILES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$FILTERS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$FORMATS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$FUNCTIONS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$FUNCTION_ARGUMENTS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$GENERATORS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$INDEX_SEGMENTS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$INDICES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$LOG_FILES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$PACKAGES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$PAGES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$PROCEDURES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$PROCEDURE_PARAMETERS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$PUBLICATIONS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$PUBLICATION_TABLES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$REF_CONSTRAINTS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$RELATIONS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$RELATION_CONSTRAINTS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$RELATION_FIELDS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$ROLES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$SECURITY_CLASSES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$TIME_ZONES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$TRANSACTIONS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$TRIGGERS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$TRIGGER_MESSAGES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$TYPES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$USER_PRIVILEGES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON RDB$VIEW_RELATIONS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON SEC$DB_CREATORS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON SEC$GLOBAL_AUTH_MAPPING TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON SEC$USERS TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON SEC$USER_ATTRIBUTES TO USER KLONS WITH GRANT OPTION;
GRANT ALL ON USERS TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_A TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_AVPAYCALC_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_CLEAR TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_DL_LAPAS_INSERT_FROM_SH TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_FP_PAYLISTS_PER_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_FP_PAYLISTS_PER_R_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_BANKS_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_EVENTS_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_EVENT_TYPES2_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_EVENT_TYPES_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_FP_PAYLISTS_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_FP_PAYLISTS_R_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PASTDATA_2_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PASTDATA_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PAYLISTS_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PAYLISTS_R_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PAYLIST_TEMPL_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PAYLIST_TEMPL_R_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PERSONS_FIZ_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PERSONS_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PERSONS_R_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PIECEWORK_CATALOG_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PIECEWORK_CATSTRUCT_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PIECEWORK_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PLUSMINUS_FROM_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PLUSMINUS_TYPES_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_POSITIONS_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_POSITIONS_PLUSMINUS_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_POSITIONS_R_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_REPORT_CODES_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_SALARY_PLUSMINUS_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_SALARY_SHEETS_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_SALARY_SHEETS_R_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_SALARY_SHEET_TEMPL_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_SAL_SHEETS_R_HIST_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_SAL_SHEET_TEMPL_R_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_TIMEPLAN_LIST_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_TIMESHEET_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_TIMESHEET_LISTS_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_TIMESHEET_LISTS_R_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_TIMESHEET_TEMPL_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_TIMESHEET_TEMPL_R_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_UNTAXED_MIN_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_GET_MINMAX TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_HOLIDAYS_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_MAKE_SALARY_SHEET_R_HIST TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_MAKE_SALARY_SHEET_R_HIST_2 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_PAYLISTS_PER_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_PAYLISTS_R_PER_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_PAYLISTS_SUM_TOTALS TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_02 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_02A TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_03 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_04 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_11 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_12 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_13 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_14 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_21 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_SALDO_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_SALDO_02 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_SALDO_03 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_X_1 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_PIECEWORK_PER_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_PLANS_BY_YRMT TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_POSITIONS_PLUSMINUS_PER_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_RATES_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_REP_AGGREGATE_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_REP_AGGREGATE_02 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_02 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_03 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_11 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_12 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_13 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_21 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_22 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_31 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_32 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_33 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_L1 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_L2 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_L3 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_P1 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_P2 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_REP_PDT TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_SALARY_PLUSMINUS_PER_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_SALARY_SHEETS_PER_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_SALARY_SHEETS_R_HIST_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_SALARY_SHEETS_R_HIST_02 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_SALARY_SHEETS_R_PER_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_STATS_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_STATS_02 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_TIMESHEET_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_TIMESHEET_LISTS_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_TIMESHEET_LISTS_R_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_A_TIMESHEET_PER_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_BAL0_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_BAL0_IDA TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_BALA2_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_BALA3_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_CURRCHECK_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_DIFF_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_DIFF_02 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_DIFF_11 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_DIFF_12 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_DOCS0_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_FIXLOPSODT TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_FIXOPSDATES TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_LINKEDDOCS_1 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_LINKEDDOCS_2 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_DELETE TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_DELETE_LOG TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_FILTER_AND TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_FILTER_OR TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_GETNEXTNRFORYEARA TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_GETNEXTNRFORYEARA_K TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_IDK TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_INSERT TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_UPDATE TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_UPDATE_LOG TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_OPS_DELETE TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_OPS_DELETE_LOG TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_OPS_FILTER_AND TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_OPS_FILTER_OR TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_OPS_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_OPS_IDK TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_OPS_INSERT TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_OPS_UPDATE TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_OPS_UPDATE_LOG TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REKINS_11 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_01_CLID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_01_CLID2 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_02 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_02_CLID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_10 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_10_CLID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_11 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_21 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_CUR_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_CUR_01_CLID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_DZ_11 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_DZ_12 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_FULL_11 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_FULL_12 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_MT_11 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_MT_12 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_MT_21 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_MT_22 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_NP_11 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_NP_12 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_BAL_11 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_BAL_12 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_BAL_13 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_BAL_21 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_BAL_22 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_CURCHECK_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_CURRDIFF_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_DARZ_1 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_DARZ_2 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_DARZ_3 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_DARZ_4 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_DOKS_11 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KG_11 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KIEO_1 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KIEO_21 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KIZO_21 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_01_CLID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_01_CLID2 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_01_CUR TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_02 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_02_CLID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_11 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_11_CLID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_11_CLID2 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_11_CUR TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_11 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_12 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_13 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_14 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_21 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_22 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_24 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_31 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_41 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_42 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_43 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_44 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PERS_11 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PERS_12 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PERS_13 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PERS_14 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PERS_15 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PERS_16 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVNZ_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_10 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_21 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_22 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_31 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_32 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_41 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_42 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_51 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_52 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_CHECK_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_CHECK_02 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_SKAIDRA_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_REP_SKAIDRA_02 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_RESET_YEAR_GEN TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_SET_KIEONR TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_SET_KIZONR TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_SET_USERNAME TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_VWOPS_FILTER_AND TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_VWOPS_FILTER_OR TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_ZDT_OPSD_SET TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_F_ZDT_OPS_SET TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_GEN_PARAMS_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_CALC_DOC_AMOUNTS TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_CLEARDATA TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_CURRENTSTOCK_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_CURRENTSTOCK_02 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_DEL_FINDOC TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_FILTER_DOCS_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_FILTER_DOCS_02 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_FILTER_INVDOCS_1 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_FILTER_INVROWS_1 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_FILTER_ITEMS_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_FILTER_ITEMS_PER_STORE_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_FILTER_ROWS_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_ADDRESSSES_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_AUX_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_BANKACCOUNTS_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_BANKS_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_CONTACTS_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_COUNTRIES_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_DISC_LISTS_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_DISC_LISTS_P_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_DISC_LISTS_R_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_DOCSEQ TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_DOCSEQ2 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_DOCS_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_DOCTYPES_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_INV_DOCS_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_INV_ROWS_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_ITEMS_CAT_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_ITEMS_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_PAYMENTTYPE_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_PRICE_LISTS_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_PRICE_LISTS_P_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_PRICE_LISTS_R_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_PVNRATES2_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_PVNRATES_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_PVNTEXTS_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_ROWS_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_STORES_CAT_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_STORES_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_STORETYPE_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_TRANSACTIONTYPE_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_UNITS_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_VEHICLES_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GETCOUNTSFOREVENTS TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_ITEMMOVEMENT_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_01A TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_01B TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_02A TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_02B TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_11 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_12 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_13 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_14A TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_14B TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_21A TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_21B TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_22A TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_22B TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_23A TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_23B TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_31A TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_31B TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_32A TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_32B TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_33A TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_33B TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_41 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_51A TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_51B TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_52 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_61A TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_61B TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_62 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCAMOUNTS_1 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCAMOUNTS_2 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCITEM_01A TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCITEM_01A_1 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCITEM_01B TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCITEM_01C TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCITEM_01C_1 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCITEM_04 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCITEM_05 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCITEM_06 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCITEM_07 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCLASTDATES_1 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_RECALC_ROWSISGONE_1 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_RECALC_ROWSISGONE_2 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_REMOVELINKS_01 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_REP_COSTACC_1 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_REP_COSTACC_2 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_REP_ITEMLINKS_1 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_REP_ITEMSAMOUNTS_1 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_REP_ITEMSAMOUNTS_2 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_REP_ITEMSAMOUNTS_3 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_REP_ITEMSAMOUNTS_4 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_REP_ITEMSAMOUNTS_5 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_REP_ITEMSAMOUNTS_6 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_REP_ITEMSINSTORE_1 TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_PARAMS TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_P_GEN_CAT1_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_P_GEN_CATD_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_P_GEN_CATT_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_P_GEN_DEPARTMENTS_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_P_GEN_EVENTS_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_P_GEN_ITEMS_EVENTS_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_P_GEN_ITEMS_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_P_GEN_PLACES_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_P_GEN_TAXDEPRECYEAR_ID TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_SET_USERNAME TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_SYS_CHECK_USER TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_X_CLEAR_A TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_X_CLEAR_F TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_X_CLEAR_P TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_X_GENIDS_A TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_X_GENIDS_F TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_X_GENIDS_P TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON EXCEPTION EX_FAILURE TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON EXCEPTION MY_EXCEPTION_BADYEARVALUE TO USER KLONS WITH GRANT OPTION;
GRANT DEFAULT RDB$ADMIN TO USER KLONS WITH ADMIN OPTION;
GRANT USAGE ON SEQUENCE F_YEAR00 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR01 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR02 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR03 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR04 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR05 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR06 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR07 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR08 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR09 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR10 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR11 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR12 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR13 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR14 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR15 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR16 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR17 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR18 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR19 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR20 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR21 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR22 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR23 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR24 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR25 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR26 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR27 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR28 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR29 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR30 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR31 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE F_YEAR32 TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_BANKS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_EVENTS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_EVENT_TYPES2_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_EVENT_TYPES_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_FP_PAYLISTS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_FP_PAYLISTS_R_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_PASTDATA_2_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_PASTDATA_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_PAYLISTS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_PAYLISTS_R_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_PAYLIST_TEMPL_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_PAYLIST_TEMPL_R_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_PERSONS_FIZ_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_PERSONS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_PERSONS_R_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_PIECEWORK_CATALOG_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_PIECEWORK_CATSTRUCT_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_PIECEWORK_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_PLUSMINUS_FROM_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_PLUSMINUS_TYPES_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_POSITIONS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_POSITIONS_PLUSMINUS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_POSITIONS_R_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_RATES_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_REPORT_CODES_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_SALARY_PLUSMINUS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_SALARY_SHEETS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_SALARY_SHEETS_R_HIST_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_SALARY_SHEETS_R_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_SALARY_SHEET_TEMPL_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_SALARY_SHEET_TEMPL_R_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_TIMEPLAN_LIST_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_TIMESHEET_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_TIMESHEET_LISTS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_TIMESHEET_LISTS_R_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_TIMESHEET_TEMPL_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_TIMESHEET_TEMPL_R_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_A_UNTAXED_MIN_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_BAL0_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_BALA21_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_BALA2_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_BALA3_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_DOCS0_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_LOGX_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_LOPSD_IDL TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_LOPS_IDL TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_LXOP_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_OPSD_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_OPS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_PERSONTYP_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_ROPS1A_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_ROPS2A_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_ROPS2B_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_ROPS3A_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_TABLE1_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_TREM_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_TREPA1_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_TREPAPAN_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_TREPDARZ1_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_TREPDARZ2_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_TREPDOCS1_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_TREPDOCS2_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_TREPDOCSS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_TREPMT_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_TREPPVNZ1_AD TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_TREPPVNZ1_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_TREPUDOCS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_TTEMP_BALA21_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_TTEMP_BALAC_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_TTEMP_BALMT1_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_TTEMP_PVN1_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_TUDOCLISTS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_TUDOCS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_F_TUPVN1_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_ADDRESSSES_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_AUX_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_BANKS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_CONTACTS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_COUNTRIES_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_DISC_LISTS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_DISC_LISTS_P_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_DISC_LISTS_R_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_DOCSEQ TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_DOCS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_DOCTYPES_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_INV_DOCS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_INV_ROWS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_ITEMS_CAT_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_ITEMS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_PAYMENTTYPE_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_PRICE_LISTS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_PRICE_LISTS_P_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_PRICE_LISTS_R_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_PVNRATES2_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_PVNRATES_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_PVNTEXTS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_ROWS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_STORES_CAT_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_STORES_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_STORETYPE_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_TRANSACTIONTYPE_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_UNITS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_VEHICLES_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_PARAMS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_P_CAT1_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_P_CATD_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_P_CATT_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_P_DEPARTMENTS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_P_EVENTS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_P_ITEMS_EVENTS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_P_ITEMS_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_P_PLACES_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_P_TAXDEPRECYEAR_ID TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE RDB$BACKUP_HISTORY TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE RDB$CONSTRAINT_NAME TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE RDB$EXCEPTIONS TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE RDB$FIELD_NAME TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE RDB$FUNCTIONS TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE RDB$GENERATOR_NAME TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE RDB$INDEX_NAME TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE RDB$PROCEDURES TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE RDB$SECURITY_CLASS TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE RDB$TRIGGER_NAME TO USER KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE SQL$DEFAULT TO USER KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PACKAGE RDB$TIME_ZONE_UTIL TO USER KLONS WITH GRANT OPTION;

/* Privileges of roles */
GRANT ALL ON A_BANKS TO ROLE RDB$ADMIN;
GRANT ALL ON A_DEPARTMENTS TO ROLE RDB$ADMIN;
GRANT ALL ON A_EVENTS TO ROLE RDB$ADMIN;
GRANT ALL ON A_EVENT_TYPES TO ROLE RDB$ADMIN;
GRANT ALL ON A_EVENT_TYPES2 TO ROLE RDB$ADMIN;
GRANT ALL ON A_FP_PAYLISTS TO ROLE RDB$ADMIN;
GRANT ALL ON A_FP_PAYLISTS_R TO ROLE RDB$ADMIN;
GRANT ALL ON A_HOLIDAYS TO ROLE RDB$ADMIN;
GRANT ALL ON A_INCOME_CODES TO ROLE RDB$ADMIN;
GRANT ALL ON A_PASTDATA TO ROLE RDB$ADMIN;
GRANT ALL ON A_PASTDATA_2 TO ROLE RDB$ADMIN;
GRANT ALL ON A_PAYLISTS TO ROLE RDB$ADMIN;
GRANT ALL ON A_PAYLISTS_R TO ROLE RDB$ADMIN;
GRANT ALL ON A_PAYLIST_TEMPL TO ROLE RDB$ADMIN;
GRANT ALL ON A_PAYLIST_TEMPL_R TO ROLE RDB$ADMIN;
GRANT ALL ON A_PERSONS TO ROLE RDB$ADMIN;
GRANT ALL ON A_PERSONS_FIZ TO ROLE RDB$ADMIN;
GRANT ALL ON A_PERSONS_R TO ROLE RDB$ADMIN;
GRANT ALL ON A_PIECEWORK TO ROLE RDB$ADMIN;
GRANT ALL ON A_PIECEWORK_CATALOG TO ROLE RDB$ADMIN;
GRANT ALL ON A_PIECEWORK_CATSTRUCT TO ROLE RDB$ADMIN;
GRANT ALL ON A_PLUSMINUS_FROM TO ROLE RDB$ADMIN;
GRANT ALL ON A_PLUSMINUS_TYPES TO ROLE RDB$ADMIN;
GRANT ALL ON A_POSITIONS TO ROLE RDB$ADMIN;
GRANT ALL ON A_POSITIONS_PLUSMINUS TO ROLE RDB$ADMIN;
GRANT ALL ON A_POSITIONS_R TO ROLE RDB$ADMIN;
GRANT ALL ON A_PROFESSIONS TO ROLE RDB$ADMIN;
GRANT ALL ON A_RATES TO ROLE RDB$ADMIN;
GRANT ALL ON A_REPORT_CODES TO ROLE RDB$ADMIN;
GRANT ALL ON A_SALARY_PLUSMINUS TO ROLE RDB$ADMIN;
GRANT ALL ON A_SALARY_SHEETS TO ROLE RDB$ADMIN;
GRANT ALL ON A_SALARY_SHEETS_R TO ROLE RDB$ADMIN;
GRANT ALL ON A_SALARY_SHEETS_R_HIST TO ROLE RDB$ADMIN;
GRANT ALL ON A_SALARY_SHEET_TEMPL TO ROLE RDB$ADMIN;
GRANT ALL ON A_SALARY_SHEET_TEMPL_R TO ROLE RDB$ADMIN;
GRANT ALL ON A_TEMP_REP_INKP TO ROLE RDB$ADMIN;
GRANT ALL ON A_TEMP_REP_PDT TO ROLE RDB$ADMIN;
GRANT ALL ON A_TERITORIAL_CODES TO ROLE RDB$ADMIN;
GRANT ALL ON A_TIMEPLAN_LIST TO ROLE RDB$ADMIN;
GRANT ALL ON A_TIMESHEET TO ROLE RDB$ADMIN;
GRANT ALL ON A_TIMESHEET_LISTS TO ROLE RDB$ADMIN;
GRANT ALL ON A_TIMESHEET_LISTS_R TO ROLE RDB$ADMIN;
GRANT ALL ON A_TIMESHEET_TEMPL TO ROLE RDB$ADMIN;
GRANT ALL ON A_TIMESHEET_TEMPL_R TO ROLE RDB$ADMIN;
GRANT ALL ON A_UNTAXED_MIN TO ROLE RDB$ADMIN;
GRANT ALL ON F_ACP1 TO ROLE RDB$ADMIN;
GRANT ALL ON F_ACP21 TO ROLE RDB$ADMIN;
GRANT ALL ON F_ACP211 TO ROLE RDB$ADMIN;
GRANT ALL ON F_ACP22 TO ROLE RDB$ADMIN;
GRANT ALL ON F_ACP23 TO ROLE RDB$ADMIN;
GRANT ALL ON F_ACP24 TO ROLE RDB$ADMIN;
GRANT ALL ON F_ACP25 TO ROLE RDB$ADMIN;
GRANT ALL ON F_ACP25A TO ROLE RDB$ADMIN;
GRANT ALL ON F_ACP6 TO ROLE RDB$ADMIN;
GRANT ALL ON F_ACPLAN TO ROLE RDB$ADMIN;
GRANT ALL ON F_ACPVN TO ROLE RDB$ADMIN;
GRANT ALL ON F_BAL0 TO ROLE RDB$ADMIN;
GRANT ALL ON F_BALA1 TO ROLE RDB$ADMIN;
GRANT ALL ON F_BALA2 TO ROLE RDB$ADMIN;
GRANT ALL ON F_BALA21 TO ROLE RDB$ADMIN;
GRANT ALL ON F_BALA3 TO ROLE RDB$ADMIN;
GRANT ALL ON F_BANKS TO ROLE RDB$ADMIN;
GRANT ALL ON F_CURRENCY TO ROLE RDB$ADMIN;
GRANT ALL ON F_DOCS0 TO ROLE RDB$ADMIN;
GRANT ALL ON F_DOCTYP TO ROLE RDB$ADMIN;
GRANT ALL ON F_DOCTYPA TO ROLE RDB$ADMIN;
GRANT ALL ON F_DOCTYPB TO ROLE RDB$ADMIN;
GRANT ALL ON F_LOGX TO ROLE RDB$ADMIN;
GRANT ALL ON F_LOPS TO ROLE RDB$ADMIN;
GRANT ALL ON F_LOPSD TO ROLE RDB$ADMIN;
GRANT ALL ON F_LXOP TO ROLE RDB$ADMIN;
GRANT ALL ON F_OPS TO ROLE RDB$ADMIN;
GRANT ALL ON F_OPSD TO ROLE RDB$ADMIN;
GRANT ALL ON F_OPSD_YEAR_SEQ TO ROLE RDB$ADMIN;
GRANT ALL ON F_PERSONS TO ROLE RDB$ADMIN;
GRANT ALL ON F_PERSONTYP TO ROLE RDB$ADMIN;
GRANT ALL ON F_ROPS1A TO ROLE RDB$ADMIN;
GRANT ALL ON F_ROPS2A TO ROLE RDB$ADMIN;
GRANT ALL ON F_ROPS2B TO ROLE RDB$ADMIN;
GRANT ALL ON F_ROPS3A TO ROLE RDB$ADMIN;
GRANT ALL ON F_TABLE1 TO ROLE RDB$ADMIN;
GRANT ALL ON F_TREM TO ROLE RDB$ADMIN;
GRANT ALL ON F_TREPA1 TO ROLE RDB$ADMIN;
GRANT ALL ON F_TREPAPAN TO ROLE RDB$ADMIN;
GRANT ALL ON F_TREPDARZ1 TO ROLE RDB$ADMIN;
GRANT ALL ON F_TREPDARZ2 TO ROLE RDB$ADMIN;
GRANT ALL ON F_TREPDOCS1 TO ROLE RDB$ADMIN;
GRANT ALL ON F_TREPDOCS2 TO ROLE RDB$ADMIN;
GRANT ALL ON F_TREPDOCSS TO ROLE RDB$ADMIN;
GRANT ALL ON F_TREPMT TO ROLE RDB$ADMIN;
GRANT ALL ON F_TREPOPS TO ROLE RDB$ADMIN;
GRANT ALL ON F_TREPOPSD TO ROLE RDB$ADMIN;
GRANT ALL ON F_TREPPVNZ1 TO ROLE RDB$ADMIN;
GRANT ALL ON F_TREPUDOCS TO ROLE RDB$ADMIN;
GRANT ALL ON F_TTEMP_BALA21 TO ROLE RDB$ADMIN;
GRANT ALL ON F_TTEMP_BALAC TO ROLE RDB$ADMIN;
GRANT ALL ON F_TTEMP_BALMT1 TO ROLE RDB$ADMIN;
GRANT ALL ON F_TTEMP_BALMT2 TO ROLE RDB$ADMIN;
GRANT ALL ON F_TTEMP_DIFF2 TO ROLE RDB$ADMIN;
GRANT ALL ON F_TTEMP_PVN1 TO ROLE RDB$ADMIN;
GRANT ALL ON F_TTEMP_PVN2 TO ROLE RDB$ADMIN;
GRANT ALL ON F_TUDOCLISTS TO ROLE RDB$ADMIN;
GRANT ALL ON F_TUDOCS TO ROLE RDB$ADMIN;
GRANT ALL ON F_TUPDFIELDS TO ROLE RDB$ADMIN;
GRANT ALL ON F_TUPVN1 TO ROLE RDB$ADMIN;
GRANT ALL ON F_VW_OPS TO ROLE RDB$ADMIN;
GRANT ALL ON M_ACCOUNTS TO ROLE RDB$ADMIN;
GRANT ALL ON M_ACCOUNTTYPE TO ROLE RDB$ADMIN;
GRANT ALL ON M_ADDRESSSES TO ROLE RDB$ADMIN;
GRANT ALL ON M_BANKACCOUNTS TO ROLE RDB$ADMIN;
GRANT ALL ON M_BANKS TO ROLE RDB$ADMIN;
GRANT ALL ON M_CONTACTS TO ROLE RDB$ADMIN;
GRANT ALL ON M_COUNTRIES TO ROLE RDB$ADMIN;
GRANT ALL ON M_DISC_LISTS TO ROLE RDB$ADMIN;
GRANT ALL ON M_DISC_LISTS_P TO ROLE RDB$ADMIN;
GRANT ALL ON M_DISC_LISTS_R TO ROLE RDB$ADMIN;
GRANT ALL ON M_DOCS TO ROLE RDB$ADMIN;
GRANT ALL ON M_DOCTYPES TO ROLE RDB$ADMIN;
GRANT ALL ON M_INV_DOCS TO ROLE RDB$ADMIN;
GRANT ALL ON M_INV_ROWS TO ROLE RDB$ADMIN;
GRANT ALL ON M_ITEMS TO ROLE RDB$ADMIN;
GRANT ALL ON M_ITEMS_CAT TO ROLE RDB$ADMIN;
GRANT ALL ON M_ITEMS_PER_STORE TO ROLE RDB$ADMIN;
GRANT ALL ON M_LINKS TO ROLE RDB$ADMIN;
GRANT ALL ON M_PAYMENTTYPE TO ROLE RDB$ADMIN;
GRANT ALL ON M_PRICE_LISTS TO ROLE RDB$ADMIN;
GRANT ALL ON M_PRICE_LISTS_P TO ROLE RDB$ADMIN;
GRANT ALL ON M_PRICE_LISTS_R TO ROLE RDB$ADMIN;
GRANT ALL ON M_PVNRATES TO ROLE RDB$ADMIN;
GRANT ALL ON M_PVNRATES2 TO ROLE RDB$ADMIN;
GRANT ALL ON M_PVNTEXTS TO ROLE RDB$ADMIN;
GRANT ALL ON M_PVNTYPE TO ROLE RDB$ADMIN;
GRANT ALL ON M_ROWS TO ROLE RDB$ADMIN;
GRANT ALL ON M_STORES TO ROLE RDB$ADMIN;
GRANT ALL ON M_STORES_CAT TO ROLE RDB$ADMIN;
GRANT ALL ON M_STORETYPE TO ROLE RDB$ADMIN;
GRANT ALL ON M_TRANSACTIONTYPE TO ROLE RDB$ADMIN;
GRANT ALL ON M_UNITS TO ROLE RDB$ADMIN;
GRANT ALL ON M_VEHICLES TO ROLE RDB$ADMIN;
GRANT ALL ON PARAMS TO ROLE RDB$ADMIN;
GRANT ALL ON P_CAT1 TO ROLE RDB$ADMIN;
GRANT ALL ON P_CATD TO ROLE RDB$ADMIN;
GRANT ALL ON P_CATT TO ROLE RDB$ADMIN;
GRANT ALL ON P_DEPARTMENTS TO ROLE RDB$ADMIN;
GRANT ALL ON P_EVENTS TO ROLE RDB$ADMIN;
GRANT ALL ON P_ITEMS TO ROLE RDB$ADMIN;
GRANT ALL ON P_ITEMS_EVENTS TO ROLE RDB$ADMIN;
GRANT ALL ON P_PLACES TO ROLE RDB$ADMIN;
GRANT ALL ON P_TAXDEPRECYEAR TO ROLE RDB$ADMIN;
GRANT ALL ON USERS TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_A TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_AVPAYCALC_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_CLEAR TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_DL_LAPAS_INSERT_FROM_SH TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_FP_PAYLISTS_PER_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_FP_PAYLISTS_PER_R_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_BANKS_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_EVENTS_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_EVENT_TYPES2_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_EVENT_TYPES_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_FP_PAYLISTS_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_FP_PAYLISTS_R_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PASTDATA_2_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PASTDATA_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PAYLISTS_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PAYLISTS_R_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PAYLIST_TEMPL_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PAYLIST_TEMPL_R_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PERSONS_FIZ_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PERSONS_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PERSONS_R_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PIECEWORK_CATALOG_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PIECEWORK_CATSTRUCT_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PIECEWORK_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PLUSMINUS_FROM_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PLUSMINUS_TYPES_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_POSITIONS_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_POSITIONS_PLUSMINUS_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_POSITIONS_R_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_REPORT_CODES_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_SALARY_PLUSMINUS_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_SALARY_SHEETS_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_SALARY_SHEETS_R_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_SALARY_SHEET_TEMPL_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_SAL_SHEETS_R_HIST_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_SAL_SHEET_TEMPL_R_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_TIMEPLAN_LIST_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_TIMESHEET_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_TIMESHEET_LISTS_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_TIMESHEET_LISTS_R_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_TIMESHEET_TEMPL_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_TIMESHEET_TEMPL_R_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_UNTAXED_MIN_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_GET_MINMAX TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_HOLIDAYS_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_MAKE_SALARY_SHEET_R_HIST TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_MAKE_SALARY_SHEET_R_HIST_2 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_PAYLISTS_PER_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_PAYLISTS_R_PER_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_PAYLISTS_SUM_TOTALS TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_02 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_02A TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_03 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_04 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_11 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_12 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_13 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_14 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_21 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_SALDO_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_SALDO_02 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_SALDO_03 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_X_1 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_PIECEWORK_PER_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_PLANS_BY_YRMT TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_POSITIONS_PLUSMINUS_PER_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_RATES_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_REP_AGGREGATE_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_REP_AGGREGATE_02 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_02 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_03 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_11 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_12 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_13 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_21 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_22 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_31 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_32 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_33 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_L1 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_L2 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_L3 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_P1 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_P2 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_REP_PDT TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_SALARY_PLUSMINUS_PER_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_SALARY_SHEETS_PER_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_SALARY_SHEETS_R_HIST_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_SALARY_SHEETS_R_HIST_02 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_SALARY_SHEETS_R_PER_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_STATS_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_STATS_02 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_TIMESHEET_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_TIMESHEET_LISTS_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_TIMESHEET_LISTS_R_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_A_TIMESHEET_PER_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_BAL0_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_BAL0_IDA TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_BALA2_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_BALA3_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_CURRCHECK_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_DIFF_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_DIFF_02 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_DIFF_11 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_DIFF_12 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_DOCS0_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_FIXLOPSODT TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_FIXOPSDATES TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_LINKEDDOCS_1 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_LINKEDDOCS_2 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_DELETE TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_DELETE_LOG TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_FILTER_AND TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_FILTER_OR TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_GETNEXTNRFORYEARA TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_GETNEXTNRFORYEARA_K TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_IDK TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_INSERT TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_UPDATE TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_UPDATE_LOG TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_OPS_DELETE TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_OPS_DELETE_LOG TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_OPS_FILTER_AND TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_OPS_FILTER_OR TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_OPS_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_OPS_IDK TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_OPS_INSERT TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_OPS_UPDATE TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_OPS_UPDATE_LOG TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REKINS_11 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_01_CLID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_01_CLID2 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_02 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_02_CLID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_10 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_10_CLID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_11 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_21 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_CUR_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_CUR_01_CLID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_DZ_11 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_DZ_12 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_FULL_11 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_FULL_12 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_MT_11 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_MT_12 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_MT_21 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_MT_22 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_NP_11 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_NP_12 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_BAL_11 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_BAL_12 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_BAL_13 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_BAL_21 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_BAL_22 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_CURCHECK_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_CURRDIFF_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_DARZ_1 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_DARZ_2 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_DARZ_3 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_DARZ_4 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_DOKS_11 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KG_11 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KIEO_1 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KIEO_21 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KIZO_21 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_01_CLID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_01_CLID2 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_01_CUR TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_02 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_02_CLID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_11 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_11_CLID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_11_CLID2 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_11_CUR TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_11 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_12 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_13 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_14 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_21 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_22 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_24 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_31 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_41 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_42 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_43 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_44 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PERS_11 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PERS_12 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PERS_13 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PERS_14 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PERS_15 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PERS_16 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVNZ_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_10 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_21 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_22 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_31 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_32 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_41 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_42 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_51 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_52 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_CHECK_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_CHECK_02 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_SKAIDRA_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_REP_SKAIDRA_02 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_RESET_YEAR_GEN TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_SET_KIEONR TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_SET_KIZONR TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_SET_USERNAME TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_VWOPS_FILTER_AND TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_F_VWOPS_FILTER_OR TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_GEN_PARAMS_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_CALC_DOC_AMOUNTS TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_CLEARDATA TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_CURRENTSTOCK_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_CURRENTSTOCK_02 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_DEL_FINDOC TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_FILTER_DOCS_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_FILTER_DOCS_02 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_FILTER_INVDOCS_1 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_FILTER_INVROWS_1 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_FILTER_ITEMS_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_FILTER_ITEMS_PER_STORE_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_FILTER_ROWS_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_ADDRESSSES_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_AUX_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_BANKACCOUNTS_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_BANKS_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_CONTACTS_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_COUNTRIES_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_DISC_LISTS_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_DISC_LISTS_P_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_DISC_LISTS_R_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_DOCSEQ TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_DOCSEQ2 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_DOCS_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_DOCTYPES_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_INV_DOCS_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_INV_ROWS_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_ITEMS_CAT_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_ITEMS_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_PAYMENTTYPE_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_PRICE_LISTS_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_PRICE_LISTS_P_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_PRICE_LISTS_R_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_PVNRATES2_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_PVNRATES_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_PVNTEXTS_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_ROWS_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_STORES_CAT_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_STORES_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_STORETYPE_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_TRANSACTIONTYPE_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_UNITS_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_VEHICLES_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_GETCOUNTSFOREVENTS TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_ITEMMOVEMENT_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_01A TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_01B TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_02A TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_02B TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_11 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_12 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_13 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_14A TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_14B TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_21A TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_21B TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_22A TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_22B TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_23A TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_23B TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_31A TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_31B TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_32A TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_32B TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_33A TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_33B TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_41 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_51A TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_51B TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_52 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_61A TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_61B TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_62 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCAMOUNTS_1 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCAMOUNTS_2 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCITEM_01A TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCITEM_01A_1 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCITEM_01B TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCITEM_01C TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCITEM_01C_1 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCITEM_04 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCITEM_05 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCITEM_06 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCITEM_07 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCLASTDATES_1 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_RECALC_ROWSISGONE_1 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_RECALC_ROWSISGONE_2 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_REMOVELINKS_01 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_REP_COSTACC_1 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_REP_COSTACC_2 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_REP_ITEMLINKS_1 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_REP_ITEMSAMOUNTS_1 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_REP_ITEMSAMOUNTS_2 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_REP_ITEMSAMOUNTS_3 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_REP_ITEMSAMOUNTS_4 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_REP_ITEMSAMOUNTS_5 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_REP_ITEMSAMOUNTS_6 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_M_REP_ITEMSINSTORE_1 TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_PARAMS TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_P_GEN_CAT1_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_P_GEN_CATD_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_P_GEN_CATT_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_P_GEN_DEPARTMENTS_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_P_GEN_EVENTS_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_P_GEN_ITEMS_EVENTS_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_P_GEN_ITEMS_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_P_GEN_PLACES_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_P_GEN_TAXDEPRECYEAR_ID TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_SET_USERNAME TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_SYS_CHECK_USER TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_X_CLEAR_A TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_X_CLEAR_F TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_X_CLEAR_P TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_X_GENIDS_A TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_X_GENIDS_F TO ROLE RDB$ADMIN;
GRANT EXECUTE ON PROCEDURE SP_X_GENIDS_P TO ROLE RDB$ADMIN;
GRANT USAGE ON EXCEPTION EX_FAILURE TO ROLE RDB$ADMIN;
GRANT USAGE ON EXCEPTION MY_EXCEPTION_BADYEARVALUE TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR00 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR01 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR02 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR03 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR04 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR05 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR06 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR07 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR08 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR09 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR10 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR11 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR12 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR13 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR14 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR15 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR16 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR17 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR18 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR19 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR20 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR21 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR22 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR23 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR24 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR25 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR26 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR27 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR28 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR29 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR30 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR31 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE F_YEAR32 TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_BANKS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_EVENTS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_EVENT_TYPES2_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_EVENT_TYPES_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_FP_PAYLISTS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_FP_PAYLISTS_R_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_PASTDATA_2_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_PASTDATA_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_PAYLISTS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_PAYLISTS_R_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_PAYLIST_TEMPL_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_PAYLIST_TEMPL_R_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_PERSONS_FIZ_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_PERSONS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_PERSONS_R_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_PIECEWORK_CATALOG_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_PIECEWORK_CATSTRUCT_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_PIECEWORK_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_PLUSMINUS_FROM_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_PLUSMINUS_TYPES_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_POSITIONS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_POSITIONS_PLUSMINUS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_POSITIONS_R_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_RATES_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_REPORT_CODES_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_SALARY_PLUSMINUS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_SALARY_SHEETS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_SALARY_SHEETS_R_HIST_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_SALARY_SHEETS_R_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_SALARY_SHEET_TEMPL_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_SALARY_SHEET_TEMPL_R_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_TIMEPLAN_LIST_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_TIMESHEET_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_TIMESHEET_LISTS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_TIMESHEET_LISTS_R_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_TIMESHEET_TEMPL_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_TIMESHEET_TEMPL_R_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_A_UNTAXED_MIN_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_BAL0_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_BALA21_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_BALA2_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_BALA3_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_DOCS0_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_LOGX_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_LOPSD_IDL TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_LOPS_IDL TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_LXOP_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_OPSD_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_OPS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_PERSONTYP_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_ROPS1A_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_ROPS2A_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_ROPS2B_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_ROPS3A_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_TABLE1_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_TREM_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_TREPA1_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_TREPAPAN_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_TREPDARZ1_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_TREPDARZ2_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_TREPDOCS1_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_TREPDOCS2_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_TREPDOCSS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_TREPMT_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_TREPPVNZ1_AD TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_TREPPVNZ1_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_TREPUDOCS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_TTEMP_BALA21_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_TTEMP_BALAC_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_TTEMP_BALMT1_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_TTEMP_PVN1_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_TUDOCLISTS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_TUDOCS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_F_TUPVN1_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_ADDRESSSES_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_AUX_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_BANKS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_CONTACTS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_COUNTRIES_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_DISC_LISTS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_DISC_LISTS_P_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_DISC_LISTS_R_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_DOCSEQ TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_DOCS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_DOCTYPES_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_INV_DOCS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_INV_ROWS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_ITEMS_CAT_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_ITEMS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_PAYMENTTYPE_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_PRICE_LISTS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_PRICE_LISTS_P_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_PRICE_LISTS_R_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_PVNRATES2_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_PVNRATES_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_PVNTEXTS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_ROWS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_STORES_CAT_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_STORES_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_STORETYPE_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_TRANSACTIONTYPE_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_UNITS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_M_VEHICLES_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_PARAMS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_P_CAT1_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_P_CATD_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_P_CATT_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_P_DEPARTMENTS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_P_EVENTS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_P_ITEMS_EVENTS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_P_ITEMS_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_P_PLACES_ID TO ROLE RDB$ADMIN;
GRANT USAGE ON SEQUENCE GEN_P_TAXDEPRECYEAR_ID TO ROLE RDB$ADMIN;
GRANT ALL ON A_BANKS TO ROLE USERS;
GRANT ALL ON A_DEPARTMENTS TO ROLE USERS;
GRANT ALL ON A_EVENTS TO ROLE USERS;
GRANT ALL ON A_EVENT_TYPES TO ROLE USERS;
GRANT ALL ON A_EVENT_TYPES2 TO ROLE USERS;
GRANT ALL ON A_FP_PAYLISTS TO ROLE USERS;
GRANT ALL ON A_FP_PAYLISTS_R TO ROLE USERS;
GRANT ALL ON A_HOLIDAYS TO ROLE USERS;
GRANT ALL ON A_INCOME_CODES TO ROLE USERS;
GRANT ALL ON A_PASTDATA TO ROLE USERS;
GRANT ALL ON A_PASTDATA_2 TO ROLE USERS;
GRANT ALL ON A_PAYLISTS TO ROLE USERS;
GRANT ALL ON A_PAYLISTS_R TO ROLE USERS;
GRANT ALL ON A_PAYLIST_TEMPL TO ROLE USERS;
GRANT ALL ON A_PAYLIST_TEMPL_R TO ROLE USERS;
GRANT ALL ON A_PERSONS TO ROLE USERS;
GRANT ALL ON A_PERSONS_FIZ TO ROLE USERS;
GRANT ALL ON A_PERSONS_R TO ROLE USERS;
GRANT ALL ON A_PIECEWORK TO ROLE USERS;
GRANT ALL ON A_PIECEWORK_CATALOG TO ROLE USERS;
GRANT ALL ON A_PIECEWORK_CATSTRUCT TO ROLE USERS;
GRANT ALL ON A_PLUSMINUS_FROM TO ROLE USERS;
GRANT ALL ON A_PLUSMINUS_TYPES TO ROLE USERS;
GRANT ALL ON A_POSITIONS TO ROLE USERS;
GRANT ALL ON A_POSITIONS_PLUSMINUS TO ROLE USERS;
GRANT ALL ON A_POSITIONS_R TO ROLE USERS;
GRANT ALL ON A_PROFESSIONS TO ROLE USERS;
GRANT ALL ON A_RATES TO ROLE USERS;
GRANT ALL ON A_REPORT_CODES TO ROLE USERS;
GRANT ALL ON A_SALARY_PLUSMINUS TO ROLE USERS;
GRANT ALL ON A_SALARY_SHEETS TO ROLE USERS;
GRANT ALL ON A_SALARY_SHEETS_R TO ROLE USERS;
GRANT ALL ON A_SALARY_SHEETS_R_HIST TO ROLE USERS;
GRANT ALL ON A_SALARY_SHEET_TEMPL TO ROLE USERS;
GRANT ALL ON A_SALARY_SHEET_TEMPL_R TO ROLE USERS;
GRANT ALL ON A_TEMP_REP_INKP TO ROLE USERS;
GRANT ALL ON A_TEMP_REP_PDT TO ROLE USERS;
GRANT ALL ON A_TERITORIAL_CODES TO ROLE USERS;
GRANT ALL ON A_TIMEPLAN_LIST TO ROLE USERS;
GRANT ALL ON A_TIMESHEET TO ROLE USERS;
GRANT ALL ON A_TIMESHEET_LISTS TO ROLE USERS;
GRANT ALL ON A_TIMESHEET_LISTS_R TO ROLE USERS;
GRANT ALL ON A_TIMESHEET_TEMPL TO ROLE USERS;
GRANT ALL ON A_TIMESHEET_TEMPL_R TO ROLE USERS;
GRANT ALL ON A_UNTAXED_MIN TO ROLE USERS;
GRANT ALL ON F_ACP1 TO ROLE USERS;
GRANT ALL ON F_ACP21 TO ROLE USERS;
GRANT ALL ON F_ACP211 TO ROLE USERS;
GRANT ALL ON F_ACP22 TO ROLE USERS;
GRANT ALL ON F_ACP23 TO ROLE USERS;
GRANT ALL ON F_ACP24 TO ROLE USERS;
GRANT ALL ON F_ACP25 TO ROLE USERS;
GRANT ALL ON F_ACP25A TO ROLE USERS;
GRANT ALL ON F_ACP6 TO ROLE USERS;
GRANT ALL ON F_ACPLAN TO ROLE USERS;
GRANT ALL ON F_ACPVN TO ROLE USERS;
GRANT ALL ON F_BAL0 TO ROLE USERS;
GRANT ALL ON F_BALA1 TO ROLE USERS;
GRANT ALL ON F_BALA2 TO ROLE USERS;
GRANT ALL ON F_BALA21 TO ROLE USERS;
GRANT ALL ON F_BALA3 TO ROLE USERS;
GRANT ALL ON F_BANKS TO ROLE USERS;
GRANT ALL ON F_CURRENCY TO ROLE USERS;
GRANT ALL ON F_DOCS0 TO ROLE USERS;
GRANT ALL ON F_DOCTYP TO ROLE USERS;
GRANT ALL ON F_DOCTYPA TO ROLE USERS;
GRANT ALL ON F_DOCTYPB TO ROLE USERS;
GRANT ALL ON F_LOGX TO ROLE USERS;
GRANT ALL ON F_LOPS TO ROLE USERS;
GRANT ALL ON F_LOPSD TO ROLE USERS;
GRANT ALL ON F_LXOP TO ROLE USERS;
GRANT ALL ON F_OPS TO ROLE USERS;
GRANT ALL ON F_OPSD TO ROLE USERS;
GRANT ALL ON F_OPSD_YEAR_SEQ TO ROLE USERS;
GRANT ALL ON F_PERSONS TO ROLE USERS;
GRANT ALL ON F_PERSONTYP TO ROLE USERS;
GRANT ALL ON F_ROPS1A TO ROLE USERS;
GRANT ALL ON F_ROPS2A TO ROLE USERS;
GRANT ALL ON F_ROPS2B TO ROLE USERS;
GRANT ALL ON F_ROPS3A TO ROLE USERS;
GRANT ALL ON F_TABLE1 TO ROLE USERS;
GRANT ALL ON F_TREM TO ROLE USERS;
GRANT ALL ON F_TREPA1 TO ROLE USERS;
GRANT ALL ON F_TREPAPAN TO ROLE USERS;
GRANT ALL ON F_TREPDARZ1 TO ROLE USERS;
GRANT ALL ON F_TREPDARZ2 TO ROLE USERS;
GRANT ALL ON F_TREPDOCS1 TO ROLE USERS;
GRANT ALL ON F_TREPDOCS2 TO ROLE USERS;
GRANT ALL ON F_TREPDOCSS TO ROLE USERS;
GRANT ALL ON F_TREPMT TO ROLE USERS;
GRANT ALL ON F_TREPOPS TO ROLE USERS;
GRANT ALL ON F_TREPOPSD TO ROLE USERS;
GRANT ALL ON F_TREPPVNZ1 TO ROLE USERS;
GRANT ALL ON F_TREPUDOCS TO ROLE USERS;
GRANT ALL ON F_TTEMP_BALA21 TO ROLE USERS;
GRANT ALL ON F_TTEMP_BALAC TO ROLE USERS;
GRANT ALL ON F_TTEMP_BALMT1 TO ROLE USERS;
GRANT ALL ON F_TTEMP_BALMT2 TO ROLE USERS;
GRANT ALL ON F_TTEMP_DIFF2 TO ROLE USERS;
GRANT ALL ON F_TTEMP_PVN1 TO ROLE USERS;
GRANT ALL ON F_TTEMP_PVN2 TO ROLE USERS;
GRANT ALL ON F_TUDOCLISTS TO ROLE USERS;
GRANT ALL ON F_TUDOCS TO ROLE USERS;
GRANT ALL ON F_TUPDFIELDS TO ROLE USERS;
GRANT ALL ON F_TUPVN1 TO ROLE USERS;
GRANT ALL ON F_VW_OPS TO ROLE USERS;
GRANT ALL ON M_ACCOUNTS TO ROLE USERS;
GRANT ALL ON M_ACCOUNTTYPE TO ROLE USERS;
GRANT ALL ON M_ADDRESSSES TO ROLE USERS;
GRANT ALL ON M_BANKACCOUNTS TO ROLE USERS;
GRANT ALL ON M_BANKS TO ROLE USERS;
GRANT ALL ON M_CONTACTS TO ROLE USERS;
GRANT ALL ON M_COUNTRIES TO ROLE USERS;
GRANT ALL ON M_DISC_LISTS TO ROLE USERS;
GRANT ALL ON M_DISC_LISTS_P TO ROLE USERS;
GRANT ALL ON M_DISC_LISTS_R TO ROLE USERS;
GRANT ALL ON M_DOCS TO ROLE USERS;
GRANT ALL ON M_DOCTYPES TO ROLE USERS;
GRANT ALL ON M_INV_DOCS TO ROLE USERS;
GRANT ALL ON M_INV_ROWS TO ROLE USERS;
GRANT ALL ON M_ITEMS TO ROLE USERS;
GRANT ALL ON M_ITEMS_CAT TO ROLE USERS;
GRANT ALL ON M_ITEMS_PER_STORE TO ROLE USERS;
GRANT ALL ON M_LINKS TO ROLE USERS;
GRANT ALL ON M_PAYMENTTYPE TO ROLE USERS;
GRANT ALL ON M_PRICE_LISTS TO ROLE USERS;
GRANT ALL ON M_PRICE_LISTS_P TO ROLE USERS;
GRANT ALL ON M_PRICE_LISTS_R TO ROLE USERS;
GRANT ALL ON M_PVNRATES TO ROLE USERS;
GRANT ALL ON M_PVNRATES2 TO ROLE USERS;
GRANT ALL ON M_PVNTEXTS TO ROLE USERS;
GRANT ALL ON M_PVNTYPE TO ROLE USERS;
GRANT ALL ON M_ROWS TO ROLE USERS;
GRANT ALL ON M_STORES TO ROLE USERS;
GRANT ALL ON M_STORES_CAT TO ROLE USERS;
GRANT ALL ON M_STORETYPE TO ROLE USERS;
GRANT ALL ON M_TRANSACTIONTYPE TO ROLE USERS;
GRANT ALL ON M_UNITS TO ROLE USERS;
GRANT ALL ON M_VEHICLES TO ROLE USERS;
GRANT ALL ON PARAMS TO ROLE USERS;
GRANT ALL ON P_CAT1 TO ROLE USERS;
GRANT ALL ON P_CATD TO ROLE USERS;
GRANT ALL ON P_CATT TO ROLE USERS;
GRANT ALL ON P_DEPARTMENTS TO ROLE USERS;
GRANT ALL ON P_EVENTS TO ROLE USERS;
GRANT ALL ON P_ITEMS TO ROLE USERS;
GRANT ALL ON P_ITEMS_EVENTS TO ROLE USERS;
GRANT ALL ON P_PLACES TO ROLE USERS;
GRANT ALL ON P_TAXDEPRECYEAR TO ROLE USERS;
GRANT ALL ON USERS TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_A TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_AVPAYCALC_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_CLEAR TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_DL_LAPAS_INSERT_FROM_SH TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_FP_PAYLISTS_PER_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_FP_PAYLISTS_PER_R_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_BANKS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_EVENTS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_EVENT_TYPES2_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_EVENT_TYPES_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_FP_PAYLISTS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_FP_PAYLISTS_R_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PASTDATA_2_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PASTDATA_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PAYLISTS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PAYLISTS_R_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PAYLIST_TEMPL_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PAYLIST_TEMPL_R_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PERSONS_FIZ_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PERSONS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PERSONS_R_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PIECEWORK_CATALOG_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PIECEWORK_CATSTRUCT_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PIECEWORK_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PLUSMINUS_FROM_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_PLUSMINUS_TYPES_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_POSITIONS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_POSITIONS_PLUSMINUS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_POSITIONS_R_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_REPORT_CODES_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_SALARY_PLUSMINUS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_SALARY_SHEETS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_SALARY_SHEETS_R_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_SALARY_SHEET_TEMPL_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_SAL_SHEETS_R_HIST_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_SAL_SHEET_TEMPL_R_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_TIMEPLAN_LIST_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_TIMESHEET_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_TIMESHEET_LISTS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_TIMESHEET_LISTS_R_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_TIMESHEET_TEMPL_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_TIMESHEET_TEMPL_R_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GEN_UNTAXED_MIN_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_GET_MINMAX TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_HOLIDAYS_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_MAKE_SALARY_SHEET_R_HIST TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_MAKE_SALARY_SHEET_R_HIST_2 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_PAYLISTS_PER_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_PAYLISTS_R_PER_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_PAYLISTS_SUM_TOTALS TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_02 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_02A TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_03 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_04 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_11 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_12 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_13 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_14 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_MATCHLISTS_21 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_SALDO_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_SALDO_02 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_SALDO_03 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_PAY_X_1 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_PIECEWORK_PER_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_PLANS_BY_YRMT TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_POSITIONS_PLUSMINUS_PER_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_RATES_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_REP_AGGREGATE_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_REP_AGGREGATE_02 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_02 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_03 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_11 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_12 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_13 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_21 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_22 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_31 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_32 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_33 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_L1 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_L2 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_L3 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_P1 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_REP_IINK_P2 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_REP_PDT TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_SALARY_PLUSMINUS_PER_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_SALARY_SHEETS_PER_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_SALARY_SHEETS_R_HIST_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_SALARY_SHEETS_R_HIST_02 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_SALARY_SHEETS_R_PER_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_STATS_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_STATS_02 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_TIMESHEET_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_TIMESHEET_LISTS_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_TIMESHEET_LISTS_R_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_A_TIMESHEET_PER_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_BAL0_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_BAL0_IDA TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_BALA2_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_BALA3_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_CURRCHECK_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_DIFF_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_DIFF_02 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_DIFF_11 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_DIFF_12 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_DOCS0_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_FIXLOPSODT TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_FIXOPSDATES TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_LINKEDDOCS_1 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_LINKEDDOCS_2 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_DELETE TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_DELETE_LOG TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_FILTER_AND TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_FILTER_OR TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_GETNEXTNRFORYEARA TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_GETNEXTNRFORYEARA_K TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_IDK TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_INSERT TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_UPDATE TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_OPSD_UPDATE_LOG TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_OPS_DELETE TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_OPS_DELETE_LOG TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_OPS_FILTER_AND TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_OPS_FILTER_OR TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_OPS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_OPS_IDK TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_OPS_INSERT TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_OPS_UPDATE TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_OPS_UPDATE_LOG TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REKINS_11 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_01_CLID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_01_CLID2 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_02 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_02_CLID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_10 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_10_CLID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_11 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_21 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_CUR_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_CUR_01_CLID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_DZ_11 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_DZ_12 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_FULL_11 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_FULL_12 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_MT_11 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_MT_12 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_MT_21 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_MT_22 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_NP_11 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_APGR_NP_12 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_BAL_11 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_BAL_12 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_BAL_13 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_BAL_21 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_BAL_22 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_CURCHECK_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_CURRDIFF_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_DARZ_1 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_DARZ_2 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_DARZ_3 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_DARZ_4 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_DOKS_11 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KG_11 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KIEO_1 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KIEO_21 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KIZO_21 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_01_CLID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_01_CLID2 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_01_CUR TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_02 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_02_CLID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_11 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_11_CLID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_11_CLID2 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_KORESP_11_CUR TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_11 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_12 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_13 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_14 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_21 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_22 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_24 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_31 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_41 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_42 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_43 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_NPMT_44 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PERS_11 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PERS_12 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PERS_13 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PERS_14 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PERS_15 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PERS_16 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVNZ_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_10 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_21 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_22 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_31 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_32 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_41 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_42 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_51 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_52 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_CHECK_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_PVN_CHECK_02 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_SKAIDRA_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_REP_SKAIDRA_02 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_RESET_YEAR_GEN TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_SET_KIEONR TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_SET_KIZONR TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_SET_USERNAME TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_VWOPS_FILTER_AND TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_VWOPS_FILTER_OR TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_GEN_PARAMS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_CALC_DOC_AMOUNTS TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_CLEARDATA TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_CURRENTSTOCK_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_CURRENTSTOCK_02 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_DEL_FINDOC TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_FILTER_DOCS_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_FILTER_DOCS_02 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_FILTER_INVDOCS_1 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_FILTER_INVROWS_1 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_FILTER_ITEMS_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_FILTER_ITEMS_PER_STORE_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_FILTER_ROWS_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_ADDRESSSES_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_AUX_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_BANKACCOUNTS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_BANKS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_CONTACTS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_COUNTRIES_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_DISC_LISTS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_DISC_LISTS_P_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_DISC_LISTS_R_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_DOCSEQ TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_DOCSEQ2 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_DOCS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_DOCTYPES_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_INV_DOCS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_INV_ROWS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_ITEMS_CAT_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_ITEMS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_PAYMENTTYPE_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_PRICE_LISTS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_PRICE_LISTS_P_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_PRICE_LISTS_R_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_PVNRATES2_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_PVNRATES_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_PVNTEXTS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_ROWS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_STORES_CAT_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_STORES_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_STORETYPE_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_TRANSACTIONTYPE_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_UNITS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_VEHICLES_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_GETCOUNTSFOREVENTS TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_ITEMMOVEMENT_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_01A TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_01B TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_02A TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_02B TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_11 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_12 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_13 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_14A TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_14B TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_21A TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_21B TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_22A TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_22B TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_23A TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_23B TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_31A TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_31B TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_32A TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_32B TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_33A TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_33B TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_41 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_51A TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_51B TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_52 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_61A TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_61B TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_MAKELINKS_62 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCAMOUNTS_1 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCAMOUNTS_2 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCITEM_01A TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCITEM_01A_1 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCITEM_01B TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCITEM_01C TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCITEM_01C_1 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCITEM_04 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCITEM_05 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCITEM_06 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCITEM_07 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_RECALCLASTDATES_1 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_RECALC_ROWSISGONE_1 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_RECALC_ROWSISGONE_2 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_REMOVELINKS_01 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_REP_COSTACC_1 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_REP_COSTACC_2 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_REP_ITEMLINKS_1 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_REP_ITEMSAMOUNTS_1 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_REP_ITEMSAMOUNTS_2 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_REP_ITEMSAMOUNTS_3 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_REP_ITEMSAMOUNTS_4 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_REP_ITEMSAMOUNTS_5 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_REP_ITEMSAMOUNTS_6 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_M_REP_ITEMSINSTORE_1 TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_PARAMS TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_P_GEN_CAT1_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_P_GEN_CATD_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_P_GEN_CATT_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_P_GEN_DEPARTMENTS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_P_GEN_EVENTS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_P_GEN_ITEMS_EVENTS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_P_GEN_ITEMS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_P_GEN_PLACES_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_P_GEN_TAXDEPRECYEAR_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_SET_USERNAME TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_SYS_CHECK_USER TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_X_CLEAR_A TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_X_CLEAR_F TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_X_CLEAR_P TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_X_GENIDS_A TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_X_GENIDS_F TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_X_GENIDS_P TO ROLE USERS;
GRANT USAGE ON EXCEPTION EX_FAILURE TO ROLE USERS;
GRANT USAGE ON EXCEPTION MY_EXCEPTION_BADYEARVALUE TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR00 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR01 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR02 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR03 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR04 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR05 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR06 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR07 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR08 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR09 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR10 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR11 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR12 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR13 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR14 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR15 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR16 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR17 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR18 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR19 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR20 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR21 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR22 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR23 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR24 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR25 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR26 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR27 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR28 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR29 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR30 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR31 TO ROLE USERS;
GRANT USAGE ON SEQUENCE F_YEAR32 TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_BANKS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_EVENTS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_EVENT_TYPES2_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_EVENT_TYPES_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_FP_PAYLISTS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_FP_PAYLISTS_R_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_PASTDATA_2_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_PASTDATA_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_PAYLISTS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_PAYLISTS_R_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_PAYLIST_TEMPL_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_PAYLIST_TEMPL_R_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_PERSONS_FIZ_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_PERSONS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_PERSONS_R_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_PIECEWORK_CATALOG_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_PIECEWORK_CATSTRUCT_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_PIECEWORK_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_PLUSMINUS_FROM_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_PLUSMINUS_TYPES_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_POSITIONS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_POSITIONS_PLUSMINUS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_POSITIONS_R_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_RATES_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_REPORT_CODES_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_SALARY_PLUSMINUS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_SALARY_SHEETS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_SALARY_SHEETS_R_HIST_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_SALARY_SHEETS_R_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_SALARY_SHEET_TEMPL_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_SALARY_SHEET_TEMPL_R_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_TIMEPLAN_LIST_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_TIMESHEET_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_TIMESHEET_LISTS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_TIMESHEET_LISTS_R_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_TIMESHEET_TEMPL_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_TIMESHEET_TEMPL_R_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_A_UNTAXED_MIN_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_BAL0_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_BALA21_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_BALA2_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_BALA3_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_DOCS0_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_LOGX_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_LOPSD_IDL TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_LOPS_IDL TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_LXOP_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_OPSD_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_OPS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_PERSONTYP_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_ROPS1A_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_ROPS2A_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_ROPS2B_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_ROPS3A_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_TABLE1_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_TREM_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_TREPA1_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_TREPAPAN_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_TREPDARZ1_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_TREPDARZ2_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_TREPDOCS1_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_TREPDOCS2_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_TREPDOCSS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_TREPMT_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_TREPPVNZ1_AD TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_TREPPVNZ1_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_TREPUDOCS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_TTEMP_BALA21_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_TTEMP_BALAC_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_TTEMP_BALMT1_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_TTEMP_PVN1_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_TUDOCLISTS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_TUDOCS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_F_TUPVN1_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_ADDRESSSES_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_AUX_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_BANKS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_CONTACTS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_COUNTRIES_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_DISC_LISTS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_DISC_LISTS_P_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_DISC_LISTS_R_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_DOCSEQ TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_DOCS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_DOCTYPES_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_INV_DOCS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_INV_ROWS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_ITEMS_CAT_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_ITEMS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_PAYMENTTYPE_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_PRICE_LISTS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_PRICE_LISTS_P_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_PRICE_LISTS_R_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_PVNRATES2_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_PVNRATES_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_PVNTEXTS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_ROWS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_STORES_CAT_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_STORES_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_STORETYPE_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_TRANSACTIONTYPE_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_UNITS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_VEHICLES_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_PARAMS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_P_CAT1_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_P_CATD_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_P_CATT_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_P_DEPARTMENTS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_P_EVENTS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_P_ITEMS_EVENTS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_P_ITEMS_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_P_PLACES_ID TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_P_TAXDEPRECYEAR_ID TO ROLE USERS;


/******************************************************************************/
/***                             DDL privileges                             ***/
/******************************************************************************/

GRANT ALTER ANY TABLE TO ROLE RDB$ADMIN;
GRANT DROP ANY TABLE TO ROLE RDB$ADMIN;
GRANT CREATE VIEW TO ROLE RDB$ADMIN;
GRANT ALTER ANY VIEW TO ROLE RDB$ADMIN;
GRANT DROP ANY VIEW TO ROLE RDB$ADMIN;
GRANT CREATE PROCEDURE TO ROLE RDB$ADMIN;
GRANT ALTER ANY PROCEDURE TO ROLE RDB$ADMIN;
GRANT DROP ANY PROCEDURE TO ROLE RDB$ADMIN;
GRANT CREATE FUNCTION TO ROLE RDB$ADMIN;
GRANT ALTER ANY FUNCTION TO ROLE RDB$ADMIN;
GRANT DROP ANY FUNCTION TO ROLE RDB$ADMIN;
GRANT CREATE PACKAGE TO ROLE RDB$ADMIN;
GRANT ALTER ANY PACKAGE TO ROLE RDB$ADMIN;
GRANT DROP ANY PACKAGE TO ROLE RDB$ADMIN;
GRANT CREATE SEQUENCE TO ROLE RDB$ADMIN;
GRANT ALTER ANY SEQUENCE TO ROLE RDB$ADMIN;
GRANT DROP ANY SEQUENCE TO ROLE RDB$ADMIN;
GRANT CREATE DOMAIN TO ROLE RDB$ADMIN;
GRANT ALTER ANY DOMAIN TO ROLE RDB$ADMIN;
GRANT DROP ANY DOMAIN TO ROLE RDB$ADMIN;
GRANT CREATE EXCEPTION TO ROLE RDB$ADMIN;
GRANT ALTER ANY EXCEPTION TO ROLE RDB$ADMIN;
GRANT DROP ANY EXCEPTION TO ROLE RDB$ADMIN;
GRANT CREATE  TO ROLE RDB$ADMIN;
GRANT ALTER ANY  TO ROLE RDB$ADMIN;
GRANT DROP ANY  TO ROLE RDB$ADMIN;
GRANT CREATE COLLATION TO ROLE RDB$ADMIN;
GRANT ALTER ANY COLLATION TO ROLE RDB$ADMIN;
GRANT DROP ANY COLLATION TO ROLE RDB$ADMIN;
GRANT CREATE FILTER TO ROLE RDB$ADMIN;
GRANT ALTER ANY FILTER TO ROLE RDB$ADMIN;
GRANT DROP ANY FILTER TO ROLE RDB$ADMIN;
GRANT CREATE  TO ROLE RDB$ADMIN;
GRANT ALTER ANY  TO ROLE RDB$ADMIN;
GRANT DROP ANY  TO ROLE RDB$ADMIN;
