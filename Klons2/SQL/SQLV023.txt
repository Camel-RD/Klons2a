ALTER TABLE A_PAYLISTS
  ADD TPPAY INTEGER DEFAULT 0 NOT NULL;

ALTER TABLE M_ADDRESSSES
  ADD STREET VARCHAR(50);

ALTER TABLE M_ADDRESSSES
  ADD CITY VARCHAR(50);

ALTER TABLE M_ADDRESSSES
  ADD STATE VARCHAR(50);

ALTER TABLE M_ADDRESSSES
  ADD PARISH VARCHAR(50);

ALTER TABLE M_ADDRESSSES
  ADD POSTALCODE VARCHAR(20);

ALTER TABLE M_ADDRESSSES
  ADD COMMENTS VARCHAR(250);

ALTER TABLE M_STORES
  ADD IDCOUNTRY INTEGER;

ALTER TABLE M_STORES
  ADD STREET VARCHAR(50);

ALTER TABLE M_STORES
  ADD CITY VARCHAR(50);

ALTER TABLE M_STORES
  ADD STATE VARCHAR(50);

ALTER TABLE M_STORES
  ADD PARISH VARCHAR(50);

ALTER TABLE M_STORES
  ADD POSTALCODE VARCHAR(20);

ALTER TABLE M_STORES
  ADD EMAIL VARCHAR(256);

ALTER TABLE M_UNITS
  ADD CODE2 VARCHAR(5);


ALTER TABLE M_STORES ADD CONSTRAINT FK_M_STORES_IDCOUNTRY FOREIGN KEY (IDCOUNTRY) REFERENCES M_COUNTRIES (ID);

SET TERM ^ ;

ALTER PROCEDURE SP_A_PAYLISTS_PER_01(
  PDATE1 DATE,
  PDATE2 DATE)
RETURNS (
  ID TYPE OF COLUMN A_PAYLISTS.ID,
  SNR TYPE OF COLUMN A_PAYLISTS.SNR,
  YR TYPE OF COLUMN A_PAYLISTS.YR,
  MT TYPE OF COLUMN A_PAYLISTS.MT,
  TPPAY TYPE OF COLUMN A_PAYLISTS.TPPAY,
  DT TYPE OF COLUMN A_PAYLISTS.DT,
  DEP TYPE OF COLUMN A_PAYLISTS.DEP,
  DESCR TYPE OF COLUMN A_PAYLISTS.DESCR,
  DOPAY TYPE OF COLUMN A_PAYLISTS.DOPAY,
  TOTAL_PAY TYPE OF COLUMN A_PAYLISTS.TOTAL_PAY)
AS
begin
    for select id, snr, yr, mt, tppay, dt, dep, descr, dopay, total_pay
    from a_paylists
    where DT between :pdate1 and :pdate2
    order by DT, SNR
    into :id, :snr, :yr, :mt, :tppay, :dt, :dep, :descr, :dopay, :total_pay

    do
    begin
        suspend;
    end
end
^

SET TERM ; ^

GRANT EXECUTE ON PROCEDURE SP_F_ZDT_OPS_SET TO ADMINS WITH GRANT OPTION;

GRANT EXECUTE ON PROCEDURE SP_F_ZDT_OPSD_SET TO ADMINS WITH GRANT OPTION;


INSERT INTO PARAMS (PNAME, PVALUE, USR)
SELECT *
FROM
	(SELECT 'CompEMail' PNAME, '' PVALUE, 'SYSTEM' USR
    FROM RDB$DATABASE) AS T1
WHERE NOT EXISTS
	(SELECT 1
    FROM PARAMS
    WHERE PNAME = 'CompEMail' AND USR = 'SYSTEM');
	
	
UPDATE OR INSERT INTO M_UNITS (CODE, NAME, CODE2) VALUES ('.?', 'Nenoteikts', '') MATCHING (CODE, NAME, CODE2);
UPDATE OR INSERT INTO M_UNITS (CODE, NAME, CODE2) VALUES ('gab.', 'Gabali', 'H87') MATCHING (CODE, NAME, CODE2);
UPDATE OR INSERT INTO M_UNITS (CODE, NAME, CODE2) VALUES ('kg', 'Kilogrami', 'KGM') MATCHING (CODE, NAME, CODE2);
UPDATE OR INSERT INTO M_UNITS (CODE, NAME, CODE2) VALUES ('t', 'Tonnas', 'TNE') MATCHING (CODE, NAME, CODE2);
UPDATE OR INSERT INTO M_UNITS (CODE, NAME, CODE2) VALUES ('litri', 'Litri', 'LTR') MATCHING (CODE, NAME, CODE2);
UPDATE OR INSERT INTO M_UNITS (CODE, NAME, CODE2) VALUES ('m3', 'Kubikmetri', 'MTQ') MATCHING (CODE, NAME, CODE2);
UPDATE OR INSERT INTO M_UNITS (CODE, NAME, CODE2) VALUES ('m2', 'Kvadrtmetri', 'MTK') MATCHING (CODE, NAME, CODE2);
UPDATE OR INSERT INTO M_UNITS (CODE, NAME, CODE2) VALUES ('km', 'Kilometri', 'KTM') MATCHING (CODE, NAME, CODE2);
UPDATE OR INSERT INTO M_UNITS (CODE, NAME, CODE2) VALUES ('maiss', 'Maisi', 'XBG') MATCHING (CODE, NAME, CODE2);
UPDATE OR INSERT INTO M_UNITS (CODE, NAME, CODE2) VALUES ('kaste', 'Kastes', 'XBX') MATCHING (CODE, NAME, CODE2);
UPDATE OR INSERT INTO M_UNITS (CODE, NAME, CODE2) VALUES ('paka', 'Pakas', 'XPK') MATCHING (CODE, NAME, CODE2);
UPDATE OR INSERT INTO M_UNITS (CODE, NAME, CODE2) VALUES ('palete', 'Paletes', 'XPX') MATCHING (CODE, NAME, CODE2);
UPDATE OR INSERT INTO M_UNITS (CODE, NAME, CODE2) VALUES ('loksne', 'Loksnes', 'XST') MATCHING (CODE, NAME, CODE2);
UPDATE OR INSERT INTO M_UNITS (CODE, NAME, CODE2) VALUES ('kompl.', 'Komplekti', 'SET') MATCHING (CODE, NAME, CODE2);


UPDATE Params
SET PVALUE = '023'
WHERE PNAME = 'version';
