CREATE SEQUENCE GEN_M_ITEMS_TEXTS_ID
  START WITH 1
  INCREMENT BY 1;

CREATE TABLE M_ITEMS_TEXTS (
    ID INTEGER NOT NULL,
    IDITEM INTEGER DEFAULT 1 NOT NULL,
    TEXT VARCHAR(300));

ALTER TABLE M_ROWS
  ADD IDITEMTEXT INTEGER;


ALTER TABLE M_ITEMS_TEXTS ADD CONSTRAINT PK_M_ITEMS_TEXTS PRIMARY KEY (ID);

ALTER TABLE M_ITEMS_TEXTS ADD CONSTRAINT FK_M_ITEMS_TEXTS_IDITEMS FOREIGN KEY (IDITEM) REFERENCES M_ITEMS (ID);

ALTER TABLE M_ROWS ADD CONSTRAINT FK_M_ROWS_IDITEMTEXT FOREIGN KEY (IDITEMTEXT) REFERENCES M_ITEMS_TEXTS (ID);

SET TERM ^ ;

CREATE TRIGGER M_ITEMS_TEXTS_BI FOR M_ITEMS_TEXTS
ACTIVE
BEFORE INSERT
POSITION 0 
as
begin
  if ((new.id is null) or (new.id < 0))  then
    new.id = gen_id(gen_m_items_texts_id,1);
end
^

ALTER PROCEDURE SP_M_FILTER_ROWS_01(
  PIDDOC INTEGER)
RETURNS (
  ID TYPE OF COLUMN M_ROWS.ID,
  IDDOC TYPE OF COLUMN M_ROWS.IDDOC,
  IDITEM TYPE OF COLUMN M_ROWS.IDITEM,
  IDITEMTEXT TYPE OF COLUMN M_ROWS.IDITEMTEXT,
  IDPVNRATE TYPE OF COLUMN M_ROWS.IDPVNRATE,
  UNITS TYPE OF COLUMN M_ROWS.UNITS,
  IDCREDROW TYPE OF COLUMN M_ROWS.IDCREDROW,
  AMOUNT TYPE OF COLUMN M_ROWS.AMOUNT,
  DISCOUNT TYPE OF COLUMN M_ROWS.DISCOUNT,
  PRICE0 TYPE OF COLUMN M_ROWS.PRICE0,
  PRICE TYPE OF COLUMN M_ROWS.PRICE,
  BUYPRICE TYPE OF COLUMN M_ROWS.BUYPRICE,
  OLDPRICE TYPE OF COLUMN M_ROWS.OLDPRICE,
  TOLDPRICE TYPE OF COLUMN M_ROWS.TOLDPRICE,
  TPRICE TYPE OF COLUMN M_ROWS.TPRICE,
  TBUYPRICE TYPE OF COLUMN M_ROWS.TBUYPRICE,
  IDSEQ TYPE OF COLUMN M_ROWS.IDSEQ,
  ACC6 TYPE OF COLUMN M_ROWS.ACC6,
  ACC7 TYPE OF COLUMN M_ROWS.ACC7)
AS
begin
    for select
        id,
        iddoc,
        iditem,
        iditemtext,
        idpvnrate,
        units,
        idcredrow,
        amount,
        discount,
        price0,
        price,
        buyprice,
        oldprice,
        toldprice,
        tprice,
        tbuyprice,
        idseq,
        acc6,
        acc7
    from m_rows
    where iddoc = :piddoc
    order by idseq, id
    into
        :id,
        :iddoc,
        :iditem,
        :iditemtext,
        :idpvnrate,
        :units,
        :idcredrow,
        :amount,
        :discount,
        :price0,
        :price,
        :buyprice,
        :oldprice,
        :toldprice,
        :tprice,
        :tbuyprice,
        :idseq,
        :acc6,
        :acc7
  do
  begin
    suspend;
  end
end
^

CREATE PROCEDURE SP_M_GEN_ITEMS_TEXTS_ID
RETURNS (
  ID INTEGER)
AS
begin
  id = gen_id(gen_m_items_texts_id, 1);
  suspend;
end
^

SET TERM ; ^

GRANT EXECUTE ON PROCEDURE SP_M_GEN_ITEMS_TEXTS_ID TO KLONS WITH GRANT OPTION;
GRANT USAGE ON SEQUENCE GEN_M_ITEMS_TEXTS_ID TO KLONS WITH GRANT OPTION;
GRANT SELECT, INSERT, UPDATE, DELETE, REFERENCES ON M_ITEMS_TEXTS TO KLONS WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE SP_M_GEN_ITEMS_TEXTS_ID TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_ZDT_OPS_SET TO ROLE USERS;
GRANT EXECUTE ON PROCEDURE SP_F_ZDT_OPSD_SET TO ROLE USERS;
GRANT USAGE ON SEQUENCE GEN_M_ITEMS_TEXTS_ID TO ROLE USERS;
GRANT SELECT, INSERT, UPDATE, DELETE, REFERENCES ON M_ITEMS_TEXTS TO ROLE USERS;

UPDATE OR INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('1-JAN-2025', NULL);
UPDATE OR INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('18-APR-2025', NULL);
UPDATE OR INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('20-APR-2025', NULL);
UPDATE OR INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('21-APR-2025', NULL);
UPDATE OR INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('1-MAY-2025', NULL);
UPDATE OR INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('4-MAY-2025', NULL);
UPDATE OR INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('5-MAY-2025', NULL);
UPDATE OR INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('23-JUN-2025', NULL);
UPDATE OR INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('24-JUN-2025', NULL);
UPDATE OR INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('18-NOV-2025', NULL);
UPDATE OR INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('24-DEC-2025', NULL);
UPDATE OR INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('25-DEC-2025', NULL);
UPDATE OR INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('26-DEC-2025', NULL);
UPDATE OR INSERT INTO A_HOLIDAYS (DT, TAG) VALUES ('31-DEC-2025', NULL);

UPDATE OR INSERT INTO A_RATES (ONDATE, IIN_LIKME, SIDD_PAMATLIKME, SIDN_PAMATLIKME, SIDD_PENS, SIDN_PENS, SIDD_IZDPENS, SIDN_IZDPENS, SIDD_IESLODZ, SIDN_IESLODZ, SIDD_IESLODZ_PENS, SIDN_IESLODZ_PENS, NEPLIEK_MIN, APGAD, INVALID_12, INVALID_3, REPR, PRET, URN, MIN_PAY_MONTH, MIN_PAY_HOUR, IIN_LIKME_2, IIN_LIKME_3, IIN_SLIEKSNIS_1, IIN_SLIEKSNIS_2)
  VALUES ('1-JAN-2025', 25.5, 23.59, 10.5, 20.77, 9.25, 21.94, 9.76, 19.93, 8.87, 17.24, 7.67, 510, 250, 154, 120, 154, 154, 0.36, 740, 4.94, 25.5, 33, 8775, 8775)
  MATCHING (ONDATE);

INSERT INTO M_DOCTYPES (ID, CODE, NAME, OPTYPE) VALUES (18, 'Iep.rēķ.', 'Iepirkuma rēķiins', 0);
INSERT INTO M_DOCTYPES (ID, CODE, NAME, OPTYPE) VALUES (19, 'Pārd.rēķ.', 'Pārdošanas rēķins', 0);


UPDATE Params
SET PVALUE = '024'
WHERE PNAME = 'version';
